{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Intel\u00ae SecL-DC Hardware-based cloud security solutions provide a higher level of protection as compared to software-only security measures. There are many Intel platform security technologies, which can be used to secure customers' data. Customers have found adopting and deploying these technologies at a broad scale challenging, due to the lack of solution integration and deployment tools. Intel\u00ae Security Libraries for Data Centers (Intel\u00ae SecL - DC) was built to aid our customers in adopting and deploying Intel Security features, rooted in silicon, at scale. Intel\u00ae SecL-DC is an open-source remote attestation implementation comprising of a set of building blocks that utilize Intel Security features to discover, attest, and enable critical foundation security and confidential computing use-cases. It applies the remote attestation fundamentals and standard specifications to maintain a platform data collection service and an efficient verification engine to perform comprehensive trust evaluations. These trust evaluations can be used to govern different trust and security policies applied to any given workload.","title":"Welcome to Intel\u00ae SecL-DC"},{"location":"#welcome-to-intel-secl-dc","text":"Hardware-based cloud security solutions provide a higher level of protection as compared to software-only security measures. There are many Intel platform security technologies, which can be used to secure customers' data. Customers have found adopting and deploying these technologies at a broad scale challenging, due to the lack of solution integration and deployment tools. Intel\u00ae Security Libraries for Data Centers (Intel\u00ae SecL - DC) was built to aid our customers in adopting and deploying Intel Security features, rooted in silicon, at scale. Intel\u00ae SecL-DC is an open-source remote attestation implementation comprising of a set of building blocks that utilize Intel Security features to discover, attest, and enable critical foundation security and confidential computing use-cases. It applies the remote attestation fundamentals and standard specifications to maintain a platform data collection service and an efficient verification engine to perform comprehensive trust evaluations. These trust evaluations can be used to govern different trust and security policies applied to any given workload.","title":"Welcome to Intel\u00ae SecL-DC"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/","text":"Intel\u00ae Security Libraries - Datacenter Foundational Security Product Guide January 2020 Revision 3.3.1 Notice: This document contains information on products in the design phase of development. The information here is subject to change without notice. Do not finalize a design with this information. Intel technologies\u2019 features and benefits depend on system configuration and may require enabled hardware, software, or service activation. Learn more at intel.com, or from the OEM or retailer. No computer system can be absolutely secure. Intel does not assume any liability for lost or stolen data or systems or any damages resulting from such losses. You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Intel products described herein. You agree to grant Intel a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications. Current characterized errata are available on request. This document contains information on products, services and/or processes in development. All information provided here is subject to change without notice. Contact your Intel representative to obtain the latest Intel product specifications and roadmaps. Intel disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. Warning: Altering PC clock or memory frequency and/or voltage may (i) reduce system stability and use life of the system, memory and processor; (ii) cause the processor and other system components to fail; (iii) cause reductions in system performance; (iv) cause additional heat or other damage; and (v) affect system data integrity. Intel assumes no responsibility that the memory, included if used with altered clock frequencies and/or voltages, will be fit for any particular purpose. Check with memory manufacturer for warranty and additional details. Tests document performance of components on a particular test, in specific systems. Differences in hardware, software, or configuration will affect actual performance. Consult other sources of information to evaluate performance as you consider your purchase. For more complete information about performance and benchmark results, visit http://www.intel.com/performance . Cost reduction scenarios described are intended as examples of how a given Intel- based product, in the specified circumstances and configurations, may affect future costs and provide cost savings. Circumstances will vary. Intel does not guarantee any costs or cost reduction. Results have been estimated or simulated using internal Intel analysis or architecture simulation or modeling, and provided to you for informational purposes. Any differences in your system hardware, software or configuration may affect your actual performance. Intel does not control or audit third-party benchmark data or the web sites referenced in this document. You should visit the referenced web site and confirm whether referenced data are accurate. Intel is a sponsor and member of the Benchmark XPRT Development Community, and was the major developer of the XPRT family of benchmarks. Principled Technologies is the publisher of the XPRT family of benchmarks. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases. Copies of documents which have an order number and are referenced in this document may be obtained by calling 1-800-548-4725 or by visiting w ww.intel.com/design/literature.htm. Intel, the Intel logo, Intel TXT, and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries. *Other names and brands may be claimed as the property of others. Copyright \u00a9 2020, Intel Corporation. All Rights Reserved. Revision History Revision Number Description Date 1 Updated for all GA Failures May 2019 1.5 Updated for version 1.5 release July 2019 1.6 BETA Updated for 1.6 BETA release November 2019 1.6 Updated for version 1.6 release December 2019 2.0 Updated for version 2.0 release February 2020 2.1 Updated for version 2.1 release April 2020 2.2 Updated for version 2.2 release June 2020 3.0 Updated for version 3.0 release August 2020 3.1 Updated for version 3.1 release October 2020 3.2 Updated for version 3.2 release November 2020 3.3 Updated for version 3.3 release December 2020 3.3.1 Updated for version 3.3.1 release January 2020 Table of Contents Intel\u00ae Security Libraries - Datacenter Foundational Security Revision History Table of Contents 1 Introduction 1.1 Overview 1.1.1 Trusted Computing 1.1.1.1 The Chain of Trust 1.1.1.2 Hardware Root of Trust 1.1.1.2.1 Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) 1.1.1.2.2 Intel\u00ae BootGuard (Intel\u00ae BtG) 1.1.1.3 Supported Trusted Boot Options 1.1.1.4 Remote Attestation 1.1.2 Intel\u00ae Security Libraries for Datacenter Features 1.1.2.1 Platform Integrity 1.1.2.2 Data Sovereignty 1.1.2.3 Application Integrity 1.1.2.4 Workload Confidentiality for Virtual Machines and Containers 1.1.2.5 Signed Flavors 1.1.2.6 Trusted Virtual Kubernetes Worker Nodes 2 Intel\u00ae Security Libraries Components 2.1 Certificate Management Service 2.2 Authentication and Authorization Service 2.3 Verification Service 2.4 Workload Service 2.5 Trust Agent 2.6 Workload Agent 2.7 Integration Hub 2.8 Workload Policy Manager 2.9 Key Broker Service 3 Intel\u00ae Security Libraries Installation 3.1 Building from Source 3.2 Hardware Considerations 3.3 Recommended Service Layout 3.3.1 Platform Integrity 3.3.2 Workload Confidentiality 3.4 Installing/Configuring the Database 3.4.1 Using the Provided Database Installation Script 3.4.2 Provisioning the Database 3.4.3 Database Server TLS Certificate 3.5 Installing the Certificate Management Service 3.5.1 Required For 3.5.2 Supported Operating Systems 3.5.3 Recommended Hardware 3.5.4 Installation 3.6 Installing the Authentication and Authorization Service 3.6.1 Required For 3.6.2 Prerequisites 3.6.3 Package Dependencies 3.6.4 Supported Operating Systems 3.6.5 Recommended Hardware 3.6.6 Installation 3.6.7 Creating Users 3.7 Installing the Host Verification Service 3.7.1 Required For 3.7.2 Prerequisites 3.7.3 Package Dependencies 3.7.4 Supported Operating Systems 3.7.5 Recommended Hardware 3.7.6 Installation 3.8 Installing the Workload Service 3.8.1 Required For 3.8.2 Prerequisites 3.8.3 Supported Operating Systems 3.8.4 Recommended Hardware 3.8.5 Installation 3.9 Installing the Trust Agent for Linux 3.9.1 Required For 3.9.2 Package Dependencies 3.9.3 Supported Operating Systems 3.9.4 Prerequisites 3.9.4.1 Tboot Installation 3.9.5 Installation 3.10 Installing the Workload Agent 3.10.1 Required For 3.10.2 Supported Operating Systems 3.10.3 Prerequisites 3.10.4 Installation 3.12 Trust Agent Provisioning 3.13 Trust Agent Registration 3.14 Importing the HOST_UNIQUE Flavor 3.15 Installing the Integration Hub 3.15.1 Required For 3.15.2 Deployment Architecture Considerations for the Hub 3.15.3 Prerequisites 3.15.4 Package Dependencies 3.15.5 Supported Operating Systems 3.15.6 Recommended Hardware 3.15.7 Installing the Integration Hub 3.16 Installing the Key Broker Service 3.16.1 Required For 3.16.2 Prerequisites 3.16.3 Package Dependencies 3.16.4 Supported Operating Systems 3.16.5 Recommended Hardware 3.16.6 Installation 3.16.6.1 Configure the Key Broker to use a KMIP-compliant Key Management Server 3.16.7 Importing Verification Service Certificates 3.16.7.1 Importing a SAML certificate 3.16.7.2 Importing a PrivacyCA Certificate 3.17 Installing the Workload Policy Manager 3.17.1 Required For 3.17.2 Package Dependencies 3.17.3 Supported Operating Systems 3.17.4 Recommended Hardware 3.17.5 Installation 4 Authentication 4.1 Create Token 4.2 User Management 4.2.1 Username and Password requirements 4.2.2 Create User 4.2.3 Search User 4.2.4 Change User Password 4.2.5 Delete User 4.3 Roles and Permissions 4.3.1 Create Role 4.3.2 Search Roles 4.3.3 Delete Role 4.3.4 Assign Role to User 4.3.5 List Roles Assigned to User 4.3.6 Remove Role from User 4.3.7 Role Definitions 5 Connection Strings 5.1 Trust Agent 5.2 VMware ESXi 5.2.1 Importing VMware TLS Certificates 5.2.2 Registering a VMware ESXi Host 6 Platform Integrity Attestation 6.1 Host Registration 6.1.1 Trust Agent 6.1.1.1 Registration via Trust Agent Command Line 6.1.2 Registration via Verification Service API 6.1.2.1 Special Note for VMware ESXi Hosts and the vCenter TLS Certificate 6.1.2.2 Sample Call 6.1.2.3 Sample Call for ESXi Cluster Registration 6.2 Flavor Creation for Automatic Flavor Matching 6.2.1 Importing a Flavor from a Sample Host 6.2.2 Creating a Flavor Manually 6.3 Creating the Default SOFTWARE Flavor (Linux Only) 6.4 Creating and Provisioning Asset Tags 6.4.1 Creating Asset Tag Certificates 6.4.2 Deploying Asset Tags 6.4.2.1 Red Hat Enterprise Linux 6.4.2.2 VMWare 6.4.2.2.1 Calculate the Certificate Hash Value 6.4.2.2.2 Provision the Certificate Hash to the Host TPM vSphere 6.5 Update 2 or Later vSphere 6.5 Update 1 or Older 6.4.2.2.3 Creating the Asset Tag Flavor (VMWare ESXi Only) 6.5 Retrieving Current Attestation Reports 6.6 Retrieving Current Host State Information 6.7 Upgrading Hosts in the Datacenter to a New BIOS or OS Version 6.8 Removing Hosts From the Verification Service 6.9 Removing Flavors 6.10 Invalidating Asset Tags 6.11 Remediating an Untrusted attestation 6.12 Attestation Reporting 6.12.1 Sample Call \u2013 Generating a New Attestation Report 6.12.2 Sample Call \u2013 Retrieving an Existing Attestation Report 6.13 Integration 6.13.1 The Integration Hub 6.13.2 Integration with OpenStack 6.13.2.1 Prerequisites 6.13.2.2 Setting Image Traits 6.13.2.3 Configuring the Integration Hub for Use with OpenStack 6.13.2.7 Scheduling Instances 6.13.3 Integration with Kubernetes 6.13.3.1 Prerequisites 6.13.3.2 Installing the Intel\u00ae SecL Custom Resource Definitions 6.13.3.3 Configuring the Integration Hub for Use with Kubernetes 6.13.3.6 Configuring Pods to Require Intel\u00ae SecL Attributes 6.13.3.7 Tainting Untrusted Worker Nodes 7 Workload Confidentiality 7.1 Virtual Machine Confidentiality 7.1.1 Prerequisites 7.1.2 Workflow 7.1.2.1 Encrypting Images 7.1.2.2 Uploading the Image Flavor 7.1.2.3 Creating the Image Flavor to Image ID Association 7.1.2.4 Launching Encrypted VMs 7.2 Container Confidentiality 7.2.1 Container Integrity and Confidentiality with Docker 7.2.1.1 Docker Container Integrity 7.2.1.2 Prerequisites 7.2.1.3 Workflow 7.2.1.3.1 Encrypting Docker Container Images 7.2.1.3.2 Uploading the Image Flavor 7.2.1.3.3 Creating the Image Flavor to Image ID Association 7.2.1.3.4 Launching Encrypted Docker Containers 7.2.2 Container Confidentiality with Cri-o and Skopeo 7.2.2.1 Prerequisites 7.2.2.2 Workflow Skopeo Commands Examples Prepare an Image 7.2.2.2.1 Pulling and Encrypting a Container Image 7.2.2.2.2 Launching an Encrypted Container Image 8 Trusted Virtual Kubernetes Worker Nodes 8.1 Prerequisites 8.2 Workflow 8.3 Sample VM Trust Report 9 Flavor Management 9.1 Flavor Format Definitions 9.1.1 Meta 9.1.2 Hardware PCRs 9.1.4 Sample PLATFORM Flavor 9.1.5 Sample OS Flavor 9.1.6 Sample HOST_UNIQUE Flavor 9.1.7 Sample ASSET_TAG Flavor 9.2 Flavor Matching 9.2.1 When Does Flavor Matching Happen? 9.2.2 Flavor Matching Performance 9.2.3 Flavor Groups 9.2.4 Default Flavor Group 9.2.4.1 automatic 9.2.4.2 unique 9.2.5 Flavor Match Policies 9.2.5.1 Default Flavor Match Policy 9.2.5.2 ANY_OF 9.2.5.3 ALL_OF 9.2.5.4 LATEST 9.2.5.5 REQUIRED 9.2.5.6 REQUIRED_IF_DEFINED 9.2.6 Flavor Match Event Triggers 9.2.7 Sample Flavorgroup API Calls 9.2.7.1 Create a New Flavorgroup 9.3 SOFTWARE Flavor Management 9.3.1 What is a SOFTWARE Flavor? 9.3.2 Creating a SOFTWARE Flavor part 9.3.2.1 Directories 9.3.2.2 Symlinks 9.3.2.3 Files 9.3.3 Sample SOFTWARE Flavor Creation Call 9.3.4 Deploying a SOFTWARE Flavor Manifest to a Host 9.3.5 SOFTWARE Flavor Matching 9.3.6 Kernel Upgrades 10 Scalability and Sizing 10.1 Configuration Maximums 10.1.1 Registered Hosts 10.1.2 HDD Space 10.2 Database Rotation Settings 10.3 Log Rotation 11 Intel Security Libraries Configuration Settings 11.1 Verification Service 11.1.1 Installation Answer File Options 11.1.2 Configuration Options 11.1.3 Command-Line Options 11.1.3.1 Help 11.1.3.2 Start 11.1.3.3 Stop 11.1.3.5 Status 11.1.3.6 Uninstall 11.1.3.7 Version 11.1.3.10 Erase-data 11.1.3.16 Setup 11.1.4 Directory Layout 11.2 Trust Agent 11.2.1 Installation Answer File Options 11.2.2 Configuration Options 11.2.3 Command-Line Options 11.2.3.1 Available Commands 11.2.3.1.1 help 11.2.3.1.2 setup [task] tagent setup (all) tagent setup trustagent.env tagent setup download-ca-cert tagent setup download-cert tagent setup update-certificates tagent setup provision-attestation tagent setup create-host tagent setup create-host-unique-flavor tagent setup get-configured-manifest Environment variables used by tagent setup: 11.2.3.1.3 uninstall 11.2.3.1.4 version 11.2.3.1.5 start 11.2.3.1.6 stop 11.2.3.2.7 status 11.2.4 Directory Layout 11.2.4.1 Windows 11.2.4.2 Linux 11.2.4.2.1 Bin 11.2.4.2.2 Configuration 11.2.4.2.3 Var 11.3 Integration Hub 11.3.1 Installation Answer File 11.3.2 Configuration Options 11.3.3 Command-Line Options 11.3.3.1 Available Commands 11.3.3.1.1 Help 11.3.3.1.2 Start 11.3.3.1.3 Stop 11.3.3.1.5 Status 11.3.3.1.5 Uninstall 11.3.3.1.6 Version 11.3.3.1.10 Setup 11.3.4 Directory Layout 1.3.4.1 Logs 11.4 Certificate Management Service 11.4.1 Installation Answer File Options 11.4.2 Configuration Options 11.4.3 Command-Line Options 11.4.3.1 Help 11.4.3.2 Start 11.4.3.3 Stop 11.4.3.5 Status 11.4.3.6 Uninstall 11.4.3.7 Version 11.4.3.8 Tlscertsha384 11.4.3.9 setup [task] cms setup server [--port=<port>] cms setup root_ca [--force] cms setup tls [--force] [--host_names=<host_names>] cms setup cms_auth_token [--force] 11.4.4 Directory Layout 11.4.4.1 Bin 11.44.2 Cacerts 11.5 Authentication and Authorization Service 11.5.1 Installation Answer File Options 11.5.2 Configuration Options 11.5.3 Command-Line Options 11.5.3.1 Help 11.5.3.2 setup \\<task> 11.5.3.2.1 authservice setup all 11.5.3.2.2 authservice setup database [-force] [--arguments=\\<argument_value>] 11.5.3.2.3 authservice setup server [--port=<port>] 11.5.3.2.4 authservice setup admin [--user=<username>] [--pass=<password>] 11.5.3.2.5 authservice setup download_ca_cert [--force] 11.5.3.2.6 authservice setup download_cert TLS [--force] 11.5.3.2.7 authservice setup jwt 11.5.3.2.8 Start 11.5.3.2.9 Status 11.5.3.2.10 Stop 11.5.3.2.11 tlscertsha384 11.5.3.2.12 Uninstall 11.5.3.2.13 Version 11.5.4 Directory Layout 11.5.4.1 Bin 11.5.4.2 dbscripts 11.6 Workload Service 11.6.1 Installation Answer File Options 11.6.2 Configuration Options 11.6.3 Command-Line Options 11.6.3.1 Help 11.6.3.2 start 11.6.3.3 stop 11.6.3.4 status 11.6.3.5 uninstall 11.6.3.6 setup 11.6.3.6.1 download_ca_cert 11.6.3.6.2 download_cert TLS 11.6.3.6.3 server 11.6.3.6.4 database Setup workload-service database 11.6.3.6.5 hvsconnection 11.6.3.6.6 aasconnection 11.6.3.6.7 logs 11.6.4 Directory Layout 11.7 Key Broker Service 11.7.1 Installation Answer File Options 11.7.2 Configuration Options 11.7.3 Command-Line Options 11.7.4 Directory Layout /opt/kbs/bin /etc/kbs/ /var/log/kbs/ 11.8 Workload Agent 11.8.1 Installation Answer File Options 11.8.2 Configuration Options 11.8.3 Command-Line Options 11.8.3.1 Help 11.8.3.2 setup 11.8.3.2.1 Available Tasks for setup SigningKey BindingKey RegisterSigningKey RegisterBindingKey 11.8.3.3 start 11.8.3.4 stop 11.8.3.5 status 11.8.3.6 uninstall 11.8.3.7 uninstall --purge 11.8.3.8 version 11.8.4 Directory Layout 11.8.4.1 Bin 11.9 Workload Policy Manager 11.9.1 Installation Answer File Options 11.9.2 Configuration Options 11.9.3 Command-Line Options 11.9.3.1 create-image-flavor 11.9.3.2 create-container-image-flavor 11.9.3.3 get-container-image-id 11.9.3.4 create-software-flavor 11.9.3.5 Uninstall 11.9.3.6 --help 11.9.3.7 --version 11.9.3.8 Setup 11.9.3.8.1 wpm setup 11.9.3.8.2 wpm setup CreateEnvelopeKey 11.9.3.8.3 wpm setup RegisterEnvelopeKey 11.9.3.8.4 wpm setup download_ca_cert [--force] 11.9.3.8.5 wpm setup download_cert Flavor-Signing [--force] 12 Certificate and Key Management 12.1 Host Verification Service Certificates and Keys 12.1.1 SAML 12.1.2 Asset Tag 12.1.3 Privacy CA 12.1.4 Endorsement CA 12.2 TLS Certificates 13 Uninstallation 13.1 Host Verification Service 13.2 Trust Agent 13.3 Integration Hub 14Appendix 14.1 PCR Definitions 14.1.1 Red Had Enterprise Linux 14.1.1.1 TPM 2.0 14.1.2 VMWare ESXi 14.1.2.1 TPM 1.2 14.1.2.2 TPM 2.0 A.1 Attestation Rules A.2 Intel TXT and the Trusted Boot Process Table of Contents 1 Introduction 1.1 Overview 1.1.1 Trusted Computing 1.1.1.1 The Chain of Trust 1.1.1.2 Hardware Root of Trust Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) Intel\u00ae BootGuard (Intel\u00ae BtG) 1.1.1.3 Supported Trusted Boot Options 1.1.1.4 Remote Attestation 1.1.2 Intel\u00ae Security Libraries for Datacenter Features 1.1.2.1 Platform Integrity 1.1.2.2 Data Sovereignty 1.1.2.3 Application Integrity 1.1.2.4 Workload Confidentiality for Virtual Machines and Containers 1.1.2.5 Signed Flavors 1.1.2.6 Trusted Virtual Kubernetes Worker Nodes 2 Intel\u00ae Security Libraries Components 2.1 Certificate Management Service 2.2 Authentication and Authorization Service 2.3 Verification Service 2.4 Workload Service 2.5 Trust Agent 2.6 Workload Agent 2.7 Integration Hub 2.8 Workload Policy Manager 2.9 Key Broker Service 3 Intel\u00ae Security Libraries Installation 3.1 Building from Source 3.2 Hardware Considerations 3.3 Recommended Service Layout 3.3.1 Platform Integrity 3.3.2 Workload Confidentiality 3.4 Installing/Configuring the Database 3.4.1 Using the Provided Database Installation Script 3.4.2 Provisioning the Database 3.4.3 Database Server TLS Certificate 3.5 Installing the Certificate Management Service 3.5.1 Required For 3.5.2 Supported Operating Systems 3.5.3 Recommended Hardware 3.5.4 Installation 3.6 Installing the Authentication and Authorization Service 3.6.1 Required For 3.6.2 Prerequisites 3.6.3 Package Dependencies 3.6.4 Supported Operating Systems 3.6.5 Recommended Hardware 3.6.6 Installation 3.6.7 Creating Users 3.7 Installing the Host Verification Service 3.7.1 Required For 3.7.2 Prerequisites 3.7.3 Package Dependencies 3.7.4 Supported Operating Systems 3.7.5 Recommended Hardware 3.7.6 Installation 3.9.5 Installation 3.10 Installing the Workload Agent 3.10.1 Required For 3.10.2 Supported Operating Systems 3.10.3 Prerequisites 3.10.4 Installation 3.11 Trust Agent Provisioning 3.12 Trust Agent Registration 3.13 Importing the HOST_UNIQUE Flavor 3.14 Installing the Integration Hub 3.14.1 Required For 3.14.2 Deployment Architecture Considerations for the Hub 3.14.3 Prerequisites 3.14.4 Package Dependencies 3.14.5 Supported Operating Systems 3.14.6 Recommended Hardware 3.14.7 Installing the Integration Hub 3.15 Installing the Key Broker Service 3.15.1 Required For 3.15.2 Prerequisites 3.15.3 Package Dependencies 3.15.4 Supported Operating Systems 3.15.5 Recommended Hardware 3.15.6 Installation 3.15.6.1 Configure the Key Broker to use a KMIP-compliant Key Management Server 3.15.7 Importing Verification Service Certificates 3.15.7.1 Importing a SAML certificate 3.15.7.2 Importing a PrivacyCA Certificate 3.16 Installing the Workload Policy Manager 3.16.1 Required For 3.16.2 Package Dependencies 3.16.3 Supported Operating Systems 3.16.4 Recommended Hardware 3.16.5 Installation 4 Authentication 4.1 Create Token 4.2 User Management 4.2.1 Username and Password requirements 4.2.2 Create User 4.2.3 Search User 4.2.4 Change User Password 4.2.5 Delete User 4.3 Roles and Permissions 4.3.1 Create Role 4.3.2 Search Roles 4.3.3 Delete Role 4.3.4 Assign Role to User 4.3.5 List Roles Assigned to User 4.3.6 Remove Role from User 4.3.7 Role Definitions 5 Connection Strings 5.1 Trust Agent (Windows and Linux) 5.2 VMware ESXi 5.2.1 Importing VMware TLS Certificates 5.2.2 Registering a VMware ESXi Host 6 Platform Integrity Attestation 6.1 Host Registration 6.1.1 Trust Agent 6.1.1.1 Registration via Trust Agent Command Line 6.1.2 Registration via Verification Service API 6.1.2.1 Special Note for VMware ESXi Hosts and teh vCenter TLS Certificate 6.1.2.2 Sample Call 6.1.2.3 Sample Call for ESXi Cluster Registration 6.2 Flavor Creation for Automatic Flavor Matching 6.2.1 Importing a Flavor from a Sample Host 6.2.2 Creating a Flavor Manually 6.3 Creating the Default SOFTWARE Flavor (Linux Only) 6.4 Creating and Provisioning Asset Tags 6.4.1 Creating Asset Tag Certificates 6.4.2 Deploying Asset Tags 6.4.2.1 Windows and Red Hat Enterprise Linux 6.4.2.2 VMWare Calculate the Certificate Hash Value Provision the Certificate Hash to the Host TPM vSphere 6.5 Update 2 or Later vSphere 6.5 Update 1 or Older Creating the Asset Tag Flavor (VMWare ESXi Only) 6.5 Retrieving Current Attestation Reports 6.6 Retrieving Current Host State Information 6.7 Upgrading Hosts in the Datacenter to a New BIOS or OS Version 6.8 Removing Hosts From the Verification Service 6.9 Removing Flavors 6.10 Invalidating Asset Tags 6.11 Remediating an Untrusted attestation 6.12 Attestation Reporting 6.12.1 Sample Call \u2013 Generating a New Attestation Report 6.12.2 Sample Call \u2013 Retrieving an Existing Attestation Report 6.13 Integration 6.13.1 The Integration Hub 6.13.2 Integration with OpenStack 6.13.2.1 Prerequisites 6.13.2.2 Setting Image Traits 6.13.2.3 Configuring the Integration Hub for Use with OpenStack 6.13.2.7 Scheduling Instances 6.13.3 Integration with Kubernetes 6.13.3.1 Prerequisites 6.13.3.2 Installing the Intel\u00ae SecL Custom Resource Definitions 6.13.3.6 Configuring Pods to Require Intel\u00ae SecL Attributes 6.13.3.7 Tainting Untrusted Worker Nodes 7 Workload Confidentiality 7.1 Virtual Machine Confidentiality 7.1.1 Prerequisites 7.1.2 Workflow 7.1.2.1 Encrypting Images 7.1.2.2 Uploading the Image Flavor 7.1.2.3 Creating the Image Flavor to Image ID Association 7.1.2.4 Launching Encrypted VMs 7.2 Docker Container Confidentiality 7.2.1 Docker Container Integrity 7.2.2 Prerequisites 7.2.3 Workflow 7.2.3.1 Encrypting Docker Container Images 7.2.3.2 Uploading the Image Flavor 7.2.3.3 Creating the Image Flavor to Image ID Association 7.2.3.4 Launching Encrypted Docker Containers 8 Trusted Virtual Kubernetes Worker Nodes 8.1 Prerequisites 8.2 Workflow 8.3 Sample VM Trust Report 9 Flavor Management 9.1 Flavor Format Definitions 9.1.1 Meta 9.1.2 Hardware 9.1.3 PCRs 9.1.4 Sample PLATFORM Flavor 9.1.5 Sample OS Flavor 9.1.6 Sample HOST_UNIQUE Flavor 9.1.7 Sample ASSET_TAG Flavor 9.2 Flavor Matching 9.2.1 When Does Flavor Matching Happen? 9.2.2 Flavor Matching Performance 9.2.3 Flavor Groups 9.2.4 Default Flavor Group 9.2.4.1 automatic 9.2.4.2 unique 9.2.5 Flavor Match Policies 9.2.5.1 Default Flavor Match Policy 9.2.5.2 ANY_OF 9.2.5.3 ALL_OF 9.2.5.4 LATEST 9.2.5.5 REQUIRED 9.2.5.6 REQUIRED_IF_DEFINED 9.2.6 Flavor Match Event Triggers 9.2.7 Sample Flavorgroup API Calls 9.2.7.1 Create a New Flavorgroup 9.3 SOFTWARE Flavor Management 9.3.1 What is a SOFTWARE Flavor? 9.3.2 Creating a SOFTWARE Flavor part 9.3.2.1 Directories 9.3.2.2 Symlinks 9.3.2.3 Files 9.3.3 Sample SOFTWARE Flavor Creation Call 9.3.4 Deploying a SOFTWARE Flavor Manifest to a Host 9.3.5 SOFTWARE Flavor Matching 9.3.6 Kernel Upgrades 10 Scalability and Sizing 10.1 Configuration Maximums 10.1.1 Registered Hosts 10.1.2 HDD Space 10.2 Database Rotation Settings 10.3 Log Rotation 11 Intel Security Libraries Configuration Settings 11.1 Verification Service 11.1.1 Installation Answer File Options 11.1.2 Configuration Options 11.1.3 Command-Line Options 11.1.4 Directory Layout 11.2 Trust Agent 11.2.1 Installation Answer File Options 11.2.2 Configuration Options 11.2.3 Command-Line Options 11.2.4 Directory Layout Windows Linux Bin Configuration Var 11.3 Integration Hub 11.3.1 Installation Answer File 11.3.2 Configuration Options 11.3.3 Command-Line Options 11.3.4 Directory Layout 11.3.4.1 Logs 11.4 Certificate Management Service 11.4.1 Installation Answer File Options 11.4.2 Configuration Options 11.4.3 Command-Line Options 11.4.4 Directory Layout 11.4.4.1 Bin 11.4.4.2 Cacerts 11.5 Authentication and Authorization Service 11.5.1 Installation Answer File Options 11.5.2 Configuration Options 11.5.3 Command-Line Options 11.5.4 Directory Layout 11.5.4.1 Bin 11.5.4.2 dbscripts 11.6 Workload Service 11.6.1 Installation Answer File Options 11.6.2 Configuration Options 11.6.3 Command-Line Options 11.6.4 Directory Layout 11.7 Key Broker Service 11.7.1 Installation Answer File Options 11.7.2 Configuration Options 11.7.3 Command-Line Options 11.7.4 Directory Layout 11.7.4.1 Bin 11.7.4.2 Configuration 11.7.4.3 Env 11.7.4.4 Features 11.7.4.5 Java 11.7.4.6 Logs 11.7.4.7 Repository 11.7.4.8 Script 11.8 Workload Agent 11.8.1 Installation Answer File Options 11.8.2 Configuration Options 11.8.3 Command-Line Options 11.8.4 Directory Layout 11.8.4.1 Bin 11.9 Workload Policy Manager 11.9.1 Installation Answer File Options 11.9.2 Configuration Options 11.9.3 Command-Line Options 12 Certificate and Key Management 12.1 Authentication and Authorization Service 12.2 Host Verification Service 12.2.1 SAML 12.2.2 Asset Tag 12.2.3 Privacy CA 12.2.4 Endorsement CA 12.3 Regenerating TLS Certificates 12.4 Replacing Self-Signed Certificates TLS Certificates 13 Uninstallation 13.1 Host Verification Service 13.2 Trust Agent 13.3 Integration Hub 13.4 Kubernetes CRDs 14 Appendix 14.1 PCR Definitions 14.1.1 Microsoft Windows Server 2016 Datacenter 14.1.1.1 TPM 2.0 14.1.2 Red Had Enterprise Linux 14.1.2.1 TPM 2.0 14.1.3 VMWare ESXi 14.1.3.1 TPM 1.2 14.1.3.2 TPM 2.0 A.1 Attestation Rules 1 Introduction 1.1 Overview Intel Security Libraries for Datacenter is a collection of software applications and development libraries intended to help turn Intel platform security features into real-world security use cases. 1.1.1 Trusted Computing Trusted Computing consists of a set of industry standards defined by the Trusted Computing Group to harden systems and data against attack. These standards include verifying platform integrity, establishing identity, protection of keys and secrets, and more. One of the functions of Intel Security Libraries is to provide a \u201cTrusted Platform,\u201d using Intel security technologies to add visibility, auditability, and control to server platforms. 1.1.1.1 The Chain of Trust In a Trusted Computing environment, a key concept is verification of the integrity of the underlying platform. Verifying platform integrity typically means cryptographic measurement and/or verification of firmware and software components. The process by which this measurement and verification takes place affects the overall strength of the assertion that the measured and verified components have not been altered. Intel refers to this process as the \u201c Chain of Trust ,\u201d whereby at boot time, a sequence of cryptographic measurements and signature verification events happen in a defined order, such that measurement/verification happens before execution, and each entity responsible for performing a measurement or verification is measured by another step earlier in the process. Any break in this chain leads to an opportunity for an attacker to modify code and evade detection. 1.1.1.2 Hardware Root of Trust The Root of Trust, the first link in the chain, can be one of several different options. Anything that happens in the boot process before the Root of Trust must be considered to be within the \u201ctrust boundary,\u201d signifying components whose trustworthiness cannot be assessed. For this reason, it\u2019s best to use a Root of Trust that starts as early in the system boot process as possible, so that the Chain of Trust during the boot process can cover as much as possible. Multiple Root of Trust options exist, ranging from firmware to hardware. In general, a hardware Root of Trust will have a smaller \u201ctrust boundary\u201d than a firmware Root of Trust. A hardware Root of Trust will also have the benefit of immutability \u2013 where firmware can easily be flashed and modified, hardware is much more difficult to tamper with. 1.1.1.2.1 Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) Intel\u00ae Trusted Execution Technology is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Grantley generation. Intel\u00ae TXT is enabled in the system BIOS (typically under the Processor > Advanced tab), and requires Intel\u00ae VT-d and Intel VT-x features to be enabled as prerequisites (otherwise the option will be grayed out). Intel\u00ae TXT will ship \u201cdisabled\u201d by default. 1.1.1.2.2 Intel\u00ae BootGuard (Intel\u00ae BtG) Intel\u00ae BootGuard is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Purley-Refresh generation. Unlike Intel\u00ae TXT, Intel\u00ae BtG is configured in platform fuses, not in the system BIOS. Intel\u00ae BtG is fused into several \u201cprofiles\u201d that determine the behavior of the feature. Intel\u00ae BtG supports both \u201cverify\u201d and \u201cmeasure\u201d profiles; in \u201cverify\u201d profiles, Intel\u00ae BtG will verify the signature of the platform Initial Boot Block (IBB). In \u201cmeasure\u201dprofiles, Intel\u00ae BtG will hash the IBB and extend that measurement to a TPM PCR. It is recommended that Intel\u00ae BtG be fused into the \u201cmeasure and verify\u201d profile for maximum protection and auditability. Because the Intel\u00ae BtG profile is configured using fuses, the server OEM/ODM will determine the profile used at manufacturing time. Please contact your server vendor to determine what Intel\u00ae BtG profiles are available in their product line. Because Intel\u00ae BtG only measures/verifies the integrity of the IBB, it\u2019s important to have an additional technology handle measurements later in the boot process. Intel\u00ae TXT can provide this function using tboot to invoke SINIT, and UEFI SecureBoot can alternatively provide similar functionality (note that Linux users should properly configure Shim and use a signed kernel for UEFI SecureBoot). 1.1.1.3 Supported Trusted Boot Options Intel\u00ae SecL-DC supports several options for Trusted Computing, depending on the features available on the platform. Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. 1.1.1.4 Remote Attestation Trusted computing consists primarily of two activities \u2013 measurement, and attestation. Measurement is the act of obtaining cryptographic representations for the system state. Attestation is the act of comparing those cryptographic measurements against expected values to determine whether the system booted into an acceptable state. Attestation can be performed either locally, on the same host that is to be attested, or remotely, by an external authority. The trusted boot process can optionally include a local attestation involving the evaluation of a TPM-stored Launch Control Policy (LCP). In this case, the host\u2019s TPM will compare the measurements that have been taken so far to a set of expected PCR values stored in the LCP; if there is a mismatch, the boot process is halted entirely. Intel\u00ae SecL utilizes remote attestation, providing a remote Verification Service that maintains a database of expected measurements (or \u201cflavors\u201d), and compares the actual boot-time measurements from any number of hosts against its database to provide an assertion that the host booted into a \u201ctrusted\u201d or \u201cuntrusted\u201d state. Remote attestation is typically easier to centrally manage (as opposed to creating an LCP for each host and entering the policy into the host\u2019s TPM), does not halt the boot process allowing for easier remediation, and separates the attack surface into separate components that must both be compromised to bypass security controls. Both local and remote attestation can be used concurrently. However, Intel\u00ae SecL, and this document, will focus only on remote attestation. For more information on TPM Launch Control Policies, consult the Intel Trusted Execution Technology (Intel TXT) Software Development Guide ( https://www.intel.com/content/dam/www/public/us/en/documents/guides/intel-txt-software-development-guide.pdf ). 1.1.2 Intel\u00ae Security Libraries for Datacenter Features 1.1.2.1 Platform Integrity Platform Integrity is the use case enabled by the specific implementation of the Chain of Trust and Remote Attestation concepts. This involves the use of a Root of Trust to begin an unbroken chain of platform measurements at server boot time, with measurements extended to the Trusted Platform Module and compared against expected values to verify the integrity of measured components. This use case is foundational for other Intel\u00ae SecL use cases. 1.1.2.2 Data Sovereignty Data Sovereignty builds on the Platform Integrity use case to allow physical TPMs to be written with Asset Tags containing any number of key/value pairs. This use case is typically used to identify the geographic location of the physical server, but can also be used to identify other attributes. For example, the Asset Tags provided by the Data Sovereignty use case could be used to identify hosts that meet specific compliance requirements and can run controlled workloads. 1.1.2.3 Application Integrity Added in the Intel\u00ae SecL-DC 1.5 release, Application Integrity allows any files and folders on a Linux host system to be included in the Chain of Trust integrity measurements. These measurements are attested by the Verification Service along with the other platform measurements, and are included in determining the host\u2019s overall Trust status. The measurements are performed by a measurement agent called tbootXM, which is built into initrd during Trust Agent installation. Because initrd is included in other Trusted Computing measurements, this allows Intel\u00ae SecL-DC to carry the Chain of Trust all the way to the Linux filesystem. 1.1.2.4 Workload Confidentiality for Virtual Machines and Containers Added in the Intel\u00ae SecL-DC 1.6 release, Workload Confidentiality allows virtual machine and Docker container images to be encrypted at rest, with key access tied to platform integrity attestation. Because security attributes contained in the platform integrity attestation report are used to control access to the decryption keys, this feature provides both protection for at-rest data, IP, code, etc in Docker container or virtual machine images, and also enforcement of image-owner-controlled placement policies. When decryption keys are released, they are sealed to the physical TPM of the host that was attested, meaning that only a server that has successfully met the policy requirements for the image can actually gain access. Workload Confidentiality begins with the Workload Policy Manager (WPM) and a qcow2 or Docker image that needs to be protected. The WPM is a lightweight application that will request a new key from the Key Broker, use that key to encrypt the image, and generate an Image Flavor. The image owner will then upload the encrypted image to their desired image storage service (for example, OpenStack Glance or a local Docker Registry), and the image ID from the image storage will be uploaded along with the Image Flavor to the Intel\u00ae SecL Workload Service. When that image is used to launch a new VM or container, the Workload Agent will intercept the VM or container start and request the decryption key for that image from the Workload Service. The Workload Service will use the image ID and the Image Flavor to find the key transfer URL for the appropriate Key Broker, and will query the Verification Service for the latest Platform Integrity trust attestation report for the host. The Key Broker will use the attestation report to determine whether the host meets the policy requirements for the key transfer, and to verify that the report is signed by a Verification Service known to the Broker. If the report is genuine and meets the policy requirements, the image decryption key is sealed using an asymmetric key from that host\u2019s TPM, and sent back to the Workload Service. The Workload Service then caches the key for 5 minutes (to avoid performance issues for multiple rapid launch requests; note that these keys are still wrapped using a sealing key unique to the hosts TPM, so multiple hosts would require multiple keys even for an identical image) and return the wrapped key to the Workload Agent on the host, which then uses the host TPM to unseal the image decryption key. The key is then used to create a new LUKS volume, and the image is decrypted into this volume. This functionality means that a physical host must pass policy requirements in order to gain access to the image key, and the image will be encrypted at rest both in image storage and on the compute host. Beginning with the Intel\u00ae SecL-DC version 2.1 release, the Key Broker now supports 3 rd -party key managers that are KMIP-compliant. The Key Broker has been updated to use the \u201clibkmip\u201d client. 1.1.2.5 Signed Flavors Added in the Intel\u00ae SecL-DC 1.6 release, Flavor signing is an improvement to the existing handling of expected attestation measurements, called \u201cFlavors.\u201d This feature adds the ability to digitally sign Flavors so that the integrity of the expected measurements themselves can be verified when attestations occur. This also means that Flavors can be more securely transferred between different Verification Service instances. Flavor signing is seamlessly added to the existing Flavor creation process (both importing from a sample host and \u201cmanually\u201d creating a Flavor using the POST method to the /v2/flavors resource). When a Flavor is created, the Verification Service will sign it using a signing certificate signed by the Certificate Management Service (this is created during Verification Service setup). Each time that the Verification Service evaluates a Flavor, it will first verify the signature on that Flavor to ensure the integrity of the Flavor contents before it is used to attest the integrity of any host. 1.1.2.6 Trusted Virtual Kubernetes Worker Nodes Added in the Intel\u00ae SecL-DC version 2.1 release, this feature provides a Chain of Trust solution extending to Kubernetes Worker Nodes deployed as Virtual Machines. This feature addresses Kubernetes deployments that use Virtual Machines as Worker Nodes, rather than using bare-metal servers. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes. 2 Intel\u00ae Security Libraries Components 2.1 Certificate Management Service Starting with Intel\u00ae SecL-DC 1.6, most non-TPM-related certificates used by Intel\u00ae SecL-DC applications will be issued by the new Certificate Management Service. This includes acting as a root CA and issuing TLS certificates for all of the various web services. 2.2 Authentication and Authorization Service Starting with Intel\u00ae SecL-DC 1.6, authentication and authorization for all Intel\u00ae SecL applications will be centrally managed by the new Authentication and Authorization Service (AAS). Previously, each application would manage its own users and permissions independently; this change allows authentication and authorization management to be centralized. 2.3 Verification Service The Verification Service component of Intel\u00ae Security Libraries performs the core Platform Integrity and Data Sovereignty functionality by acting as a remote attestation authority. Platform security technologies like Intel\u00ae TXT, Intel\u00ae BootGuard, and UEFI SecureBoot extend measurements of platform components (such as the system BIOS/UEFI, OS kernel, etc) to a Trusted Platform module as the server boots. Known-good measurements for each of these components can be directly imported from a sample server. These expected measurements can then be compared against actual measurements from registered servers, allowing the Verification Service to attest to the \"trustiness\" of the platform, meaning whether the platform booted into a \"known-good\" state. 2.4 Workload Service The Workload Service acts as a management service for handling Workload Flavors (Flavors used for Virtual Machines and Containers). In the Intel\u00ae SecL-DC 1.6 release, the Workload Service uses Flavors to map decryption key IDs to image IDs. When a launch request for an encrypted workload image is intercepted by the Workload Agent, the Workload Service will handle mapping the image ID to the appropriate key ID and key request URL, and will initiate the key transfer request to the Key Broker. 2.5 Trust Agent The Trust Agent resides on physical servers and enables both remote attestation and the extended chain of trust capabilities. The Agent maintains ownership of the server's Trusted Platform Module, allowing secure attestation quotes to be sent to the Verification Service. Incorporating the Intel\u00ae SecL HostInfo and TpmProvider libraries, the Trust Agent serves to report on platform security capabilities and platform integrity measurements. The Trust Agent is supported for Windows Server 2016 Datacenter and Red Hat Enterprise Linux (RHEL) 8.1 and later. 2.6 Workload Agent The Workload Agent is the component responsible for handling all of the functions needed for Workload Confidentiality for virtual machines and Docker containers on a physical server. The Workload Agent uses libvirt hooks to identify VM lifecycle events (VM start, stop, hibernate, etc), and intercepts those events to perform needed functions like requesting decryption keys, creation and deletion of encrypted LUKS volumes, using the TPM to unseal decryption keys, etc. The WLA also includes the Docker SecureOverlay Driver that performs analogous functionality for Docker containers. 2.7 Integration Hub The Integration Hub acts as a middle-man between the Verification Service and one or more scheduler services (such as OpenStack* Nova), and \"pushes\" attestation information retrieved from the Verification Service to one or more scheduler services according to an assignment of hosts to specific tenants. In this way, Tenant A can receive attestation information for hosts that belong to Tenant A, but receive no information about hosts belonging to Tenant B. The Integration Hub serves to disassociate the process of retrieving attestations from actual scheduler queries, so that scheduler services can adhere to best practices and retain better performance at scale. The Integration Hub will regularly query the Intel\u00ae SecL Verification Service for SAML attestations for each host. The Integration Hub maintains only the most recent currently valid attestation for each host, and will refresh attestations when they would expire. The Integration Hub will verify the signature of the SAML attestation for each host assigned to a tenant, then parse the attestation status and asset tag information, and then will securely push the parsed key/value pairs to the plugin endpoints enabled. The Integration Hub features a plugin design for adding new scheduler endpoint types. Currently the Integration Hub supports OpenStack Nova and Kubernetes endpoint plugins. Other integration plugins may be added. 2.8 Workload Policy Manager The Workload Policy Manager is a Linux command line utility used by an image owner to encrypt VM (qcow2) or container (Docker) images, and to create an Image Flavor used to provide the encryption key transfer URL during launch requests. The WPM utility will use an existing or request a new key from the Key Broker Service, use that key to encrypt the image, and output the Image Flavor in JSON format. The encrypted image can then be uploaded to the image store of choice (like OpenStack Glance), and the Image Flavor can be uploaded to the Workload Service. The ID of the image on the image storage system is then mapped to the Image Flavor in the WLS; when the image is used to launch a new instance, the WLS will find the Image Flavor associated with that image ID, and use the Image Flavor to determine the key transfer URL. 2.9 Key Broker Service The Key Broker Service is effectively a policy compliance engine. Its job is to manage key transfer requests, releasing keys only to servers that meet policy requirements. The Key Broker registers one or more SAML signing certificates from any Verification Services that it will trust. When a key transfer request is received, the request includes a trust attestation report signed by the Verification Service. If the signature matches a registered SAML key, the Broker will then look at the actual report to ensure the server requesting the key matches the image policy (currently only overall system trust is supported as a policy requirement). If the report indicates the policy requirements are met, the image decryption key is wrapped using a public key unique to the TPM of the host that was attested in the report, such that only the host that was attested can unseal the decryption key and gain access to the image. 3 Intel\u00ae Security Libraries Installation 3.1 Building from Source Intel\u00ae Security Libraries is distributed as open source code, and must be compiled into installation binaries before installation. Instructions and sample scripts for building the Intel\u00ae SecL-DC components can be found here: https://github.com/intel-secl/build-manifest After the components have been built, the installation binaries can be found in the directories created by the build scripts. <servicename>/out/<servicename>.bin In addition, the build script will produce some sample database creation scripts that can be used during installation to configure database requirements (instructions are given in the installation sections): create_db: authservice/out/create_db.sh install_pgdb: authservice/out/install_pgdb.sh In addition, sample Ansible roles to automatically build and deploy a testbed environment are provided: https://github.com/intel-secl/utils/tree/v3.3.1/develop/tools/ansible-role Also provided are sample API calls organized by workflows for Postman: https://github.com/intel-secl/utils/tree/v3.3.1/develop/tools/api-collections 3.2 Hardware Considerations Intel\u00ae SecL-DC supports and uses a variety of Intel security features, but there are some key requirements to consider before beginning an installation. Most important among these is the Root of Trust configuration. This involves deciding what combination of TXT, Boot Guard, tboot, and UEFI Secure Boot to enable on platforms that will be attested using Intel\u00ae SecL. Key points: - At least one \"Static Root of Trust\" mechanism must be used (TXT and/or BtG) - For Legacy BIOS systems, tboot must be used - For UEFI mode systems, UEFI SecureBoot must be used* Use the chart below for a guide to acceptable configuration options. . *Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. 3.3 Recommended Service Layout The Intel\u00ae SecL-DC services can be installed in a variety of layouts, partially depending on the use cases desired and the OS of the server(s) to be protected. In general, the Intel\u00ae SecL-DC applications can be divided into management services that are deployed on the network on the management plane, and host or node components that must be installed on each protected server. Management services can typically be deployed anywhere with network access to all of the protected servers. This could be a set of individual VMs per service; containers; or all installed on a single physical or virtual machine. Node components must be installed on each protected physical server. Typically this is needed for Windows and Linux deployments. 3.3.1 Platform Integrity The most basic use case enabled by Intel\u00ae SecL-DC, Platform Integrity requires only the Verification Service and, to protect Windows or Linux hosts, the Trust Agent. This also enables the Application Integrity use case by default for Linux systems. The Integration Hub may be added to provide integration support for OpenStack or Kubernetes. The Hub is often installed on the same machine as the Verification Service, but optionally can be installed separately. 3.3.2 Workload Confidentiality Workload Confidentiality introduces a number of additional services and agents. For a POC environment, all of the management services can be installed on a single machine or VM. This includes: Certificate Management Service (CMS) Authorization and Authentication Service (AAS) Host Verification Service (HVS) Workload Service (WLS) Integration Hub (HUB) Key Broker Service (KBS) with backend key management Workload Policy Manager (WPM) In a production environment, it is strongly suggested that the WPM and KBS be deployed (with their own CMS and AAS) separately for each image owner. For a Cloud Service Provider, this would mean that each customer/tenant who will use the Workload Confidentiality feature would have their own dedicated AAS/CMS/KBS/WPM operated on their own networks, not controlled by the CSP. This is because the Key Broker and WPM are the tools used to define the policies that will allow images to launch, and these policies and their enforcement should remain entirely under the control of the image owner. The node components must be installed on each protected physical server: Trust Agent (TA) Workload Agent (WLA) 3.4 Installing/Configuring the Database The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. Scripts (install_pgdb.sh, create_db.sh) are provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation. 3.4.1 Using the Provided Database Installation Script Install a sample Postgresql 11 database using the install_pgdb.sh script. This script will automatically install the Postgresql database and client packages required. Add the Postgresql 11 repository: https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm Create the iseclpgdb.env answer file: ISECL_PGDB_IP_INTERFACES = localhost ISECL_PGDB_PORT = 5432 ISECL_PGDB_SAVE_DB_INSTALL_LOG = true ISECL_PGDB_CERT_DNS = localhost ISECL_PGDB_CERT_IP = 127 .0.0.1 Note that the values above assume that the database will be accessed locally. If the database server will be external to the Intel\u00ae SecL services, change these values to the hostname or FQDN and IP address where the client will access the database server. Run the following command: dnf module disable postgresql -y Execute the installation script: ./install_pgdb.sh Note : the database installation only needs to be performed once if the same database server will be used for all services that require a database. Only the \"create_db\" step needs to be repeated if the database server will be shared. 3.4.2 Provisioning the Database Each Intel\u00ae SecL service that uses a database (the Authentication and Authorization Service, the Verification Service, the Integration Hub, the Workload Service) requires its own schema and access. After installation, the database must be created initialized and tables created. Execute the create_db.sh script to configure the database. If a single shared database server will be used for each Intel\u00ae SecL service (for example, if all management plane services will be installed on a single VM), run the script multiple times, once for each service that requires a database. If separate database servers will be used (for example, if the management plane services will reside on separate systems and will use their own local database servers), execute the script on each server hosting a database. ./create_db.sh <database name> <database_username> <database_password> For example: ./create_db.sh isecl_hvs_db hvs_db_username hvs_db_password ./create_db.sh isecl_aas_db aas_db_username aas_db_password ./create_db.sh isecl_wls_db wls_db_username wls_db_password Note that the database name, username, and password details for each service must be used in the corresponding installation answer file for that service. 3.4.3 Database Server TLS Certificate The database client for Intel\u00ae SecL services requires the database TLS certificate to authenticate communication with the database server. If the database server for a service is located on the same server that the service will run on, only the path to this certificate is needed. If the provided Postgres scripts are used, the certificate will be located in /usr/local/pgsql/data/server.crt If the database server will be run separately from the Intel\u00ae SecL service(s), the certificate will need to be copied from the database server to the service machine before installing the Intel\u00ae SecL services. The database client for Intel\u00ae SecL services will validate that the Subject Alternative Names in the database server\u2019s TLS certificate contain the hostname(s)/IP address(es) that the clients will use to access the database server. If configuring a database without using the provided scripts, ensure that these attributes are present in the database TLS certificate. 3.5 Installing the Certificate Management Service 3.5.1 Required For The CMS is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers) 3.5.2 Supported Operating Systems The Intel\u00ae Security Libraries Certificate Management Service supports Red Hat Enterprise Linux 8.2. 3.5.3 Recommended Hardware 1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services 3.5.4 Installation To install the Intel\u00ae SecL-DC Certificate Management Service: Copy the Certificate Management Service installation binary to the /root/ directory. Create the cms.env installation answer file for an unattended installation: AAS_TLS_SAN = <comma-separated list of IPs and hostnames for the AAS> AAS_API_URL = https://<Authentication and Authorization Service IP or Hostname>:8444/aas SAN_LIST = <Comma-separated list of IP addresses and hostnames for the CMS>,127.0.0.1,localhost The SAN list will be used to authenticate the Certificate Signing Request from the AAS to the CMS. Only a CSR originating from a host matching the SAN list will be honored. Later, in the AAS authservice.env installation answer file, this same SAN list will be provided for the AAS installation. These lists must match, and must be valid for IPs and/or hostnames used by the AAS system. If both the AAS and CMS will be installed on the same system, \"127.0.0.1,localhost\" may be used. The SAN list variables also accept the wildcards \u201c?\u201d (for single-character wildcards) and \"*\" (for multiple-character wildcards) to allow address ranges or multiple FQDNs. The AAS_API_URL represents the URL for the AAS that will exist after the AAS is installed. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Certificate Management Service. Execute the installer binary. ./cms-v3.3.1.bin When the installation completes, the Certificate Management Service is available. The services can be verified by running cms status from the command line. shell cms status After installation is complete, the CMS will output a bearer token to the console. This token will be used with the AAS during installation to authenticate certificate requests to the CMS. If this token expires or otherwise needs to be recreated, use the following command: ```shell cms setup cms_auth_token --force In addition, the SHA384 digest of the CMS TLS certificate will be needed for installation of the remaining Intel\u00ae SecL services. The digest can be obtained using the following command: ```shell cms tlscertsha384 3.6 Installing the Authentication and Authorization Service 3.6.1 Required For The AAS is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers) 3.6.2 Prerequisites The following must be completed before installing the Authentication and Authorization Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service database must be available 3.6.3 Package Dependencies The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. A script (install_pgdb.sh) is provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation. 3.6.4 Supported Operating Systems The Intel\u00ae Security Libraries Authentication and Authorization Service supports Red Hat Enterprise Linux 8.2. 3.6.5 Recommended Hardware 1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services 3.6.6 Installation To install the AAS, a bearer token from the CMS is required. This bearer token is output at the end of the CMS installation. However, if a new token is needed, simply use the following command from the CMS command line: cms setup cms_auth_token --force Create the authservice.env installation answer file: CMS_BASE_URL = https://<CMS IP or hostname>:8445/cms/v1/ CMS_TLS_CERT_SHA384 = <CMS TLS certificate sha384> AAS_DB_HOSTNAME = <IP or hostname of database server> AAS_DB_PORT = <database port number ; default is 5432 > AAS_DB_NAME = <database name> AAS_DB_USERNAME = <database username> AAS_DB_PASSWORD = <database password> AAS_DB_SSLCERTSRC = <path to database TLS certificate ; the default location is typically /usr/local/pgsql/data/server.crt> AAS_ADMIN_USERNAME = <username for AAS administrative user> AAS_ADMIN_PASSWORD = <password for AAS administrative user> SAN_LIST = <comma-separated list of IPs and hostnames for the AAS ; this should match the value for the AAS_TLS_SAN in the cms.env file from the CMS installation> BEARER_TOKEN = <bearer token from CMS installation> Execute the AAS installer: ./authservice-v3.3.1.bin Note: the AAS_ADMIN credentials specified in this answer file will have administrator rights for the AAS and can be used to create other users, create new roles, and assign roles to users. 3.6.7 Creating Users After installation is complete, a number of roles and user accounts must be generated. Most of these accounts will be service users, used by the various Intel\u00ae SecL services to work together. Another set of users will be used for installation permissions, and a final administrative user will be created to provide the initial authentication interface for the actual human user. The administrative user can be used to create additional users with appropriately restricted roles based on organizational needs. Creating these required users and roles is facilitated by a script that will accept credentials and some configuration settings from an answer file and automate the process. Create the populate-users.env file: ISECL_INSTALL_COMPONENTS = KBS,TA,WLS,WPM,IHUB,HVS,WLA,AAS AAS_API_URL = https://<AAS IP address or hostname>:8444/aas AAS_ADMIN_USERNAME = <AAS username> AAS_ADMIN_PASSWORD = <AAS password> HVS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Host Verification Service> IH_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Integration Hub> WLS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Workload Service> KBS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Key Broker Service> TA_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Trust Agent> HVS_SERVICE_USERNAME = <Username for the HVS service user> HVS_SERVICE_PASSWORD = <Password for the HVS service user> IHUB_SERVICE_USERNAME = <Username for the Hub service user> IHUB_SERVICE_PASSWORD = <Password for the Hub service user> WPM_SERVICE_USERNAME = <Username for the WPM service user> WPM_SERVICE_PASSWORD = <Password for the WPM service user> WLS_SERVICE_USERNAME = <Username for the WLS service user> WLS_SERVICE_PASSWORD = <Password for the WLS service user> WLA_SERVICE_USERNAME = <Username for the WLA service user> WLA_SERVICE_PASSWORD = <Password for the WLA service user> GLOBAL_ADMIN_USERNAME = <Username for the global Administrator user GLOBAL_ADMIN_PASSWORD = <Password for the global Administrator user INSTALL_ADMIN_USERNAME = <Username for the installation user INSTALL_ADMIN_PASSWORD = <Password for the global installation user Note : The ISECL_INSTALL_COMPONENTS variable is a comma-separated list of the components that will be used in your environment. Not all services are required for every use case. If a given service will not be used in your deployment, simply delete the unnecessary service abbreviation from the ISECL_INSTALL_COMPONENTS list, and leave the SAN and credential variables for that service blank. Note : The SAN list variables each support wildcards( \"*\" and \"?\"). In particular, without wildcards the Trust Agent SAN list would need to explicitly list each hostname or IP address for all Trust Agents that will be installed, which is not generally feasible. Using wildcards, domain names and entire IP ranges can be included in the SAN list, which will allow any host matching those ranges to install the relevant service. The SAN list specified here must exactly match the SAN list for the applicable service in that service\u2019s env installation file. Execute the populate-users script: ./populate-users Note: The script can be executed with the \u2013output_json argument to create the populate-user.json .This json output file will contain all of the users created by the script, along with usernames, passwords, and role assignments. This file can be used both as a record of the service and administrator accounts, and can be used as alternative inputs to recreate the same users with the same credentials in the future if needed. Be sure to protect this file if the \u2013output_json argument is used. The script will automatically generate the following users: Verification Service User Attestation Hub Service User Workload Policy Manager Service User Workload Service User Name Workload Service User Global Admin User Installation User These user accounts will be used during installation of several of the Intel\u00ae SecL-DC applications. In general, whenever credentials are required by an installation answer file, the variable name should match the name of the corresponding variable used in the populate-users.env file. The Global Admin user account has all roles for all services. This is a default administrator account that can be used to perform any task, including creating any other users. In general this account is useful for POC installations, but in production it should be used only to create user accounts with more restrictive roles. The administrator credentials should be protected and not shared. The populate-users script will also output an installation token. This token has all privileges needed for installation of the Intel\u00ae SecL services, and uses the credentials provided with the INSTALLATION_ADMIN_USERNAME and password. The remaining Intel \u00ae SecL-DC services require this token (set as the BEARER_TOKEN variable in the installation env files) to grant the appropriate privileges for installation. By default this token will be valid for two hours; the populate-users script can be rerun with the same populate-users.env file to regenerate the token if more time is required, or the INSTALLATION_ADMIN_USERNAME and password can be used to generate an authentication token. 3.7 Installing the Host Verification Service This section details how to install the Intel\u00ae SecL-DC services. For instructions on running these services as containers, see the following section. 3.7.1 Required For The Host Verification Service is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers) 3.7.2 Prerequisites The following must be completed before installing the Verification Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available The Verification Service database must be available 3.7.3 Package Dependencies The Intel\u00ae Security Libraries Verification Service requires the following packages and their dependencies: logback Postgres* client and server 11.6 (server component optional if an external Postgres database is used) unzip zip openssl wget net-tools python3-policycoreutils If they are not already installed, the Verification Service installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation. 3.7.4 Supported Operating Systems The Intel\u00ae Security Libraries Verification Service supports Red Hat Enterprise Linux 8.2. 3.7.5 Recommended Hardware 4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers (Optional) One network interface for Asset Tag provisioning (only required for \u201cpull\u201d tag provisioning; required to provision Asset Tags to VMware ESXi servers). 3.7.6 Installation To install the Verification Service, follow these steps: Copy the Verification Service installation binary to the /root directory. Create the hvs.env installation answer file. A sample minimal hvs.env file is provided below. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Verification Service. # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas HVS_SERVICE_USERNAME = <username> HVS_SERVICE_PASSWORD = <password> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = <digest> # TLS Configuration SAN_LIST = 127 .0.0.1,192.168.1.1,hvs.server.com #comma-separated list of IP addresses and hostnames for the HVS to be used in the Subject Alternative Names list in the TLS Certificate # Installation admin bearer token for CSR approval request to CMS BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Database HVS_DB_NAME = <database name> HVS_DB_USERNAME = <database username> HVS_DB_PASSWORD = <database password> HVS_DB_SSLCERTSRC = /tmp/dbcert.pem # Not required if VS_DB_SSLCERT is given Execute the installer binary. ```shell ./hvs-v3.3.1.bin When the installation completes, the Verification Service is available. The services can be verified by running **hvs status** from the Verification Service command line. ```shell hvs status 3.8 Installing the Workload Service 3.8.1 Required For The WLS is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Docker Containers) 3.8.2 Prerequisites The following must be completed before installing the Workload Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available The Verification Service must be installed and available The Workload Service database must be available 3.8.3 Supported Operating Systems The Intel\u00ae Security Libraries Workload Service supports Red Hat Enterprise Linux 8.2 3.8.4 Recommended Hardware 3.8.5 Installation Copy the Workload Service installation binary to the /root directory. Create the workload-service.env installation answer file WLS_DB_USERNAME = <database username> WLS_DB_PASSWORD = <database password> WLS_DB_HOSTNAME = <IP or hostname of database server> WLS_DB_PORT = <Database port ; 5432 by default> WLS_DB = <name of the WLS database> WLS_DB_SSLCERTSRC = <path to database TLS certificate ; the default location is typically /usr/local/pgsql/data/server.crt > HVS_URL = https://<Ip address or hostname of the Host verification Service>:8443/hvs/v2/ WLS_SERVICE_USERNAME = <username for WLS service account> WLS_SERVICE_PASSWORD = <password for WLS service account> CMS_BASE_URL = https://<IP or hostname to CMS>:8445/cms/v1/ CMS_TLS_CERT_SHA384 = <sha384 of CMS TLS certificate> AAS_API_URL = https://<IP or hostname to AAS>:8444/aas/ SAN_LIST = <comma-separated list of IPs and hostnames for the WLS> BEARER_TOKEN = <Installation token from populate-users script> Execute the WLS installer binary: ./wls-v3.3.1.bin 3.9 Installing the Trust Agent for Linux 3.9.1 Required For The Trust Agent for Linux is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers) 3.9.2 Package Dependencies The Trust Agent requires the following packages and their dependencies: Tboot (Optional, for TXT-based deployments without UEFI SecureBoot only) openssl tar redhat-lsb If they are not already installed, the Trust Agent installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation. Tboot will not be installed automatically. Instructions for installing and configuring tboot are documented later in this section. 3.9.3 Supported Operating Systems The Intel\u00ae Security Libraries Trust Agent for Linux supports Red Hat Enterprise Linux 8.2. Windows support is described in the section \"Installing the Trust Agent for Windows\" 3.9.4 Prerequisites The following must be completed before installing the Trust Agent: Supported server hardware including an Intel\u00ae Xeon\u00ae processor with Intel Trusted Execution Technology activated in the system BIOS. Trusted Platform Module (version 2.0) installed and activated in the system BIOS, with cleared ownership status. Note: For Linux systems, TPM 1.2 and TPM resource sharing to applications other than the Trust Agent are not supported at this time. Do not install trousers or another TSS stack application after installing the Trust Agent on Linux systems. System must be booted to a tboot boot option OR use UEFI SecureBoot. Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. (Provisioning step only) Intel\u00ae SecL Verification Service server installed and active. (REQUIRED for servers configured with TXT and tboot only) If the server is installed using an LVM, the LVM name must be identical for all Trust Agent systems. The Grub bootloader line that calls the Linux kernel will contain the LVM name of the root volume, and this line with all arguments is part of what is measured in the TXT/Tboot boot process. This will cause the OS Flavor measurements to differ between two otherwise identical hosts if their LVM names are different. Simply using a uniform name for the LVM during OS installation will resolve this possible discrepancy. (Optional, REQUIRED for Virtual Machine Confidentiality only): QEMU/KVM must be installed Libvirt must be installed (Optional, REQUIRED for Docker Container Confidentiality only): Docker CE 19.03.13 must be installed Note : The specific Docker-CE version 19.03.13 is required for Docker Container Confidentiality. Only this version is supported for this use case. 3.9.4.1 Tboot Installation Note : A solution to a security bug has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. Tboot is required to build a complete Chain of Trust for Intel\u00ae TXT systems that are not using UEFI Secure Boot. Tboot acts to initiate the Intel\u00ae TXT SINIT ACM (Authenticated Code Module), which populates several TPM measurements including measurement of the kernel, grub command line, and initrd. Without either tboot or UEFI Secure Boot, the Chain of Trust will be broken because the OS-related components will be neither measured nor signature-verified prior to execution. Because tboot acts to initiate the Intel\u00ae TXT SINIT ACM, tboot is only required for platforms using Intel\u00ae TXT, and is not required for platforms using another hardware Root of Trust technology like Intel\u00ae Boot Guard. Intel\u00ae SecL-DC requires tboot 1.9.7 or greater. For most platforms, the version of tboot available from the RedHat software repository will meet all requirements. Some newer platforms and platform firmware versions may require a later version of tboot, including later versions than are available on the RedHat software repositories. This is due to updates that can be made to the Intel\u00ae TXT SINIT ACM behavior, and the SINIT ACM is contained in the BIOS firmware. If a newer version of tboot is required than is available from the repository, the most current version can be found here: https://sourceforge.net/projects/tboot/files/tboot/ Tboot requires configuration of the grub boot loader after installation. To install and configure tboot: Install tboot yum install tboot Make a backup of your current grub.cfg file The below examples assume RedHat has been installed on a platform using Legacy boot mode.The grub path will be slightly different for platforms using Legacy BIOS. cp /boot/grub2/grub.cfg /boot/grub2/grub.bak Generate a new grub.cfg with the tboot boot option grub2-mkconfig -o /boot/grub2/grub.cfg Update the default boot option Ensure that the GRUB_DEFAULT value is set to the tboot option. a. Update /etc/default/grub and set the GRUB_DEFAULT value to \"saved\" GRUB_DEFAULT=saved b. Set the grub default option to tboot using the following grub2-set-default 2 Note that option 2 will be the correct Grub option assuming an otherwise-default installation of RHEL. A different option may be needed depending on the system configuration. c. Regenerate grub.cfg: grub2-mkconfig -o /boot/grub2/grub.cfg Reboot the system Because measurement happens at system boot, a reboot is needed to boot to the tboot boot option and populate measurements in the TPM. Verify a successful trusted boot with tboot Tboot provides the txt-stat command to show the tboot log. The first part of the output of this command can be used to verify a successful trusted launch. In the output below, note the \u201cTXT measured launch\u201d and \u201csecrets flag set\u201d at the bottom. Both of these should show \" TRUE \" if the tboot measured launch was successful. If either of these show \" FALSE \" the measured launch has failed. This usually simply indicates that the tboot boot option was not selected during boot. If the measured launch was successful, proceed to install the Trust Agent. ``` Intel\u00ae TXT Configuration Registers: STS: 0x0001c091 senter_done: TRUE sexit_done: FALSE mem_config_lock: FALSE private_open: TRUE locality_1_open: TRUE locality_2_open: TRUE ESTS: 0x00 txt_reset: FALSE E2STS: 0x0000000000000006 secrets: TRUE ERRORCODE: 0x00000000 DIDVID: 0x00000001b0078086 vendor_id: 0x8086 device_id: 0xb007 revision_id: 0x1 FSBIF: 0xffffffffffffffff QPIIF: 0x000000009d003000 SINIT.BASE: 0x6fec0000 SINIT.SIZE: 262144B (0x40000) HEAP.BASE: 0x6ff00000 HEAP.SIZE: 1048576B (0x100000) DPR: 0x0000000070000051 lock: TRUE top: 0x70000000 size: 5MB (5242880B) PUBLIC.KEY: 9c 78 f0 d8 53 de 85 4a 2f 47 76 1c 72 b8 6a 11 16 4a 66 a9 84 c1 aa d7 92 e3 14 4f b7 1c 2d 11 TXT measured launch: TRUE secrets flag set: TRUE ``` 3.9.5 Installation Installation of the Trust Agent is split into two major steps: Installation, which covers the creation of system files and folders, and Provisioning, which involves the creation of keys and secrets and links the Trust Agent to a specific Verification Service. Both operations can be performed at the same time using an installation answer file. Without the answer file, the Trust Agent can be installed and left in an un-provisioned state regardless of whether a Verification Service is up and running, until such time as the datacenter administrator is ready to run the provisioning step and link the Trust Agent to a Verification Service. To install the Trust Agent for Linux: Copy the Trust Agent installation binary to the /root/ directory. (Optional; required to perform Provisioning and Installation at the same time.) Create the trustagent.env answer file in the /root directory (for full configuration options, see section 9.2). The minimum configuration options for installation are provided below. For Platform Attestation only, provide the following in trustagent.env shell HVS_URL=https://<Verification Service IP or Hostname>:8443/hvs/v2 PROVISION_ATTESTATION=y GRUB_FILE=<path to grub.cfg> CURRENT_IP=<Trust Agent IP address> CMS_TLS_CERT_SHA384=<CMS TLS digest> BEARER_TOKEN=<Installation token from populate-users script> AAS_API_URL=https://<AAS IP or Hostname>:8444/aas CMS_BASE_URL=https://<CMS IP or Hostname>:8445/cms/v1 SAN_LIST=<Comma-separated list of IP addresses and hostnames for the TAgent matching the SAN list specified in the populate-users script; may include wildcards> For Workload Confidentiality with VM Encryption, add the following ( in addition to the basic Platform Attestation sample): shell WLA_SERVICE_USERNAME=<Username for the WLA service user> WLA_SERVICE_PASSWORD=<Username for the WLA service user> WLS_API_URL=https://<WLS IP address or hostname>:5000/wls/ For Workload Confidentiality with Docker Container Encryption, add the following ( in addition to the basic Platform Attestation sample): shell WLA_SERVICE_USERNAME=<Username for the WLA service user> WLA_SERVICE_PASSWORD=<Username for the WLA service user> WLS_API_URL=https://<WLS IP address or hostname>:5000/wls/ WA_WITH_CONTAINER_SECURITY=yes NO_PROXY=<Registry_ip> HTTPS_PROXY=<proxy_url> REGISTRY_SCHEME_TYPE=https Execute the Trust Agent installer and wait for the installation to complete. ./trustagent-v3.3.1.bin If the trustagent.env answer file was provided with the minimum required options, the Trust Agent will be installed and also Provisioned to the Verification Service specified in the answer file. If no answer file was provided, the Trust Agent will be installed, but will not be Provisioned. TPM-related functionality will not be available from the Trust Agent until the Provisioning step is completed. The Trust Agent will add a new grub menu entry for application measurement. This new entry will include tboot if the existing grub contains tboot as the default boot option. Note: If the Linux Trust Agent is installed without being Provisioned, the Trust Agent process will not actually run until the Provisioning step has been completed. Legacy BIOS systems using tboot ONLY) Update the grub boot loader: grub2-mkconfig -o /boot/grub2/grub.cfg After Provisioning is completed, the Linux Trust Agent must be rebooted so that the default SOFTWARE Flavor manifest can be measured and extended to the TPM. If the Workload Agent will also be installed on the system (see the next section), wait to reboot the server until after the Workload Agent has been installed, as this modifies the default SOFTWARE Flavor manifest. 3.10 Installing the Workload Agent 3.10.1 Required For Workload Confidentiality (both VMs and Docker Containers) 3.10.2 Supported Operating Systems The Intel\u00ae Security Libraries Workload Agent supports Red Hat Enterprise Linux 8.2 3.10.3 Prerequisites The following must be completed before installing the Workload Agent: Intel\u00ae SecL Trust Agent installed and active. cryptsetup (REQUIRED for Virtual Machine Confidentiality only): QEMU/KVM must be installed libvirt must be installed (REQUIRED for Docker Container Confidentiality only): Docker CE 19.03.13 must be installed Note : The specific Docker-CE version 19.03.13 is required for Docker Container Confidentiality. Only this version is supported for this use case. 3.10.4 Installation Copy the Workload Agent installation binary to the /root/ directory Verify that the trustagent.env answer file is present. This file was necessary for installing/provisioning the Trust Agent. Note that the additional content required for Workload Confidentiality with either VM Encryption or Docker Container Encryption must be included in the trustagent.env file (samples provided in the previous section) for use by the Workload Agent. Execute the Workload Agent installer binary. ./workload-agent-v3.3.1.bin (Legacy BIOS systems using tboot ONLY) Update the grub boot loader: grub2-mkconfig -o /boot/grub2/grub.cfg Reboot the server. The Workload Agent populates files that are needed for the default SOFTWARE Flavor, and a reboot is required for those measurements to happen. 3.12 Trust Agent Provisioning \"Provisioning\" the Trust Agent involves connecting to a Verification Service to download the Verification Service PrivacyCA certificate, create a new Attestation Identity Keypair in the TPM, and verify or create the TPM Endorsement Certificate and Endorsement Key. The Verification Service PrivacyCA root certificate is used to sign the EC, and the EC is used to generate the Attestation Identity Keypair. The AIK is used by the Verification Service to verify the integrity of quotes from the host\u2019s TPM. Provisioning can be performed separately from installation (meaning you can install the Trust Agent without Provisioning, and then Provision later). If the trustagent.env answer file is present and has the required Verification Service information during installation, the Agent will automatically run the Provisioning steps. Note: The trustagent.env answer file must contain user credentials for a user with sufficient privileges. The minimum role required for performing provisioning is the \"trustagent_provisioner\" role. Note: If the Linux Trust Agent is installed without being Provisioned, the Trust Agent process will not actually run until the Provisioning step has been completed. If the answer file is not present during installation, the Agent can be Provisioned later by adding the trustagent.env file and running the following command: tagent provision-attestation <trustagent.env or trustagent.ini file path> 3.13 Trust Agent Registration Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report. The Trust Agent can register the host with a Verification Service by running the following command (the trustagent.env or trustagent.ini answer file must be present in the current working directory): tagent create-host Hosts can also be registered using a REST API request to the Verification Service: POST <https://verification.service.com:8443/hvs/v2/hosts> { \"host_name\": \"<hostname of host to be registered>\" \"connection_string\": \"intel:https://<hostname or IP address>:1443\", \"flavorgroup_names\": [], \"description\": \"<description>\" } Note: When a new host is registered, the Verification Service will automatically attempt to match the host to appropriate Flavors. If appropriate Flavors are not found, the host will still be registered, but will be in an Untrusted state until/unless appropriate Flavors are added to the Verification Service. 3.14 Importing the HOST_UNIQUE Flavor RHEL and VMWare ESXi hosts have measured components that are unique to each host. This means that a special HOST_UNIQUE flavor part needs to be imported for each RHEL and ESXi host, in addition to any other OS or Platform Flavors. Note: Importing a Flavor requires user credentials for a user with sufficient privileges. The minimum role required for creating the HOST_UNIQUE Flavor part is the \u201chost_unique_flavor_creator\u201d role. This role can only create HOST_UNIQUE Flavor parts, and cannot create any other Flavors. On Red Hat Enterprise Linux hosts with the Trust Agent, this can be performed from the Trust Agent command line (this requires the trustagent.env answer file to be present in the current working directory): tagent create-host-unique-flavor This can also be performed using a REST API (required for VMWare ESXi hosts): POST https://verification.service.com:8443/hvs/v2/flavors { \"connection_string\": \"<Connection string>\", \"partial_flavor_types\": [\"HOST_UNIQUE\"] } 3.15 Installing the Integration Hub Note: The Integration Hub is only required to integrate Intel\u00ae SecL with third-party scheduler services, such as OpenStack Nova or Kubernetes. The Hub is not required for usage models that do not require Intel\u00ae SecL security attributes to be pushed to an integration endpoint. 3.15.1 Required For The Hub is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Containers) The Hub is OPTIONAL for the following use cases (used only if orchestration or other integration support is needed): Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity 3.15.2 Deployment Architecture Considerations for the Hub A separate Hub instance is REQUIRED for each Cloud environment (also referred to as a Hub \"tenant\"). For example, if a single datacenter will have an OpenStack cluster and also two separate Kubernetes clusters, a total of three Hub instances must be installed, though additional instances of other Intel SecL services are not required (in the same example, only a single Verification Service is required). Each Hub will manage a single orchestrator environment. Each Hub instance should be installed on a separate VM or physical server 3.15.3 Prerequisites The Intel\u00ae Security Libraries Integration Hub can be run as a VM or as a bare-metal server. The Hub may be installed on the same server (physical or VM) as the Verification Service. The Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available (REQUIRED for Kubernetes integration only) The Intel SecL Custom Resource Definitions must be installed and available (see the Integration section for details) 3.15.4 Package Dependencies The Intel\u00ae SecL Integration Hub requires a number of packages and their dependencies: If these are not already installed, the Integration Hub installer attempts to install these packages automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update your repository package lists before installation. 3.15.5 Supported Operating Systems The Intel Security Libraries Integration Hub supports Red Hat Enterprise Linux 8.2 3.15.6 Recommended Hardware 1 vCPUs RAM: 2 GB 1 GB free space to install the Verification Service services. Additional free space is needed for the Attestation Hub database and logs (database and log space requirements are dependent on the number of managed servers). One network interface with network access to the Verification Service. One network interface with network access to any integration endpoints (for example, OpenStack Nova). 3.15.7 Installing the Integration Hub To install the Integration Hub, follow these steps: Copy the Integration Hub installation binary to the /root directory. Create the ihub.env installation answer file. See the sample file below. # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME = <Username for the Hub service user> IHUB_SERVICE_PASSWORD = <Password for the Hub service user> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = <TLS hash> # TLS Configuration TLS_SAN_LIST = 127 .0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL = https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE = HVS #Integration tenant type. Currently supported values are \"KUBENETES\" or \"OPENSTACK\" TENANT = <KUBERNETES or OPENSTACK> # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_AUTH_URL = <OpenStack Keystone URL ; typically http://openstack-ip:5000/> OPENSTACK_PLACEMENT_URL = <OpenStack Nova API URL ; typically http://openstack-ip:8778/> OPENSTACK_USERNAME = <OpenStack username> OPENSTACK_PASSWORD = <OpenStack password> # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL = https://kubernetes:6443/ KUBERNETES_CRD = custom-isecl KUBERNETES_CERT_FILE = /etc/ihub/apiserver.crt KUBERNETES_TOKEN = eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 3. Execute the installer binary. ./ihub-v3.3.1.bin After installation, the Hub must be configured to integrate with a Cloud orchestration platform (for example, OpenStack or Kubernetes). See the Integration section for details. 3.16 Installing the Key Broker Service 3.16.1 Required For The KBS is REQUIRED for the following use cases: Workload Confidentiality (both VMs and Docker Containers) 3.16.2 Prerequisites The following must be completed before installing the Key Broker: The Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available (Recommended; Required if a 3 rd -party Key Management Server will be used) A KMIP 2.0-compliant 3 rd -party Key management Server must be available. The Key Broker will require the KMIP server\u2019s client certificate, client key and root ca certificate. The Key Broker uses the libkmip client to connect to a KMIP server The Key Broker has been validated using the pykmip 0.9.1 KMIP server as a 3 rd -party Key Management Server. While any general KMIP 2.0-compliant Key Management Server should work, implementation differences among KMIP providers may prevent functionality with specific providers. 3.16.3 Package Dependencies 3.16.4 Supported Operating Systems The Intel\u00ae Security Libraries Key Broker Service supports Red Hat Enterprise Linux 8.2 3.16.5 Recommended Hardware 3.16.6 Installation Copy the Key Broker installation binary to the /root/ directory. Create the installation answer file kbs.env: AAS_API_URL = https://<AAS IP or hostname>:8444/aas CMS_BASE_URL = https://<CMS IP or hostname>:8445/cms/v1/ ENDPOINT_URL = https://<KBS IP or hostname>:9443/kbs/v1/ SAN_LIST = <comma-separated list of hostnames and IP addresses for the Key Broker> CMS_TLS_CERT_SHA384 = <SHA384 hash of CMS TLS certificate> BEARER_TOKEN = <Installation token from populate-users script> ### OPTIONAL - KMIP configuration only KEY_MANAGER = KMIP KMIP_SERVER_IP = <IP address of KMIP server> KMIP_SERVER_PORT = <Port number of KMIP server> ### Retrieve the following certificates and keys from the KMIP server KMIP_CLIENT_KEY_PATH = <path>/client_key.pem KMIP_ROOT_CERT_PATH = <path>/root_certificate.pem KMIP_CLIENT_CERT_PATH = <path>/client_certificate.pem Execute the KBS installer. ./kbs-3.3.0.bin 3.16.6.1 Configure the Key Broker to use a KMIP-compliant Key Management Server The Key Broker can be configured to use a 3 rd -party KMIP key manager as part of installation using optional kbs.env installation variables. Without using these variables, the Key Broker will be configured to use a filesystem key management solution. This should be used only for testing and POC purposes; using a secure 3 rd -party Key management Server should be used for production deployments. To configure the Key Broker to point to a 3 rd -party KMIP-compliant Key Management Server: Copy the KMIP server\u2019s client certificate, client key and root ca certificate to the Key Broker system Change the ownership of these files to kms:kms chown kms:kms <path>/* Configure the variables for kmip support as below kbs config key.manager.provider com.intel.kbs.keystore.kmip.KMIPKeyManager kbs config kmip.server.address <IP> kbs config kmip.server.port <PORT> kbs config kmip.ca.certificates.path <path to kmip ca certificate> kbs config kmip.client.certificate.path <path to kmip client certificate> kbs config kmip.client.key.path <path to kmip client key> Restart the Key Broker for the settings to take effect kbs stop kbs start 3.16.7 Importing Verification Service Certificates After installation, the Key Broker must import the SAML and PrivacyCA certificates from any Verification Services it will trust. This provides the Key Broker a way to ensure that only attestations that come from a \u201cknown\u201d Verification Service. The SAML and PrivacyCA certificates needed can be found on the Verification Service. 3.16.7.1 Importing a SAML certificate Display the SAML certificate: cat /etc/hvs/certs/trustedca/saml-crt.pem Use the SAML certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:9443/kbs/v1/saml-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIID9TCCAl2gAwIBAgIBCTANBgkqhkiG9w0BAQwFADBQMQswCQYDVQQGEwJVUzEL MAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEXMBUGA1UE AxMOQ01TIFNpZ25pbmcgQ0EwHhcNMTkxMjExMTkzOTU1WhcNMjAxMjExMTkzOTU1 WjAYMRYwFAYDVQQDEw1tdHdpbHNvbi1zYW1sMIIBojANBgkqhkiG9w0BAQEFAAOC AY8AMIIBigKCAYEArbrDpzR4Ry0MVhSJULHZoiVL020YqtyRH+R2NlVXTpJzqmEA Ep2utfcP8+mSCT7DLpGBO6KACPCz3pmqj3wZyqZNTrG7IF2Z4Fuf641fPcxA3WVH 3lXz0L5Ep4jOUdfT8kj4hHxHJVJhDsW4J2fds2RGnn8bZG/QbmmGNRfqdxht0zMh 63ik8jBWNWHxYSRbck27FyTj9hDU+z+rFfIdNv1SiQ9FyndgOytK/m7ijoAetkSF bCsauzUL7DFdRzTmB2GCF/Zd957V51GNpvan6uwqDTL6T4NFX2sqoVduu/WIyTpO /6D2aA741CR3Bmk9945TSeDKZNz2HkihuE+d8ES68W1t4rvox/Noi74e0k35AqcQ Q3P0DZpD+XaRapz5CHcOPwOpZ3A/8wN2f+CS2HqDx8FwABkh7l8OdiIWs8+TDQZe 1x4e/50jE/8zMR/tsAy1EXkm3OTOVxih0u18J84x4OT+rHAIcoQ+TOJ40aHrWGHg kVCfiCUzYYT/W/RBAgMBAAGjEjAQMA4GA1UdDwEB/wQEAwIGwDANBgkqhkiG9w0B AQwFAAOCAYEAP/ABHdPquBNrMOCU+v7SfMLmIfJymA15mCorMEiKZ1d7oNnoPP0G pfyRA4TUiyFLCOLi4jIXWuu4Lt6RUz6bnzn8JRWD5ocIJGGxWjOA66xyS3o9iG7G otOh1pzp5wlwPG7r8ZJ7Q26J+NuHpN1GW5U5Vjww1J9rEKnsKp45QHkG2nXEujdx YXmKXtEG2gOMVjaLiqromf6VxbdNoKHZGEfqU3H5ymMgqIrnXl3MivA30CymCDLl rJGRQSwOfzywPCnUOAVptBwLs2kwOtdvnq+BTK3q/dKKoNiFURj/mQ70egquW9ly TOkYivmKqMZxZlq0//cre4K35aCW3ZArzGgNM8Pk0V/hZp8ZHrWLNAdo4w/Pj1oC Yq7R0RQ8jQerkewYBfrv3O3e9c22h48fsHnun6F3sbcDjws/sWJIOcrPyqJE26HY DmIKpvjqc0jI31ndBBwkb+RIBFkz1Ycob9rsW16uVqbjBFDjJ5QKOdXxhqulyboa JAF53vmU+1jE -----END CERTIFICATE----- 3.16.7.2 Importing a PrivacyCA Certificate Use OpenSSL to display the PrivacyCA certificate content: openssl x509 -in /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem Use the PrivacyCA certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:9443/kbs/v1/tpm-identity-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIIHaDCCBdCgAwIBAgIGAW72eWZ9MA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMT EG10d2lsc29uLXBjYS1haWswHhcNMTkxMjExMTkzOTQxWhcNMjkxMjEwMTkzOTQx WjAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlrMIIBojANBgkqhkiG9w0BAQEF AAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4YiHtueWBdW0sibtH1QRSbI KtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSUnn07xjWJRP1EcvSaufO1 MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwuattxTelpmgucDp98MqW/ uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337yx3VBK59Dwtsmfsrd5tMn IuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y3saXeNBDg9J363imOHIH haP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZloxJzcNgtimQw3RbyrB3C KijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwCQNnBP4UJXwAflO7COG7P mpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqvtTVtFX+oRWRsgaEdxKf7 LJx4aIjXwP2s6PIiOSalAgMBAAGjggOwMIIDrDCCAbMGA1UdDgSCAaoEggGmMIIB ojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4Yi HtueWBdW0sibtH1QRSbIKtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSU nn07xjWJRP1EcvSaufO1MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwu attxTelpmgucDp98MqW/uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337y x3VBK59Dwtsmfsrd5tMnIuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y 3saXeNBDg9J363imOHIHhaP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZl oxJzcNgtimQw3RbyrB3CKijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwC QNnBP4UJXwAflO7COG7Pmpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqv tTVtFX+oRWRsgaEdxKf7LJx4aIjXwP2s6PIiOSalAgMBAAEwDwYDVR0TAQH/BAUw AwEB/zCCAeAGA1UdIwSCAdcwggHTgIIBpjCCAaIwDQYJKoZIhvcNAQEBBQADggGP ADCCAYoCggGBAJlqga9mIsnGWxf0IBW8U6+GIh7bnlgXVtLIm7R9UEUmyCrZGxbJ q+iekIiwWl3BeylTeg2g9I+bFOHGUrbaisJUlJ59O8Y1iUT9RHL0mrnztTGq3sIA aRUHCNk+mk7Nc4le+waCs9JFrXlEc9Y09SksLmrbcU3paZoLnA6ffDKlv7lrJYh1 FcYedSUxNcp+1X9UAls92vjQx/fC4K+ZLN9+8sd1QSufQ8LbJn7K3ebTJyLlfScN GNlBHQ4tNOBVyOKuuDLDKVgO7eTjUQFPlTVNGN7Gl3jQQ4PSd+t4pjhyB4Wj/IsQ 4amfl2/0xmn4BXhBwZCU7+m1qQ6qHW1lQ24GZaMSc3DYLYpkMN0W8qwdwioo5RKO QUGOmznHTBu4Aqu+7v32zry2+SF80vGQ6cLsAkDZwT+FCV8AH5Tuwjhuz5qY/W01 dTrRYj7WBXOCXRnWn9T5ds1hnkdHNzyM2EMar7U1bRV/qEVkbIGhHcSn+yyceGiI 18D9rOjyIjkmpQIDAQABoR+kHTAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlr ggYBbvZ5Zn0wDQYJKoZIhvcNAQELBQADggGBAC3PEB8Av0PBJgrJMxzMbuf1FCdD AUrfYmP81Hs0/v70efviMEF2s3GAyLHD9v+1nNFCQrjcNCar18k45BlcodBEmxKA DZoioFykRtlha6ByVvuN6wD93KQbKsXPKhUp8X67fLuOcQgfc3BoDRlw/Ha1Ib6X fliE+rQzLCOgClK7ZdTwl9Ok0VbR7Mbal/xShIqr2WopjBtal9p4RsnIxilTHI+m qzbV8zvZXYfYtEb3MMMT5EnjIV8O498KKOjxohD2vqaxqItd58pOi6z/q5f4pLHc DvdsJecJEoWb2bxWQdBgthMjX6AUV/B5G/LTfaPwVbTLdEc+S6Nrobf/TFYV0pvG OzF3ltYag0fupuYJ991s/JhVwgJhCGq7YourDGkNIWAjt0Z2FWuQKnxWvmResgkS WTeXt+1HCFSo5WcAZWV8R9FYv7tzFxPY8aoLj82sgrOE4IwRqaA8KMbq3anF4RCk +D8k6etqMcNHFS8Fj6GlCd80mb4Q3sxuCiBvZw== -----END CERTIFICATE----- 3.17 Installing the Workload Policy Manager 3.17.1 Required For The WPM is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Docker Containers) 3.17.2 Package Dependencies (Required only if Docker Container encryption is needed) Docker-ce 19.03.13 must be installed. This is needed only if the option WPM_WITH_CONTAINER_SECURITY=yes is set in the wpm.env answer file. 3.17.3 Supported Operating Systems The Intel\u00ae Security Libraries Workload Policy Manager supports Red Hat Enterprise Linux 8.2. 3.17.4 Recommended Hardware 2 vCPUs RAM: 8 GB 100 GB One network interface with network access to the Key Broker and Workload Service Additional memory and disk space may be required depending on the size of images to be encrypted 3.17.5 Installation Copy the WPM installer to the /root directory Create the wpm.env answer file: KMS_API_URL = https://<IP address or hostname of the KBS>:9443/v1/ WPM_SERVICE_USERNAME = <WPM_Service username from populate-users script> WPM_SERVICE_PASSWORD = <WPM Service password from populate-users script> CMS_TLS_CERT_SHA384 = <Sha384 hash of the CMS TLS certificate> CMS_BASE_URL = https://<IP address or hostname for CMS>:8445/cms/v1/ AAS_API_URL = https://<Hostname or IP address of the AAS>:8444/aas BEARER_TOKEN = <Installation token from populate-users script> For Docker Container Encryption only, add the following line to the wpm.env installation answer file: WPM_WITH_CONTAINER_SECURITY = yes Execute the WPM installer: ./wpm-v3.3.1.bin 4 Authentication Beginning in the Intel\u00ae SecL-DC 1.6 release, authentication is centrally managed by the Authentication and Authorization Service (AAS). This service uses a Bearer Token authentication method, which replaces the previous HTTP BASIC authentication. This service also centralizes the creation of roles and users, allowing much easier management of users, passwords, and permissions across all Intel\u00ae SecL-DC services. To make an API request to an Intel\u00ae SecL-DC service, an authentication token is now required. API requests must now include an Authorization header with an appropriate token: Authorization: Bearer $TOKEN The token is issued by the AAS and will expire after a set amount of time. This token may be used with any Intel\u00ae SecL-DC service, and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for. 4.1 Create Token To request a new token from the AAS: POST https://<AAS IP or hostname>:8444/aas/token { \"username\" : \"<username>\", \"password\" : \"<password>\" } The response will be a token that can be used in the Authorization header for other requests. The length of time for which the token will be valid is configured on the AAS using the key AAS\\_JWT\\_TOKEN\\_DURATION\\_MINS (in the installation answer file during installation) or aas.jwt.token.duration.mins (configured on the AAS after installation). In both cases the value is the length of time in minutes that issued tokens will remain valid before expiring. 4.2 User Management Users in Intel\u00ae SecL-DC are no longer restrained to a specific service, as they are now centrally managed by the Authentication and Authorization Service. Any user may now be assigned roles for any service, allowing user accounts to be fully defined by the tasks needed. 4.2.1 Username and Password requirements Passwords have the following constraints: cannot be empty - i.e must at least have one character maximum length of 255 characters Usernames have the following requirements: Format: username[@host_name[domain]] [@host_name[domain]] is optional username shall be minimum of 2 and maximum of 255 characters username allowed characters are alphanumeric, ., -, _ - but cannot start with -. Domain name must meet requirements of a host name or fully qualified internet host name Examples admin, admin_wls, admin@wls, admin@wls.intel.com , wls-admin@intel.com 4.2.2 Create User POST https://<IP or hostname of AAS>:8444/aas/users Authorization: Bearer <token> { \"username\" : \"<username>\", \"password\" : \"<password>\" } 4.2.3 Search User GET https://<IP or hostname of AAS>:8444/aas/users?<parameter>=<value> Authorization: Bearer <token> 4.2.4 Change User Password PATCH https://<IP or hostname of AAS>:8444/aas/users/changepassword Authorization: Bearer <token> { \"username\": \"<username>\", \"old_password\": \"<old_password>\", \"new_password\": \"<new_password>\", \"password_confirm\": \"<new_password>\" } 4.2.5 Delete User DELETE https://<IP or hostname of AAS>:8444/aas/users/<User ID> Authorization: Bearer <token> 4.3 Roles and Permissions Permissions in Intel\u00ae SecL-DC are managed by Roles. Roles are a set of predefined permissions applicable to a specific service. Any number of Roles may be applied to a User. While new Roles can be created, each Intel\u00ae SecL service defines permissions that are applicable to specific predetermined Roles. This means that only pre-defined Roles will actually have any permissions. Role creation is intended to allow Intel\u00ae SecL-DC services to define their permissions while allowing role and user management to be centrally managed on the AAS. When a new service is installed, it will use the Role creation functions to define roles applicable for that service in the AAS. 4.3.1 Create Role POST https://<AAS IP or Hostname>:8444/aas/roles Authorization: Bearer <token> { \"service\": \"<Service name>\", \"name\": \"<Role Name>\", \"permissions\": [<array of permissions>] } service field contains a minimum of 1 and maximum of 20 characters. Allowed characters are alphanumeric plus the special charecters -, _, @, ., , name field contains a minimum of 1 and maximum of 40 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , service and name fields are mandatory context field is optional and can contain up to 512 characters. Allowed characters are alphanumeric plus -, _, @, ., ,,=,;,:,* permissions field is optional and allow up to a maximum of 512 characters. The Permissions array must a comma-separated list of permissions formatted as resource:action: Permissions required to execute specific API requests are listed with the API resource and method definitions in the API documentation. 4.3.2 Search Roles GET https://<AAS IP or Hostname>:8444/aas/roles?<parameter>=<value> Authorization: Bearer <token> Search parameters supported: Service=<name of service> Name=<role name> Context=<context> contextContains=<partial \"context\" string> allContexts=<true or false> filter=false 4.3.3 Delete Role DELETE https://<AAS IP or Hostname>:8444/aas/roles/<role ID> Authorization: Bearer <token> 4.3.4 Assign Role to User POST https://<AAS IP or Hostname>:8444/aas/users/<user ID>/roles Authorization: Bearer <token> { \"role_ids\": [\"<comma-separated list of role IDs>\"] } 4.3.5 List Roles Assigned to User GET https://<AAS IP or Hostname\\>:8444/aas/users/<user ID>/roles Authorization: Bearer <token> 4.3.6 Remove Role from User DELETE https://<AAS IP or Hostname>:8444/aas/users/<userID>/roles/<role ID> Authorization: Bearer <token> 4.3.7 Role Definitions The following roles are created during installation (or by the CreateUsers script) and exist by default. Role Name Permissions Utility TA:Administrator TA:*:* Used by the Verification Service to access Trust Agent APIs, including retrieval of TPM quotes, provisioning Asset Tags and SOFTWARE Flavors, etc. HVS:ReportSearcher HVS: [reports:search:*\"] Used by the Integration Hub to retrieve attestation reports from the Verification Service KMS:Keymanager KBS: [\"keys:create:*\", \"keys:transfer:*\"] Used by the WPM to create and retrieve symmetric encryption keys to encrypt workload images WLS:FlavorsImageRetrieval WLS: image_flavors:retrieve:* Used by the Workload Agent during Workload Confidentiality flows to retrieve the image Flavor HVS: ReportCreator HVS: [\"reports:create:*\"] Used by the Workload Service to create new attestation reports on the Verification Service as part of Workload Confidentiality key retrievals. Administrator *:*:* Global administrator role used for the initial administrator account. This role has all permissions across all services, including permissions to create new roles and users. AAS: Administrator *:*:* Administrator role for the AAS only. Has all permissions for AAS resources, including the ability to create or delete users and roles. AAS: RoleManager AAS: [roles:create:*, roles:retrieve:*, roles:search:*, roles:delete:*] AAS role that allows all actions for Roles, but cannot create or delete Users or assign Roles to Users. AAS: UserManager AAS: [users:create:*, users:retrieve:*, users:store:*, users:search:*, users:delete:*] AAS role with all permissions for Users, but has no ability to create Roles or assign Roles to Users. AAS: UserRoleManager AAS: [user_roles:create:*, user_roles:retrieve:*, user_roles:search:*, user_roles:delete:*, AAS role with permissions to assign Roles to Users, but cannot create delete or modify Users or Roles. HVS: AttestationRegister HVS: [host_tls_policies:create:*, hosts:create:*, hosts:store:*, hosts:search:*, host_unique_flavors:create:*, flavors:search:*, tpm_passwords:retrieve:*, tpm_passwords:create:*, host_aiks:certify:* Role used for Trust Agent provisioning. Used to create the installation token provided during installation. HVS: Certifier HVS: host_signing_key_certificates:create:* Used for installation of the Workload Agent 5 Connection Strings Connection Strings define a remote API resource endpoint that will be used to communicate with the registered host for retrieving TPM quotes and other host information. Connection Strings differ based on the type of host. 5.1 Trust Agent The Trust Agent connection string connects directly to the Trust Agent on a given host. The Verification Service will use a service account with the needed Trust Agent permissions to connect to the Trust Agent. In previous Intel\u00ae SecL versions, each Trust Agent had its own unique user access controls. Starting in the 1.6 release, all authentication has been centralized with the new Authentication and Authorization Service, eliminating the need for credentials to be provided for connection strings connecting to Trust Agent resources. intel:https://<HostNameOrIp>:1443 5.2 VMware ESXi 5.2.1 Importing VMware TLS Certificates Before connecting to vCenter to register hosts or clusters, the vCenter TLS certificate needs to be imported to the Verification Service. This must be done for each vCenter server that the Verification Service will connect to, for importing Flavors or registering hosts. Download the root CA certs from vCenter: ```shell wget --no-proxy \"*\" https:// /certs/download.zip --no-check-certificate This downloads all the root CA certificates for you into `download.zip` file. ```shell unzip download.zip All of the certificates will be stored under <pwd>/certs/ . Certs will be in PEM format. Upload the certificates to the HVS POST https://%3CIP%3E:8443/hvs/v2/ca-certificates { \"name\": \"<cert name>\", \"type\": \"root\", \"certificate\": \"MIIELTCCAxW...\" } Note Please make sure that the certificate does not contain any other characters other than the base64 characters like that of \\n or -----BEGIN CERTIFICATE----- etc. After upload is successful, restart the HVS hvs restart 5.2.2 Registering a VMware ESXi Host The VMware ESXi connection string is actually directed to vCenter, not the actual ESXi host. Many ESXi hosts managed by the same vCenter server will use the same connection string. The username and password specified are vCenter credentials, and the vCenter \"Validate Session\" privilege is required for access. vmware:https://<vCenterHostNameOrIp>:443/sdk ; h = <hostname of ESXi host> ; u = <username> ; p = <password> 6 Platform Integrity Attestation Platform attestation is the cornerstone use case for ISecL. Platform attestation involves taking measurements of system components during system boot, and then cryptographically verifying that the actual measurements taken matched a set of expected or approved values, ensuring that the measured components were in an acceptable or \" trusted \" state at the time of the last system boot. ISecL leverages the Trusted Compute Group specification for a trusted boot process, extending measurements of platform components to registers in a Trusted Platform Module, and securely generating quotes of those measurements from the TPM for remote comparison to expected values (attestation). This section includes basic REST API examples for these workflows. See the Javadoc for more detailed documentation on REST APIs supported by ISecL. Typical workflows in the datacenter might include: Creating a set of acceptable flavors for attestation with automatic flavor matching that represent the known-good measurements for acceptable BIOS and OS versions in the datacenter Registering hosts for attestation with automatic flavor matching Upgrading hosts in the datacenter to a new BIOS or OS version Removing hosts from the Verification Service Removing flavors Provisioning asset tags to hosts Invalidating asset tags Retrieving current attestation reports Retrieving current host state information Remediating an untrusted attestation 6.1 Host Registration Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report. 6.1.1 Trust Agent 6.1.1.1 Registration via Trust Agent Command Line The Trust Agent can register the host with a Verification Service by running the following command: tagent create-host <Verification Service base URL> <username> <password> Note : Because VMWare ESXi hosts do not use a Trust Agent, this method is not applicable for registration of ESXi hosts. 6.1.2 Registration via Verification Service API Any Trust Agent or VMware ESXi host/cluster can be registered using a Verification Service API request. Registration can be performed with or without a set of existing Flavors. Rules for Flavor matching can be set by using the Flavor Group in the request; if no Flavor Group is specified, the mtwilson_automatic Flavor Group will be used. See the Flavor Management section for additional details on Flavors, Flavor Groups, and Flavor matching. 6.1.2.1 Special Note for VMware ESXi Hosts and the vCenter TLS Certificate 6.1.2.2 Sample Call POST https://verification.service.com:8443/hvs/v2/hosts Authorization: Bearer <token> { \"host_name\": \"<hostname of host to be registered>\", \"connection_string\": \"<connection string>\", \"flavorgroup_name\" : \"\", \"description\" : \"<description>\" } Requires the permission hosts:create 6.1.2.3 Sample Call for ESXi Cluster Registration POST https://verification.service.com:8443/hvs/v2/hosts Authorization: Bearer <token> { \" esxi_clusters\": [ { \"connection_string\": \"<password>\", \"cluster_name\": \"<cluster name>\" } ] } Requires the permission esxi_clusters:create 6.2 Flavor Creation for Automatic Flavor Matching Flavor creation is the process of adding one or more sets of acceptable measurements to the Verification Service database. These measurements correspond to specific system components, and are used as the basis of comparison to generate trust attestations. Flavors can be created manually, or can be imported from an example host. Flavors are automatically matched to hosts based on the Flavorgroup used by the host and the Flavors, and the Flavor Match Policies of the Flavorgroup. The ISecL Verification Service creates a default Flavorgroups during installation called \" automatic \" This Flavorgroup is configured to be used as a pool of all acceptable Flavors in a given environment, and will automatically match the appropriate Flavor parts to the correct host. This Flavorgroup is used by default and is expected to be useful for the majority of deployments. If no Flavorgroup is specified when creating a Flavor, it will be placed in the \" automatic \" Flavorgroup. Flavors are also divided into Flavor parts, which correspond to the PLATFORM , OS , HOST_UNIQUE , SOFTWARE , and ASSET_TAG measurements. These can be created and maintained separately (so that users can manage acceptable OS and BIOS versions, rather than entire host configurations). By default, if not specified, the Verification Service will import Flavors as separate Flavor parts, as appropriate for the host type. By using individual Flavor parts, individual versions of OS or PLATFORM measurements can be managed and automatically mapped. Whenever a host changes states (Untrusted, Connected, etc.) the Verification Service will attempt to match appropriate Flavors to that host. If a Flavor is removed or added, all appropriate hosts will be updated to use the new Flavor, or to no longer use the deleted Flavor. Hosts that are currently using a BIOS where that BIOS versions\u2019 PLATFORM Flavor was deleted will now appear Untrusted, for example. This can be used to easily flag as Untrusted hosts that are using software that has been End-Of-Lifed, or perhaps an OS kernel with a known security vulnerability. Note : See the Flavor Management section for additional details on how flavors can be managed, and how the Flavor matching engine works. The sample workflow provided here is intended to be an introduction only. 6.2.1 Importing a Flavor from a Sample Host POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"PLATFORM\", \"OS\", \"HOST_UNIQUE\"], \"flavorgroup_names\": [] } Requires the permission flavors:create Note :The HOST_UNIQUE Flavor parts, used by Red Hat Enterprise Linux and VMWare ESXi host types, MUST be created for each registered host of that type, and should in general be imported from that host. This means that importing the HOST_UNIQUE flavor should always be done for each host registered. To import ONLY the HOST_UNIQUE Flavor part from a host: POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"HOST_UNIQUE\"], flavorgroup_names\": [] } Requires the permission flavors:create 6.2.2 Creating a Flavor Manually Flavors can be directly created (rather than importing from a sample host) if the required information is known. If no Flavorgroup is specified, the Flavor will be placed in the automatic group. Note that the label is a required field and must be unique. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"\", \"flavor_collection\": { \"flavors\": [ { \"meta\": { \"vendor\": \"INTEL\", \"description\": { \"flavor_part\": \"PLATFORM\", \"label\": \"Intel Corporation_SE5C610.86B.01.01.1008.031920151331_TPM2.0\", \"bios_name\": \"Intel Corporation\", \"bios_version\": \"SE5C620.86B.00.01.0004.071220170215\", \"tpm_version\": \"2.0\" } }, \"hardware\": { \"processor_info\": \"\u2026\", \"processor_flags\": \"\u2026\", \"feature\": { \"tpm\": { \"enabled\": true, \"pcr_banks\": [ \"SHA1\", \"SHA256\" ] }, \"txt\": { \"enabled\": true } } }, \"pcrs\": { \"SHA1\": { \"pcr_0\": { \"value\": \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\": { \"value\": \"1ec12004b371e3afd43d04155abde7476a3794fa\", \"event\": ... } Requires the permission flavors:create 6.3 Creating the Default SOFTWARE Flavor (Linux Only) As part of the new Application Integrity feature added in Intel\u00ae SecL-DC version 1.5, a new default SOFTWARE Flavor part is provided so that the Linux Trust Agent itself can be measured and included in the attestation process. The default SOFTWARE Flavor includes a manifest for the static files and folders in the Trust Agent. The manifest is automatically deployed to each Linux Trust Agent during the provisioning step. Note : The Linux Trust Agent must be rebooted after the Provisioning step is completed (typically Provisioning happens during installation, based on whether all of the required variables are set in the trustagent.env file). Rebooting allows the default SOFTWARE Flavor manifest to be measured and extended to the TPM PCRs. If the reboot is not performed, the system will require a SOFTWARE Flavor, but the measurements will not exist, and the system will appear Untrusted. If an un-rebooted host is used to create the SOFTWARE Flavor, the Flavor will be created based on measurements that do not exist, and will fail. The SOFTWARE Flavor part should be created separately from the other Flavor parts. Only one default SOFTWARE Flavor needs to be created for each version of the Linux Trust Agent. If the SOFTWARE Flavor for the same Trust Agent version is imported multiple times, subsequent imports will fail as the Flavor already exists. To import the SOFTWARE Flavor part from a host: POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"SOFTWARE\"], flavorgroup_names\": [] } Requires the permission flavors:create 6.4 Creating and Provisioning Asset Tags Asset Tags represent a set of key/value pairs that can be associated with a host in hardware. This enables usages around restricting workflows to specific hosts based on tags, which could include location information, compliance tags, etc. ISecL creates Asset Tags by creating a certificate containing the list of key/value pairs to be tagged to the host, with the host\u2019s hardware UUID as the certificate subject. A hash of this certificate is then written to an NVRAM index in the host\u2019s TPM. This value is included in TPM quotes, and can be attested using an Asset Tag flavor that matches up the expected value and the actual key/value pairs. 6.4.1 Creating Asset Tag Certificates Asset Tag certificates can be created with a single REST API call, with any number of key/value pairs. Note that one certificate must be created for each host to be tagged, even if they will all be tagged with identical key/value pairs. POST https://verification.service.com:8443/hvs/v2/tag-certificates Authorization: Bearer <token> { \"hardware_uuid\": \"<hardware UUID of host to be tagged>\", \"selection_content\": [ { \"name\": \"<key>\", \"value\": \"<value>\" }, { \"name\": \"<key>\", \"value\": \"<value>\" }, { \"name\": \"<key>\", \"value\": \"<value>\" } ] } 6.4.2 Deploying Asset Tags 6.4.2.1 Red Hat Enterprise Linux Asset Tags can be provisioned to a Windows or RHEL host via a REST API request on the Verification Service that will in turn make a request to the Trust Agent on the host to be tagged. POST https://verification.service.com:8443/hvs/v2/rpc/deploy-tag-certificate Authorization: Bearer <token> { \"certificate_id\": \"<certificate ID>\" } 6.4.2.2 VMWare Since VMWare ESXi hosts do not use a Trust Agent, the process for writing Asset Tags to a VMWare host is different from RHEL. A new interface has been added to ESXi via a new esxcli command starting in vSphere 6.5 Update 2 that allows the Asset Tag information to be written to the TPM via a command-line command. The older process is also described below. The high-level workflow for using Asset Tags with VMWare ESXi is: Create the Asset Tag Certificate for the host. Calculate the Certificate Hash value. Provision the Certificate Hash value to the host TPM and reboot Create the Asset Tag Flavor. Note : Asset Tag is currently not supported for VMWare hosts using TPM 2.0. 6.4.2.2.1 Calculate the Certificate Hash Value Only the hash value of the Asset Tag Certificate can be provisioned to the TPM, due to the low size of the NVRAM. Retrieve the Asset Tag Certificate. The Asset Tag Certificate can be retrieved either from the response when the Asset Tag certificate is created, or by using a GET API request to retrieve the certificate: GET https://verification.service.com:8443/hvs/v2/tag-certificates?subjectEqualTo=<HardwareUUID> Authorization: Bearer <token> Copy only the certificate value (this will be the certificate in encoded format) and write the data to a file on a Linux system. Remove any line breaks and save the file. Assuming the filename used is tag-cert use the following to generate the correct hash: cat tag-cert | base64 --decode | openssl dgst -sha1 | awk -F \" \" '{print $2}' This hash value will be what is actually written to the TPM NVRAM. 6.4.2.2.2 Provision the Certificate Hash to the Host TPM Due to a new feature added in vSphere 6.5 Update 2, the process for provisioning Asset Tags on VMWare ESXi hosts has been significantly improved. Both the old and new process for provisioning Asset Tags is documented below. Intel recommends using vSphere 6.5 Update 2 or later due to the significant difference in the process. vSphere 6.5 Update 2 or Later Starting in ESXi 6.5u2, you can now use SSH to write Asset Tags directly with no need for TPM clears, reboots, PXE, or BIOS access. SSH to the ESXi host using root credentials. Then use the command: ```shell esxcli hardware tpm tag set -d You can use the following command to verify that the tag was written: ```shell esxcli hardware tpm tag get Reboot the host. After rebooting, the TPM PCR 22 will have the measured value of the hash. vSphere 6.5 Update 1 or Older There is no direct interface from VMWare vCenter or ESXi previous to vSphere 6.5 Update 2 that will write the Tag information to the host TPM. Writing Asset Tag information to a TPM requires TPM ownership; VMWare ESXi takes TPM ownership with a secret password at boot time. This means that the process for writing Asset Tags to a VMWare host requires: Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Booting to an OS that has the ability to issue TPM commands Typically the provisioning OS used is Ubuntu or RHEL, booted temporarily using PXE. Writing the Tag information The TPM index 0x40000010 must be defined, and the hash of the Asset Tag certificate must be written to that index. Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Boot back to VMWare ESXi. When the system is rebooted to ESXi, the Trusted Boot process will extend the value to PCR22, and this value can be used during attestation. 6.4.2.2.3 Creating the Asset Tag Flavor (VMWare ESXi Only) While for RHEL and Windows hosts the Asset Tag Flavor is automatically created during the Tag Provisioning step, for VMWare ESXi hosts the Flavor must be created by importing it from the host after the Tag has been provisioned. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<VMWare vCenter connection string>\", \"partial_flavor_types\": [\"ASSET_TAG\"] } Once the Asset Tag Flavor is imported, the host can be attested including Asset Tags as normal. 6.5 Retrieving Current Attestation Reports GET https://verification.service.com:8443/hvs/v2/reports?latestPerHost=true Authorization: Bearer <token> 6.6 Retrieving Current Host State Information GET https://verification.service.com:8443/hvs/v2/host-status?latestPerHost=true Authorization: Bearer <token> 6.7 Upgrading Hosts in the Datacenter to a New BIOS or OS Version Software and firmware updates are a common occurrence in the datacenter. Automatic Flavor matching makes this process relatively simple: Create a new Flavor for the new version. This may be manually created or imported directly from a sample host that has already received the upgrade. Be sure to create new Flavors for each TPM version represented in your datacenter. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"PLATFORM\", \"OS\", \"HOST_UNIQUE\"], flavorgroup_names\": [] } Update the hosts to the new software or firmware version as normal. On the next attestation attempt, the Verification Service will automatically match the updated hosts to the new Flavor. (Optional) If desired, delete the Flavor for the older version after the update is completed. This will cause any hosts that are still using the old version to attest as Untrusted. Which can easily flag hosts that missed the upgrade for remediation. DELETE https://verification.service.com:8443/hvs/v2/flavors/<flavorId> Authorization: Bearer <token> 6.8 Removing Hosts From the Verification Service Hosts can be deleted at any time. Reports for that host will remain in the Verification Service database for audit purposes. DELETE https://verification.service.com:8443/hvs/v2/hosts/<hostId> Authorization: Bearer <token> The hostId can be retrieved either at the time the host is created, or by searching hosts using the host\u2019s hostname. 6.9 Removing Flavors Flavors can be deleted; this will cause any hosts that match the deleted Flavor to evaluate as Untrusted. This can be done if, for example, an old BIOS version needs to be retired and should no longer exist in the datacenter. By deleting the PLATFORM Flavor, hosts with the old BIOS version will attest as Untrusted, flagging them for easy remediation. DELETE https://verification.service.com:8443/hvs/v2/flavors/<flavorId> 6.10 Invalidating Asset Tags Asset Tags can be deleted in two ways. Deleting the ASSET_TAG Flavor part will retain the Asset Tag certificate in the database, but will cause the host using this Tag to no longer use the Asset Tag for attestation (the Tag result will be disregarded and no tags will be exposed in the attestation Reports). DELETE https://verification.service.com:8443/hvs/v2/flavors/<assetTagflavorId> Authorization: Bearer <token> Deleting the actual Asset Tag certificate will remove the certificate from the database, but will not actually affect attestation results (the authority for attestation results is the Flavor). DELETE https://verification.service.com:8443/hvs/v2/tag-certificates/<assetTagCertificateId> Authorization: Bearer <token> 6.11 Remediating an Untrusted attestation Hosts can become Untrusted for a wide variety of causes. The first clue to finding the root cause for an Untrusted attestation is the attestation Report itself \u2013 the Report will show Trust results for the PLATFORM , OS , HOST_UNIQUE , and ASSET_TAG Flavor parts individually, along with the OVERALL trust. If the Report shows that the PLATFORM Flavor part trust is \u201cfalse\u201d for example, it means that the PLATFORM measurements did not match any Flavors in the host\u2019s Flavorgroup. Untrusted attestation Reports will contain faults that describe the specific attestation rules that were not satisfied. This often shows enough information to describe the cause of the Untrusted status. A fault like RequiredButNotDefined means that a Flavor part is required by the Flavorgroup policy, but no Flavors for that Flavor part exist in the Flavorgroup (for example, generally Flavorgroups should always require a PLATFORM Flavor part; if no PLATFORM Flavors are in the Flavorgroup, hosts in the Flavorgroup will attest with this fault). Other faults include: \"PcrMatchesConstant\" - describes a rule that evaluates whether a TPM PCR has a specific value \"PcrEventLogIntegrity\" - the module event log is replayed during attestation to verify that the resulting measurement matches the actual value in the module PCR. If the replay does not match, it indicates the event log cannot itself be trusted. \"AikCertificateTrusted\" \u2013 This rule evaluates whether the TPM quote was signed by the TPM associated with this host. As part of host registration, the public half of the Attestation Identity Keypair is captured, and this public key is used to verify the signature on TPM quotes from that host. See the Appendix for a full list of the rules evaluated during Attestation. The Flavor matching engine will use the most-similar Flavor for the attestation Report in the case of an Untrusted result. The fault will explain in a general sense what rule the host attestation violated. To remediate, the rule will need to be satisfied. This could mean creating a new Flavor to match the actual observed values, or it could mean that the host has been tampered with and should have its BIOS flashed or OS reloaded. 6.12 Attestation Reporting Attestation results are delivered in the form of Host Reports. A Report can delivered in several different formats, which can change the type of data returned. The preferred format for Host Reports is a SAML attestation. A SAML-formatted report includes a chain or signatures that provides auditability for the Report. The SAML attestation will include the base trust status of the host, as well as the overall trust for each individual Flavor used in the attestation. The Report will also contain host information, such as TPM version, Operating System name and version, BIOS version, etc. The SAML Report will not, however, contain individual measurements and comparisons of values. This format of the Report is ideal for securely communicating the trust status of a host and for audit history. Attestation Reports can also be retrieved in json or xml format. These formats will not include the signature chain provided in the SAML format, but will contain the actual measurement values and expected Flavor values used for comparison. These reports are typically used for remediation, because they will show specifically why a given Host attested as Untrusted. The format for a Report is determined by the Accept header in the request. Attestations are automatically generated in the Verification Service by a repeating scheduled background process. This process looks for Attestation Reports that are close to expiration, and triggers a new Attestation Report. By default, Attestation Reports are valid for 90 minutes, and the background refresh process will trigger a new attestation when a Report is found to be within 3 minutes of expiration. A user can either retrieve the most recent currently valid Attestation Report for a given host, or may trigger a new Attestation Report to be generated. Typically, it is best to retrieve an existing Report for performance reasons. Generating a new Attestation Report requires the generation of a new TPM quote from the TPM of the host being attested; TPM performance differs greatly between vendors, and a quote can take anywhere between 2-7 seconds to generate. 6.12.1 Sample Call \u2013 Generating a New Attestation Report POST https://verification.service.com:8443/hvs/v2/reports Authorization: Bearer <token> { \"host_name\":\"host-1\" } Requires the permission reports:create 6.12.2 Sample Call \u2013 Retrieving an Existing Attestation Report GET https://verification.service.com:8443/hvs/v2/reports?hostName=HostName.server.com Authorization: Bearer <token> Below are the supported criteria options in order of precedence. If no host filter criteria is specified, then results are returned for all active hosts. id - unique UUID of the report entry in the database hostId - unique UUID of the host entry in the database hostName - name of the host hostHardwareId - hardware UUID of the host hostStatus - current state of the host, which supports the following options: CONNECTED - host is in connected state QUEUE - host is in queue to be processed CONNECTION_FAILURE - connection failure UNAUTHORIZED - unauthorized AIK_NOT_PROVISIONED - AIK certificate is not provisioned EC_NOT_PRESENT - endorsement certificate is not present MEASURED_LAUNCH_FAILURE - TXT measured launch failure TPM_OWNERSHIP_FAILURE - TPM ownership failureTPM_NOT_PRESENT - TPM is not present UNSUPPORTED_TPM - unsupported TPM version UNKNOWN - unknown host state Requires the permissions reports:search Other search criteria may also be used. By default, the most recent currently valid attestation is returned. However, different query parameters can be used to retrieve all attestations for a specific host over the last 30 days, for example. 6.13 Integration Intel\u00ae SecL can be integrated with scheduler services (or potentially other services) to provide additional security controls. For example, by integrating Intel\u00ae SecL with the OpenStack scheduler service, the OpenStack placement service can incorporate the Intel\u00ae SecL security attributes into VM scheduling. 6.13.1 The Integration Hub The Integration Hub acts as the integration point between the Verification Service and a third party service. The primary purpose of the Hub is to collect and maintain up-to-date attestation information, and to \u201cpush\u201d that information to the external service. The secondary purpose is to allow for multitenancy, the Verification Service does not allow for permissions to be applied for specific hosts, so a user with the \u201cattestation\u201d role can access all attestations for all hosts. By using separate Integration Hub instances for each Cloud environment (or \"tenant\"), the Hub will push attestations only for the associated hosts to a given tenant\u2019s integration endpoints. For example, Tenant A is using hosts 1-10 for an OpenStack environment. Tenant B is using hosts 11-15 for a Docker environment. Two Hub instances must be configured, one managing tenant A's OpenStack cluster and a second instance managing Tenant B's Docker environment. Each integration Hub will automatically retrieve the list of hosts used by its configured orchestration endpoint, retrieve the attestation reports only for those hosts, and push the attestation attribute information to each configured endpoint. Neither tenant will have access to the Verification Service, and will not be able to see attestation or other host details regarding infrastructure used by other tenants. Different integration endpoints can be added to the Integration Hub through a plugin architecture. By default, the Attestation Hub includes plugins for OpenStack and Kubernetes (Kubernetes deployments require the additional installation of two Intel\u00ae SecL-DC Custom Resource Definitions on the Kube Control Plane). 6.13.2 Integration with OpenStack Starting in the Rocky release, OpenStack can now use \u201cTraits\u201d to provide qualitative data about Nova Compute hosts, and to establish Trait requirements for VM instances. The updated scheduler will place VMs requiring a given Trait on Nova Compute nodes that meet the Trait requirements. Intel SecL-DC uses the Integration Hub to continually push platform integrity and Asset Tag information to the OpenStack Traits resources. This means the OpenStack scheduler natively supports workload scheduling incorporating Intel SecL-DC security attributes, including attestation report Trust status and Asset Tags. The OpenStack Placement Service will automatically attempt to place images with Trait requirements on compute nodes that have those Traits. NOTE : This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices. 6.13.2.1 Prerequisites Verification Service must be installed and running. OpenStack* Rocky (or later) Nova, Glance, Horizon, and Keystone services must be installed and running The Integration Hub must be installed and running. 6.13.2.2 Setting Image Traits Image Traits define the policy for which Traits are required for that Image to be launched on a Nova Compute node. By setting these Traits to \u201crequired,\u201d the OpenStack scheduler will require these same Traits to be present on a Nova Compute node in order to launch instances of the image. To set the Image Traits for Intel SecL-DC, a specific naming convention is used. This naming convention will match the Traits that the Integration Hub will automatically push to OpenStack. Two types of Traits are currently supported \u2013 one Trait is used to require that the Compute Node be Trusted in the Attestation Report, and the other Trait is used to require specific Asset Tag key/value pairs. To require a Trusted Attestation Report: CUSTOM_ISECL_TRUSTED=required The naming convention for Asset Tags is more flexible, and any number of these Traits can be used simultaneously. Note : All of the Traits must be present on the Compute Node for the scheduler to allow instances to land, so be sure not to set mutually exclusive Asset Tag values. CUSTOM_ISECL_AT_TAG_<key>__<value>=required` For example, to define a Trait that will require an Asset Tag where State = CA use the following: CUSTOM_ISECL_AT_TAG__STATE_CA= required These Traits can be set using CLI commands for OpenStack Glance: openstack image set --property trait:CUSTOM_ISECL_AT_STATE__CA = required <image_name> openstack image set --property trait:CUSTOM_ISECL_TRUSTED = required <image_name> To remove a Trait so that it is no longer required for an Image: openstack image unset --property trait:CUSTOM_ISECL_AT_STATE__CA <image_name> openstack image unset --property trait:CUSTOM_ISECL_TRUSTED <image_name> 6.13.2.3 Configuring the Integration Hub for Use with OpenStack The Integration Hub must be configured with the API URLs and credentials for the OpenStack instance it will integrate with. This can be done during installation using the \"OPENSTACK_...\" variables shown in the ihub.env answer file sample (see the Installing the Integration Hub section). However, this configuration can also be performed after installation using CLI commands: ihub setup openstack --endpoint-url=\"http://openstack:5000/v3\" --endpoint-user=\"username\" --endpoint-pass=\"password\" Restart the Integration Hub after configuring the endpoint. Note that \"endpoint name\" should be replaced with any user-friendly name for the OpenStack instance you would prefer. 6.13.2.7 Scheduling Instances Once Trait requirements are set for Images and the Integration Hub is configured to push attributes to OpenStack, instances can be launched in OpenStack as normal. As long as the OpenStack Nova scheduler is used to schedule the workloads, only compliant Compute Nodes will be scheduled to run instances of controlled Images. NOTE : This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices. 6.13.3 Integration with Kubernetes Through the use of Custom Resource Definitions for the Kubernetes Control Plane, Intel\u00ae Security Libraries can make Kubernetes aware of Intel\u00ae SecL security attributes and make them available for pod orchestration. In this way, a security-sensitive pod can be launched only on Trusted physical worker nodes, or on physical worker nodes that match specified Asset Tag values. NOTE : This control only applies to pods launched using the Kubernetes scheduler, and these scheduling controls will not affect manually-launched instances where a specific worker node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing Kubernetes interfaces and does not modify Kubernetes code, using only the standard Custom Resource Definition mechanism to add this functionality to the Kubernetes Control Plane. The datacenter owner or Kubernetes administrator is responsible for the security of the Kubernetes workload scheduling process in general, and Intel recommends following published Kubernetes security best practices. 6.13.3.1 Prerequisites Verification Service must be installed and running. Kubernetes Control Plane Node must be installed and running The supported Kubernetes versions are from 1.14.8 - 1.17.3 and the integration is validated with 1.14.8 and 1.17.3 Kubernetes Worker Nodes must be configured as physical hosts and attached to the Control Plane Node 6.13.3.2 Installing the Intel\u00ae SecL Custom Resource Definitions Intel\u00ae SecL uses Custom Resource Definitions to add the ability to base orchestration decisions on Intel\u00ae SecL security attributes to Kubernetes. These CRDs allow Kubernetes administrators to configure pods to require specific security attributes so that the Kubernetes Control Plane Node will schedule those pods only on Worker Nodes that match the specified attributes. Two CRDs are required for integration with Intel\u00ae SecL \u2013 an extension for the Control Plane nodes, and a scheduler extension. A single installer will deploy both of these CRDs. The extensions are deployed as a Kubernetes deployment in the isecl namespace. To deploy the Kubernetes integration CRDs for Intel\u00ae SecL: Copy the isecl-k8s-extensions installer to the Kubernetes Control Plane Node and execute the installer ./isecl-k8s-extensions-v3.3.1.bin Add a mount path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - mountPath : /opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ name : extendedsched readOnly : true Add a volume path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - hostPath : path : /opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ type : \"\" name : extendedsched Add policy-config-file path in the /etc/kubernetes/manifests/kube-scheduler.yaml file under command section: - command : - kube-scheduler - --policy-config-file=/opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/scheduler-policy.json - --bind-address=127.0.0.1 - --kubeconfig=/etc/kubernetes/scheduler.conf - --leader-elect=true Wait for the isecl-controller and isecl-scheduler pods to be into running state shell kubectl get pods -n isecl Create role bindings on the Kubernetes Control Plane Node: kubectl create clusterrolebinding isecl-clusterrole --clusterrole=system:node --user=system:serviceaccount:isecl:isecl kubectl create clusterrolebinding isecl-crd-clusterrole --clusterrole=isecl-controller --user=system:serviceaccount:isecl:isecl Copy the Integration Hub public key to the Kubernetes Control Plane Node: scp -r /etc/ihub/ihub_public_key.pem k8s.maseter.server:/opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ Run the command systemctl restart kubelet to restart all the control plane container services, including the base scheduler. The scheduler yaml is present under /opt/isecl-k8s-extensions/yamls/isecl-scheduler.yaml If the Controller and/or Scheduler deployments are deleted, the following steps need to be performed: a. Edit /etc/kubernetes/manifests/kube-scheduler.yaml and remove/comment the following content and restart kubelet \u200b --policy-config-file=/opt/isecl-k8s-extensions/isecl-k8sscheduler/config/scheduler-policy.json \u200b systemctl restart kubelet b. Redeploy scheduler and controller kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-scheduler.yaml c. Edit /etc/kubernetes/manifests/kube-scheduler.yaml and add/uncomment the following content and restart kubelet \u200b --policy-config-file=/opt/isecl-k8s-extensions/isecl-k8sscheduler/config/scheduler-policy.json \u200b systemctl restart kubelet d. Logs will be appended to older logs in /var/log/isecl-k8s-extensions Whenever the CRD's are deleted and restarted for updates, the CRD's using the yaml files present under /opt/isecl-k8s-extensions/yamls/ . Kubernetes Version 1.14-1.15 uses crd-1.14.yaml and 1.16-1.17 uses crd-1.17.yaml kubectl delete hostattributes.crd.isecl.intel.com kubectl apply -f /opt/isecl-k8s-extensions/yamls/crd-<version>.yaml (Optional) Verify that the Intel \u00ae SecL Custom Resource Definitions have been started: To verify the Intel SecL CRDs have been deployed: kubectl get crds 6.13.3.3 Configuring the Integration Hub for Use with Kubernetes The Integration Hub should be installed after the Intel SecL CRDs have already been installed on the Kubernetes Control Plane. If the Hub has already been installed without an available tenant endpoint, the installer can simply be rerun with a modified ihub.env answer file containing the required tenant variables. The ihub.env answer file requires two variables to be configured with information from the Kubernetes environment before installation: KUBERNETES_CERT_FILE=/etc/ihub/apiserver.crt This file can be copied from the Kuberetes Control Plane Node, and can be found at the following path: /etc/kubernetes/pki/apiserver.crt KUBERNETES_TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... This token can be retrieved from Kubernetes using the following command: kubectl get secrets -n isecl -o jsonpath=\"{.items[?(@.metadata.annotations['kubernetes\\.io/service-account\\.name']=='default')].data.token}\"|base64 --decode See section 3.15.7 on Installing the Integration Hub. Use the following variables in the ihub.env answer file: # Authentication URL and service account credentials AAS_API_URL=https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME=<Username for the Hub service user> IHUB_SERVICE_PASSWORD=<Password for the Hub service user> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL=https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384=<TLS hash> # TLS Configuration TLS_SAN_LIST=127.0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL=https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE=HVS # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL=https://kubernetes:6443/ KUBERNETES_CRD=custom-isecl KUBERNETES_CERT_FILE=/etc/ihub/apiserver.crt KUBERNETES_TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 6.13.3.6 Configuring Pods to Require Intel\u00ae SecL Attributes (Optional) Verify that the worker nodes have had their Intel\u00ae SecL security attributes populated: kubectl get nodes --show-labels The output should show the Trust staus and any Asset Tags applied to all of the registered Worker Nodes. Add the following to any Pod creation files: spec : affinity : nodeAffinity : requiredDuringSchedulingIgnoredDuringExecution : nodeSelectorTerms : - matchExpressions : - key : isecl.trusted operator : In values : - \"true\" - key : isecl.TAG_Country operator : In values : - CA - US - key : isecl.TAG_Customer operator : In values : - Coke - Pepsi - key : isecl.TAG_State operator : In values : - CA The isecl.trusted key defines the requirement for a Trusted host. Only one of these keys should be used. The isecl.TAG_ keys indicate Asset Tags; if the workload should only launch on hosts with the COUNTRY=US Asset Tag, the pod should be launched with the matchExpression key isecl.TAG_COUNTRY with the value US . All of the matchExpression definitions must be true for a given worker node to launch the pod \u2013 in the example above, the host must be attested as Trusted with Asset Tags Country=US , Customer=Customer1 and State=CA . If the worker node has additional Asset Tags beyond the ones required, the pod will still be able to be launched on that node. However, if one of the specified Tags is missing or has a different value, that worker node will not be used for that pod. 6.13.3.7 Tainting Untrusted Worker Nodes Optionally, the Intel\u00ae SecL Kubernetes CRDs can be configured to flag worker nodes as tainted to prevent any pods from launching on them. This restriction is applied regardless of whether the pod has a specific trust policy \u2013 if a worker node is flagged as tainted no pods will be launched on that worker. This setting is disabled by default. To enable this setting: Edit the isecl-controller.yaml file under /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml and set TAINT_UNTRUSTED_NODES=true Run kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml Worker nodes that attest as untrusted will be tainted with the NoExecute flag and unable to launch pods. If a worker was previously considered tainted and the untrusted state is resolved, the Intel\u00ae SecL CRDs will remove the tainted flag and the worker will be able to launch pods again. 7 Workload Confidentiality Workload Confidentiality builds upon Platform Attestation to protect data in virtual machine and container images. At its core, this feature is about allowing an image owner to set policies that define the conditions under which their image will be allowed to run; if the policy conditions are met, the decryption key will be provided, and if the conditions are not met, the image will remain encrypted and inaccessible. This provides a level of enforcement beyond integration with orchestrators, and protects sensitive data when the image is at rest. Workload Encryption relies on Platform Attestation to define the security attributes of hosts. When a protected image is launched, the Workload Agent on the host launching the VM or container image will detect the attempt (using either Libvirt hooks for VMs, or as a function of the Docker Secure Overlay Driver in the case of containers) and use the Image ID to find the Image Flavor on the Workload Service. The Workload Service will retrieve the current trust report for the host launching the image, and use that report to make a key retrieval request to the key transfer URL retrieved from the image flavor. The key transfer URL refers to the URL to the image owner\u2019s Key Broker Service, along with the ID of the key needed. In a typical production deployment, a Cloud Service Provider would enable Intel\u00ae SecL-DC security controls by installing the Intel\u00ae SecL-DC applications (with the exception of the Key Broker and Workload Policy Manager), and configuring each workload host to be Trusted (as per the Platform Integrity Attestation use case). The owner of the workload image(s) to be protected (for example, the end customer of the CSP) must install a Key Broker Service (which must be available for network communication from the Workload Service hosted on the CSP), the Workload Policy Manager, and their own Authentication and Authorization Service and Certificate Management Service (these will manage authentication and certificates for the KBS and WPM). Any number of image owner customers with their own unique KBS/WPM/AAS/CMS deployments may protect images that can be run by a single CSP deployment. The image owner will use the WPM to encrypt any image(s) to be protected; the WPM will automatically create a new image encryption key using the KBS, and will output the encrypted image and an Image Flavor. The image owner can then upload the encrypted image to the CSP\u2019s image storage service, and then upload the Image Flavor to the CSP-hosted WLS. When a compute host at the CSP attempts to launch a protected image, the WLA on the host will detect the launch request, and will issue a key transfer request to the WLS. The WLS will use the image ID to retrieve the Image Flavor, which contains the key retrieval URL for that image. This URL is hosted on the KBS of the image owner (which is why the KBS must be available to network requests from the WLS). The WLS will access the HVS to retrieve the current Platform Integrity Attestation report for the host, and will use this report to make a key transfer request to the KBS at the key transfer URL. The KBS will receive the request, verify that the Platform Integrity Attestation report is signed using a known SAML signing key (verifying that the report comes from a known and trusted HVS), and will then verify that the report shows that the host is trusted. If these requirements are met, the KBS will use the host\u2019s Binding Key (the public half of an asymmetric keypair generated by the host\u2019s TPM and included in the attestation report) as a Key Encryption Key to seal the Image Encryption Key to the TPM of the host that was attested. When the host receives the response to the key request, it will unseal the Image Encryption Key using its TPM. Because the Key Encryption Key is unique to this host\u2019s TPM, only the actual host that was attested will be able to gain access to the image. With the Image Encryption Key, the host\u2019s WLA will create the appropriate encrypted volume(s) for the image and begin the launch as normal. The WLA does not retain the key on disk; if/when the host is rebooted or the WLA is restarted, restarting the workloads based on protected images will trigger new key requests based on new Platform Integrity Attestation reports. In this way, if a host is compromised in a method detectable by the Platform Integrity feature, protected images will be unable to launch on this server. 7.1 Virtual Machine Confidentiality 7.1.1 Prerequisites To enable Virtual Machine Confidentiality, the following Intel\u00ae SecL-DC components must be installed and available: Authentication and Authorization Service Certificate Management Service Key Broker Service Host Verification Service Workload Service Trust Agent + Workload Agent (on each virtualization host) Workload Policy Manager See the Installation subsection on Recommended Service Layout for recommendations on how/where to install each service. It is strongly recommended to use a VM orchestration solution (for example, OpenStack) with the Intel\u00ae SecL-DC Integration Hub to schedule encrypted workloads on compute hosts that have already been pre-checked for their Platform Integrity status. See the Platform Integrity Attestation subsection on Integration with OpenStack for an example. You will need at least one QCOW2-format virtual machine image (for quick testing purposes, a very small minimal premade image like CirrOS is recommended; a good place to look for testing images is the OpenStack Image Guide found here: https://docs.openstack.org/image-guide/obtain-images.html ). One or more hypervisor compute nodes running QEMU/KVM is required. Each of these nodes must have the Intel\u00ae SecL-DC Trust Agent and Workload Agent installed, and they must be registered with the Verification Service. Each of these servers should show as trusted see the Platform Integrity Attestation section for details. You should have Flavors that match the system configuration for these hosts, and attestation reports should show all Flavor parts as trusted=true Hosts that are not trusted (including servers where there is no trust status, like hosts with no Trust Agent) will fail to launch any encrypted workloads. 7.1.2 Workflow 7.1.2.1 Encrypting Images wpm create-image-flavor -l <user-friendly unique label> -i <path to image file> -e <output path and filename for encrypted image> -o <output path for JSON image flavor> ` After generating the encrypted image with the WPM, the encrypted image can be uploaded to the Image Storage service of choice (for example, OpenStack Glance). Note that the ID of the image in this Image Storage service must be retained and used for the next steps. 7.1.2.2 Uploading the Image Flavor POST https://<Workload Service IP or Hostname>:5000/wls/flavors Authorization: Bearer <token> {<Image Flavor content from WPM output>} Use the above API request to upload the Image Flavor to the WLS. The Image Flavor will tell other Intel\u00ae SecL-DC components the Key Transfer URL for this image. 7.1.2.3 Creating the Image Flavor to Image ID Association The WLS needs to know the ID of the image as it exists in the image storage service used by the CSP (for example, OpenStack Glance). Use the below API request to create an association between the Image Flavor created in the previous step and the image ID. POST https://<Workload Service IP or Hostname>:5000/wls/images Authorization: Bearer <token> { \"id\": \"<image ID on image storage>\", \"flavor_ids\": [\"<Image Flavor ID>\"] } 7.1.2.4 Launching Encrypted VMs Instances of the protected images can now be launched as normal. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the VM is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided. 7.2 Container Confidentiality 7.2.1 Container Integrity and Confidentiality with Docker 7.2.1.1 Docker Container Integrity Intel\u00ae recommends using Docker Notary to verify the integrity of Docker container images at launch. https://docs.docker.com/notary/getting_started/ 7.2.1.2 Prerequisites To enable Docker Container Confidentiality, the following Intel\u00ae SecL-DC components must be installed and available: Authentication and Authorization Service Certificate Management Service Key Broker Service Host Verification Service Workload Service Trust Agent + Workload Agent (on each Docker host) Workload Policy Manager See the Installation subsection on Recommended Service Layout for recommendations on how/where to install each service. It is strongly recommended to use a container orchestration solution (for example, Kubernetes) with the Intel\u00ae SecL-DC Integration Hub to schedule encrypted Docker containers on compute hosts that have already been pre-checked for their Platform Integrity status. See the Platform Integrity Attestation subsection on Integration with Kubernetes for an example. You will need at least one Docker container image. For quick testing purposes, any small public image can be used. Some examples can be found here: https://github.com/jessfraz/dockerfiles/ Image names: Openvpn k8scan postfix One or more Docker container worker nodes running Docker 19.03 is required. Each of these nodes must have the Intel\u00ae SecL-DC Trust Agent and Workload Agent installed, and they must be registered with the Verification Service. Each of these servers should show as \u201ctrusted;\u201d see the Platform Integrity Attestation section for details. You should have Flavors that match the system configuration for these hosts, and attestation reports should show all Flavor parts as \u201ctrusted=true.\u201d Hosts that are not trusted (including servers where there is no trust status, like hosts with no Trust Agent) will fail to launch any encrypted workloads. Important Note: Docker version 19.03.13 is specifically required, and other versions are not supported. Installation of the Workload Agent for Docker Container Confidentiality will replace the existing Docker binaries (the client and daemon, in /usr/bin/dockerd and /usr/bin/docker) with a recompiled Docker engine that includes the Secure Overlay Driver. This is what allows the launch of encrypted containers to be intercepted and decrypted. The Docker runtime must not be upgraded or downgraded to any other version; doing so will cause encrypted Docker Containers to fail to launch. In the future, the Container Encryption feature will be modified to use OCI-standard container encryption without the need for recompilation or file replacement. 7.2.1.3 Workflow 7.2.1.3.1 Encrypting Docker Container Images The first step is encryption of a Docker Container image. The WPM is a command line utility that will perform the actual image encryption and allow the resulting encrypted image to be uploaded to a Docker Registry. The commands needed are slightly different depending on whether Notary is being used to validate container integrity. If Notary is not being used: wpm create-container-image-flavor -i <container image name> -t <tag-name> -e -f <Dockerfile Path> -d <dirPath> -o <output path for JSON image flavor> If Notary is being used: wpm create-container-image-flavor -i <imageName> -t <TagName> -e -s -n https://<notaryIP>:<notaryPort>/ -f <Dockerfile Path> -d <dirPath> Also, if Notary is being used, set the following environment variable before uploading the image to the Registry: export DOCKER_CONTENT_TRUST=1 After generating the encrypted image with the WPM, the encrypted image can be uploaded to a local Docker Registry. 7.2.1.3.2 Uploading the Image Flavor POST https://<Workload Service IP or Hostname>:5000/wls/flavors Authorization: Bearer <token> {<Image Flavor content from WPM output>} Use the above API request to upload the Image Flavor to the WLS. The Image Flavor will tell other Intel\u00ae SecL-DC components the Key Transfer URL for this image. 7.2.1.3.3 Creating the Image Flavor to Image ID Association For Docker images stored in a Docker Registry, the ID is typically an MD5 hash. This format must be converted for use with the Workload Service. To get the non-truncated ID of the image, use the Docker command: docker images --no-trunc Next, convert this to a UUID that can be used by Intel\u00ae SecL: wpm get-container-image-id <image-full-md5id> The output will be a UUID, which will be considered the ID of the image for the WLS. Use the below API request to create an association between the Image Flavor created in the previous step and the image ID. POST https://<Workload Service IP or Hostname>:5000/wls/images Authorization: Bearer <token> { \"id\": \"<image ID on image storage>\", \"flavor_ids\": [\"<Image Flavor ID>\"] } 7.2.1.3.4 Launching Encrypted Docker Containers Containers of the protected images can now be launched as normal using Kubernetes pods and deployments. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the Docker Container is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided. 7.2.2 Container Confidentiality with Cri-o and Skopeo 7.2.2.1 Prerequisites Container Confidentiality with Cri-o and Skopeo requires modified versions of both Cri-o and Skopeo. Both of these are automatically built with the Intel SecL build scripts, and can be found here after the script has executed: isecl/cc-crio/binaries/ Skopeo The patched version of Skopeo 0.1.41-dev must be installed on each Worker Node: https://github.com/lumjjb/skopeo/tree/sample_integration . The Skopeo wrapper that allows Skopeo to interface with the ISecL components must be installed on each Worker Node: https://github.com/lumjjb/skopeo/blob/sample_integration/vendor/github.com/lumjjb/seclkeywrap/keywrapper_secl.go . Copy the Skopeo wrapper into /usr/bin: cp isecl/cc-crio/binaries/skopeo /usr/bin/skopeo Add the following to the crio.service definition to always start Cri-o with the Intel SecL policy parameters enabled: vi /usr/local/lib/systemd/system/crio.service ExecStart=/usr/local/bin/crio \\ $CRIO_CONFIG_OPTIONS \\ $CRIO_RUNTIME_OPTIONS \\ $CRIO_STORAGE_OPTIONS \\ $CRIO_NETWORK_OPTIONS \\ $CRIO_METRICS_OPTIONS \\ --decryption-secl-parameters secl:enabled Cri-o 1.17 The patched version of Cri-o 1.17 must be installed on each Worker Node: https://github.com/lumjjb/cri-o/blob/1.16_encryption_sample_integration . Copy the CRI-O binary from IsecL build script to /usr/bin/: cp isecl/cc-crio/binaries/crio /usr/bin/crio The Cri-o wrapper that allows Cri-o to interface with ISecL components must be installed on each Worker Node: https://github.com/lumjjb/cri-o/blob/1.16_encryption_sample_integration/vendor/github.com/lumjjb/seclkeywrap/keywrapper_secl.go . GoLang 1.14.4 or later must be installed on each Kubernetes Worker Node Crictl must be installed on each Kubernetes Worker Node $ VERSION=\"v1.17.0\" $ wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz $ sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin $ rm -f crictl-$VERSION-linux-amd64.tar.gz Kubernetes must be configured to use Cri-o and Skopeo Platform Integrity Attestation must be configured for the physical Kubernetes Worker Nodes. This includes, at minimum, the CMS; AAS; HVS; KBS; WPM; and the Trust Agent must be installed on each Worker Node. See the Installation section for details installing these services. Each Kubernetes Worker Node should be Trusted in the attestation reports generated by the HVS. Only physical Worker Nodes are supported at this time. 7.2.2.2 Workflow Skopeo Commands skopeo copy source-image destination-image Options: --encryption-key [secl:asset_tag|keyfile] Specifies the encryption protocol. When using secl protocol, provide either \"any\" or an asset tag in the form \"at_key:at_value\"; only one asset tag can be used at this time. Alternatively, a specific key can be provided to be used for encryption. --decryption-key [secl:enabled|keyfile] specifies the decryption Alternatively, a specific key can be provided to be used for decryption. This flag can be repeated if an image requires more than one key to be decrypted. See https://github.com/lumjjb/skopeo/blob/sample_integration/docs/skopeo-copy.1.md for more details. Examples Copy a container image from a registry to a local server: $ skopeo copy docker://docker.io/library/nginx:latest oci:nginx_local To encrypt an image (this will allow the image to run only on Trusted platforms): $ skopeo copy --encryption-key secl:any oci:nginx_local oci:nginx_secl_enc To encrypt an image with an Asset Tag (this will allow the image to run only on Trusted platforms with the specified Asset tag): $ skopeo copy --encryption-key secl:asset_tag_key:asset_tag_value oci:nginx_local oci:nginx_secl_enc_w_at To decrypt an image: $ skopeo copy --decryption-key secl:enabled oci:nginx_secl_enc oci:nginx_secl_dec To copy an encrypted image without decryption: $ skopeo copy oci:nginx_secl_enc oci:nginx_secl_enc_copy To copy a local image to a remote registry: $ skopeo copy oci:nginx_secl_enc docker://10.80.245.116/nginx_secl_enc:latest Prepare an Image Convert the image to an OCI image using Skopeo: $ skopeo copy docker-daemon:custom-image:latest oci:custom-image:latest Encrypt the image using Skopeo copy command $ skopeo copy --encryption-key secl:any oci:custom-image:latest oci:custom-image:enc Push the image to a registry: $ skopeo copy oci:custom-image:enc docker://Registry.server.com:5000/custom-image:enc Alternatively, encrypt the image and push it to a registry in a single step: $ skopeo copy --encryption-key secl:any oci:custom-image:latest docker://registry.server.com:5000/custom-image:enc 7.2.2.2.1 Pulling and Encrypting a Container Image Skopeo can be used to pull a container image from an external registry (a private Docker registry is used in teh examples below). This image may be encrypted already, but if you wish to pull an image for encryption, it must be in plaintext format. Skopeo has a wrapper that can interact with the Workload Policy Manager. When trying to encrypt an image, Skopeo calls the WPM CLI fetch-key command. In the command, the KBS is called in order to create a new key. The return from the KBS includes the key retrieval URL, which is used when trying to decrypt. After the key is returned to the WPM, the WPM passes the key back to Skopeo. Skopeo uses the key to encrypt the image layer by layer as well as associate the encrypted image with the key's URL. Skopeo then uploads the encrypted image to a remote container registry. The modified Cri-o and wrapper will modify the Cri-o commands to allow Intel SecL policies to be utilized. 7.2.2.2.2 Launching an Encrypted Container Image Cri-o allows for pulling and decryption of an encrypted container image from a container registry. When trying to pull and decrypt a container image, Cri-o has a hook that calls into the Workload Agent (WLA). The WLA will call into the Workload Service (WLS) and pass it the key URL associated with the encrypted image as well as the host's hardware UUID. These two serve as input to /keys endpoint of the WLS. The WLS initializes a HVS client in order to retrieve the host SAML report and then validates the report. If the host is trusted, the WLS will attempt to get the key. First, it will check if it's been cached alredy. If not, it will initialize a KBS client. The WLS uses this client to retrieve the key from the KBS. If the key is retrieved, it will be cached in the WLS temporarily so that the WLS will not need to requery the KBS if attempting to decrypt with the same key. The key is then passed back to the WLA as the return of the WLS's keys API. Finally, the key is returned to Cri-o, which uses the key to decrypt the container image layer by layer. Containers of the protected images can now be launched as normal using Kubernetes pods and deployments. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the Crio Container is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided. 8 Trusted Virtual Kubernetes Worker Nodes While the existing Platform Integrity Attestation functions support bare-metal Kubernetes Worker Nodes, using Virtual Machines to host the Worker Nodes is a common deployment architecture. This feature aims to help extend the Chain of Trust to protect the integrity of Virtual Machines, including virtual Kubernetes Worker Nodes. This feature requires the foundational Platform integrity Attestation feature as a prerequisite for the bare-metal servers hosting the virtual Worker Nodes. Note : This feature requires a degree of separation between the VM and Kubernetes infrastructure. All physical, bare-metal servers should be virtualization hosts, and all Kubernetes Worker Nodes should be Virtual Machines running on those physical virtualization hosts. Kubernetes clusters should not use a mixture of both virtual and bare-metal Workers. The physical virtualization clusters should not include a mixture of hosts protected by Intel\u00ae SecL Platform integrity Attestation and hosts that are not protected. VM trust reports can only be generated for VM instances launched on hosts with Intel\u00ae SecL services enabled. Also important to note is that this feature alone will not prevent any VMs from launching . VMs will still be launched on Untrusted platforms unless additional steps are taken (for example, using OpenStack orchestration integration with Intel\u00ae SecL, or using the Workload Confidentiality feature to encrypt the Kubernetes Worker Node VM image). This feature generates VM attestation reports that can be used to audit compliance and extend the Chain of Trust, and relies on other datacenter policies and/or Intel\u00ae SecL features to enforce compliance. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes. Optionally, the Kubernetes Worker Node VM images can be encrypted and protected as per the Workload Confidentiality feature of Intel\u00ae SecL. This adds a layer of enforcement \u2013 rather than simply reporting whether the VM started on a Trusted platform (and is therefore Trusted), Workload Confidentiality ensures that the Worker Node VM image can only be decrypted on compliant platforms. In both cases (with VM image encryption and without), the VM Trust Reports are accessed through the Workload Service: GET https://<Workload Service IP or Hostname>:5000/wls/reports?instance_id=<instance ID> Authorization: Bearer <token> This query will return the latest VM trust report for the provided Instance ID (the Instance ID is the VM\u2019s ID as it is identified by Libvirt; in OpenStack this would correspond directly to the OpenStack Instance ID). As a best practice, Intel\u00ae recommends using an orchestration layer (such as OpenStack) integrated with Intel\u00ae SecL to launch VMs only on Trusted platforms. See the previous section, \u201cIntegration\u201d under the \u201cPlatform Integrity Attestation\u201d feature for details. As an additional layer of protection, the Kubernetes Worker Node VM images can be encrypted using the Workload Confidentiality feature. This adds cryptographic enforcement to the workload orchestration and ensures instances of the Worker Node images will only be launched on Trusted platforms. 8.1 Prerequisites All physical, bare-metal servers should be virtualization hosts. Virtualization hosts must be Linux platforms using Libvirt. All Kubernetes Worker Nodes should be Virtual Machines running on those physical virtualization hosts. Kubernetes clusters must not use a mixture of both virtual and bare-metal Workers. The physical virtualization clusters must not include a mixture of hosts protected by Intel\u00ae SecL Platform integrity Attestation and hosts that are not protected. VM trust reports can only be generated for VM instances launched on hosts with Intel\u00ae SecL services enabled. The Intel\u00ae SecL Platform integrity Attestation feature must be used to protect all physical virtualization hosts. These platforms must all be registered with the Verification Service, must have the Trust Agent installed and running, and must be Trusted. See the Platform integrity Attestation section for details. In addition to the services required by Platform Integrity Attestation, the Workload Agent must be installed on each physical virtualization host, and the Workload Service must be installed on the management plane. (Optional; recommended) Virtual Machines should be orchestrated using an Intel\u00ae SecL-supported orchestrator, such as OpenStack. This will help launch the VMs only on compliant platforms. (Optional) Virtual Machine Images may be encrypted using the Workload Confidentiality feature. This adds a layer of cryptographic enforcement to the orchestration of virtual worker VMs, ensuring that the VMs can only be launched on compliant platforms. 8.2 Workflow There are no additional steps required to enable this feature; if the Workload Agent is running on the physical virtualization host, VM trust reports will automatically be generated at every VM Start. Intel\u00ae strongly recommends using an orchestration integration for the VM management layer (for example, the provided Integration Hub integration with OpenStack) to help ensure that the worker node VMs only launch on Trusted physical hosts. If no orchestration is used, the platform service provider should ensure that all physical hosts are always in a Trusted state and take action to ensure Untrusted platforms cannot launch VMs. The primary benefit of the Trusted Virtual Kubernetes Worker Node feature is auditability of the Chain of Trust. By retrieving the VM Trust Report from the Workload Service for a given Worker Node instance, auditors can verify that the VM launched on a Trusted platform. The VM trust report also includes the hardware UUID of the physical host. This UUID, along with the time that the VM instance was launched, can be used to pull the correlating physical host trust report from the Verification Service to provide proof of compliance. To retrieve a VM trust report from the Workload Service: GET https://<Workload Service IP or Hostname>:5000/wls/reports?instance_id=<instance ID> Authorization: Bearer <token> This will return the latest report for the specified instance ID. 8.3 Sample VM Trust Report A sample VM Trust Report from the Workload Service is below. The report is generated by the Workload Agent and signed using the host\u2019s TPM, then stored in the Workload Service. The report contains some key attributes: instance_id : This is the ID of the instance. In OpenStack, this would correlate directly to the Instance ID for the VM. image_id : This is the ID for the source image used to launch the instance. In OpenStack, this correlates directly to the Image ID for the VM. host_hardware_uuid : The hardware UUID of the physical host that started the VM. This attribute identifies which host performed the VM start and attested the VM. This UUID can be used to query the Verification Service to retrieve attestations of the host. By correlating the VM Trust Report with the Host Trust Report, we can verify that this instance was started on a Trusted platform. image_encrypted : True or False based on whether the source image was protected using the Workload Confidentiality feature. trusted : True or False, based on whether the VM instance was started on a Trusted platform. Because the report is generated at every vm start through Libvirt, a new report will be generated whenever the VM is turned on or migrated, reflecting the state of the VM and its host at every opportunity for the state to change. <Response xmlns= \"http://wls.server.com/wls/reports\" > <instance_manifest> <instance_info> <instance_id> bd06385a-5530-4644-a510-e384b8c3323a </instance_id> <host_hardware_uuid> 00964993-89c1-e711-906e-00163566263e </host_hardware_uuid> <image_id> 773e22da-f687-47ca-89e7-5df655c60b7b </image_id> </instance_info> <image_encrypted> true </image_encrypted> </instance_manifest> <policy_name> Intel VM Policy </policy_name> <results> <e> <rule> <rule_name> EncryptionMatches </rule_name> <markers> <e> IMAGE </e> </markers> <expected> <name> encryption_required </name> <value> true </value> </expected> </rule> <flavor_id> 3a3e1ccf-2618-4a0d-8426-fb7acb1ebabc </flavor_id> <trusted> true </trusted> </e> </results> <trusted> true </trusted> <data> eyJpbnN0YW5jZV9tYW5pZmVzdC\u2026data> <hash_alg> SHA-256 </hash_alg> <cert> -----BEGIN CERTIFICATE----- \u2026 -----END CERTIFICATE----- </cert> <signature> \u2026 </signature> </Response> 9 Flavor Management 9.1 Flavor Format Definitions A Flavor is a standardized set of expectations that determines what platform measurements will be considered \u201ctrusted.\u201d Flavors are constructed in a specific format, containing a metadata section describing the Flavor, and then various other sections depending on the Flavor type or Flavor part. 9.1.1 Meta The first part of a Flavor is the meta section: \"meta\" :{ \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } } This section defines the Flavor part and any versioning information. NOTE : Even when the BIOS or OS version remains the same, the actual measurements in the measured boot process will be different between TPM 1.2 and TPM 2.0, and so the TPM version is captured here as well. The attributes in the Meta section are used by the Flavor matching engine when matching Flavors to Hosts. Note that TPM 1.2 is supported only for VMware ESXi hosts. 9.1.2 Hardware The hardware section is unique to PLATFORM flavor parts: \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } } This part of the Flavor defines expected hardware attributes of the host, and contains processor and TPM-related attributes. PCRs The last section of a Flavor is the \u201cPCRs\u201d section, which contains the actual expected measurements for any PCRs. This section will contain PCR measurements for each applicable algorithm supported by the TPM (SHA1 only for TPM 1.2, SHA256 and SHA1 sections for TPM 2.0). Some PCRs simply have a value and nothing else. Other PCRs, however, contain different event measurements. This indicates that separate individual platform or OS components are independently measured and extended to the same PCR. PCRs with event measurements will contain an Event array that lists, in the correct order, all of the events in the measurement event log that are extended to this PCR. When the Verification Service attests a host against a given Flavor, each measurement event is compared to the Flavor value, and all of the events are replayed to confirm that a replay of all of the measurement extensions do in fact result in the hash seen in the PCR value. In this way, the Verification Service can ensure that the measurement event log contents are secure, and the individual measurements can be attested so that the cause for an Untrusted attestation can easily be seen. The full PCRs section is not shown here due to length; see the sample Flavor sections for a full sample. \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, ... 9.1.4 Sample PLATFORM Flavor The PLATFORM Flavor part encompasses measurements that are unique to a specific platform, including the server OEM, BIOS version, etc. A PLATFORM Flavor can be shared across all hosts of the same model that have the same BIOS version. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \" PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } }, \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } }, \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_0\" : { \"value\" : \"db83f0e8a1773c21164c17986037cdf8afc1bbdc1b815772c6da1befb1a7f8a3\" }, \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } 9.1.5 Sample OS Flavor An OS Flavor encompasses all of the measurements unique to a given OS. This includes the OS kernel and other measurements. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"OS\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.3\" , \"vmm_name\" : \"\" , \"vmm_version\" : \"\" , \"tpm_version\" : \"2.0\" } }, \"pcrs\" : { \"SHA1\" : { \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"26e1d98742f79c950dc637f8c067b0b72a1b0e8ff75db4e609c7e17321acf3f4\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"c89ad1d1e9adaa7ecfee2abce763b92472685f7d1b9f3799bf49974b66ed9638\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"81b88e268e697ccf1790d41b9de748a8f395acfb47aa67c9845479d4e8456f77\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }, \"flavorgroup_name\" : \"automatic\" } 9.1.6 Sample HOST_UNIQUE Flavor Host-Unique flavors define measurements for a specific host. This can be either a single large flavor that incorporates all of the host measurements into a single flavor document used only to attest a single host, or can be a small subset of measurements that are specific to a single host. For example, some VMWare module measurements will change from one host to the next, while most others will be shared assuming the same ESXi build is used. The full Flavor requirement for such a host would include Host-Unique flavors to cover the measurements that are unique to only this one host, and would still use a generic PLATFORM and OS flavor for the other measurements that would be identical for other similarly configured hosts. Note :The HOST_UNIQUE Flavors are unique to a specific host, and should always be imported directly from the specific host. { \"flavors\" : [ { \"meta\" : { \"id\" : \"4d387cbd-f72b-4742-b4e5-c5b0ffed59e0\" , \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"HOST_UNIQUE\" , \"source\" : \"Purley11\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.4\" , \"tpm_version\" : \"2.0\" , \"hardware_uuid\" : \"00448C61-46F2-E711-906E-001560A04062\" } }, \"pcrs\" : { \"SHA256\" : { \"pcr_17\" : { \"value\" : \"f9ef8c53ddfc8096d36eda5506436c52b4bfa2bd451a89aaa102f03181722176\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"09f468dfc1d98a1fee86eb7297a56b0e097d57be66db4eae539061332da2e723\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"c1f7bfdae5f270d9f13aa9620b8977951d6b759f1131fe9f9289317f3a56efa1\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA1\" : { \"pcr_17\" : { \"value\" : \"48695f747a3d494710bd14d20cb0a93c78a485cc\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"b1f8db372e396bb128280821b7e0ac54a5ec2791\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"983ec7db975ed31e2c85ef8e375c038d6d307efb\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] } 9.1.7 Sample ASSET_TAG Flavor Asset Tag flavor parts are unique to Asset Tag attestation. These flavors verify that the Asset Tag data in the host\u2019s TPM correctly matches the most recently created, currently valid Asset Tag certificate that has been deployed to that host. { \"meta\" : { \"id\" : \"b3e0c056-5b6c-4b6b-95c4-de5f1473cac0\" , \"description\" : { \"flavor_part\" : \"ASSET_TAG\" , \"hardware_uuid\" : \"<Hardware UUID of the server to be tagged>\" } }, \"external\" : { \"asset_tag\" : { \"tag_certificate\" : { \"encoded\" : \"<Tag certificate in base64 encoded format>\" , \"issuer\" : \"CN=assetTagService\" , \"serial_number\" : 1519153541461 , \"subject\" : \"<Hardware UUID of the server to be tagged>\" , \"not_before\" : \"2018-02-20T11:05:41-0800\" , \"not_after\" : \"2019-02-20T11:05:41-0800\" , \"fingerprint_sha384\" : \"46001d8472e56de423aac7c55f061404d27d50e497dfc21a861ef1965d7ac1e44887aee918fb5805385a3cbdf820899d\" , \"attribute\" : [ { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] } ] } } } } 9.2 Flavor Matching Flavors are matched to host by objects called Flavor Groups A Flavor Group represents a set of rules to satisfy for a set of flavors to be matched to a host for attestation. For example, a Flavor Group can require that a PLATFORM Flavor and an OS Flavor be used for attestation. Without this level of association, a host that matches measurements for only a PLATFORM flavor, for example, can be attested as Trusted, even though the OS Flavor would attest the host as Untrusted. Flavor matching can be automatic (the default), or can explicitly specify a host to which the Flavor Group must apply. Automatic flavor matching allows for more ease in datacenter lifecycle management with updates and patches that may cause the appropriate flavors to change over time. Automatic flavor matching will trigger a new matching action when a new flavor is added, when an existing flavor is deleted, or when a host is initially attested as Untrusted. The system will automatically attempt to find a new set of flavors that match the Flavor Group rules that will attest the host as Trusted. For example, if a host in your datacenter has recently had a BIOS update, the next attestation will cause the host to appear Untrusted (because the PLATFORM measurements will now differ). Using automatic flavor matching, the Verification Service will automatically search for a new PLATFORM flavor that matches the actual BIOS version and measurement seen on the host. If a new BIOS version is successfully found, the Verification Service will use the new version for attestation, and the host will appear Trusted. If no matching PLATFORM flavor is found, the host will appear Untrusted. When automatic flavor matching is used, think of the various flavors in the Verification Service as a collection of valid configurations, and an attested host matching any combination of those configurations (within the confines of the Flavor Group requirements for which flavor types must be present) will be attested as Trusted. Host-based flavor matching explicitly maps a specific host to a flavor. Host-based attestation requires that a host saves its entire configuration in a composite flavor document in the system, and then later validates against this flavor to detect any changes. In this case, if a host received a BIOS upgrade, the host will attest as Untrusted, and no attempt will be made to re-match a new flavor. An administrator will need to explicitly specify a new flavor to be used for that host. 9.2.1 When Does Flavor Matching Happen? Generally speaking, a new Flavor match operation is triggered whenever a host is registered, whenever a host is attested and would be untrusted, and whenever a Flavor is added to or removed from a Flavor group. When a new host is registered, the Verification Service will retrieve the Host Report and derive the platform information needed for Flavor matching (BIOS version, server OEM, OS type and version, TPM version, etc.). The Verification Service then searches through the Flavors in the same Flavor group that the host is in, and finds any Flavors that match the platform information. If a Flavor is deleted, the Verification Service finds any hosts that are currently associated with that Flavor, and attempts to match them to alternative Flavors. If a Flavor is added, the Verification Service looks for any hosts in the same Flavor group that are not currently matched to a Flavor of the appropriate Flavor part, and checks to see whether those hosts should be mapped to the new Flavor. If a new Report is generated for a host and would not result in a Trusted attestation, the Verification Service will first repeat the Flavor matching process to be sure that no matching Flavors exist in the host\u2019s Flavor group that would result in a Trusted attestation. If the Service still finds no matching Flavors, the host will appear as Untrusted. 9.2.2 Flavor Matching Performance Flavor matching causes affected hosts to be moved into the QUEUE state while the host and Flavor are evaluated to determine whether the host and Flavor should be linked. Hosts can remain in the QUEUE state for varying amounts of time based on the extent of the Flavor match required. This means that the trust status of a host will not be actually updated to reflect a new Flavor until after the process finishes, which may take a few seconds or minutes depending on the number of registered hosts, Flavors in the same Flavorgroup, etc. If a new host is registered, only that host will be added to the queue, and other hosts will be unaffected. The Verification Service will look for only the HOST\\_UNIQUE flavor part applicable to that specific host, and then will look at all PLATFORM and OS Flavors in the same Flavorgroup has the host, using the Flavor metadata and host info to narrow the results. The Service will match the new host to the most similar Flavors, and then move the host to the CONNECTED state and generate a new trust report. When a new PLATFORM or OS Flavor is created, the Service will instead add all hosts in the same Flavorgroup as the new Flavors to the queue. Each host in the queue will then be re-evaluated against every PLATFORM and OS Flavor in the Flavorgroup to determine the closest match. This means that adding a new Flavor can cause more hosts to each spend more time in the QUEUE state, as compared to adding a new host. For this reason, as a best practice for initial population of Flavors and hosts for a new deployment, it is suggested that Flavors be created before registering hosts. This is not a concern after the initial population of Flavors and hosts. 9.2.3 Flavor Groups Flavor Groups represent a collection of one or more Flavors that are possible matches for a collection of one or more hosts. Flavor Groups link to both Flavors and hosts \u2013 a host in Flavor Group \"ABC\" will only be matched to Flavors in Flavor Group \"ABC\" 9.2.4 Default Flavor Group By default the Verification Service includes a Flavor Group named automatic and another named unique During host registration, the automatic Flavor Group is used as a default selection if no other Flavor Group is specified. 9.2.4.1 automatic The automatic Flavor Group is used as the default Flavor Group for all hosts and all Flavor parts. If no other Flavor Groups are specified when creating Flavors or Hosts, all Hosts and Flavors will be added to this group. This is useful for datacenters that want to manage a single set of acceptable configurations for all hosts. 9.2.4.2 unique The unique Flavor Group is used to contain HOST\\_UNIQUE Flavors. This Flavorgroup is used by the backend software and should not be managed manually. 9.2.5 Flavor Match Policies Flavor Match Policies are used to define how the Flavor Match engine will match Flavors to hosts for attestation for a given Flavor Group. Each Flavor part can have defined Flavor Match Policies within a given Flavor Group. { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"all_of\" , \"required_if_defined\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"SOFTWARE\" : { \"all_of\" , \"required_if_defined\" } } The sample Policy above would require that a PLATFORM Flavor part be matched, but any PLATFORM Flavor part in the Flavor Group may be matched. The OS Flavor Part will only be required if there is an OS Flavor part in the Flavor Group; if there are no OS Flavor parts in the Group, the match will not be required. If more than one OS Flavor part exists in the Group, all of those OS parts will be required to match for a host to be Trusted. 9.2.5.1 Default Flavor Match Policy The automatic Flavor Group, and any Flavor Group created without explicitly defining a Flavor Match Policy, will be created using the following Flavor Match Policy. This is the default behavior for Flavor Matching: { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"any_of\" , \"required\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"SOFTWARE\" : { \"all_of\" , \"required_if_defined\" } } 9.2.5.2 ANY_OF The ANY_OF Policy allows any Flavor of the specified Flavor part to be matched. If the Flavor Group contains OS Flavor 1 and OS Flavor 2, a host will be Trusted if it matches either OS Flavor 1 or OS Flavor 2. 9.2.5.3 ALL_OF The ALL_OF Policy requires all Flavors of the specified Flavor Part in the Flavor Group to be matched. For example, if Flavor Group X contains PLATFORM Flavor Part 1 and PLATFORM Flavor Part 2, a host in Flavor Group X will need to match both PLATFORM Flavor 1 and PLATFORM Flavor 2 to attest as Trusted. If the host matches only one of the Flavors, or neither of them, the host will be attested as Untrusted. 9.2.5.4 LATEST The LATEST Policy requires that the most recently created Flavor of the specified Flavor part be used when matching to a host. For example: \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored. 9.2.5.5 REQUIRED The REQUIRED Policy requires a Flavor of the specified part to be matched. For example: \"PLATFORM\" : { \"any_of\" , \"required\" } This policy means that a PLATFORM Flavor part must be used; if the Flavor Group contains no PLATFORM Flavor parts, hosts in this Flavor Group will always count as Untrusted. 9.2.5.6 REQUIRED_IF_DEFINED The REQUIRED_IF_DEFINED Policy requires that a Flavor part be used if a Flavor of that part exists. If no Flavor part of this type exists in the Flavor Group, the Flavor part will not be required. \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored. 9.2.6 Flavor Match Event Triggers Several events will cause the background queue service to attempt to re-match Flavors and hosts: Host registration This event is the first time a host will be attempted to be matched to appropriate Flavors in the same Flavor Group, and affects only the host that was added (other hosts will not be re-matched to Flavors when you add a new host). Flavor creation When a new Flavor is added to a Flavor Group, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the new Flavor. Flavor deletion When a Flavor is deleted, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the deleted Flavor. Creation of a new Attestation Report When a new Attestation Report is generated, if the host would attest as Untrusted with the currently-matched Flavors, the host being attested will be re-matched as part of the Report generation process. This ensures that Reports are always generated using the best possible Flavor matches available in the database. 9.2.7 Sample Flavorgroup API Calls 9.2.7.1 Create a New Flavorgroup POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavorgroups Authorization: Bearer <token> { \"flavorgroup_name\": \"firstTest\", \"flavor_match_policy_collection\": { \"flavor_match_policies\": [ { \"flavor_part\": \" PLATFORM\", \"match_policy\": { \"match_type\": \"ANY_OF\", \"required\": \"REQUIRED\" } } ] } } Response: { \"id\" : \"a0950923-596b-41f7-b9ad-09f525929ba1\" , \"flavorgroup_name\" : \"firstTest\" , \"flavor_match_policy_collection\" : { \"flavor_match_policies\" : [ { \"flavor_part\" : \" PLATFORM\" , \"match_policy\" : { \"match_type\" : \"ANY_OF\" , \"required\" : \"REQUIRED\" } } ] } } 9.3 SOFTWARE Flavor Management 9.3.1 What is a SOFTWARE Flavor? A SOFTWARE Flavor part defines the measurements expected for a specific application, or a specific set of files and folders on the physical host. SOFTWARE Flavors can be used to attest the boot-time integrity of any static files or folders on a physical server. A single server can have multiple SOFTWARE Flavors associated. Intel\u00ae SecL-DC provides a default SOFTWARE Flavor that is deployed to each Trust Agent server during the provisioning step. This default Flavor includes the static files and folders of the Trust Agent itself, so that the Trust Agent is measured during the server boot process, and its integrity is included in the attestation of the other server measurements. Using SOFTWARE Flavors consists of two parts \u2013 creating the actual SOFTWARE Flavor, and deploying the SOFTWARE Flavor manifest to the host. 9.3.2 Creating a SOFTWARE Flavor part Creating a new SOFTWARE Flavor requires creating a manifest of the files and folders that need to be measured. There are three different types of entries for the manifest: Directories , Symlinks and Files . 9.3.2.1 Directories A Directory defines measurement rules for measuring a directory. Effectively this involves listing the contents of the directory and hashing the results; in this way, a Directory measurement can verify that no files have been added or removed from the directory specified, but will not measure the integrity of individual files (ie, files can change within the directory, but cannot be renamed, added, or removed). Directory entries can use regular expressions to define explicit Include and Exclude filters. For example, Exclude=\\*.log would exclude all files ending with .log from the measurement, meaning files with the .log extension can be added or removed from the directory. <Dir Type= \"dir\" Include= \".*\" Exclude= \"\" Path= \"/opt/trustagent/hypertext/WEB-INF\" > 9.3.2.2 Symlinks A Symlink entry defines a symbolic link that will be measured. The actual symbolic link is hashed, not the file or folder the symlink points to. In this way, the measurement will detect the symbolic link being modified to point to a different location, but the actual file or folder pointed to can have its contents change. <Symlink Path= \"/opt/trustagent/bin/tpm_nvinfo\" > 9.3.2.3 Files Individual files can be explicitly specified for measurement as well. Each file listed will be hashed and extended separately. This means that if any file explicitly listed this way changes its contents or is deleted or moved, the measurement will change, and the host will become Untrusted. <File Path= \"/opt/trustagent/bin/module_analysis_da.sh\" > 9.3.3 Sample SOFTWARE Flavor Creation Call Creating a new SOFTWARE Flavor requires specifying a sample host where the application, files or folders that will be measured are currently present. The measurements specified in the manifest will be captures when this call is executed, and the Verification Service will communicate with the Trust Agent and create a SOFTWARE Flavor based on the file measurements. The Connection String must point to the sample Trust Agent host. The Label defines the name of the new Flavor (ideally this should be the name of the application being measured for easier management). POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavor-from-app-manifest Authorization: Bearer <token> <ManifestRequest xmlns=\"lib:wml:manifests-req:1.0\"> <connectionString>intel:https://trustagent.server.com:1443;u=trustagentUsername;p=trustagentPassword</connectionString> <Manifest xmlns=\"lib:wml:manifests:1.0\" DigestAlg=\"SHA384\" Label=\"Tomcat\" Uuid=\"\">+ <Dir Type=\"dir\" Include=\".*\" Exclude=\"\" Path=\"/opt/trustagent/hypertext/WEB-INF\" /> <Symlink Path=\"/opt/trustagent/bin/tpm_nvinfo\" /> <File Path=\"/opt/trustagent/bin/module_analysis_da.sh\" /> </Manifest> </ManifestRequest> 9.3.4 Deploying a SOFTWARE Flavor Manifest to a Host Once the SOFTWARE Flavor has been created, it can be deployed to any number of Trust Agent servers. This requires the Flavor ID (returned from Flavor creation) and the Host ID (returned from host registration). The Verification Service will send a request to the appropriate Trust Agent and create the manifest. Note : After the SOFTWARE Flavor manifest is deployed to a host, the host must be rebooted. This will allow the measurements specified in the Flavor to be taken and extended to the TPM. Until the host is rebooted, the host will now appear Untrusted, as it now requires measurements from a SOFTWARE Flavor that have not yet been extended to the TPM. POST https://<Verification Service IP or Hostname>:8443/hvs/v2/rpc/deploy-software-manifest Authorization: Bearer <token> { \"flavor_id\":\"a6544ff4-6dc7-4c74-82be-578592e7e3ba\", \"host_id\":\"a6544ff4-6dc7-4c74-82be-578592e7e3ba\" } 9.3.5 SOFTWARE Flavor Matching The default Flavor Match Policy for SOFTWARE Flavor parts is ALL_OF , REQUIRED_IF_DEFINED . This means that all Software Flavors defined in a Flavorgroup must match to all hosts in that Flavorgroup. If no SOFTWARE Flavors are in the Flavorgroup, then hosts can still be considered Trusted. Because the default uses the ALL_OF Policy, it\u2019s recommended to use Flavorgroups dedicated to specific software loadouts. For example, if a number of hosts will act as virtualization hosts and will have SOFTWARE Flavors for the hypervisor and VM management applications, those hosts should be placed in their own Flavorgroup as they will all run similar or identical application loadouts. If another group of servers in the datacenter will act as container hosts, these hosts might need SOFTWARE Flavors that include attestation of container runtimes and management applications, and will have a very different application loadout from the VM-based hosts. These should be placed in their own Flavorgroup, so that the VM hosts are attested using the hypervisor-related SOFTWARE Flavors, and the container hosts are attested using the container-related SOFTWARE Flavors. As with other Flavor parts, hosts will be matched to Flavors in the same Flavorgroup that the host is added to, and will not be matched to Flavors in different Flavorgroups. Flavor matching will happen on the same events as for other Flavor parts. 9.3.6 Kernel Upgrades Because the Application Integrity functionality involves adding a measurement agent ( tbootXM ) to initrd , an additional process must be followed when updating the OS kernel to ensure the new initrd also contains the measurement agent. This is not required if Application Integrity will not be used. Update grub to have the boot menu-entry created for the new kernel version in grub.cfg ( grub2-mkconfig -o \\<path to grub file\\> ) Reboot the host and boot into new kernel menu-entry. Generate a new initrd with tbootXM. ( /opt/tbootxm/bin/generate\\_initrd.sh ) Copy the generated initrd to the boot drectory. ( cp /var/tbootxm/\\<generated initrd file name\\> /boot/ ) Update the TCB protection menu-entry with the new kernel version. Source rustagent.env , or expor t GRUB_FILE=/boo t /e f i/EFI/redha t /grub.c f g Run the configure_host script: cd /opt/tbootxm/bin ./configure_host.sh Update the default boot menu-entry to have new kernel version. (edit /etc/default/grub ) Update the grub to reflect the updates. ( grub2-mkconfig -o \\<path to grub file\\> ) Reboot the host and boot into TCB protection menu-entry. After updating the system with the new initrd , the Software Flavor should attest as Trusted. Note that changing grub and initrd does result in a new OS Flavor measurements, so an updated OS Flavor should be imported after updating the kernel and regenerating initrd . 10 Scalability and Sizing 10.1 Configuration Maximums 10.1.1 Registered Hosts The Intel\u00ae SecL Verification Service can support a maximum of 2000 registered hosts with a single Verification Service instance with default settings. 10.1.2 HDD Space The HDD space recommendations below represent expected log and database growth using default settings. Altering the database or log rotation settings, or the SAML expiration setting, may change the amount of disk space required. For default settings, 100 GB of disk space is recommended. 10.2 Database Rotation Settings The Intel\u00ae SecL Verification Service database will automatically rotate the audit log table after one million records, and will retain up to ten total rotations. These settings are user-configurable if a longer retention period is needed. mtwilson.audit.log.num.rotations - defines the maximum number of rotations before the oldest rotation is deleted to make space for a new rotation. mtwilson.audit.log.max.row.count \u2013 defines the maximum number of rows in the audit log table before a rotation will occur. 10.3 Log Rotation The Intel\u00ae SecL services (the Verification Service, Trust Agent, and Integration Hub) use Logrotate to rotate logs automatically during a daily cron job. By default, logs are rotated once per month or when they exceed 1 GB in size, whichever comes first, and 12 total rotations will be retained. 11 Intel Security Libraries Configuration Settings 11.1 Verification Service 11.1.1 Installation Answer File Options # Authentication URL and service account credentials - mandatory AAS_API_URL=https://isecl-aas:8444/aas HVS_SERVICE_USERNAME=HVS_service HVS_SERVICE_PASSWORD=password # CMS URL and CMS webserivce TLS hash for server verification - mandatory CMS_BASE_URL=https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384=digest # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Skip setup - optional HVS_NOSETUP=false #default=false # Logging options - optional HVS_LOGLEVEL=info # options: critical|error|warning|info|debug|trace, default='info' HVS_LOG_MAX_LENGTH=300 # default=300 HVS_ENABLE_CONSOLE_LOG=false # default=false # HRRS configuration - optional HRRS_REFRESH_PERIOD=2m0s # default=2m0s HRRS_REFRESH_LOOK_AHEAD=5m0s # default=5m0s # FVS configuration - optional FVS_NUMBER_OF_VERIFIERS=20 # default=20 FVS_NUMBER_OF_DATA_FETCHERS=20 # default=20 FVS_SKIP_FLAVOR_SIGNATURE_VERIFICATION=false # default=false # In case of trusted flavor storage, flavor signature verification can be skipped # using following flag - optional SKIP_FLAVOR_SIGNATURE_VERIFICATION=false # default=false # TLS certificate configuration - optional TLS_COMMON_NAME=\"HVS TLS Certificate\" # default=\"HVS TLS Certificate\" TLS_SAN_LIST=127.0.0.1,localhost # default=127.0.0.1,localhost # Server configuration - optional HVS_PORT=8443 # default=8443 HVS_SERVER_READ_TIMEOUT=30s # default=30s HVS_SERVER_READ_HEADER_TIMEOUT=10s # default=10s HVS_SERVER_WRITE_TIMEOUT=10s # default=10s HVS_SERVER_IDLE_TIMEOUT=10s # default=10s HVS_SERVER_MAX_HEADER_BYTES=1048576 # default=1048576 # Database - mandatory HVS_DB_USERNAME=runner HVS_DB_PASSWORD=test HVS_DB_SSLCERTSRC=/tmp/dbcert.pem # This doesn't need to be specified if HVS_DB_SSLCERT is given # Database - optional HVS_DB_HOSTNAME=localhost # default=localhost HVS_DB_NAME=hvs-pg-db # default=hvs-pg-db HVS_DB_PORT=5432 # default=5432 HVS_DB_SSLMODE=verify-full # default=verify-full ;other options are like allow, prefer, require, verify-ca HVS_DB_SSLCERT=/etc/hvs/hvsdbcert.pem # default=/etc/hvs/hvsdbcert.pem # Webservice configuration - Optional HVS_PORT=8443 HVS_SERVER_READ_TIMEOUT=30s HVS_SERVER_READ_HEADER_TIMEOUT=10s HVS_SERVER_WRITE_TIMEOUT=10s HVS_SERVER_IDLE_TIMEOUT=10s HVS_SERVER_MAX_HEADER_BYTES=1048576 # Logging - Optional HVS_LOG_MAX_LENGTH=300 HVS_ENABLE_CONSOLE_LOG=false # Flavor Signing Configuration - Optional FLAVOR_SIGNING_KEY_FILE=/etc/hvs/trusted-keys/flavor-signing.key FLAVOR_SIGNING_CERT_FILE=/etc/hvs/certs/trustedca/flavor-signing.pem FLAVOR_SIGNING_COMMON_NAME=HVS Flavor Signing Certificate # SAML Configuration - Optional SAML_KEY_FILE=/etc/hvs/trusted-keys/saml.key SAML_CERT_FILE=/etc/hvs/certs/trustedca/saml-cert.pem SAML_COMMON_NAME=HVS SAML Certificate # Endorsement CA Configuration - Optional ENDORSEMENT_CA_KEY_FILE=/etc/hvs/trusted-keys/endorsement-ca.key ENDORSEMENT_CA_CERT_FILE=/etc/hvs/certs/trustedca/EndorsementCA.pem ENDORSEMENT_CA_COMMON_NAME=HVS Endorsement Certificate ENDORSEMENT_CA_ISSUER=intel-secl ENDORSEMENT_CA_VALIDITY_YEARS=5 # Privacy CA Configuration - Optional PRIVACY_CA_KEY_FILE=/etc/hvs/trusted-keys/privacy-ca.key PRIVACY_CA_CERT_FILE=/etc/hvs/certs/trustedca/privacy-ca-cert.pem PRIVACY_CA_COMMON_NAME=HVS Privacy Certificate PRIVACY_CA_ISSUER=intel-secl PRIVACY_CA_VALIDITY_YEARS=5 # Asset Tag Configuration - Optional TAG_CA_KEY_FILE=/etc/hvs/trusted-keys/tag-ca.key TAG_CA_CERT_FILE=/etc/hvs/certs/trustedca/tag-ca-cert.pem TAG_CA_COMMON_NAME=HVS Tag Certificate TAG_CA_ISSUER=intel-secl TAG_CA_VALIDITY_YEARS=5 11.1.2 Configuration Options The Verification Service configuration is stored in the file /etc/hvs/config.yml : tls: cert-file: /etc/hvs/tls-cert.pem key-file: /etc/hvs/tls.key common-name: Mt Wilson TLS Certificate san-list: 127.0.0.1,localhost saml: common: cert-file: /etc/hvs/certs/trustedca/saml-cert.pem key-file: /etc/hvs/trusted-keys/saml.key common-name: mtwilson-saml issuer: AttestationService validity-days: 1 flavor-signing: cert-file: /etc/hvs/certs/trustedca/flavor-signing.pem key-file: /etc/hvs/trusted-keys/flavor-signing.key common-name: VS Flavor Signing Certificate privacy-ca: cert-file: /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem key-file: /etc/hvs/trusted-keys/privacy-ca.key common-name: HVS Privacy Certificate issuer: intel-secl validity-years: 5 endorsement-ca: cert-file: /etc/hvs/certs/endorsement/EndorsementCA.pem key-file: /etc/hvs/trusted-keys/endorsement-ca.key common-name: HVS Endorsement Certificate issuer: intel-secl validity-years: 5 tag-ca: cert-file: /etc/hvs/certs/trustedca/tag-ca-cert.pem key-file: /etc/hvs/trusted-keys/tag-ca.key common-name: HVS Tag Certificate issuer: intel-secl validity-years: 5 aik-certificate-validity-years: 5 server: port: 8898 read-timeout: 30s read-header-timeout: 10s write-timeout: 30s idle-timeout: 10s max-header-bytes: 1048576 log: max-length: 30000 enable-stdout: true level: TRACE db: vendor: postgres host: localhost port: \"5432\" name: hvs_db username: root password: password ssl-mode: allow ssl-cert: /etc/hvs/hvsdbsslcert.pem conn-retry-attempts: 5 conn-retry-time: 1 hrrs: refresh-period: 2m0s refresh-look-ahead: 5m0s fvs: number-of-verifiers: 20 number-of-data-fetchers: 20 skip-flavor-signature-verification: true 11.1.3 Command-Line Options The Verification Service supports several command-line commands that can be executed only as the Root user: Syntax: hvs <command> 11.1.3.1 Help hvs help Displays the list of available CLI commands. 11.1.3.2 Start hvs start Starts the services. 11.1.3.3 Stop hvs stop Stops the services. 11.1.3.5 Status hvs status Reports whether the service is currently running. 11.1.3.6 Uninstall hvs uninstall Uninstalls the service, including the deletion of all files and folders. Database content is not removed. See section 14.1 for additional details. 11.1.3.7 Version hvs version Reports the version of the service. 11.1.3.10 Erase-data hvs erase-data Deletes all non-user information from the database. All data in teh following tables will be deleted; the database schema will be preserved: flavor_host flavor_flavorgroup flavorgroup_host queue report host_status flavorgroup host flavor host_credential tag_certificate audit_log_entry tls_policy 11.1.3.16 Setup hvs setup <task> [--help] [--force] [-f <answer-file>] \u200b --help show help message for setup task \u200b --force existing configuration will be overwritten if this flag is set \u200b -f|--file the answer file with required argument Re-runs the installation setup tasks, or the specific tasks listed. 11.1.4 Directory Layout The Host Verification Service installs by default to the following folders: /etc/hvs/ This directory contains the config.yml configuration file, the database connection ssl cerificate, and the webservice TLS certificate. /etc/hvs/ \u251c\u2500\u2500 certs \u2502 \u251c\u2500\u2500 endorsement \u2502 \u2502 \u251c\u2500\u2500 EndorsementCA-external.pem \u2502 \u2502 \u2514\u2500\u2500 EndorsementCA.pem \u2502 \u251c\u2500\u2500 trustedca \u2502 \u2502 \u251c\u2500\u2500 flavor-signing.pem \u2502 \u2502 \u251c\u2500\u2500 privacy-ca \u2502 \u2502 \u2502 \u2514\u2500\u2500 privacy-ca-cert.pem \u2502 \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2502 \u251c\u2500\u2500 58f6bcfcd.pem \u2502 \u2502 \u2502 \u251c\u2500\u2500 vmware-cert1.pem \u2502 \u2502 \u2502 \u2514\u2500\u2500 vmware-cert2.pem \u2502 \u2502 \u251c\u2500\u2500 saml-cert.pem \u2502 \u2502 \u2514\u2500\u2500 tag-ca-cert.pem \u2502 \u2514\u2500\u2500 trustedjwt \u2502 \u2514\u2500\u2500 f29aa4ab3.pem \u251c\u2500\u2500 config.yml \u251c\u2500\u2500 hvsdbsslcert.pem \u251c\u2500\u2500 tls-cert.pem \u251c\u2500\u2500 tls.key \u2514\u2500\u2500 trusted-keys \u200b \u251c\u2500\u2500 endorsement-ca.key \u200b \u251c\u2500\u2500 flavor-signing.key \u200b \u251c\u2500\u2500 privacy-ca.key \u200b \u251c\u2500\u2500 saml.key \u200b \u2514\u2500\u2500 tag-ca.key 11.2 Trust Agent 11.2.1 Installation Answer File Options Key Sample Value Description AAS_API_URL AAS_API_URL=https://{host}:{port}/aas/v1 API URL for Authentication Authorization Service (AAS). AUTOMATIC_PULL_MANIFEST AUTOMATIC_PULL_MANIFEST=Y Instructs the installer to automatically pull application-manifests from HVS similar to tagent setup get-configured-manifest AUTOMATIC_REGISTRATION AUTOMATIC_REGISTRATION=Y Instructs the installer to automatically register the host with HVS similar to running tagent setup create-host and tagent setup create-host-unique-flavor. BEARER_TOKEN BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsjdkMTdiNmUz... JWT from AAS that contains \"install\" permissions needed to access ISecL services during provisioning and registration CMS_BASE_URL CMS_BASE_URL=https://{host}:{port}/cms/v1 API URL for Certificate Management Service (CMS). CMS_TLS_CERT_SHA384 CMS_TLS_CERT_SHA384=bd8ebf5091289958b5765da4... SHA384 Hash sum for verifying the CMS TLS certificate. MTWILSON_API_URL MTWILSON_API_URL=https://{host}:{port}/hvs/v2 The url used during setup to request information from HVS. PROVISION_ATTESTATION PROVISION_ATTESTATION=Y When present, enables/disables whether tagent setup is called during installation. If trustagent.env is not present, the value defaults to no ('N'). SAN_LIST SAN_LIST=10.123.100.1,201.102.10.22,mya.example.com CSV list that sets the value for SAN list in the TA TLS certificate. Defaults to 127.0.0.1. TA_TLS_CERT_CN TA_TLS_CERT_CN=Acme Trust Agent 007 Sets the value for Common Name in the TA TLS certificate. Defaults to CN=trustagent. TPM_OWNER_SECRET TPM_OWNER_SECRET=625d6... 20 byte hex value to be used as the secret key when taking ownership of the TPM. Note: If this field is not specified, GTA will generate a random secret key. TPM_QUOTE_IPV4 TPM_QUOTE_IPV4=no When enabled (=y), uses the local system's ip address as a salt when processing a quote nonce. This field must align with the configuration of HVS. TA_SERVER_READ_TIMEOUT TA_SERVER_READ_TIMEOUT=30 Sets tagent server ReadTimeout. Defaults to 30 seconds. TA_SERVER_READ_HEADER_TIMEOUT TA_SERVER_READ_HEADER_TIMEOUT=10 Sets tagent server ReadHeaderTimeout. Defaults to 30 seconds. TA_SERVER_WRITE_TIMEOUT TA_SERVER_WRITE_TIMEOUT=10 Sets tagent server WriteTimeout. Defaults to 10 seconds. TA_SERVER_IDLE_TIMEOUT TA_SERVER_IDLE_TIMEOUT=10 Sets tagent server IdleTimeout. Defaults to 10 seconds. TA_SERVER_MAX_HEADER_BYTES TA_SERVER_MAX_HEADER_BYTES=1048576 Sets tagent server MaxHeaderBytes. Defaults to 1MB(1048576) TA_ENABLE_CONSOLE_LOG TA_ENABLE_CONSOLE_LOG=true When set true, tagent logs are redirected to stdout. Defaults to false TRUSTAGENT_LOG_LEVEL TRUSTAGENT_LOG_LEVEL=debug The logging level to be saved in config.yml during installation (\"trace\", \"debug\", \"info\"). TRUSTAGENT_PORT TRUSTAGENT_PORT=10433 The port on which the trust-agent service will listen. 11.2.2 Configuration Options The Trust Agent configuration settings are managed in /opt/trustagent/configuration/config.yml Setting Description tpmquoteipv4: true When enabled, the Trust Agent will perform an additional hash of the nonce using the bytes from the Trust Agent server IP when returning TPM quotes. This should always be set to True. logging: loglevel: info Defines the Trust Agent logging level logenablestdout: false If set to True, the Trust Agent will log to stdout. By default this is False and the logs are sent to /var/log/trustagent/trustagent.log logentrymaxlength: 300 Defines the maximum length of a single log entry webservice: port: 1443 Defines the port on which the Trust Agent API server will listen readtimeout: 30s readheadertimeout: 10s writetimeout: 10s idletimeout: 10s maxheaderbytes: 1048576 hvs: url: https://0.0.0.0:8443/hvs/v2 Defines the baseurl for the Verification Service tpm: ownersecretkey: 625d6d8...1be0b4e957 Defines the TPM ownership secret. This is randomly generated unless manually specified during installation in the trustagent.env file. Note that changing this value may require clearing the TPM ownership in the server BIOS. aiksecretkey: 59acd1367...edcbede60c Defines the AIK secret. Randomly generated. If this is changed, a new AIK will need to be provisioned. aas: baseurl: https://0.0.0.0:8444/aas/ Defines the base URL for the AAS cms: baseurl: https://0.0.0.0:8445/cms/v1 Defines the base URL for the CMS tlscertdigest: 330086b3...ae477c8502 Defines the SHA383 hash of the CMS TLS certificate tls: certsan: 10.1.2.3,server.domain.com,localhost Comma-separated list of hostnames and IP addresses for the Trust Agent. Used in the Agent TLS certificate. certcn: Trust Agent TLS Certificate Common Name for the Trust Agent TLS certificate 11.2.3 Command-Line Options 11.2.3.1 Available Commands 11.2.3.1.1 help Show the help message. 11.2.3.1.2 setup [task] Run setup task. Available Tasks for 'setup': tagent setup (all) - Runs all setup tasks to provision the trust agent. - Required environment variables: AAS_API_URL, CMS_BASE_URL, CMS_TLS_CERT_SHA384, BEARER_TOKEN, MTWILSON_API_URL tagent setup trustagent.env - Runs all setup tasks to provision the trust agent using trustagent.env file for environment variables (the file must contain all of the required environment variables listed in 'tagent setup (all)'. See \"Environment variables\" below). tagent setup download-ca-cert - Fetches the latest CMS Root CA Certificates, overwriting existing files. - Required environment variables: BEARER_TOKEN, CMS_BASE_URL tagent setup download-cert - Fetches a signed TLS Certificate from CMS, overwriting existing files. - Required environment variables: CMS_BASE_URL, CMS_TLS_CERT_SHA384 tagent setup update-certificates - Runs 'download-ca-cert' and 'download-cert' - Required environment variables: CMS_BASE_URL, CMS_TLS_CERT_SHA384, BEARER_TOKEN tagent setup provision-attestation - Runs setup tasks associated with HVS/TPM provisioning. - Required environment variables: BEARER_TOKEN, MTWILSON_API_URL tagent setup create-host - Registers the trust agent with the verification service. - Required environment variables: BEARER_TOKEN, MTWILSON_API_URL tagent setup create-host-unique-flavor - Populates the verification service with the host unique flavor - Required environment variables: BEARER_TOKEN, MTWILSON_API_URL tagent setup get-configured-manifest - Uses environment variables to pull application-integrity. manifests from the verification service. - Required Environment variables: BEARER_TOKEN, MTWILSON_API_URL, FLAVOR_UUIDS or FLAVOR_LABELS Environment variables used by tagent setup: * Indicates the environment variable is optional. AAS_API_URL - Used by the trust agent service to validate jwt/bearer tokens. - Ex. AAS_API_URL=https://{host}:{port}/aas/v1 AUTOMATIC_PULL_MANIFEST* - When 'Y', instructs the installer to download application manifests using the FLAVOR_UUIDS or FLAVOR_LABELS environment variables by running 'get-configured-manifest'. Defaults to 'N'. - Ex. AUTOMATIC_PULL_MANIFEST=Y AUTOMATIC_REGISTRATION* - When 'Y', instructs the installer to register the host with HVS by running 'create-host' and 'create-host-unique-flavor'. Defaults to 'N'. - Ex. AUTOMATIC_REGISTRATION=Y BEARER_TOKEN - 'jwt' token used during setup to communicate to CMS and HVS. - Ex. BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsjdkMTdiNmUz... CMS_BASE_URL - URL used by setup to download root-ca and tls certificates from CMS. - Ex. CMS_BASE_URL=https://{host}:{port}/cms/v1 CMS_TLS_CERT_SHA384 - SHA384 sum used during setup to secure communications with CMS. - Ex. CMS_TLS_CERT_SHA384=bd8ebf5091289958b5765da4... MTWILSON_API_URL - The URL used during setup to collect information from HVS. - MTWILSON_API_URL=https://{host}:{port}/hvs/v2 PROVISION_ATTESTATION* - When 'Y', instructs the installer to provision the host with HVS by calling 'tagent setup'. Defaults to 'N'. - Ex. AUTOMATIC_REGISTRATION=Y SAN_LIST* - CSV list that sets the value for SAN list in the TA TLS certificate. Defaults to \"127.0.0.1,localhost\". - Ex. SAN_LIST=10.123.100.1,201.102.10.22,my.example.com TA_ENABLE_CONSOLE_LOG* - When set to 'true', trust agent logs are redirected to stdout. Defaults to false. - Ex. TA_ENABLE_CONSOLE_LOG=true TA_SERVER_IDLE_TIMEOUT* - Sets the trust agent service's idle timeout. Defaults to 10 seconds. - Ex. TA_SERVER_IDLE_TIMEOUT=10 TA_SERVER_MAX_HEADER_BYTES* - Sets trust agent service's maximum header bytes. Defaults to 1MB. - Ex. TA_SERVER_MAX_HEADER_BYTES=1048576 TA_SERVER_READ_TIMEOUT* - Sets trust agent service's read timeout. Defaults to 30 seconds. - Ex. TA_SERVER_READ_TIMEOUT=30 TA_SERVER_READ_HEADER_TIMEOUT* - Sets trust agent service's read header timeout. Defaults to 30 seconds. - Ex. TA_SERVER_READ_HEADER_TIMEOUT=10 TA_SERVER_WRITE_TIMEOUT* - Sets trust agent service's write timeout. Defaults to 10 seconds. - Ex. TA_SERVER_WRITE_TIMEOUT=10 TA_TLS_CERT_CN* - Sets the value for Common Name in the TA TLS certificate. Defaults to \"Trust Agent TLS Certificate\". - Ex. TA_TLS_CERT_CN=Acme Trust Agent 007 TPM_OWNER_SECRET* - When provided, setup uses the 40 character hex string for the TPM owner password. The TPM owner secret is generated when not provided. - Ex. TPM_OWNER_SECRET=625d6d8a18f98bf764760fa392b8c01be0b4e959 TPM_QUOTE_IPV4* - When 'Y', used the local system's ip address a salt when processing TPM quotes. Defaults to 'N'. - Ex. TPM_QUOTE_IPV4=Y TRUSTAGENT_LOG_LEVEL* - Sets the verbosity level of logging (trace|debug|info|error). Defaults to 'info'. - Ex. TRUSTAGENT_LOG_LEVEL=debug TRUSTAGENT_PORT* - The port on which the trust agent service will listen. - Ex. TRUSTAGENT_PORT=10433 11.2.3.1.3 uninstall Uninstall trust agent. 11.2.3.1.4 version Print build version info. 11.2.3.1.5 start Start the trust agent service. 11.2.3.1.6 stop Stop the trust agent service. 11.2.3.2.7 status Get the status of the trust agent service. 11.2.4 Directory Layout 11.2.4.1 Windows 11.2.4.2 Linux The Linux Trust Agent installs by default to /opt/trustagent , with the following subfolders: 11.2.4.2.1 Bin Contains executables and scripts. 11.2.4.2.2 Configuration Contains the config.yml configuration file, as well as certificates and keystores. This includes the AIK public key blob after provitioning. 11.2.4.2.3 Var Contains information gathered from the platform and SOFTWARE Flavor manifests. All files with the name manifest_*.xml will be parsed to define measurements during boot. Generally these should be automatically provisioned from the Verification Service when creating/deploying SOFTWARE Flavors. 11.3 Integration Hub 11.3.1 Installation Answer File # Authentication URL and service account credentials AAS_API_URL=https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME=<Integration Hub Service User username> IHUB_SERVICE_PASSWORD=<Integration Hub Service User password> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL=https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384=<TLS hash> # TLS Configuration TLS_SAN_LIST=127.0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL=https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE=HVS #Integration tenant type. Currently supported values are \"KUBENETES\" or \"OPENSTACK\" TENANT=<KUBERNETES or OPENSTACK> # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_AUTH_URL=<OpenStack Keystone URL; typically http://openstack-ip:5000/> OPENSTACK_PLACEMENT_URL=<OpenStack Nova API URL; typically http://openstack-ip:8778/> OPENSTACK_USERNAME=<OpenStack username> OPENSTACK_PASSWORD=<OpenStack password> # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL=https://kubernetes:6443/ KUBERNETES_CRD=custom-isecl KUBERNETES_CERT_FILE=/etc/ihub/apiserver.crt KUBERNETES_TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 #Optional, configures the polling interval at which the Hub retrieves attestations from the HVS POLL_INTERVAL_MINUTES=2 #Optional, runs the installer skipping setup IHUB_NO_SETUP=false #Optional, configures the TLS certificate common name TLS_COMMON_NAME=Integration Hub TLS Certificate #Optional, log configuration LOG_MAX_LENGTH=1500 LOG_LEVEL=Info LOG_ENABLE_STDOUT=true 11.3.2 Configuration Options config-file: /etc/ihub/config log: max-length: 1500 enable-stdout: true level: trace ihub: service-username: admin@hub service-password: hubAdminPass poll-interval-minutes: 1 aas: url: https://<aas_ip>:8444/aas cms: url: https://<cms_ip>:8445/cms/v1/ tls-cert-digest: 8a035e3cdd... attestation-service: attestation-url: https://<hvs_ip>:8443/hvs/v2 attestation-type: HVS end-point: type: KUBERNETES or OPENSTACK url: https://<kubernetes_ip>:6443/ or OpenStack Nova URL crd-name: custom-isecl token: eyJhbGciOiJSUzI... username: OpenStack Username password: OpenStack Password auth-url: OpenStack Authentication URL cert-file: /etc/ihub/apiserver.crt tls: cert-file: /etc/ihub/tls-cert.pem key-file: /etc/ihub/tls-key.pem common-name: Integration Hub TLS Certificate san-list: 127.0.0.1,localhost 11.3.3 Command-Line Options 11.3.3.1 Available Commands 11.3.3.1.1 Help ihub -h | --help Displays the list of available CLI commands. 11.3.3.1.2 Start ihub start Starts the services. 11.3.3.1.3 Stop ihub stop Stops the services. 11.3.3.1.5 Status ihub status Reports whether the service is currently running. 11.3.3.1.5 Uninstall ihub uninstall [--purge] Uninstalls the service, including the deletion of all files and folders. Database content is not removed. If the --purge option is used, database content will be removed during the uninstallation. 11.3.3.1.6 Version ihub -v | --version Reports the version of the service. 11.3.3.1.10 Setup ihub setup <task> [--help] [--force] [-f <answer-file>] Re-runs the installation setup tasks, or the specific tasks listed. --help Shows help message for setup tasks --force Any existing configuration will be overwritten if this flag is set -f|--file Path to the ihub.env answer file Available Tasks for setup: \u200b all Runs all setup tasks \u200b download-ca-cert Download CMS root CA certificate \u200b download-cert-tls Download CA certificate from CMS for tls \u200b attestation-service-connection Establish Attestation service connection \u200b tenant-service-connection Establish Tenant service connection \u200b create-signing-key Create signing key for IHUB \u200b download-saml-cert Download SAML certificate from Attestation service 11.3.4 Directory Layout The ihub installs by default to /etc/ihub. This directory contains the config.yaml configuration file, saml certificate, trusted ca, and the webservice TLS certificate. /etc/ihub/ \u251c\u2500\u2500 apiserver.crt \u251c\u2500\u2500 certs \u2502 \u251c\u2500\u2500 saml \u2502 \u2502 \u2514\u2500\u2500 saml-cert.pem \u2502 \u2514\u2500\u2500 trustedca \u2502 \u2514\u2500\u2500 58f6bcfcd.pem \u251c\u2500\u2500 config.yml \u251c\u2500\u2500 ihub_private_key.pem \u251c\u2500\u2500 ihub_public_key.pem \u251c\u2500\u2500 tls-cert.pem \u2514\u2500\u2500 tls-key.pem 1.3.4.1 Logs /var/logs/ihub 11.4 Certificate Management Service 11.4.1 Installation Answer File Options Key Sample Value Description CMS_NOSETUP false Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. CMS_PORT 8445 Defines the HTTPS port the service will use. AAS_API_URL https://\\<Hostname or IP address of the AAS>:8444/aas/ URL to connect to the AAS, used during setup for authentication. AAS_TLS_SAN \\<Comma-separated list of IPs/hostnames for the AAS> SAN list populated in special JWT token, this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match. LOG_ROTATION_PERIOD hourly, daily, weekly, monthly, yearly log rotation period, for more details refer- https://linux.die.net/man/8/logrotate LOG_COMPRESS Compress Old versions of log files are compressed with gzip, for more details refer- https://linux.die.net/man/8/logrotate LOG_DELAYCOMPRESS delaycompress Postpone compression of the previous log file to the next rotation cycle, for more details refer- https://linux.die.net/man/8/logrotate LOG_COPYTRUNCATE Copytruncate Truncate the original log file in place after creating a copy,'create' creates new one, for more details refer- https://linux.die.net/man/8/logrotate LOG_SIZE 1K Log files are rotated when they grow bigger than size bytes, for more details refer- https://linux.die.net/man/8/logrotate LOG_OLD 12 Log files are rotated count times before being removed, for more details refer- https://linux.die.net/man/8/logrotate CMS_CA_CERT_VALIDITY 5 CMS Root Certificate Validity in years CMS_CA_ORGANIZATION INTEL CMS Certificate Organization CMS_CA_LOCALITY US CMS Certificate locality CMS_CA_PROVINCE CA CMS Certificate province CMS_CA_COUNTRY USA CMS Certificate country CMS_TLS_SAN_LIST Comma-separated list of IP addresses and hostnames to be added to the SAN list of CMS server CMS_SERVER_READ_TIMEOUT 30s MS server - ReadTimeout is the maximum duration for reading the entire request, including the body. CMS_SERVER_READ_HEADER_TIMEOUT 10s CMS server - ReadHeaderTimeout is the amount of time allowed to read request headers CMS_SERVER_WRITE_TIMEOUT 10s CMS server - WriteTimeout is the maximum duration before timing out writes of the response. CMS_SERVER_IDLE_TIMEOUT 10s CMS server - IdleTimeout is the maximum amount of time to wait for the next request when keep-alives are enabled. CMS_SERVER_MAX_HEADER_BYTES 1048576 CMS server - MaxHeaderBytes controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. AAS_JWT_CN AAS JWT Signing Certificate CN of AAS JWT certificate, this gets populated in special JWT token. AAS must send JWT certificate CSR with this CN. AAS_TLS_CN AAS TLS Certificate CN of AAS TLS certificate, this gets populated in special JWT token. AAS must send TLS certificate CSR with this CN. AAS_TLS_SAN SAN list populated in special JWT token, this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match. 11.4.2 Configuration Options The CMS configuration can be found in /etc/cms/config.yml port : 8445 loglevel : info authserviceurl : https://<AAS IP or hostname>:8444/aas/ cacertvalidity : 5 organization : INTEL locality : SC province : CA country : US keyalgorithm : rsa keyalgorithmlength : 3072 rootcacertdigest : <sha384> tlscertdigest : <sha384> tokendurationmins : 20 aasjwtcn : \"\" aastlscn : \"\" aastlssan : \"\" authdefender : maxattempts : 5 intervalmins : 5 lockoutdurationmins : 15 11.4.3 Command-Line Options 11.4.3.1 Help cms help Displays the list of available CLI commands. 11.4.3.2 Start cms start Starts the services. 11.4.3.3 Stop cms stop Stops the service. 11.4.3.5 Status cms status Reports whether the service is currently running. 11.4.3.6 Uninstall cms uninstall Uninstalls the service, including the deletion of all files and folders. 11.4.3.7 Version cms version Reports the version of the service. 11.4.3.8 Tlscertsha384 Shows the SHA384 of the TLS certificate. 11.4.3.9 setup [task] Runs a specific setup task. Avaliable Tasks for setup: cms setup server [--port=<port>] - Setup http server on \\<port> - Environment variable CMS_PORT=\\<port> can be set alternatively cms setup root_ca [--force] - Create its own self signed Root CA keypair in /etc/cms for quality of life - Option [--force] overwrites any existing files, and always generate new Root CA keypair cms setup tls [--force] [--host_names=<host_names>] - Create its own root_ca signed TLS keypair in /etc/cms for quality of life - Option [--force] overwrites any existing files, and always generate root_ca signed TLS keypair - Argument \\<host_names> is a list of host names used by local machine, seperated by comma - Environment variable CMS_HOST_NAMES=\\<host_names> can be set alternatively cms setup cms_auth_token [--force] - Create its own self signed JWT keypair in /etc/cms/jwt for quality of life - Option [--force] overwrites any existing files, and always generate new JWT keypair and token 11.4.4 Directory Layout The Certificate Management Service installs by default to /opt/cms with the following folders. 11.4.4.1 Bin This folder contains executable scripts. 11.44.2 Cacerts This folder contains the CMS root CA certificate. 11.5 Authentication and Authorization Service 11.5.1 Installation Answer File Options Key Sample Value Description CMS_BASE_URL https://<cms IP or hostname>/cms/v1/ Required; Provides the URL for the CMS. AAS_NOSETUP false Optional. Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. AAS_DB_HOSTNAME localhost Required. Hostname or IP address of the AAS database AAS_DB_PORT 5432 Required. Database port number AAS_DB_NAME pgdb Required. Database name AAS_DB_USERNAME dbuser Required. Database username AAS_DB_PASSWORD dbpassword Required. Database password AAS_DB_SSLMODE verify-ca Defines the SSL mode for the connection to the database. If not specified, the database connection will not use certificate verification. If specified, certificate verification will be required for database connections. AAS_DB_SSLCERTSRC /usr/local/pgsql/data/server.crt Optional, required if the \u201cAAS_DB_SSLMODE is set to verify-ca Defines the location of the database SSL certificate. AAS_DB_SSLCERT \\<path_to_cert_file_on_system> Optional. The AAS_DB_SSLCERTSRC variable defines the source location of the database SSL certificate; this variable determines the local location. If the former option is used without specifying this option, the service will copy the SSL certificate to the default configuration directory. AAS_ADMIN_USERNAME admin@aas Required. Defines a new AAS administrative user. This user will be able to create new users, new roles, and new role-user mappings. This user will have the AAS:Administrator role. AAS_ADMIN_PASSWORD aasAdminPass Required. Password for the new AAS admin user. AAS_JWT_CERT_SUBJECT \"AAS JWT Signing Certificate\" Optional. Defines the subject of the JWT signing certificate. AAS_JWT_TOKEN_DURATION_MINS 5 Optional. Defines the amount of time in minutes that an issued token will be valid. SAN_LIST 127.0.0.1,localhost,10.x.x.x Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. BEARER_TOKEN \\<token> Required. Token from the CMS generated during CMS setup that allows the AAS to perform initial setup tasks. LOG_LEVEL Critical, error, warning, info, debug, trace Optional. Defaults to INFO. Changes the log level used. 11.5.2 Configuration Options 11.5.3 Command-Line Options 11.5.3.1 Help Displays the list of available CLI commands. 11.5.3.2 setup \\<task> Executes a specific setup task. Can be used to change the current configuration. Available Tasks for setup: 11.5.3.2.1 authservice setup all - Runs all setup tasks 11.5.3.2.2 authservice setup database [-force] [--arguments=\\<argument_value>] - Available arguments are: - db-host alternatively, set environment variable AAS_DB_HOSTNAME - db-port alternatively, set environment variable AAS_DB_PORT - db-user alternatively, set environment variable AAS_DB_USERNAME - db-pass alternatively, set environment variable AAS_DB_PASSWORD - db-name alternatively, set environment variable AAS_DB_NAME - db-sslmode \\<disable|allow|prefer|require|verify-ca|verify-full> alternatively, set environment variable AAS_DB_SSLMODE - db-sslcert path to where the certificate file of database. Only applicable for db-sslmode=\\<verify-ca|verify-full. If left empty, the cert will be copied to /etc/authservice/tdcertdb.pem alternatively, set environment variable AAS_DB_SSLCERT - db-sslcertsrc \\<path to where the database ssl/tls certificate file> mandatory if db-sslcert does not already exist alternatively, set environment variable AAS_DB_SSLCERTSRC - Run this command with environment variable AAS_DB_REPORT_MAX_ROWS and AAS_DB_REPORT_NUM_ROTATIONS can update db rotation arguments 11.5.3.2.3 authservice setup server [--port=<port>] - Setup http server on \\<port> - Environment variable AAS_PORT=\\<port> can be set alternatively authservice setup tls [--force] [--host_names=\\<host_names>] - Use the key and certificate provided in /etc/threat-detection if files exist - Otherwise create its own self-signed TLS keypair in /etc/authservice for quality of life - Option [--force] overwrites any existing files, and always generate self-signed keypair - Argument \\<host_names> is a list of host names used by local machine, seperated by comma - Environment variable AAS_TLS_HOST_NAMES=\\<host_names> can be set alternatively 11.5.3.2.4 authservice setup admin [--user=<username>] [--pass=<password>] - Environment variable AAS_ADMIN_USERNAME=\\<username> can be set alternatively - Environment variable AAS_ADMIN_PASSWORD=\\<password> can be set alternatively 11.5.3.2.5 authservice setup download_ca_cert [--force] - Download CMS root CA certificate - Option [--force] overwrites any existing files, and always downloads new root CA cert - Environment variable CMS_BASE_URL=\\<url> for CMS API url 11.5.3.2.6 authservice setup download_cert TLS [--force] - Generates Key pair and CSR, gets it signed from CMS - Option [--force] overwrites any existing files, and always downloads newly signed TLS cert - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS - Environment variable KEY_PATH=\\<key_path> to override default specified in config - Environment variable CERT_PATH=\\<cert_path> to override default specified in config - Environment variable AAS_TLS_CERT_CN=\\<TLS CERT COMMON NAME> to override default specified in config - Environment variable AAS_CERT_ORG=\\<CERTIFICATE ORGANIZATION> to override default specified in config - Environment variable AAS_CERT_COUNTRY=\\<CERTIFICATE COUNTRY> to override default specified in config - Environment variable AAS_CERT_LOCALITY=\\<CERTIFICATE LOCALITY> to override default specified in config - Environment variable AAS_CERT_PROVINCE=\\<CERTIFICATE PROVINCE> to override default specified in config - Environment variable SAN_LIST=\\<san> list of hosts which needs access to service 11.5.3.2.7 authservice setup jwt - Create jwt signing key and jwt certificate signed by CMS - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable AAS_JWT_CERT_CN=\\<CERTIFICATE SUBJECT> AAS JWT Certificate Subject - Environment variable AAS_JWT_INCLUDE_KEYID=\\<KEY ID> AAS include key id in JWT Token - Environment variable AAS_JWT_TOKEN_DURATION_MINS=\\<DURATION> JWT Token validation minutes - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS 11.5.3.2.8 Start Starts the service. 11.5.3.2.9 Status Displays the current status of the service. 11.5.3.2.10 Stop Stops the service. 11.5.3.2.11 tlscertsha384 Shows the SHA384 of the TLS certificate. 11.5.3.2.12 Uninstall Removes the service. Use the \u201c--purge\u201d flag to also delete all data. 11.5.3.2.13 Version Shows the version of the service. 11.5.4 Directory Layout The Verification Service installs by default to /opt/authservice with the following folders. 11.5.4.1 Bin Contains executable scripts and binaries. 11.5.4.2 dbscripts Contains database scripts. 11.6 Workload Service 11.6.1 Installation Answer File Options Key Sample Value Description WLS_LOGLEVEL INFO (Optional) Alternatives include WARN and DEBUG. Sets the log level for the service. WLS_NOSETUP false (Optional) Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. Defaults to \u201cfalse\u201d if unset. WLS_PORT 5000 (Optional) Defines the HTTPS port used by the service Defaults to 5000 if unset. WLS_DB_HOSTNAME localhost (Required) Database hostname WLS_DB wlsdb (Required) Database name WLS_DB_PORT 5432 (Required) Database port number WLS_DB_USERNAME wlsdbuser (Required) Database username WLS_DB_PASSWORD wlsdbuserpass (Required) Database password HVS_URL https://\\<HVS IP address or hostname>:8443/hvs/v2/ (Required) Base URL for the HVS AAS_API_URL https://\\<AAS IP address or hostname>:8444/aas Base URL for the AAS SAN_LIST 127.0.0.1,localhost,10.x.x.x Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. CMS_BASE_URL Base URL for the CMS BEARER_TOKEN \\<token> (Required) Token from the CMS generated during CMS setup that allows the AAS to perform initial setup tasks. WLS_TLS_CERT_CN 'WLS TLS Certificate (Optional) Set the Common name for TLS cert to be downloaded from CMS. Default is 'WLS TLS Certificate'. WLS_CERT_ORG 'INTEL' (Optional) Set the Organization in Subject of CSR. Default is 'INTEL'. WLS_CERT_COUNTRY 'US' (Optional) Set the Country in Subject of CSR. Default is 'US'. WLS_CERT_PROVINCE 'SF' (Optional) Set the Province in Subject of CSR. Default is 'SF'. WLS_CERT_LOCALITY 'SC' (Optional) Set the Locality in Subject of CSR. Default is 'SC'. KEY_CACHE_SECONDS 300 (Optional) Set the time till which the key will be cached. Default is '300 seconds'. WLS_LOGLEVEL Info, debug, error, warn (Optional) Set the log level. KEY_PATH (Optional) Redefines the path to the keystore folder CERT_PATH (Optional) Redefines the path to the certificates folder 11.6.2 Configuration Options The Workload Service configuration can be found in /etc/workload-service/config.yml : port: 5000 cmstlscertdigest: <sha384> postgres: dbname: wlsdb user: <database username> password: <database password> hostname: <database IP or hostname> port: 5432 sslmode: false hvs_api_url: https://<HVS IP or hostname>:8443/hvs/v2/ cms_base_url: https://<CMS IP or hostname>:8445:/cms/v1/ aas_api_url: https://<AAS IP or hostname>:8444/aas/ subject: tlscertcommonname: WLS TLS Certificate organization: INTEL country: US province: SF locality: SC wls: user: <username of service account used by WLS to access other services>> password: <password> loglevel: info key_cache_seconds: 300 11.6.3 Command-Line Options The Workload Service supports several command-line commands that can be executed only as the Root user: Syntax: workload-service <command> 11.6.3.1 Help Available Commands: help|-help|--help Show this help message start Start workload-service stop Stop workload-service status Determine if workload-service is running uninstall [--purge] Uninstall workload-service. --purge option needs to be applied to remove configuration and data files setup Setup workload-service for use Setup command usage: workload-service \\<command> [task...] Available tasks for setup: download_ca_cert - Download CMS root CA certificate - Environment variable CMS_BASE_URL=\\<url> for CMS API url download_cert TLS - Generates Key pair and CSR, gets it signed from CMS - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS - Environment variable KEY_PATH=\\<key_path> to override default specified in config - Environment variable CERT_PATH=\\<cert_path> to override default specified in config - Environment variable WLS_TLS_CERT_CN=\\<COMMON NAME> to override default specified in config - Environment variable WLS_CERT_ORG=\\<CERTIFICATE ORGANIZATION> to override default specified in config - Environment variable WLS_CERT_COUNTRY=\\<CERTIFICATE COUNTRY> to override default specified in config - Environment variable WLS_CERT_LOCALITY=\\<CERTIFICATE LOCALITY> to override default specified in config - Environment variable WLS_CERT_PROVINCE=\\<CERTIFICATE PROVINCE> to override default specified in config server Setup http server on given port -Environment variable WLS_PORT=\\<port> should be set database Setup workload-service database Required env variables are: - WLS_DB_HOSTNAME : database host name - WLS_DB_PORT : database port number - WLS_DB_USERNAME : database user name - WLS_DB_PASSWORD : database password - WLS_DB : database schema name hvsconnection Setup task for setting up the connection to the Host Verification Service(HVS) Required env variables are: - HVS_URL : HVS URL aasconnection Setup to create workload service user roles in AAS - AAS_API_URL : AAS API URL - BEARER_TOKEN : Bearer Token logs Setup workload-service log level - Environment variable WLS_LOG_LEVEL=\\<log level> should be set 11.6.3.2 start Start workload-service 11.6.3.3 stop Stop workload-service 11.6.3.4 status Determine if workload-service is running 11.6.3.5 uninstall [--purge] Uninstall workload-service. --purge option needs to be applied to remove configuration and data files 11.6.3.6 setup Setup workload-service for use Setup command usage: workload-service \\<command> [task...] 11.6.3.6.1 download_ca_cert - Download CMS root CA certificate - Environment variable CMS_BASE_URL=\\<url> for CMS API url 11.6.3.6.2 download_cert TLS - Generates Key pair and CSR, gets it signed from CMS - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS - Environment variable KEY_PATH=\\<key_path> to override default specified in config - Environment variable CERT_PATH=\\<cert_path> to override default specified in config - Environment variable WLS_TLS_CERT_CN=\\<COMMON NAME> to override default specified in config - Environment variable WLS_CERT_ORG=\\<CERTIFICATE ORGANIZATION> to override default specified in config - Environment variable WLS_CERT_COUNTRY=\\<CERTIFICATE COUNTRY> to override default specified in config - Environment variable WLS_CERT_LOCALITY=\\<CERTIFICATE LOCALITY> to override default specified in config - Environment variable WLS_CERT_PROVINCE=\\<CERTIFICATE PROVINCE> to override default specified in config 11.6.3.6.3 server Setup http server on given port -Environment variable WLS_PORT=\\<port> should be set 11.6.3.6.4 database Setup workload-service database Required env variables are: - WLS_DB_HOSTNAME : database host name - WLS_DB_PORT : database port number - WLS_DB_USERNAME : database user name - WLS_DB_PASSWORD : database password - WLS_DB : database schema name 11.6.3.6.5 hvsconnection Setup task for setting up the connection to the Host Verification Service(HVS) Required env variables are: - HVS_URL : HVS URL 11.6.3.6.6 aasconnection Setup to create workload service user roles in AAS - AAS_API_URL : AAS API URL - BEARER_TOKEN : Bearer Token 11.6.3.6.7 logs Setup workload-service log level - Environment variable WLS_LOG_LEVEL=\\<log level> should be set 11.6.4 Directory Layout The Workload Service installs by default to /opt/wls with the following folders. 11.7 Key Broker Service 11.7.1 Installation Answer File Options Variable Name Default Value Notes USERNAME KBS admin username PASSWORD KBS admin password CMS_BASE_URL Required for generating TLS certificate CMS_TLS_CERT_SHA384 SHA384 digest of CMS TLS certificate AAS_API_URL AAS baseurl BEARER_TOKEN JWT token for installation user KMS_HOME /opt/kms Application home directory KBS_SERVICE_USERNAME kms Non-root user to run KMS JETTY_PORT 80 The server will listen for HTTP connections on this port JETTY_SECURE_PORT 443 The server will listen for HTTPS connections on this port KMS_LOG_LEVEL INFO Sets the root log level in logback.xml KMS_NOSETUP false Skips setup during installation if set to true ENDPOINT_URL http://localhost Endpoint to be used in key transfer url KEY_MANAGER_PROVIDER DirectoryKeyManager Key manager to be used for key management KBS_SERVICE_PASSWORD This password protects the configuration file and the password vault. It must be set before installing and before starting the KBS KMS_TLS_CERT_IP IP addresses to be included in SAN list KMS_TLS_CERT_DNS DNS addresses to be included in SAN list BARBICAN_PROJECT_ID OpenStack Barbican project id BARBICAN_ENDPOINT_URL OpenStack Barbican endpoint url BARBICAN_KEYSTONE_PUBLIC_ENDPOINT OpenStack Keystone endpoint url BARBICAN_TENANTNAME OpenStack Barbican tenant name BARBICAN_USERNAME OpenStack Barbican admin username BARBICAN_PASSWORD OpenStack Barbican admin password 11.7.2 Configuration Options 11.7.3 Command-Line Options The Key Broker Service supports several command-line commands that can be executed only as the Root user: Usage: kbs [arguments] Available Commands: help|-h|--help Show this help message version|-v|--version Show the version of current kbs build setup Run setup task start Start kbs status Show the status of kbs stop Stop kbs uninstall [--purge] Uninstall kbs --purge all configuration and data files will be removed if this flag is set Usage of kbs setup: kbs setup [--help] [--force] [-f ] --help show help message for setup task --force existing configuration will be overwritten if this flag is set -f|--file the answer file with required arguments Available Tasks for setup: all Runs all setup tasks server Setup http server on given port download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls create-default-key-transfer-policy Create default key transfer policy for KBS 11.7.4 Directory Layout The Verification Service installs by default with the following folders: /opt/kbs/bin Contains KBS binaries /etc/kbs/ Contains KBS configuration files /var/log/kbs/ Contains KBS logs 11.8 Workload Agent 11.8.1 Installation Answer File Options 11.8.2 Configuration Options 11.8.3 Command-Line Options Available Commands: 11.8.3.1 Help wlagent help|-help|--help Show help message 11.8.3.2 setup wlagent setup [task] Run setup task 11.8.3.2.1 Available Tasks for setup SigningKey Generate a TPM signing key BindingKey Generate a TPM binding key RegisterSigningKey Register a signing key with the host verification service Environment variable BEARER_TOKEN=\\<token> for authenticating with Verification service RegisterBindingKey Register a binding key with the host verification service Environment variable BEARER_TOKEN=\\<token> for authenticating with Verification service 11.8.3.3 start Start wlagent 11.8.3.4 stop Stop wlagent 11.8.3.5 status Reports the status of wlagent service 11.8.3.6 uninstall Uninstall wlagent 11.8.3.7 uninstall --purge Uninstalls workload agent and deletes the existing configuration directory 11.8.3.8 version Reports the version of the workload agent 11.8.4 Directory Layout The Workload Agent installs by default to /opt/workload-agent with the following folders. 11.8.4.1 Bin Contains scripts and executable binaries. 11.9 Workload Policy Manager 11.9.1 Installation Answer File Options Key Sample Value Description KMS_API_URL https://\\<IP address or hostname of the KBS>:9443/v1/ Required. Defines the baseurl for the Key Broker Service. The WPM uses this URL to request new encryption keys when encrypting images. CMS_TLS_CERT_SHA384 Required. SHA384 hash of the CMS TLS certificate CMS_BASE_URL https://\\<IP address or hostname for CMS>:8445/cms/v1/ Required. Defines the base URL for the CMS owned by the image owner. Note that this CMS may be different from the CMS used for other components. AAS_API_URL https://\\<IP address or hostname for AAS>:8444/aas Required. Defines the baseurl for the AAS owned by the image owner. Note that this AAS may be different from the AAS used for other components. BEARER_TOKEN \\<token> Required; token from CMS with permissions used for installation. WPM_WITH_CONTAINER_SECURITY \u201cyes\u201d or \u201cno\u201d Optional, defaults to \u201cno.\u201d Defines whether the WPM will support Docker Container encryption. If this is set to Yes, the appropriate prerequisites for Docker Container encryption will be installed. If this is set to \u201cno,\u201d the WPM will not be able to encrypt Docker Container images, and will only be usable to encrypt Virtual Machine images. WPM_LOG_LEVEL INFO (default), DEBUG Optional; defines the log level for the WPM. Defaults to INFO. WPM_SERVICE_PASSWORD Defines the credentials for the WPM to use to access the KBS WPM_SERVICE_USERNAME Defines the credentials for the WPM to use to access the KBS 11.9.2 Configuration Options 11.9.3 Command-Line Options The Workload Policy Manager supports several command-line commands that can be executed only as the Root user: Syntax: wpm \\<command> 11.9.3.1 create-image-flavor Creates a new image flavor and encrypts a source image. Output is the image flavor in JSON format and the encrypted image. usage: wpm create-image-flavor [-l label] [-i in] [-o out] [-e encout] [-k key] -l, --label image flavor label -i, --in input image file path -o, --out (optional) output image flavor file path if not specified, will print to the console -e, --encout (optional) output encrypted image file path if not specified, encryption is skipped -k, --key (optional) existing key ID if not specified, a new key is generated 11.9.3.2 create-container-image-flavor Used to encrypt Docker container images and generate a container image flavor. usage: wpm create-container-image-flavor [-i img-name] [-t tag] [-f dockerFile] [-d build-dir] [-k keyId] [-e] [-s] [-n notaryServer] [-o out-file] -i, --img-name container image name -t, --tag (optional)container image tag name -f, --docker-file (optional) container file path to build the container image -d, --build-dir (optional) build directory to build the container image -k, --key-id (optional) existing key ID if not specified, a new key is generated -e, --encryption-required (optional) boolean parameter specifies if container image needs to be encrypted -s, --integrity-enforced (optional) boolean parameter specifies if container image should be signed -n, --notary-server (optional) specify notary server url -o, --out-file (optional) specify output file path 11.9.3.3 get-container-image-id 11.9.3.4 create-software-flavor Not currently supported; intended for future functionality. 11.9.3.5 Uninstall Removes the WPM. 11.9.3.6 --help Displays help text 11.9.3.7 --version Displays the WPM version 11.9.3.8 Setup usage : wpm setup [\\<tasklist>] \\<tasklist>-space separated list of tasks 11.9.3.8.1 wpm setup 11.9.3.8.2 wpm setup CreateEnvelopeKey 11.9.3.8.3 wpm setup RegisterEnvelopeKey 11.9.3.8.4 wpm setup download_ca_cert [--force] - Download CMS root CA certificate - Option [--force] overwrites any existing files, and always downloads new root CA cert - Environment variable CMS_BASE_URL=\\<url> for CMS API url 11.9.3.8.5 wpm setup download_cert Flavor-Signing [--force] - Generates Key pair and CSR, gets it signed from CMS - Option [--force] overwrites any existing files, and always downloads newly signed Flavor Signing cert - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS - Environment variable KEY_PATH=\\<key_path> to override default specified in config - Environment variable CERT_PATH=\\<cert_path> to override default specified in config - Environment variable WPM_FLAVOR_SIGN_CERT_CN=\\<COMMON NAME> to override default specified in config - Environment variable WPM_CERT_ORG=\\<CERTIFICATE ORGANIZATION> to override default specified in config - Environment variable WPM_CERT_COUNTRY=\\<CERTIFICATE COUNTRY> to override default specified in config - Environment variable WPM_CERT_LOCALITY=\\<CERTIFICATE LOCALITY> to override default specified in config - Environment variable WPM_CERT_PROVINCE=\\<CERTIFICATE PROVINCE> to override default specified in config 12 Certificate and Key Management 12.1 Host Verification Service Certificates and Keys The Host Verification Service has several unique certificates not present on other services. 12.1.1 SAML The SAML Certificate a is used to sign SAML attestation reports, and is itself signed by the Root Certificate. This certificate is unique to the Verification Service. /opt/hvs/configuration/saml.crt /opt/hvs/configuration/saml.crt.pem /opt/hvs/configuration/SAML.jks The SAML Certificate can be replaced with a user-specified keypair and certificate chain using the following command: mtwilson replace-saml-key-pair --private-key=new.key.pem --cert-chain=new.cert-chain.pem This will: Replace key pair in /opt/hvs/configuration/SAML.jks , alias samlkey1 Update /opt/hvs/configuration/saml.crt with saml DER public key cert Update /opt/hvs/configuration/saml.crt.pem with saml PEM public key cert Update configuration properties: saml.key.password to null saml.certificate.dn saml.issuer When the SAML certificate is replaced, all hosts will immediately be added to a queue to generate a new attestation report, since the old signing certificate is no longer valid. No service restart is necessary. If the Integration Hub is being used, the new SAML certificate will need to be imported to the Hub. 12.1.2 Asset Tag The Asset tag Certificate is used to sign all Asset Tag Certificates. This certificate is unique to the Verification Service. /opt/hvs/configuration/tag-cacerts.pem The Asset Tag Certificate can be replaced with a user-specified keypair and certificate chain using the following command: mtwilson replace-tag-key-pair --private-key=new.key.pem --cert-chain=new.cert-chain.pem This will: Replace key pair in database table mw_file (cakey is private and public key pem formatted, cacerts is cert chain) Update /opt/hvs/configuration/tag-cacerts.pem with cert chain Update configuration properties: tag.issuer.dn No service restart is needed. However, all existing Asset Tags will be considered invalid, and will need to be recreated. It is recommended to delete any existing Asset Tag certificates and Flavors, and then recreate and deploy new Tags. 12.1.3 Privacy CA The Privacy CA certificate is used as part of the certificate chain for creating the Attestation Identity Key (AIK) during Trust Agent provisioning. The Privacy CA must be a self-signed certificate. This certificate is unique to the Verification Service. The Privacy CA certificate is used by Trust Agent nodes during Trust Agent provisioning; if the Privacy CA certificate is changed, all Trust Agent nodes will need to be re-provisioned. /opt/hvs/configuration/PrivacyCA.p12 /opt/hvs/configuration/PrivacyCA.pem The Privacy CA Certificate can be replaced with a user-specified keypair and certificate chain using the following command: mtwilson replace-pca-key-pair --private-key=new.key.pem --cert-chain=new.cert-chain.pem This will: Replace key pair in /opt/hvs/configuration/PrivacyCA.p12 , alias 1 Update /opt/hvs/configuration/PrivacyCA.pem with cert Update configuration properties: mtwilson.privacyca.aik.issuer mtwilson.privacyca.aik.validity.days After the Privacy CA certificate is replaced, all Trust Agent hosts will need to be re-provisioned with a new AIK: tagent setup download-mtwilson-privacy-ca-certificate --force tagent setup request-aik-certificate --force tagent restart 12.1.4 Endorsement CA The Endorsement CA is a self-signed certificate used during Trust Agent provisioning. /opt/hvs/configuration/EndorsementCA.p12 /opt/hvs/configuration/EndorsementCA.pem The Endorsement CA Certificate can be replaced with a user-specified keypair and certificate chain using the following command: mtwilson replace-eca-key-pair --private-key=new.key.pem --cert-chain=new.cert-chain.pem This will: Replace key pair in /opt/hvs/configuration/EndorsementCA.p12 , alias 1 Update /opt/hvs/configuration/EndorsementCA.pem with accepted ECs Update configuration properties: mtwilson.privacyca.ek.issuer mtwilson.privacyca.ek.validity.days After the Endorsement CA certificate is replaced, all Trust Agent hosts will need to be re-provisioned with a new Endorsement Certificate: tagent setup request-endorsement-certificate --force tagent restart 12.2 TLS Certificates TLS certificates for each service are issued by the Certificate Management Service during installation. If the CMS root certificate is changed, or to regenerate the TLS certificate for a given service, use the following commands (note: environment variables will need to be set; typically these are the same variables set in the service installation .env file): <servicename> download_ca_cert Download CMS root CA certificate Environment variable CMS_BASE_URL=\\<url> for CMS API url <servicename> download_cert TLS Generates Key pair and CSR, gets it signed from CMS Environment variable CMS_BASE_URL=\\<url> for CMS API url Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS Environment variable KEY_PATH=\\<key_path> to override default specified in config Environment variable CERT_PATH=\\<cert_path> to override default specified in config 13 Uninstallation This section describes steps used for uninstalling Intel SecL-DC services. This section does not apply for containerized deployments. To uninstall a containerized deployment, simply shut down the container and delete the persistence volumes. 13.1 Host Verification Service To uninstall the Verification Service, run the following command: hvs uninstall The hvs uninstall command will not delete any database content. To completely uninstall and delete all database content and user data, run the following: hvs erase-data hvs uninstall Note: The uninstall command must be issued last, because the uninstall process removes the scripts that execute the other commands, along with all database connectivity info. 13.2 Trust Agent To uninstall the Trust Agent, run the following command: tagent uninstall Backs up the configuration directory and removes all Trust Agent files, except for configuration files which are saved and restored. Removes following directories: /usr/local/bin/tagent TRUSTAGENT_HOME : `/opt/trustagent /opt/tbootxm /var/log/trustagent/measurement.* Note: TPM ownership can be preserved by retaining the TPM owner secret. If the Operating System will also be cleared, Linux systems will also require the /usr/local/var/lib/tpm/system.data file to be preserved. This file must be preserved from after ownership is taken, and then replaced after the OS reload before the Trust Agent attempts to reassert ownership. If the ownership secret and/or system.data file are not preserved, reinstallation will require clearing TPM ownership. 13.3 Integration Hub To uninstall the Integration Hub, run the following command: ihub uninstall 14Appendix 14.1 PCR Definitions 14.1.1 Red Had Enterprise Linux 14.1.1.1 TPM 2.0 PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image Initial Boot Block (Intel\u00ae BootGuard only) This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. (Intel\u00ae BootGuard only): Extends measurements based on the Intel\u00ae BootGuard profile configuration and production vs non-production ACM flags; ACM signature; BootGuard key manifest hash; Boot Policy Manifest Signature All PCR 7 Intel\u00ae BootGuard configuration and profiles Describes the success of the IBB measurement event. All (Intel\u00ae BootGuard only) PCR 17 ACM BIOS AC registration information Digest of Processor S-CRTM Digest of Policycontrol Digest of all matching elements used by the policy Digest of STM Digest of Capability field of OsSinitData Digest of MLE For TA hosts, this PCR includes measurements of the OS, InitRD, and UUID. This changes with every install due to InitRD and UUID change. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] Digest of public key modulus used to verify SINIT signature Digest of Processor S-CRTM Digest of Capability field of OSSinitData table Digest of PolicyControl field of used policy Digest of LCP VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Linux hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux 14.1.2 VMWare ESXi 14.1.2.1 TPM 1.2 PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Citrix Xen hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts and is blank for all other host types. VMware ESXi PCR 22 Asset Tag This PCR contains the measurement of the SHA1 of the Asset Tag Certificate provisioned to the TPM, if any. VMware ESXi 14.1.2.2 TPM 2.0 VMWare supports TPM 2.0 with Intel TXT starting in vSphere 6.7 Update 1. Earlier versions will support TPM 1.2 only. PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as part of the PLATFORM flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi this PCR contains individual measurements of all of the non-Kernel modules \u2013 this includes all of the VIBs installed on the ESXi host. This is part of the OS flavor. Note that two ESXi hosts with the same version of ESXi installed may require different OS flavors if different VIBs are installed. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts for some host-specific measurements, and is part of the host-unique flavor. VMware ESXi PCR 22 Asset Tag Asset Tag is not currently supported for TPM 2.0 with ESXi. VMware ESXi A.1 Attestation Rules Platform TPM Flavor Type Rules to be verified Comments RHEL 2.0 HARDWARE PcrMatchesConstant rule for PCR 0 PcrEventLogIncludes rule for PCR 17 (LCP_DETAILS_HASH, BIOSAC_REG_DATA, OSSINITDATA_CAP_HASH, STM_HASH, MLE_HASH, NV_INFO_HASH, tb_policy, CPU_SCRTM_STAT, HASH_START, LCP_CONTROL_HASH) PcrEventLogIntegrity rule for PCR 17 Evaluation of PcrEventLogIncludes would not include initrd and vmlinuz modules. They would be handled in host_specific flavor. Evaluation of PcrEventLogIntegrity rule would also include OS modules (initrd & vmlinuz) OS PcrEventLogIntegrity rule for PCR 17 ASSET_TAG AssetTagMatches rule HOST_SPECIFIC PcrEventLogIncludes rule for PCR 17 (initrd & vmlinuz) VMware ESXi 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 PcrMatchesConstant rule for PCR 17 OS PcrMatchesConstant rule for PCR 18 PcrMatchesConstant rule for PCR 20 PcrEventLogEqualsExcluding rule for PCR 19 (excludes dynamic modules based on component name) PcrEventLogIntegrity rule for PCR 19 ASSET_TAG PcrMatchesConstant rule for PCR 22 VMware ESXi 2.0 NOT SUPPORTED Windows 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule Windows 2.0 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule AssetTagMatches rule needs to be updated to verify the key-value pairs after verifying the tag certificate. A.2 Intel TXT and the Trusted Boot Process Intel\u00ae Security Libraries - Datacenter Functional Security Product Guide August 2020 Revision 3.0 Disclaimer Notice: This document contains information on products in the design phase of development. The information here is subject to change without notice. Do not finalize a design with this information. Intel technologies\u2019 features and benefits depend on system configuration and may require enabled hardware, software, or service activation. Learn more at intel.com, or from the OEM or retailer. No computer system can be absolutely secure. Intel does not assume any liability for lost or stolen data or systems or any damages resulting from such losses. You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Intel products described herein. You agree to grant Intel a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications. Current characterized errata are available on request. This document contains information on products, services and/or processes in development. All information provided here is subject to change without notice. Contact your Intel representative to obtain the latest Intel product specifications and roadmaps. Intel disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. Warning: Altering PC clock or memory frequency and/or voltage may (i) reduce system stability and use life of the system, memory and processor; (ii) cause the processor and other system components to fail; (iii) cause reductions in system performance; (iv) cause additional heat or other damage; and (v) affect system data integrity. Intel assumes no responsibility that the memory, included if used with altered clock frequencies and/or voltages, will be fit for any particular purpose. Check with memory manufacturer for warranty and additional details. Tests document performance of components on a particular test, in specific systems. Differences in hardware, software, or configuration will affect actual performance. Consult other sources of information to evaluate performance as you consider your purchase. For more complete information about performance and benchmark results, visit http://www.intel.com/performance . Cost reduction scenarios described are intended as examples of how a given Intel- based product, in the specified circumstances and configurations, may affect future costs and provide cost savings. Circumstances will vary. Intel does not guarantee any costs or cost reduction. Results have been estimated or simulated using internal Intel analysis or architecture simulation or modeling, and provided to you for informational purposes. Any differences in your system hardware, software or configuration may affect your actual performance. Intel does not control or audit third-party benchmark data or the web sites referenced in this document. You should visit the referenced web site and confirm whether referenced data are accurate. Intel is a sponsor and member of the Benchmark XPRT Development Community, and was the major developer of the XPRT family of benchmarks. Principled Technologies is the publisher of the XPRT family of benchmarks. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases. Copies of documents which have an order number and are referenced in this document may be obtained by calling 1-800-548-4725 or by visiting www.intel.com/design/literature.htm. Intel, the Intel logo, Intel TXT, and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries. *Other names and brands may be claimed as the property of others. Copyright \u00a9 2020, Intel Corporation. All Rights Reserved. Revision History Document Number Revision Number Description Date 1 Updated for all GA Failures May 2019 1.5 Updated for version 1.5 release July 2019 1.6 BETA Updated for 1.6 BETA release November 2019 1.6 Updated for version 1.6 release December 2019 2.0 Updated for version 2.0 release February 2020 2.1 Updated for version 2.1 release April 2020 2.2 Updated for version 2.2 release June 2020 3.0 Updated for version 3.0 release August 2020 Table of Contents [[ TOC ]] 1 Introduction 1.1 Overview Intel Security Libraries for Datacenter is a collection of software applications and development libraries intended to help turn Intel platform security features into real-world security use cases. 1.1.1 Trusted Computing Trusted Computing consists of a set of industry standards defined by the Trusted Computing Group to harden systems and data against attack. These standards include verifying platform integrity, establishing identity, protection of keys and secrets, and more. One of the functions of Intel Security Libraries is to provide a \u201cTrusted Platform,\u201d using Intel security technologies to add visibility, auditability, and control to server platforms. 1.1.1.1 The Chain of Trust In a Trusted Computing environment, a key concept is verification of the integrity of the underlying platform. Verifying platform integrity typically means cryptographic measurement and/or verification of firmware and software components. The process by which this measurement and verification takes place affects the overall strength of the assertion that the measured and verified components have not been altered. Intel refers to this process as the \u201c Chain of Trust ,\u201d whereby at boot time, a sequence of cryptographic measurements and signature verification events happen in a defined order, such that measurement/verification happens before execution, and each entity responsible for performing a measurement or verification is measured by another step earlier in the process. Any break in this chain leads to an opportunity for an attacker to modify code and evade detection. 1.1.1.2 Hardware Root of Trust The Root of Trust, the first link in the chain, can be one of several different options. Anything that happens in the boot process before the Root of Trust must be considered to be within the \u201ctrust boundary,\u201d signifying components whose trustworthiness cannot be assessed. For this reason, it\u2019s best to use a Root of Trust that starts as early in the system boot process as possible, so that the Chain of Trust during the boot process can cover as much as possible. Multiple Root of Trust options exist, ranging from firmware to hardware. In general, a hardware Root of Trust will have a smaller \u201ctrust boundary\u201d than a firmware Root of Trust. A hardware Root of Trust will also have the benefit of immutability \u2013 where firmware can easily be flashed and modified, hardware is much more difficult to tamper with. Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) Intel\u00ae Trusted Execution Technology is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Grantley generation. Intel\u00ae TXT is enabled in the system BIOS (typically under the Processor > Advanced tab), and requires Intel\u00ae VT-d and Intel VT-x features to be enabled as prerequisites (otherwise the option will be grayed out). Intel\u00ae TXT will ship \u201cdisabled\u201d by default. Intel\u00ae BootGuard (Intel\u00ae BtG) Intel\u00ae BootGuard is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Purley-Refresh generation. Unlike Intel\u00ae TXT, Intel\u00ae BtG is configured in platform fuses, not in the system BIOS. Intel\u00ae BtG is fused into several \u201cprofiles\u201d that determine the behavior of the feature. Intel\u00ae BtG supports both \u201cverify\u201d and \u201cmeasure\u201d profiles; in \u201cverify\u201d profiles, Intel\u00ae BtG will verify the signature of the platform Initial Boot Block (IBB). In \u201cmeasure\u201dprofiles, Intel\u00ae BtG will hash the IBB and extend that measurement to a TPM PCR. It is recommended that Intel\u00ae BtG be fused into the \u201cmeasure and verify\u201d profile for maximum protection and auditability. Because the Intel\u00ae BtG profile is configured using fuses, the server OEM/ODM will determine the profile used at manufacturing time. Please contact your server vendor to determine what Intel\u00ae BtG profiles are available in their product line. Because Intel\u00ae BtG only measures/verifies the integrity of the IBB, it\u2019s important to have an additional technology handle measurements later in the boot process. Intel\u00ae TXT can provide this function using tboot to invoke SINIT, and UEFI SecureBoot can alternatively provide similar functionality (note that Linux users should properly configure Shim and use a signed kernel for UEFI SecureBoot). 1.1.1.3 Supported Trusted Boot Options Intel\u00ae SecL-DC supports several options for Trusted Computing, depending on the features available on the platform. Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. 1.1.1.4 Remote Attestation Trusted computing consists primarily of two activities \u2013 measurement, and attestation. Measurement is the act of obtaining cryptographic representations for the system state. Attestation is the act of comparing those cryptographic measurements against expected values to determine whether the system booted into an acceptable state. Attestation can be performed either locally, on the same host that is to be attested, or remotely, by an external authority. The trusted boot process can optionally include a local attestation involving the evaluation of a TPM-stored Launch Control Policy (LCP). In this case, the host\u2019s TPM will compare the measurements that have been taken so far to a set of expected PCR values stored in the LCP; if there is a mismatch, the boot process is halted entirely. Intel\u00ae SecL utilizes remote attestation, providing a remote Verification Service that maintains a database of expected measurements (or \u201cflavors\u201d), and compares the actual boot-time measurements from any number of hosts against its database to provide an assertion that the host booted into a \u201ctrusted\u201d or \u201cuntrusted\u201d state. Remote attestation is typically easier to centrally manage (as opposed to creating an LCP for each host and entering the policy into the host\u2019s TPM), does not halt the boot process allowing for easier remediation, and separates the attack surface into separate components that must both be compromised to bypass security controls. Both local and remote attestation can be used concurrently. However, Intel\u00ae SecL, and this document, will focus only on remote attestation. For more information on TPM Launch Control Policies, consult the Intel Trusted Execution Technology (Intel TXT) Software Development Guide ( https://www.intel.com/content/dam/www/public/us/en/documents/guides/intel-txt-software-development-guide.pdf ). 1.1.2 Intel\u00ae Security Libraries for Datacenter Features 1.1.2.1 Platform Integrity Platform Integrity is the use case enabled by the specific implementation of the Chain of Trust and Remote Attestation concepts. This involves the use of a Root of Trust to begin an unbroken chain of platform measurements at server boot time, with measurements extended to the Trusted Platform Module and compared against expected values to verify the integrity of measured components. This use case is foundational for other Intel\u00ae SecL use cases. 1.1.2.2 Data Sovereignty Data Sovereignty builds on the Platform Integrity use case to allow physical TPMs to be written with Asset Tags containing any number of key/value pairs. This use case is typically used to identify the geographic location of the physical server, but can also be used to identify other attributes. For example, the Asset Tags provided by the Data Sovereignty use case could be used to identify hosts that meet specific compliance requirements and can run controlled workloads. 1.1.2.3 Application Integrity Added in the Intel\u00ae SecL-DC 1.5 release, Application Integrity allows any files and folders on a Linux host system to be included in the Chain of Trust integrity measurements. These measurements are attested by the Verification Service along with the other platform measurements, and are included in determining the host\u2019s overall Trust status. The measurements are performed by a measurement agent called tbootXM, which is built into initrd during Trust Agent installation. Because initrd is included in other Trusted Computing measurements, this allows Intel\u00ae SecL-DC to carry the Chain of Trust all the way to the Linux filesystem. 1.1.2.4 Workload Confidentiality for Virtual Machines and Containers Added in the Intel\u00ae SecL-DC 1.6 release, Workload Confidentiality allows virtual machine and Docker container images to be encrypted at rest, with key access tied to platform integrity attestation. Because security attributes contained in the platform integrity attestation report are used to control access to the decryption keys, this feature provides both protection for at-rest data, IP, code, etc in Docker container or virtual machine images, and also enforcement of image-owner-controlled placement policies. When decryption keys are released, they are sealed to the physical TPM of the host that was attested, meaning that only a server that has successfully met the policy requirements for the image can actually gain access. Workload Confidentiality begins with the Workload Policy Manager (WPM) and a qcow2 or Docker image that needs to be protected. The WPM is a lightweight application that will request a new key from the Key Broker, use that key to encrypt the image, and generate an Image Flavor. The image owner will then upload the encrypted image to their desired image storage service (for example, OpenStack Glance or a local Docker Registry), and the image ID from the image storage will be uploaded along with the Image Flavor to the Intel\u00ae SecL Workload Service. When that image is used to launch a new VM or container, the Workload Agent will intercept the VM or container start and request the decryption key for that image from the Workload Service. The Workload Service will use the image ID and the Image Flavor to find the key transfer URL for the appropriate Key Broker, and will query the Verification Service for the latest Platform Integrity trust attestation report for the host. The Key Broker will use the attestation report to determine whether the host meets the policy requirements for the key transfer, and to verify that the report is signed by a Verification Service known to the Broker. If the report is genuine and meets the policy requirements, the image decryption key is sealed using an asymmetric key from that host\u2019s TPM, and sent back to the Workload Service. The Workload Service then caches the key for 5 minutes (to avoid performance issues for multiple rapid launch requests; note that these keys are still wrapped using a sealing key unique to the hosts TPM, so multiple hosts would require multiple keys even for an identical image) and return the wrapped key to the Workload Agent on the host, which then uses the host TPM to unseal the image decryption key. The key is then used to create a new LUKS volume, and the image is decrypted into this volume. This functionality means that a physical host must pass policy requirements in order to gain access to the image key, and the image will be encrypted at rest both in image storage and on the compute host. Beginning with the Intel\u00ae SecL-DC version 2.1 release, the Key Broker now supports 3 rd -party key managers that are KMIP-compliant. The Key Broker has been updated to use the \u201clibkmip\u201d client. 1.1.2.5 Signed Flavors Added in the Intel\u00ae SecL-DC 1.6 release, Flavor signing is an improvement to the existing handling of expected attestation measurements, called \u201cFlavors.\u201d This feature adds the ability to digitally sign Flavors so that the integrity of the expected measurements themselves can be verified when attestations occur. This also means that Flavors can be more securely transferred between different Verification Service instances. Flavor signing is seamlessly added to the existing Flavor creation process (both importing from a sample host and \u201cmanually\u201d creating a Flavor using the POST method to the /v2/flavors resource). When a Flavor is created, the Verification Service will sign it using a signing certificate signed by the Certificate Management Service (this is created during Verification Service setup). Each time that the Verification Service evaluates a Flavor, it will first verify the signature on that Flavor to ensure the integrity of the Flavor contents before it is used to attest the integrity of any host. 1.1.2.6 Trusted Virtual Kubernetes Worker Nodes Added in the Intel\u00ae SecL-DC version 2.1 release, this feature provides a Chain of Trust solution extending to Kubernetes Worker Nodes deployed as Virtual Machines. This feature addresses Kubernetes deployments that use Virtual Machines as Worker Nodes, rather than using bare-metal servers. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes. 2 Intel\u00ae Security Libraries Components 2.1 Certificate Management Service Starting with Intel\u00ae SecL-DC 1.6, most non-TPM-related certificates used by Intel\u00ae SecL-DC applications will be issued by the new Certificate Management Service. This includes acting as a root CA and issuing TLS certificates for all of the various web services. 2.2 Authentication and Authorization Service Starting with Intel\u00ae SecL-DC 1.6, authentication and authorization for all Intel\u00ae SecL applications will be centrally managed by the new Authentication and Authorization Service (AAS). Previously, each application would manage its own users and permissions independently; this change allows authentication and authorization management to be centralized. 2.3 Verification Service The Verification Service component of Intel\u00ae Security Libraries performs the core Platform Integrity and Data Sovereignty functionality by acting as a remote attestation authority. Platform security technologies like Intel\u00ae TXT, Intel\u00ae BootGuard, and UEFI SecureBoot extend measurements of platform components (such as the system BIOS/UEFI, OS kernel, etc) to a Trusted Platform module as the server boots. Known-good measurements for each of these components can be directly imported from a sample server. These expected measurements can then be compared against actual measurements from registered servers, allowing the Verification Service to attest to the \"trustiness\" of the platform, meaning whether the platform booted into a \"known-good\" state. 2.4 Workload Service The Workload Service acts as a management service for handling Workload Flavors (Flavors used for Virtual Machines and Containers). In the Intel\u00ae SecL-DC 1.6 release, the Workload Service uses Flavors to map decryption key IDs to image IDs. When a launch request for an encrypted workload image is intercepted by the Workload Agent, the Workload Service will handle mapping the image ID to the appropriate key ID and key request URL, and will initiate the key transfer request to the Key Broker. 2.5 Trust Agent The Trust Agent resides on physical servers and enables both remote attestation and the extended chain of trust capabilities. The Agent maintains ownership of the server's Trusted Platform Module, allowing secure attestation quotes to be sent to the Verification Service. Incorporating the Intel\u00ae SecL HostInfo and TpmProvider libraries, the Trust Agent serves to report on platform security capabilities and platform integrity measurements. The Trust Agent is supported for Windows Server 2016 Datacenter and Red Hat Enterprise Linux (RHEL) 8.1 and later. 2.6 Workload Agent The Workload Agent is the component responsible for handling all of the functions needed for Workload Confidentiality for virtual machines and Docker containers on a physical server. The Workload Agent uses libvirt hooks to identify VM lifecycle events (VM start, stop, hibernate, etc), and intercepts those events to perform needed functions like requesting decryption keys, creation and deletion of encrypted LUKS volumes, using the TPM to unseal decryption keys, etc. The WLA also includes the Docker SecureOverlay Driver that performs analogous functionality for Docker containers. 2.7 Integration Hub The Integration Hub acts as a middle-man between the Verification Service and one or more scheduler services (such as OpenStack* Nova), and \"pushes\" attestation information retrieved from the Verification Service to one or more scheduler services according to an assignment of hosts to specific tenants. In this way, Tenant A can receive attestation information for hosts that belong to Tenant A, but receive no information about hosts belonging to Tenant B. The Integration Hub serves to disassociate the process of retrieving attestations from actual scheduler queries, so that scheduler services can adhere to best practices and retain better performance at scale. The Integration Hub will regularly query the Intel\u00ae SecL Verification Service for SAML attestations for each host. The Integration Hub maintains only the most recent currently valid attestation for each host, and will refresh attestations when they would expire. The Integration Hub will verify the signature of the SAML attestation for each host assigned to a tenant, then parse the attestation status and asset tag information, and then will securely push the parsed key/value pairs to the plugin endpoints enabled. The Integration Hub features a plugin design for adding new scheduler endpoint types. Currently the Integration Hub supports OpenStack Nova and Kubernetes endpoint plugins. Other integration plugins may be added. 2.8 Workload Policy Manager The Workload Policy Manager is a Linux command line utility used by an image owner to encrypt VM (qcow2) or container (Docker) images, and to create an Image Flavor used to provide the encryption key transfer URL during launch requests. The WPM utility will use an existing or request a new key from the Key Broker Service, use that key to encrypt the image, and output the Image Flavor in JSON format. The encrypted image can then be uploaded to the image store of choice (like OpenStack Glance), and the Image Flavor can be uploaded to the Workload Service. The ID of the image on the image storage system is then mapped to the Image Flavor in the WLS; when the image is used to launch a new instance, the WLS will find the Image Flavor associated with that image ID, and use the Image Flavor to determine the key transfer URL. 2.9 Key Broker Service The Key Broker Service is effectively a policy compliance engine. Its job is to manage key transfer requests for encrypted images, releasing keys only to servers that meet policy requirements. The Key Broker registers one or more SAML signing certificates from any Verification Services that it will trust. When a key transfer request is received, the request includes a trust attestation report signed by the Verification Service. If the signature matches a registered SAML key, the Broker will then look at the actual report to ensure the server requesting the key matches the image policy (currently only overall system trust is supported as a policy requirement). If the report indicates the policy requirements are met, the image decryption key is wrapped using a public key unique to the TPM of the host that was attested in the report, such that only the host that was attested can unseal the decryption key and gain access to the image. 3 Intel\u00ae Security Libraries Installation 3.1 Building from Source Intel\u00ae Security Libraries is distributed as open source code, and must be compiled into installation binaries before installation. Instructions and sample scripts for building the Intel\u00ae SecL-DC components can be found here: https://01.org/intel-secl/documentation/build-installation-scripts After the components have been built, the installation binaries can be found in the directories created by the build scripts. <servicename>/out/<servicename>.bin In addition, the build script will produce some sample database creation scripts that can be used during installation to configure database requirements (instructions are given in the installation sections): create_db: authservice/out/create_db.sh install_pgdb: authservice/out/install_pgdb.sh 3.2 Hardware Considerations Intel\u00ae SecL-DC supports and uses a variety of Intel security features, but there are some key requirements to consider before beginning an installation. Most important among these is the Root of Trust configuration. This involves deciding what combination of TXT, Boot Guard, tboot, and UEFI Secure Boot to enable on platforms that will be attested using Intel\u00ae SecL. Key points: At least one \"Static Root of Trust\" mechanism must be used (TXT and/or BtG) For Legacy BIOS systems, tboot must be used For UEFI mode systems, UEFI SecureBoot must be used* Use the chart below for a guide to acceptable configuration options. . Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. 3.3 Recommended Service Layout The Intel\u00ae SecL-DC services can be installed in a variety of layouts, partially depending on the use cases desired and the OS of the server(s) to be protected. In general, the Intel\u00ae SecL-DC applications can be divided into management services that are deployed on the network on the management plane, and host or node components that must be installed on each protected server. Management services can typically be deployed anywhere with network access to all of the protected servers. This could be a set of individual VMs per service; containers; or all installed on a single physical or virtual machine. Node components must be installed on each protected physical server. Typically this is needed for Linux deployments. 3.3.1 Platform Integrity The most basic use case enabled by Intel\u00ae SecL-DC, Platform Integrity requires only the Verification Service and, to protect Windows or Linux hosts, the Trust Agent. This also enables the Application Integrity use case by default for Linux systems. The Integration Hub may be added to provide integration support for OpenStack or Kubernetes. The Hub is often installed on the same machine as the Verification Service, but optionally can be installed separately. 3.3.2 Workload Confidentiality Workload Confidentiality introduces a number of additional services and agents. For a POC environment, all of the management services can be installed on a single machine or VM. This includes: Certificate Management Service (CMS) Authorization and Authentication Service (AAS) Host Verification Service (HVS) Workload Service (WLS) Integration Hub (HUB) Key Broker Service (KBS) with backend key management Workload Policy Manager (WPM) In a production environment, it is strongly suggested that the WPM and KBS be deployed (with their own CMS and AAS) separately for each image owner. For a Cloud Service Provider, this would mean that each customer/tenant who will use the Workload Confidentiality feature would have their own dedicated AAS/CMS/KBS/WPM operated on their own networks, not controlled by the CSP. This is because the Key Broker and WPM are the tools used to define the policies that will allow images to launch, and these policies and their enforcement should remain entirely under the control of the image owner. The node components must be installed on each protected physical server: Trust Agent (TA) Workload Agent (WLA) 3.4 Installing/Configuring the Database The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. Scripts (install_pgdb.sh , create_db.sh ) are provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation. 3.4.1 Using the Provided Database Installation Script Install a sample Postgresql 11 database using the install_pgdb.sh script. This script will automatically install the Postgresql database and client packages required. Add the Postgresql 11 repository: https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm Create the iseclpgdb.env answer file: ISECL_PGDB_IP_INTERFACES = localhost ISECL_PGDB_PORT = 5432 ISECL_PGDB_SAVE_DB_INSTALL_LOG = true ISECL_PGDB_CERT_DNS = localhost ISECL_PGDB_CERT_IP = 127 .0.0.1 Note that the values above assume that the database will be accessed locally. If the database server will be external to the Intel\u00ae SecL services, change these values to the hostname or FQDN and IP address where the client will access the database server. Run the following command: dnf module disable postgresql -y Execute the installation script: ./install_pgdb.sh Note : The database installation only needs to be performed once if the same database server will be used for all services that require a database. Only the \"create_db\" step needs to be repeated if the database server will be shared. 3.4.2 Provisioning the Database Each Intel\u00ae SecL service that uses a database (the Authentication and Authorization Service, the Verification Service, the Integration Hub, the Workload Service) requires its own schema and access. After installation, the database must be created initialized and tables created. Execute the create_db.sh script to configure the database. If a single shared database server will be used for each Intel\u00ae SecL service (for example, if all management plane services will be installed on a single VM), run the script multiple times, once for each service that requires a database. If separate database servers will be used (for example, if the management plane services will reside on separate systems and will use their own local database servers), execute the script on each server hosting a database. ./create_db.sh <database name> <database_username> <database_password> For example: ./create_db.sh isecl_hvs_db hvs_db_username hvs_db_password ./create_db.sh isecl_aas_db aas_db_username aas_db_password ./create_db.sh isecl_wls_db wls_db_username wls_db_password ./create_db.sh isecl_hub_db hub_db_username hub_db_password Note that the database name, username, and password details for each service must be used in the corresponding installation answer file for that service. 3.4.3 Database Server TLS Certificate The database client for Intel\u00ae SecL services requires the database TLS certificate to authenticate communication with the database server. If the database server for a service is located on the same server that the service will run on, only the path to this certificate is needed. If the provided Postgres scripts are used, the certificate will be located in /usr/local/pgsql/data/server.crt If the database server will be run separately from the Intel\u00ae SecL service(s), the certificate will need to be copied from the database server to the service machine before installing the Intel\u00ae SecL services. The database client for Intel\u00ae SecL services will validate that the Subject Alternative Names in the database server\u2019s TLS certificate contain the hostname(s)/IP address(es) that the clients will use to access the database server. If configuring a database without using the provided scripts, ensure that these attributes are present in the database TLS certificate. 3.5 Installing the Certificate Management Service 3.5.1 Required For The CMS is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers) 3.5.2 Supported Operating Systems The Intel\u00ae Security Libraries Certificate Management Service supports Red Hat Enterprise Linux 8.2. 3.5.3 Recommended Hardware 1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services 3.5.4 Installation To install the Intel\u00ae SecL-DC Certificate Management Service: Copy the Certificate Management Service installation binary to the /root /directory. Create the cms.env installation answer file for an unattended installation: AAS_TLS_SAN = <comma-separated list of IPs and hostnames for the AAS> AAS_API_URL = https://<Authentication and Authorization Service IP or Hostname>:8444/aas SAN_LIST = <Comma-separated list of IP addresses and hostnames for the CMS>,127.0.0.1,localhost The SAN list will be used to authenticate the Certificate Signing Request from the AAS to the CMS. Only a CSR originating from a host matching the SAN list will be honored. Later, in the AAS authservice.env installation answer file, this same SAN list will be provided for the AAS installation. These lists must match, and must be valid for IPs and/or hostnames used by the AAS system. If both the AAS and CMS will be installed on the same system, \"127.0.0.1,localhost\" may be used. The SAN list variables also accept the wildcards \u201c?\u201d (for single-character wildcards) and \"*\" (for multiple-character wildcards) to allow address ranges or multiple FQDNs. The AAS_API_URL represents the URL for the AAS that will exist after the AAS is installed. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Certificate Management Service. Execute the installer binary. ./cms-v3.3.1.bin When the installation completes, the Certificate Management Service is available. The services can be verified by running cms status from the command line. cms status After installation is complete, the CMS will output a bearer token to the console. This token will be used with the AAS during installation to authenticate certificate requests to the CMS. If this token expires or otherwise needs to be recreated, use the following command: ```shell cms setup cms_auth_token --force ``` In addition, the SHA384 digest of the CMS TLS certificate will be needed for installation of the remaining Intel\u00ae SecL services. The digest can be obtained using the following command: cms tlscertsha384 3.6 Installing the Authentication and Authorization Service 3.6.1 Required For The AAS is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers) 3.6.2 Prerequisites The following must be completed before installing the Authentication and Authorization Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service database must be available 3.6.3 Package Dependencies The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. A script ( install_pgdb.sh ) is provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation. 3.6.4 Supported Operating Systems The Intel\u00ae Security Libraries Authentication and Authorization Service supports Red Hat Enterprise Linux 8.2. 3.6.5 Recommended Hardware 1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services 3.6.6 Installation To install the AAS, a bearer token from the CMS is required. This bearer token is output at the end of the CMS installation. However, if a new token is needed, simply use the following command from the CMS command line: cms setup cms_auth_token --force Create the authservice.env installation answer file: CMS_BASE_URL = https://<CMS IP or hostname>:8445/cms/v1/ CMS_TLS_CERT_SHA384 = <CMS TLS certificate sha384> AAS_DB_HOSTNAME = <IP or hostname of database server> AAS_DB_PORT = <database port number ; default is 5432 > AAS_DB_NAME = <database name> AAS_DB_USERNAME = <database username> AAS_DB_PASSWORD = <database password> AAS_DB_SSLCERTSRC = <path to database TLS certificate ; the default location is typically /usr/local/pgsql/data/server.crt> AAS_ADMIN_USERNAME = <username for AAS administrative user> AAS_ADMIN_PASSWORD = <password for AAS administrative user> SAN_LIST = <comma-separated list of IPs and hostnames for the AAS ; this should match the value for the AAS_TLS_SAN in the cms.env file from the CMS installation> BEARER_TOKEN = <bearer token from CMS installation> Execute the AAS installer: ./authservice-v3.3.1.bin Note: The AAS_ADMIN credentials specified in this answer file will have administrator rights for the AAS and can be used to create other users, create new roles, and assign roles to users. 3.6.7 Creating Users After installation is complete, a number of roles and user accounts must be generated. Most of these accounts will be service users, used by the various Intel\u00ae SecL services to work together. Another set of users will be used for installation permissions, and a final administrative user will be created to provide the initial authentication interface for the actual human user. The administrative user can be used to create additional users with appropriately restricted roles based on organizational needs. Creating these required users and roles is facilitated by a script that will accept credentials and some configuration settings from an answer file and automate the process. Create the populate-users.env file: ISECL_INSTALL_COMPONENTS = KBS,TA,WLS,WPM,AH,HVS,WLA,AAS AAS_API_URL = https://<AAS IP address or hostname>:8444/aas AAS_ADMIN_USERNAME = <AAS username> AAS_ADMIN_PASSWORD = <AAS password> HVS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Host Verification Service> IH_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Integration Hub> WLS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Workload Service> KBS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Key Broker Service> TA_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Trust Agent> HVS_SERVICE_USERNAME = <Username for the HVS service user> HVS_SERVICE_PASSWORD = <Password for the HVS service user> IH_SERVICE_USERNAME = <Username for the Hub service user> IH_SERVICE_PASSWORD = <Password for the Hub service user> WPM_SERVICE_USERNAME = <Username for the WPM service user> WPM_SERVICE_PASSWORD = <Password for the WPM service user> WLS_SERVICE_USERNAME = <Username for the WLS service user> WLS_SERVICE_PASSWORD = <Password for the WLS service user> WLA_SERVICE_USERNAME = <Username for the WLA service user> WLA_SERVICE_PASSWORD = <Password for the WLA service user> GLOBAL_ADMIN_USERNAME = <Username for the global Administrator user GLOBAL_ADMIN_PASSWORD = <Password for the global Administrator user INSTALL_ADMIN_USERNAME = <Username for the installation user INSTALL_ADMIN_PASSWORD = <Password for the global installation user Note : The ISECL_INSTALL_COMPONENTS variable is a comma-separated list of the components that will be used in your environment. Not all services are required for every use case. If a given service will not be used in your deployment, simply delete the unnecessary service abbreviation from the ISECL_INSTALL_COMPONENTS list, and leave the SAN and credential variables for that service blank. Note : The SAN list variables each support wildcards( \" \" and \"?\"). In particular, without wildcards the Trust Agent SAN list would need to explicitly list each hostname or IP address for all Trust Agents that will be installed, which is not generally feasible. Using wildcards, domain names and entire IP ranges can be included in the SAN list, which will allow any host matching those ranges to install the relevant service. The SAN list specified here must exactly match the SAN list for the applicable service in that service\u2019s env installation file. Execute the populate-users script: ./populate-users.sh Note: The script can be executed with the \u2013output_json argument to create the populate-user.json .This json output file will contain all of the users created by the script, along with usernames, passwords, and role assignments. This file can be used both as a record of the service and administrator accounts, and can be used as alternative inputs to recreate the same users with the same credentials in the future if needed. Be sure to protect this file if the \u2013output_json argument is used. The script will automatically generate the following users: Verification Service User Integration Hub Service User Workload Policy Manager Service User Workload Service User Name Workload Service User Global Admin User Installation User These user accounts will be used during installation of several of the Intel\u00ae SecL-DC applications. In general, whenever credentials are required by an installation answer file, the variable name should match the name of the corresponding variable used in the populate-users.env file. The Global Admin user account has all roles for all services. This is a default administrator account that can be used to perform any task, including creating any other users. In general this account is useful for POC installations, but in production it should be used only to create user accounts with more restrictive roles. The administrator credentials should be protected and not shared. The populate-users script will also output an installation token. This token has all privileges needed for installation of the Intel\u00ae SecL services, and uses the credentials provided with the INSTALLATION_ADMIN_USERNAME and password. The remaining Intel \u00ae SecL-DC services require this token (set as the BEARER_TOKEN variable in the installation env files) to grant the appropriate privileges for installation. By default this token will be valid for two hours; the populate-users script can be rerun with the same populate-users.env file to regenerate the token if more time is required, or the INSTALLATION_ADMIN_USERNAME and password can be used to generate an authentication token. 3.7 Installing the Host Verification Service This section details how to install the Intel\u00ae SecL-DC services. For instructions on running these services as containers, see the following section. 3.7.1 Required For The Host Verification Service is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers) 3.7.2 Prerequisites The following must be completed before installing the Verification Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available The Verification Service database must be available 3.7.3 Package Dependencies The Intel\u00ae Security Libraries Verification Service requires the following packages and their dependencies: logback Postgres* client and server 11.6 (server component optional if an external Postgres database is used) unzip zip openssl wget net-tools python3-policycoreutils If they are not already installed, the Verification Service installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation. 3.7.4 Supported Operating Systems The Intel\u00ae Security Libraries Verification Service supports Red Hat Enterprise Linux 8.2. 3.7.5 Recommended Hardware 4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers (Optional) One network interface for Asset Tag provisioning (only required for \u201cpull\u201d tag provisioning; required to provision Asset Tags to VMware ESXi servers). 3.7.6 Installation To install the Verification Service, follow these steps: Copy the Verification Service installation binary to the /root directory. Create the hvs.env installation answer file. A sample minimal hvs.env file is provided below. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Verification Service. # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas HVS_SERVICE_USERNAME = HVS_service HVS_SERVICE_PASSWORD = password # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = digest # TLS Configuration SAN_LIST = 127 .0.0.1,192.168.1.1,hvs.server.com #comma-separated list of IP addresses and hostnames for the HVS to be used in the Subject Alternative Names list in the TLS Certificate # Installation admin bearer token for CSR approval request to CMS BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Database HVS_DB_NAME = mw_as HVS_DB_USERNAME = runner HVS_DB_PASSWORD = test HVS_DB_SSLCERTSRC = /tmp/dbcert.pem # Not required if VS_DB_SSLCERT is given Execute the installer binary. shell ./hvs-v3.3.1.bin When the installation completes, the Verification Service is available. The services can be verified by running hvs status from the Verification Service command line. ```shell hvs status ## 3.8 Installing the Workload Service ### 3.8.1 Required For The WLS is REQUIRED for the following use cases. * Workload Confidentiality (both VMs and Docker Containers) ### 3.8.2 Prerequisites The following must be completed before installing the Workload Service: * The Certificate Management Service must be installed and available * The Authentication and Authorization Service must be installed and available * The Verification Service must be installed and available * The Workload Service database must be available ### 3.8.3 Supported Operating Systems The Intel\u00ae Security Libraries Workload Service supports Red Hat Enterprise Linux 8.2 ### 3.8.4 Recommended Hardware ### 3.8.5 Installation * Copy the Workload Service installation binary to the `/root` directory. * Create the `workload-service.env` installation answer file ```shell WLS_DB_USERNAME=<database username> WLS_DB_PASSWORD=<database password> WLS_DB_HOSTNAME=<IP or hostname of database server> WLS_DB_PORT=<Database port; 5432 by default> WLS_DB=<name of the WLS database> WLS_DB_SSLCERTSRC=<path to database TLS certificate; the default location is typically /usr/local/pgsql/data/server.crt > HVS_URL=https://<Ip address or hostname of the Host verification Service>:8443/hvs/v2/ WLS_SERVICE_USERNAME=<username for WLS service account> WLS_SERVICE_PASSWORD=<password for WLS service account> CMS_BASE_URL=https://<IP or hostname to CMS>:8445/cms/v1/ CMS_TLS_CERT_SHA384=<sha384 of CMS TLS certificate> AAS_API_URL=https://<IP or hostname to AAS>:8444/aas/ SAN_LIST=<comma-separated list of IPs and hostnames for the WLS> BEARER_TOKEN=<Installation token from populate-users script> ``` * Execute the WLS installer binary: ```shell ./wls-v3.3.1.bin ``` ## 3.9 Installing the Trust Agent for Linux ### 3.9.1 Required For The Trust Agent for Linux is REQUIRED for all use cases. * Platform Integrity with Data Sovereignty and Signed Flavors * Application Integrity * Workload Confidentiality (both VMs and Docker Containers) ### 3.9.2 Package Dependencies The Trust Agent requires the following packages and their dependencies: * Tboot (Optional, for TXT-based deployments **without** UEFI SecureBoot only) * openssl * tar * redhat-lsb If they are not already installed, the Trust Agent installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation. Tboot will not be installed automatically. Instructions for installing and configuring tboot are documented later in this section. ### 3.9.3 Supported Operating Systems The Intel\u00ae Security Libraries Trust Agent for Linux supports Red Hat Enterprise Linux 8.2. ### 3.9.4 Prerequisites The following must be completed before installing the Trust Agent: * Supported server hardware including an Intel\u00ae Xeon\u00ae processor with Intel Trusted Execution Technology activated in the system BIOS. * Trusted Platform Module (version 2.0) installed and activated in the system BIOS, with cleared ownership status. > ***Note:*** *For Linux systems, TPM 1.2 and TPM resource sharing to applications other than the Trust Agent are not supported at this time. Do not install trousers or another TSS stack application after installing the Trust Agent on Linux systems* * System must be booted to a tboot boot option OR use UEFI SecureBoot. > ***Note***: *A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode.* * (Provisioning step only) Intel\u00ae SecL Verification Service server installed and active. * (REQUIRED for servers configured with TXT and tboot only) If the server is installed using an LVM, the LVM name must be identical for all Trust Agent systems. The Grub bootloader line that calls the Linux kernel will contain the LVM name of the root volume, and this line with all arguments is part of what is measured in the TXT/Tboot boot process. This will cause the OS Flavor measurements to differ between two otherwise identical hosts if their LVM names are different. Simply using a uniform name for the LVM during OS installation will resolve this possible discrepancy. * (Optional, REQUIRED for Virtual Machine Confidentiality only): * QEMU/KVM must be installed * Libvirt must be installed * (Optional, REQUIRED for Docker Container Confidentiality only): Docker CE 19.03.13 must be installed > ***Note***: *The specific Docker-CE version 19.03.13 is required for Docker Container Confidentiality. Only this version is supported for this use case.* #### 3.9.4.1 Tboot Installation > ***Note***: *A solution to a security bug has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode.* Tboot is required to build a complete Chain of Trust for Intel\u00ae TXT systems that are not using UEFI Secure Boot. Tboot acts to initiate the Intel\u00ae TXT SINIT ACM (Authenticated Code Module), which populates several TPM measurements including measurement of the kernel, grub command line, and initrd. Without either tboot or UEFI Secure Boot, the Chain of Trust will be broken because the OS-related components will be neither measured nor signature-verified prior to execution. Because tboot acts to initiate the Intel\u00ae TXT SINIT ACM, tboot is only required for platforms using Intel\u00ae TXT, and is not required for platforms using another hardware Root of Trust technology like Intel\u00ae Boot Guard. Intel\u00ae SecL-DC requires tboot 1.9.7 or greater. For most platforms, the version of tboot available from the RedHat software repository will meet all requirements. Some newer platforms and platform firmware versions may require a later version of tboot, including later versions than are available on the RedHat software repositories. This is due to updates that can be made to the Intel\u00ae TXT SINIT ACM behavior, and the SINIT ACM is contained in the BIOS firmware. If a newer version of tboot is required than is available from the repository, the most current version can be found here: https://sourceforge.net/projects/tboot/files/tboot/ Tboot requires configuration of the grub boot loader after installation. To install and configure tboot: 1. Install tboot ```shell yum install tboot-1.9.10 ``` > **Note:** An issue in the latest version of tboot(version 1.9.12) has caused it to be unusable on RHEL 8.2 legacy mode machines. This will be fixed in an upcoming version of tboot. Its is recommeded to use tboot version 1.9.10 for the time being. 2. Make a backup of your current `grub.cfg` file The below examples assume RedHat has been installed on a platform using Legacy boot mode.The grub path will be slightly different for platforms using Legacy BIOS. ```shell cp /boot/grub2/grub.cfg /boot/grub2/grub.bak ``` 3. Generate a new `grub.cfg` with the tboot boot option ```shell grub2-mkconfig -o /boot/grub2/grub.cfg ``` 4. Update the default boot option Ensure that the `GRUB_DEFAULT` value is set to the tboot option. The tboot boot option can be found by looking in the `/boot/redhat/grub.cfg` file. For example (the precise menu entry may be different, but should say \"tboot\"): `menuentry **'Red Hat Enterprise Linux GNU/Linux, with tboot 1.9.7 and Linux 4.18.0-147.el8.x86_64**' --class red --class gnu- linux --class gnu --class os --class tboot {` ```shell vi /etc/default/grub GRUB_DEFAULT='Red Hat Enterprise Linux GNU/Linux, with tboot 1.9.7 and Linux 4.18.0-147.el8.x86_64' Reboot the system Because measurement happens at system boot, a reboot is needed to boot to the tboot boot option and populate measurements in the TPM. Verify a successful trusted boot with tboot Tboot provides the txt-stat command to show the tboot log. The first part of the output of this command can be used to verify a successful trusted launch. In the output below, note the \u201cTXT measured launch\u201d and \u201csecrets flag set\u201d at the bottom. Both of these should show \" TRUE \" if the tboot measured launch was successful. If either of these show \" FALSE \" the measured launch has failed. This usually simply indicates that the tboot boot option was not selected during boot. If the measured launch was successful, proceed to install the Trust Agent. Intel ( r ) TXT Configuration Registers: STS: 0x0001c091 senter_done: TRUE sexit_done: FALSE mem_config_lock: FALSE private_open: TRUE locality_1_open: TRUE locality_2_open: TRUE ESTS: 0x00 txt_reset: FALSE E2STS: 0x0000000000000006 secrets: TRUE ERRORCODE: 0x00000000 DIDVID: 0x00000001b0078086 vendor_id: 0x8086 device_id: 0xb007 revision_id: 0x1 FSBIF: 0xffffffffffffffff QPIIF: 0x000000009d003000 SINIT.BASE: 0x6fec0000 SINIT.SIZE: 262144B ( 0x40000 ) HEAP.BASE: 0x6ff00000 HEAP.SIZE: 1048576B ( 0x100000 ) DPR: 0x0000000070000051 lock: TRUE top: 0x70000000 size: 5MB ( 5242880B ) PUBLIC.KEY: 9c 78 f0 d8 53 de 85 4a 2f 47 76 1c 72 b8 6a 11 16 4a 66 a9 84 c1 aa d7 92 e3 14 4f b7 1c 2d 11 *********************************************************** TXT measured launch: TRUE secrets flag set: TRUE *********************************************************** 3.9.5 Installation Installation of the Trust Agent is split into two major steps: Installation, which covers the creation of system files and folders, and Provisioning, which involves the creation of keys and secrets and links the Trust Agent to a specific Verification Service. Both operations can be performed at the same time using an installation answer file. Without the answer file, the Trust Agent can be installed and left in an un-provisioned state regardless of whether a Verification Service is up and running, until such time as the datacenter administrator is ready to run the provisioning step and link the Trust Agent to a Verification Service. To install the Trust Agent for Linux: Copy the Trust Agent installation binary to the /root directory. (Optional; required to perform Provisioning and Installation at the same time.) Create the trustagent.env answer file in the /root directory (for full configuration options, see section 9.2). The minimum configuration options for installation are provided below. For Platform Attestation only, provide the following in trustagent.env shell HVS_URL=https://<Verification Service IP or Hostname>:8443/hvs/v2 PROVISION_ATTESTATION=y GRUB_FILE=<path to grub.cfg> CURRENT_IP=<Trust Agent IP address> CMS_TLS_CERT_SHA384=<CMS TLS digest> BEARER_TOKEN=<Installation token from populate-users script> AAS_API_URL=https://<AAS IP or Hostname>:8444/aas CMS_BASE_URL=https://<CMS IP or Hostname>:8445/cms/v1 SAN_LIST=<Comma-separated list of IP addresses and hostnames for the TAgent matching the SAN list specified in the populate-users script; may include wildcards> For Workload Confidentiality with VM Encryption, add the following ( in addition to the basic Platform Attestation sample): shell WLA_SERVICE_USERNAME=<Username for the WLA service user> WLA_SERVICE_PASSWORD=<Username for the WLA service user> WLS_API_URL=https://<WLS IP address or hostname>:5000/wls/ For Workload Confidentiality with Docker Container Encryption, add the following ( in addition to the basic Platform Attestation sample): shell WLA_SERVICE_USERNAME=<Username for the WLA service user> WLA_SERVICE_PASSWORD=<Username for the WLA service user> WLS_API_URL=https://<WLS IP address or hostname>:5000/wls/ WA_WITH_CONTAINER_SECURITY=yes NO_PROXY=<Registry_ip> HTTPS_PROXY=<proxy_url> INSECURE_SKIP_VERIFY=<TRUE/FALSE based on registry configured with http/https respectively> REGISTRY_SCHEME_TYPE=https Execute the Trust Agent installer and wait for the installation to complete. ./trustagent-v3.3.1.bin If the trustagent.env answer file was provided with the minimum required options, the Trust Agent will be installed and also Provisioned to the Verification Service specified in the answer file. If no answer file was provided, the Trust Agent will be installed, but will not be Provisioned. TPM-related functionality will not be available from the Trust Agent until the Provisioning step is completed. The Trust Agent will add a new grub menu entry for application measurement. This new entry will include tboot if the existing grub contains tboot as the default boot option. Note: If the Linux Trust Agent is installed without being Provisioned, the Trust Agent process will not actually run until the Provisioning step has been completed. Legacy BIOS systems using tboot ONLY) Update the grub boot loader: grub2-mkconfig -o /boot/grub2/grub.cfg After Provisioning is completed, the Linux Trust Agent must be rebooted so that the default SOFTWARE Flavor manifest can be measured and extended to the TPM. If the Workload Agent will also be installed on the system (see the next section), wait to reboot the server until after the Workload Agent has been installed, as this modifies the default SOFTWARE Flavor manifest. 3.10 Installing the Workload Agent 3.10.1 Required For Workload Confidentiality (both VMs and Docker Containers) 3.10.2 Supported Operating Systems The Intel\u00ae Security Libraries Workload Agent supports Red Hat Enterprise Linux 8.2 3.10.3 Prerequisites The following must be completed before installing the Workload Agent: Intel\u00ae SecL Trust Agent installed and active. cryptsetup (REQUIRED for Virtual Machine Confidentiality only): QEMU/KVM must be installed libvirt must be installed Libvirt must be configured to set the \"remember_owner\" property to \"0\". Edit the qemu.conf configuration file: vi /etc/libvirt/qemu.conf Set \"remember_owner\" to \"0\": remember_owner = 0 Restart the libvirtd service: systemctl restart libvirtd If this step is not performed before launching encrypted VMs, on VM restart you will see errors similar to the following: \"Error starting domain: internal error: child reported (status=125): Requested operation is not valid: Setting different SELinux label on /var/lib/nova/instances/15d7ec2f-27ad-41ed-9632-32a83c3d10ef/disk which is already in use\" (REQUIRED for Docker Container Confidentiality only): Docker CE 19.03.13 must be installed Note : The specific Docker-CE version 19.03.13 is required for Docker Container Confidentiality. Only this version is supported for this use case. 3.10.4 Installation Copy the Workload Agent installation binary to the /root / directory Verify that the trustagent.env answer file is present. This file was necessary for installing/provisioning the Trust Agent. Note that the additional content required for Workload Confidentiality with either VM Encryption or Docker Container Encryption must be included in the trustagent.env file (samples provided in the previous section) for use by the Workload Agent. Execute the Workload Agent installer binary. ./workload-agent-v3.3.1.bin (Legacy BIOS systems using tboot ONLY) Update the grub boot loader: grub2-mkconfig -o /boot/grub2/grub.cfg Reboot the server. The Workload Agent populates files that are needed for the default SOFTWARE Flavor, and a reboot is required for those measurements to happen. 3.11 Trust Agent Provisioning \"Provisioning\" the Trust Agent involves connecting to a Verification Service to download the Verification Service PrivacyCA certificate, create a new Attestation Identity Keypair in the TPM, and verify or create the TPM Endorsement Certificate and Endorsement Key. The Verification Service PrivacyCA root certificate is used to sign the EC, and the EC is used to generate the Attestation Identity Keypair. The AIK is used by the Verification Service to verify the integrity of quotes from the host\u2019s TPM. Provisioning can be performed separately from installation (meaning you can install the Trust Agent without Provisioning, and then Provision later). If the trustagent.env answer file is present and has the required Verification Service information during installation, the Agent will automatically run the Provisioning steps. Note: The trustagent.env answer file must contain user credentials for a user with sufficient privileges. The minimum role required for performing provisioning is the \"trustagent_provisioner\" role. Note: If the Linux Trust Agent is installed without being Provisioned, the Trust Agent process will not actually run until the Provisioning step has been completed. If the answer file is not present during installation, the Agent can be Provisioned later by adding the trustagent.env file and running the following command: tagent provision-attestation <trustagent.env or trustagent.ini file path> 3.12 Trust Agent Registration Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report. The Trust Agent can register the host with a Verification Service by running the following command (the trustagent.env or trustagent.ini answer file must be present in the current working directory): tagent create-host Hosts can also be registered using a REST API request to the Verification Service: POST <https://verification.service.com:8443/hvs/v2/hosts> { \"host_name\" : \"<hostname of host to be registered>\" \"connection_string\" : \"intel:https://<hostname or IP address>:1443\" , \"flavorgroup_names\" : [], \"description\" : \"<description>\" } Note: When a new host is registered, the Verification Service will automatically attempt to match the host to appropriate Flavors. If appropriate Flavors are not found, the host will still be registered, but will be in an Untrusted state until/unless appropriate Flavors are added to the Verification Service. 3.13 Importing the HOST_UNIQUE Flavor RHEL and VMWare ESXi hosts have measured components that are unique to each host. This means that a special HOST_UNIQUE flavor part needs to be imported for each RHEL and ESXi host, in addition to any other OS or Platform Flavors. Note: Importing a Flavor requires user credentials for a user with sufficient privileges. The minimum role required for creating the HOST_UNIQUE Flavor part is the \u201chost_unique_flavor_creator\u201d role. This role can only create HOST_UNIQUE Flavor parts, and cannot create any other Flavors. On Red Hat Enterprise Linux hosts with the Trust Agent, this can be performed from the Trust Agent command line (this requires the trustagent.env answer file to be present in the current working directory): tagent create-host-unique-flavor This can also be performed using a REST API (required for VMWare ESXi hosts): POST https://verification.service.com:8443/hvs/v2/flavors { \"connection_string\" : \"<Connection string>\" , \"partial_flavor_types\" : [ \"HOST_UNIQUE\" ] } 3.14 Installing the Integration Hub Note: The Integration Hub is only required to integrate Intel\u00ae SecL with third-party scheduler services, such as OpenStack Nova or Kubernetes. The Hub is not required for usage models that do not require Intel\u00ae SecL security attributes to be pushed to an integration endpoint. 3.14.1 Required For The Hub is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Docker Containers) The Hub is OPTIONAL for the following use cases (used only if orchestration or other integration support is needed): Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity 3.14.2 Deployment Architecture Considerations for the Hub A separate Hub instance is REQUIRED for each Cloud environment (also referred to as a Hub \"tenant\"). For example, if a single datacenter will have an OpenStack cluster and also two separate Kubernetes clusters, a total of three Hub instances must be installed, though additional instances of other Intel SecL services are not required (in the same example, only a single Verification Service is required). Each Hub will manage a single orchestrator environment. If multiple orchestrator environments will be managed, be sure to create separate database schema names for each separate Hub. Each Hub instance should be installed on a separate VM or physical server 3.14.3 Prerequisites The Intel\u00ae Security Libraries Integration Hub can be run as a VM or as a bare-metal server. The Hub may be installed on the same server (physical or VM) as the Verification Service. The Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available The Integration Hub database must be available (REQUIRED for Kubernetes integration only) The Intel SecL Custom Resource Definitions must be installed and available (see the Integration section for details) 3.14.4 Package Dependencies The Intel\u00ae SecL Integration Hub requires a number of packages and their dependencies: If these are not already installed, the Integration Hub installer attempts to install these packages automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update your repository package lists before installation. 3.14.5 Supported Operating Systems The Intel Security Libraries Integration Hub supports Red Hat Enterprise Linux 8.2 3.14.6 Recommended Hardware 1 vCPUs RAM: 2 GB 1 GB free space to install the Verification Service services. Additional free space is needed for the Integration Hub database and logs (database and log space requirements are dependent on the number of managed servers). One network interface with network access to the Verification Service. One network interface with network access to any integration endpoints (for example, OpenStack Nova). 3.14.7 Installing the Integration Hub To install the Integration Hub, follow these steps: Copy the Integration Hub installation binary to the /root directory. Create the ihub.env installation answer file. See the sample file below. # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME = <Integration Hub Service User username> IHUB_SERVICE_PASSWORD = <Integration Hub Service User password> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = <TLS hash> # TLS Configuration TLS_SAN_LIST = 127 .0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL = https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE = HVS # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_IP = <OpenStack Nova IP or hostname> OPENSTACK_AUTH_PORT = <OpenStack Keystone port ; 5000 by default> OPENSTACK_API_PORT = <OpenStack Nova API port ; 8778 by default> OPENSTACK_USERNAME = <OpenStack username> OPENSTACK_PASSWORD = <OpenStack password> # Kubernetes Integration Credentials - required for Kubernetes integration only TENANT = KUBERNETES KUBERNETES_URL = https://kubernetes:6443/ KUBERNETES_CRD = custom-isecl KUBERNETES_CERT_FILE = <path where Kubernetes api_server.crt is copied> KUBERNETES_TOKEN = <Token fetched from kubernetes secret of ISECL-Controller> # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Report Signing Certificate URL and service TLS hash for server verification # Required for Platform Integrity Attestation attributes. Not required for SGX attributes. REPORT_SIGNING_CERT_URL = https://isecl-cms:8445/cms/v1 REPORT_SIGNING_SERVICE_TLS_CERT_SHA384 = bb3a1\u2026 3. Execute the installer binary. ./ihub-v3.3.1.bin After installation, the Hub must be configured to integrate with a Cloud orchestration platform (for example, OpenStack or Kubernetes). See the Integration section for details. 3.15 Installing the Key Broker Service 3.15.1 Required For The KBS is REQUIRED for the following use cases: Workload Confidentiality (both VMs and Docker Containers) 3.15.2 Prerequisites The following must be completed before installing the Key Broker: The Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available (Recommended; Required if a 3^rd^-party Key Management Server will be used) A KMIP 2.0-compliant 3^rd^-party Key management Server must be available. The Key Broker will require the KMIP server\u2019s client certificate, client key and root ca certificate. The Key Broker uses the libkmip client to connect to a KMIP server The Key Broker has been validated using the pykmip 0.9.1 KMIP server as a 3^rd^-party Key Management Server. While any general KMIP 2.0-compliant Key Management Server should work, implementation differences among KMIP providers may prevent functionality with specific providers. 3.15.3 Package Dependencies 3.15.4 Supported Operating Systems The Intel\u00ae Security Libraries Key Broker Service supports Red Hat Enterprise Linux 8.2 3.15.5 Recommended Hardware 3.15.6 Installation Copy the Key Broker installation binary to the /root directory. Create the installation answer file kbs.env : SAN_LIST = #comma-separated list of IP addresses and hostnames for the KBS to be used in the Subject Alternative Names list in the TLS Certificat ENDPOINT_URL = https://<kbs IP or hostname>:<kbs_port>/v1 CMS_BASE_URL = https://<CMS IP or hostname>:8445/cms/v1/ CMS_TLS_CERT_SHA384 = <SHA384 hash of CMS TLS certificate> AAS_API_URL = https://<AAS IP or hostname>:8444/aas BEARER_TOKEN = <Installation token from populate-users script> #OPTIONAL , only when using 3 rd -Party KMIP Compliant KMS Server KEY_MANAGER=KMIP KMIP_SERVER_IP= KMIP_SERVER_PORT= KMIP_CLIENT_KEY_PATH= KMIP_ROOT_CERT_PATH= KMIP_CLIENT_CERT_PATH= Execute the KBS installer. ./kbs-v3.3.1.bin 3.15.6.1 Configure the Key Broker to use a KMIP-compliant Key Management Server The Key Broker immediately after installation will be configured to use a filesystem key management solution if not configured for KMIP. This should be used only for testing and POC purposes; using a secure 3 rd -party Key management Server should be used for production deployments. To configure the Key Broker to point to a 3 rd -party KMIP-compliant Key Management Server: Ensure the KMIP server\u2019s client certificate, client key and root ca are accessible for reading by Key Broker Service Update the config.yml for the following variables under /etc/kbs/config.yml kmip : server-ip : <IP address of the KMIP server> server-port : <Port where KMIP Server is listening on> client-cert-path : <KMIP Client Certificate Path> client-key-path : <KMIP Client Key Path> root-cert-path : <KMIP Server Root Certificate Path> Restart the Key Broker for the settings to take effect kbs stop ; kbs start 3.15.7 Importing Verification Service Certificates After installation, the Key Broker must import the SAML and PrivacyCA certificates from any Verification Services it will trust. This provides the Key Broker a way to ensure that only attestations that come from a \"known\" Verification Service. The SAML and PrivacyCA certificates needed can be found on the Verification Service. 3.15.7.1 Importing a SAML certificate Use OpenSSL to display the SAML certificate content: cat /etc/hvs/certs/trustedca/saml-cert.pem Use the SAML certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:<Key Broker Port>/kbs/v1/saml-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIID/DCCAmSgAwIBAgIBCDANBgkqhkiG9w0BAQwFADBQMQswCQYDVQQGEwJVUzEL MAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEXMBUGA1UE AxMOQ01TIFNpZ25pbmcgQ0EwHhcNMjAxMTE4MDQwMjAwWhcNMjExMTE4MDQwMjAw WjAfMR0wGwYDVQQDExRIVlMgU0FNTCBDZXJ0aWZpY2F0ZTCCAaIwDQYJKoZIhvcN AQEBBQADggGPADCCAYoCggGBALisc9JJeupLBk22pnARt9CP6CJQn1iEMbLvvkZ0 tCbuG9wX5LUoyPFGELDcHrK2E5eLqLUrxCgHa6zTkokgoh3Oj/PXG3JoqZsK2hVd VHyL82JnjLrB93SsNwlo7002V35RaAvWln+Z9fJtY9gOB7LS+UCchVYXduFYSG8m sXkGkG60VvQlpFYYTO773/DV/zj2cZmL2l3/6OLX+QeCG8UtRo7iqNloD+788sSd CQKx2m3PxRd195cTNGBarOMJwzPu8/w+bbk8E3wO/IdjO7Mh3K5yNRr1V99sFG5h RyjZwgfO7RYOp2B8hMZENeWvUGB1QiNwsKvC27HE4WkkCsF+HCcKDwEGUY1/NmRq pj6yaBajsKM326agPk8Roihgea4NdWQrfpa/W3ZmMLceggtwY4PJeonEuLiidKAk Tg13XRUQ1yq9mUFnY5pZCFvO1liu7P2xtr6xvAFdX/KsPaXZRnOwzSODkhmS6NNe lsj1JCUtR/rVJVmIA7dBcxPZEwIDAQABoxIwEDAOBgNVHQ8BAf8EBAMCBsAwDQYJ KoZIhvcNAQEMBQADggGBAB0dXcAmSnU4Sda6UfToUTO3PotwCS/e4Tm5RoKzYfqz R6UQF1dlcVhkS1mz3wl1EZbeOJU61QiSACfAG05SU2KtrZ0h7//nJT/0N0hwGzhL 9c0r10QYss3LqI9eUAddtqjyQf8baJtuFruBQjoFytqzp6XQ9gtPL5XcLyl9C4xy sWpKRfiB3Px5Agi18RiVM3/hBDGfVbcb/v8dWJM28MJs5ZWgrb/HdfMUQJFdYHOc AU+WpxGjaftTiD9Is5lTOb3ESKMkz7fEW6YXulTkij2P9m5pcoZIPPZbnXQWJzot emz5RgbYVBE4R6tZNJ1IyZhDiY4O1MjpCYhzaAoPVPD9lYIHLQcMHH56xx0Y24Fv wFIIU6C6OatLDLApRBMFeZa/xFgf2qNjm+1wu5N79EB9xukqzIw+lR+dXYAHgChW PrYK5F500/BiTmNtNC+EiwLs6RQU4ZBXki8U/uBFB7f5vnk8LxPm4NlP0GSCJhAr fpo2VjlPKVVUUUTQGxZV0Q == -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIENTCCAp2gAwIBAgIBAzANBgkqhkiG9w0BAQwFADBHMQswCQYDVQQGEwJVUzEL MAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEOMAwGA1UE AxMFQ01TQ0EwHhcNMjAxMTE4MDQwMDAwWhcNMjUxMTE4MDQwMDAwWjBQMQswCQYD VQQGEwJVUzELMAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRF TDEXMBUGA1UEAxMOQ01TIFNpZ25pbmcgQ0EwggGiMA0GCSqGSIb3DQEBAQUAA4IB jwAwggGKAoIBgQCyjonRwxZ8UbWkzAcQn6SnyOlQzzdOVW2+WNh61tMfRVioSykA otuG1hhgApULbyUmBsJSmNU4oQjnlblpsH+LOLLHHlM8tCA5oX9XGzlpQVp+Dr17 vK69lN0Ner2hqVxmJy2evN93rV+nsFrdx2O2/JcptkPKQUc+EcqDOPbMgIBWjRpT lVeyEIoWBBxAwtoUxpCMBXtSnxVB7+6Yc3apONj8wF5Ie7qBXXOTH3II3tAYNFiA O1ivNER8zNr2Aia14V/lQUlHzwB94TBMFLPzR4T2bXiGH2wfW4Z35ULdW8avcKSR r9KSQ4JtREp2xsJ9AYr89WPljiKvf6wJaTFT1BnR/cvBtpsKbrppbiJrYqbuRa8m 0vcZ278dM4sGMLUqa7AnMXWHqI6MjqulN2RHIkQ/J3ih0Q8GLDJaruiJnNOeGiDo mL0LxJFEy5OGH3AUioOGRHdF0suFneRv3emY6FSMSXuofLfn59I7ik630cfj3r7X 1xzuqUbZE70uqCUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF MAMBAf8wDQYJKoZIhvcNAQEMBQADggGBAJiIWLM16WqIyT/D59Q+xDptL/kP4BVs HemKCqIwJ9N1JzFH5W4chCv0u5R4Gcb4q7HOtbhjTm/W1u6EVWetLVQeNSOizqf5 NjNoA3eZH8MWn6q93rBuWtZebpDMNYYFgRvPU4d8lKfRV4JdcYlyLo0wbzzF9AOJ 0CIBNBcYJXZqZeqrnPBzMZe7RVvoTIu2VOYk+RIvao8jgCZOwEqe3RMBnaF2psIO OrnmSMtLDKoPSVyOYt4R/agSFtiOIHnddmR6djvkVNgkvg8B1WuElU/9W0Tlxn/A AblH+qq6FVQLzWOITkCu/YN4W222zR0EeMsaZ7NEkxHMrhj4giFB+AnjEL04XDjz G2Vcq4c3Ka4ZBZv3Q6nWgK6RfrqAJL+tGS8YX9Bt08J7q41wje63QhUjtmaL3gTu 4WqlKxedoBweEpD4x0CIcxtVA48NmFS9NQse6wAsq3GvKCcSsCBUgyKMnmDb5Y+g lynfJLtgmHDcO7+8I0ZU2zBu8k8GotnBrQ == -----END CERTIFICATE----- 3.15.7.2 Importing a PrivacyCA Certificate Use OpenSSL to display the PrivacyCA certificate content: openssl x509 -in /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem Use the PrivacyCA certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:<Key Broker Port>/kbs/v1/tpm-identity-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIIHaDCCBdCgAwIBAgIGAW72eWZ9MA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMT EG10d2lsc29uLXBjYS1haWswHhcNMTkxMjExMTkzOTQxWhcNMjkxMjEwMTkzOTQx WjAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlrMIIBojANBgkqhkiG9w0BAQEF AAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4YiHtueWBdW0sibtH1QRSbI KtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSUnn07xjWJRP1EcvSaufO1 MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwuattxTelpmgucDp98MqW/ uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337yx3VBK59Dwtsmfsrd5tMn IuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y3saXeNBDg9J363imOHIH haP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZloxJzcNgtimQw3RbyrB3C KijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwCQNnBP4UJXwAflO7COG7P mpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqvtTVtFX+oRWRsgaEdxKf7 LJx4aIjXwP2s6PIiOSalAgMBAAGjggOwMIIDrDCCAbMGA1UdDgSCAaoEggGmMIIB ojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4Yi HtueWBdW0sibtH1QRSbIKtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSU nn07xjWJRP1EcvSaufO1MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwu attxTelpmgucDp98MqW/uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337y x3VBK59Dwtsmfsrd5tMnIuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y 3saXeNBDg9J363imOHIHhaP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZl oxJzcNgtimQw3RbyrB3CKijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwC QNnBP4UJXwAflO7COG7Pmpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqv tTVtFX+oRWRsgaEdxKf7LJx4aIjXwP2s6PIiOSalAgMBAAEwDwYDVR0TAQH/BAUw AwEB/zCCAeAGA1UdIwSCAdcwggHTgIIBpjCCAaIwDQYJKoZIhvcNAQEBBQADggGP ADCCAYoCggGBAJlqga9mIsnGWxf0IBW8U6+GIh7bnlgXVtLIm7R9UEUmyCrZGxbJ q+iekIiwWl3BeylTeg2g9I+bFOHGUrbaisJUlJ59O8Y1iUT9RHL0mrnztTGq3sIA aRUHCNk+mk7Nc4le+waCs9JFrXlEc9Y09SksLmrbcU3paZoLnA6ffDKlv7lrJYh1 FcYedSUxNcp+1X9UAls92vjQx/fC4K+ZLN9+8sd1QSufQ8LbJn7K3ebTJyLlfScN GNlBHQ4tNOBVyOKuuDLDKVgO7eTjUQFPlTVNGN7Gl3jQQ4PSd+t4pjhyB4Wj/IsQ 4amfl2/0xmn4BXhBwZCU7+m1qQ6qHW1lQ24GZaMSc3DYLYpkMN0W8qwdwioo5RKO QUGOmznHTBu4Aqu+7v32zry2+SF80vGQ6cLsAkDZwT+FCV8AH5Tuwjhuz5qY/W01 dTrRYj7WBXOCXRnWn9T5ds1hnkdHNzyM2EMar7U1bRV/qEVkbIGhHcSn+yyceGiI 18D9rOjyIjkmpQIDAQABoR+kHTAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlr ggYBbvZ5Zn0wDQYJKoZIhvcNAQELBQADggGBAC3PEB8Av0PBJgrJMxzMbuf1FCdD AUrfYmP81Hs0/v70efviMEF2s3GAyLHD9v+1nNFCQrjcNCar18k45BlcodBEmxKA DZoioFykRtlha6ByVvuN6wD93KQbKsXPKhUp8X67fLuOcQgfc3BoDRlw/Ha1Ib6X fliE+rQzLCOgClK7ZdTwl9Ok0VbR7Mbal/xShIqr2WopjBtal9p4RsnIxilTHI+m qzbV8zvZXYfYtEb3MMMT5EnjIV8O498KKOjxohD2vqaxqItd58pOi6z/q5f4pLHc DvdsJecJEoWb2bxWQdBgthMjX6AUV/B5G/LTfaPwVbTLdEc+S6Nrobf/TFYV0pvG OzF3ltYag0fupuYJ991s/JhVwgJhCGq7YourDGkNIWAjt0Z2FWuQKnxWvmResgkS WTeXt+1HCFSo5WcAZWV8R9FYv7tzFxPY8aoLj82sgrOE4IwRqaA8KMbq3anF4RCk +D8k6etqMcNHFS8Fj6GlCd80mb4Q3sxuCiBvZw == -----END CERTIFICATE----- 3.16 Installing the Workload Policy Manager 3.16.1 Required For The WPM is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Docker Containers) 3.16.2 Package Dependencies (Required only if Docker Container encryption is needed) Docker-ce 19.03.13 must be installed. This is needed only if the option WPM_WITH_CONTAINER_SECURITY=yes is set in the wpm.env answer file. 3.16.3 Supported Operating Systems The Intel\u00ae Security Libraries Workload Policy Manager supports Red Hat Enterprise Linux 8.2. 3.16.4 Recommended Hardware 2 vCPUs RAM: 8 GB 100 GB One network interface with network access to the Key Broker and Workload Service Additional memory and disk space may be required depending on the size of images to be encrypted 3.16.5 Installation Copy the WPM installer to the /root directory Create the wpm.env answer file: KMS_API_URL = https://<IP address or hostname of the KBS>:9443/v1/ WPM_SERVICE_USERNAME = <WPM_Service username from populate-users script> WPM_SERVICE_PASSWORD = <WPM Service password from populate-users script> CMS_TLS_CERT_SHA384 = <Sha384 hash of the CMS TLS certificate> CMS_BASE_URL = https://<IP address or hostname for CMS>:8445/cms/v1/ AAS_API_URL = https://<Hostname or IP address of the AAS>:8444/aas BEARER_TOKEN = <Installation token from populate-users script> For Docker Container Encryption only, add the following line to the wpm.env installation answer file: WPM_WITH_CONTAINER_SECURITY = yes Execute the WPM installer: ./wpm-v3.3.1.bin 4 Authentication Beginning in the Intel\u00ae SecL-DC 1.6 release, authentication is centrally managed by the Authentication and Authorization Service (AAS). This service uses a Bearer Token authentication method, which replaces the previous HTTP BASIC authentication. This service also centralizes the creation of roles and users, allowing much easier management of users, passwords, and permissions across all Intel\u00ae SecL-DC services. To make an API request to an Intel\u00ae SecL-DC service, an authentication token is now required. API requests must now include an Authorization header with an appropriate token: Authorization: Bearer $TOKEN The token is issued by the AAS and will expire after a set amount of time. This token may be used with any Intel\u00ae SecL-DC service, and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for. 4.1 Create Token To request a new token from the AAS: POST <https://<AAS IP or hostname>:8444/aas/token> { \"username\" : \"<username>\" , \"password\" : \"<password>\" } The response will be a token that can be used in the Authorization header for other requests. The length of time for which the token will be valid is configured on the AAS using the key AAS_JWT_TOKEN_DURATION_MINS (in the installation answer file during installation) or aas.jwt.token.duration.mins (configured on the AAS after installation). In both cases the value is the length of time in minutes that issued tokens will remain valid before expiring. 4.2 User Management Users in Intel\u00ae SecL-DC are no longer restrained to a specific service, as they are now centrally managed by the Authentication and Authorization Service. Any user may now be assigned roles for any service, allowing user accounts to be fully defined by the tasks needed. 4.2.1 Username and Password requirements Passwords have the following constraints: cannot be empty - i.e must at least have one character maximum length of 255 characters Usernames have the following requirements: Format: username[@host_name[domain]] [@host_name[domain]] is optional username shall be minimum of 2 and maximum of 255 characters username allowed characters are alphanumeric, ., -, _ - but cannot start with -. Domain name must meet requirements of a host name or fully qualified internet host name Examples admin, admin_wls, admin@wls, admin@wls.intel.com , wls-admin@intel.com 4.2.2 Create User POST https://<IP or hostname of AAS>:8444/aas/users Authorization: Bearer <token> { \"username\" : \"<username>\" , \"password\" : \"<password>\" } 4.2.3 Search User GET https://<IP or hostname of AAS>:8444/aas/users?<parameter>=<value> Authorization: Bearer <token> 4.2.4 Change User Password PATCH https://<IP or hostname of AAS>:8444/aas/users/changepassword Authorization: Bearer <token> { \"username\" : \"<username>\" , \"old_password\" : \"<old_password>\" , \"new_password\" : \"<new_password>\" , \"password_confirm\" : \"<new_password>\" } 4.2.5 Delete User DELETE https://<IP or hostname of AAS>:8444/aas/users/<User ID> Authorization: Bearer <token> 4.3 Roles and Permissions Permissions in Intel\u00ae SecL-DC are managed by Roles. Roles are a set of predefined permissions applicable to a specific service. Any number of Roles may be applied to a User. While new Roles can be created, each Intel\u00ae SecL service defines permissions that are applicable to specific predetermined Roles. This means that only pre-defined Roles will actually have any permissions. Role creation is intended to allow Intel\u00ae SecL-DC services to define their permissions while allowing role and user management to be centrally managed on the AAS. When a new service is installed, it will use the Role creation functions to define roles applicable for that service in the AAS. 4.3.1 Create Role POST https://<AAS IP or Hostname>:8444/aas/roles Authorization: Bearer <token> { \"service\" : \"<Service name>\" , \"name\" : \"<Role Name>\" , \"permissions\" : [ <array o f permissio ns > ] } service field contains a minimum of 1 and maximum of 20 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , name field contains a minimum of 1 and maximum of 40 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , service and name fields are mandatory context field is optional and can contain up to 512 characters. Allowed characters are alphanumeric plus -, _, @, ., ,,=,;,:,* permissions field is optional and allow up to a maximum of 512 characters. The Permissions array must a comma-separated list of permissions formatted as resource:action: Permissions required to execute specific API requests are listed with the API resource and method definitions in the API documentation. 4.3.2 Search Roles GET https://<AAS IP or Hostname>:8444/aas/roles?<parameter>=<value> Authorization: Bearer <token> Search parameters supported: Service=<name of service> Name=<role name> Context=<context> contextContains=<partial \"context\" string> allContexts=<true or false> filter=false 4.3.3 Delete Role DELETE https://<AAS IP or Hostname>:8444/aas/roles/<role ID> Authorization: Bearer <token> 4.3.4 Assign Role to User POST https://<AAS IP or Hostname>:8444/aas/users/<user ID>/roles Authorization: Bearer <token> { \"role_ids\" : [ \"<comma-separated list of role IDs>\" ] } 4.3.5 List Roles Assigned to User GET https://<AAS IP or Hostname\\>:8444/aas/users/<user ID>/roles Authorization: Bearer <token> 4.3.6 Remove Role from User DELETE https://<AAS IP or Hostname>:8444/aas/users/<userID>/roles/<role ID> Authorization: Bearer <token> 4.3.7 Role Definitions The following roles are created during installation (or by the CreateUsers script) and exist by default. Role Name Permissions Utility TA:Administrator TA:*:* Used by the Verification Service to access Trust Agent APIs, including retrieval of TPM quotes, provisioning Asset Tags and SOFTWARE Flavors, etc. HVS:ReportRetriever HVS: [\"reports:retrieve:*\", \"reports:search:*\", \"hosts:search:*\", \"hosts:retrieve:*\"] Used by the Integration Hub to retrieve attestation reports from the Verification Service KMS:Keymanager KBS: [\"keys:create:*\", \"keys:transfer:*\"] Used by the WPM to create and retrieve symmetric encryption keys to encrypt workload images WLS:FlavorsImageRetrieval WLS: image_flavors:retrieve:* Used by the Workload Agent during Workload Confidentiality flows to retrieve the image Flavor HVS: ReportCreator HVS: [\"reports:create:*\"] Used by the Workload Service to create new attestation reports on the Verification Service as part of Workload Confidentiality key retrievals. Administrator *:*:* Global administrator role used for the initial administrator account. This role has all permissions across all services, including permissions to create new roles and users. AAS: Administrator *:*:* Administrator role for the AAS only. Has all permissions for AAS resources, including the ability to create or delete users and roles. AAS: RoleManager AAS: [roles:create:*, roles:retrieve:*, roles:search:*, roles:delete:*] AAS role that allows all actions for Roles, but cannot create or delete Users or assign Roles to Users. AAS: UserManager AAS: [users:create:*, users:retrieve:*, users:store:*, users:search:*, users:delete:*] AAS role with all permissions for Users, but has no ability to create Roles or assign Roles to Users. AAS: UserRoleManager AAS: [user_roles:create:*, user_roles:retrieve:*, user_roles:search:*, user_roles:delete:*, AAS role with permissions to assign Roles to Users, but cannot create delete or modify Users or Roles. HVS: AttestatioNRegister HVS: [host_tls_policies:create:*, hosts:create:*, hosts:store:*, hosts:search:*, host_unique_flavors:create:*, flavors:search:*, tpm_passwords:retrieve:*, tpm_passwords:create:*, host_aiks:certify:* Role used for Trust Agent provisioning. Used to create the installation token provided during installation. HVS: Certifier HVS: host_signing_key_certificates:create:* Used for installation of the Workload Agent 5 Connection Strings Connection Strings define a remote API resource endpoint that will be used to communicate with the registered host for retrieving TPM quotes and other host information. Connection Strings differ based on the type of host. 5.1 Trust Agent (Windows and Linux) The Trust Agent connection string connects directly to the Trust Agent on a given host. The Verification Service will use a service account with the needed Trust Agent permissions to connect to the Trust Agent. In previous Intel\u00ae SecL versions, each Trust Agent had its own unique user access controls. Starting in the 1.6 release, all authentication has been centralized with the new Authentication and Authorization Service, eliminating the need for credentials to be provided for connection strings connecting to Trust Agent resources. intel:https://<HostNameOrIp>:1443 5.2 VMware ESXi 5.2.1 Importing VMware TLS Certificates Before connecting to vCenter to register hosts or clusters, the vCenter TLS certificate needs to be imported to the Verification Service. This must be done for each vCenter server that the Verification Service will connect to, for importing Flavors or registering hosts. Download the root CA certs from vCenter: ```shell wget --no-proxy \"*\" https:// /certs/download.zip --no-check-certificate This downloads all the root CA certificates for you into `download.zip` file. ```shell unzip download.zip All of the certificates will be stored under <pwd>/certs/ . Certs will be in PEM format. Upload the certificates to the HVS POST https://%3CIP%3E:8443/hvs/v2/ca-certificates { \"name\": \"<cert name>\", \"type\": \"root\", \"certificate\": \"MIIELTCCAxW...\" } Note: Please make sure that the certificate does not contain any other characters other than the base64 characters like that of \\n or -----BEGIN CERTIFICATE----- etc. After upload is successful, restart the HVS hvs restart 5.2.2 Registering a VMware ESXi Host The VMware ESXi connection string is actually directed to vCenter, not the actual ESXi host. Many ESXi hosts managed by the same vCenter server will use the same connection string. The username and password specified are vCenter credentials, and the vCenter \"Validate Session\" privilege is required for access. vmware:https://<vCenterHostNameOrIp>:443/sdk ; h = <hostname of ESXi host> ; u = <username> ; p = <password> 6 Platform Integrity Attestation Platform attestation is the cornerstone use case for ISecL. Platform attestation involves taking measurements of system components during system boot, and then cryptographically verifying that the actual measurements taken matched a set of expected or approved values, ensuring that the measured components were in an acceptable or \" trusted \" state at the time of the last system boot. ISecL leverages the Trusted Compute Group specification for a trusted boot process, extending measurements of platform components to registers in a Trusted Platform Module, and securely generating quotes of those measurements from the TPM for remote comparison to expected values (attestation). This section includes basic REST API examples for these workflows. See the Javadoc for more detailed documentation on REST APIs supported by ISecL. Typical workflows in the datacenter might include: Creating a set of acceptable flavors for attestation with automatic flavor matching that represent the known-good measurements for acceptable BIOS and OS versions in the datacenter Registering hosts for attestation with automatic flavor matching Upgrading hosts in the datacenter to a new BIOS or OS version Removing hosts from the Verification Service Removing flavors Provisioning asset tags to hosts Invalidating asset tags Retrieving current attestation reports Retrieving current host state information Remediating an untrusted attestation 6.1 Host Registration Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report. 6.1.1 Trust Agent 6.1.1.1 Registration via Trust Agent Command Line The Trust Agent can register the host with a Verification Service by running the following command: tagent create-host <Verification Service base URL> <username> <password> Note : Because VMWare ESXi hosts do not use a Trust Agent, this method is not applicable for registration of ESXi hosts. 6.1.2 Registration via Verification Service API Any Trust Agent or VMware ESXi host/cluster can be registered using a Verification Service API request. Registration can be performed with or without a set of existing Flavors. Rules for Flavor matching can be set by using the Flavor Group in the request; if no Flavor Group is specified, the mtwilson_automatic Flavor Group will be used. See the Flavor Management section for additional details on Flavors, Flavor Groups, and Flavor matching. 6.1.2.1 Special Note for VMware ESXi Hosts and teh vCenter TLS Certificate 6.1.2.2 Sample Call POST https://verification.service.com:8443/hvs/v2/hosts Authorization: Bearer <token> { \"host_name\" : \"<hostname of host to be registered>\" , \"connection_string\" : \"<connection string>\" , \"flavorgroup_name\" : \"\" , \"description\" : \"<description>\" } Requires the permission hosts:create 6.1.2.3 Sample Call for ESXi Cluster Registration POST https://verification.service.com:8443/hvs/v2/hosts Authorization: Bearer <token> { \" esxi_clusters\" : [ { \"connection_string\" : \"<password>\" , \"cluster_name\" : \"<cluster name>\" } ] } Requires the permission esxi_clusters:create 6.2 Flavor Creation for Automatic Flavor Matching Flavor creation is the process of adding one or more sets of acceptable measurements to the Verification Service database. These measurements correspond to specific system components, and are used as the basis of comparison to generate trust attestations. Flavors can be created manually, or can be imported from an example host. Flavors are automatically matched to hosts based on the Flavorgroup used by the host and the Flavors, and the Flavor Match Policies of the Flavorgroup. The ISecL Verification Service creates a default Flavorgroups during installation called \" automatic \" This Flavorgroup is configured to be used as a pool of all acceptable Flavors in a given environment, and will automatically match the appropriate Flavor parts to the correct host. This Flavorgroup is used by default and is expected to be useful for the majority of deployments. If no Flavorgroup is specified when creating a Flavor, it will be placed in the \" automatic \" Flavorgroup. Flavors are also divided into Flavor parts, which correspond to the PLATFORM , OS , HOST_UNIQUE , SOFTWARE , and ASSET_TAG measurements. These can be created and maintained separately (so that users can manage acceptable OS and BIOS versions, rather than entire host configurations). By default, if not specified, the Verification Service will import Flavors as separate Flavor parts, as appropriate for the host type. By using individual Flavor parts, individual versions of OS or PLATFORM measurements can be managed and automatically mapped. Whenever a host changes states (Untrusted, Connected, etc.) the Verification Service will attempt to match appropriate Flavors to that host. If a Flavor is removed or added, all appropriate hosts will be updated to use the new Flavor, or to no longer use the deleted Flavor. Hosts that are currently using a BIOS where that BIOS versions\u2019 PLATFORM Flavor was deleted will now appear Untrusted, for example. This can be used to easily flag as Untrusted hosts that are using software that has been End-Of-Lifed, or perhaps an OS kernel with a known security vulnerability. Note: See the Flavor Management section for additional details on how flavors can be managed, and how the Flavor matching engine works. The sample workflow provided here is intended to be an introduction only. 6.2.1 Importing a Flavor from a Sample Host POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<connection string>\" , \"partial_flavor_types\" : [ \"PLATFORM\" , \"OS\" , \"HOST_UNIQUE\" ], \"flavorgroup_names\" : [] } Requires the permission flavors:create Note : The HOST_UNIQUE Flavor parts, used by Red Hat Enterprise Linux and VMWare ESXi host types, MUST be created for each registered host of that type, and should in general be imported from that host. This means that importing the HOST_UNIQUE flavor should always be done for each host registered (except for Windows hosts, which do not have HOST_UNIQUE measurements) To import ONLY the HOST_UNIQUE Flavor part from a host: POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<connection string>\" , \"partial_flavor_types\" : [ \"HOST_UNIQUE\" ], fla vorgroup_ na mes\": [] } Requires the permission flavors:create 6.2.2 Creating a Flavor Manually Flavors can be directly created (rather than importing from a sample host) if the required information is known. If no Flavorgroup is specified, the Flavor will be placed in the automatic group. Note that the label is a required field and must be unique. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"\" , \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"PLATFORM\" , \"label\" : \"Intel Corporation_SE5C610.86B.01.01.1008.031920151331_TPM2.0\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } }, \"hardware\" : { \"processor_info\" : \"\u2026\" , \"processor_flags\" : \"\u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } }, \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : ... } Requires the permission flavors:create 6.3 Creating the Default SOFTWARE Flavor (Linux Only) As part of the new Application Integrity feature added in Intel\u00ae SecL-DC version 1.5, a new default SOFTWARE Flavor part is provided so that the Linux Trust Agent itself can be measured and included in the attestation process. The default SOFTWARE Flavor includes a manifest for the static files and folders in the Trust Agent. The manifest is automatically deployed to each Linux Trust Agent during the provisioning step. Note : The Linux Trust Agent must be rebooted after the Provisioning step is completed (typically Provisioning happens during installation, based on whether all of the required variables are set in the trustagent.env file). Rebooting allows the default SOFTWARE Flavor manifest to be measured and extended to the TPM PCRs. If the reboot is not performed, the system will require a SOFTWARE Flavor, but the measurements will not exist, and the system will appear Untrusted. If an un-rebooted host is used to create the SOFTWARE Flavor, the Flavor will be created based on measurements that do not exist, and will fail. The SOFTWARE Flavor part should be created separately from the other Flavor parts. Only one default SOFTWARE Flavor needs to be created for each version of the Linux Trust Agent. If the SOFTWARE Flavor for the same Trust Agent version is imported multiple times, subsequent imports will fail as the Flavor already exists. To import the SOFTWARE Flavor part from a host: POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<connection string>\" , \"partial_flavor_types\" : [ \"SOFTWARE\" ], fla vorgroup_ na mes\": [] } Requires the permission flavors:create 6.4 Creating and Provisioning Asset Tags Asset Tags represent a set of key/value pairs that can be associated with a host in hardware. This enables usages around restricting workflows to specific hosts based on tags, which could include location information, compliance tags, etc. ISecL creates Asset Tags by creating a certificate containing the list of key/value pairs to be tagged to the host, with the host\u2019s hardware UUID as the certificate subject. A hash of this certificate is then written to an NVRAM index in the host\u2019s TPM. This value is included in TPM quotes, and can be attested using an Asset Tag flavor that matches up the expected value and the actual key/value pairs. 6.4.1 Creating Asset Tag Certificates Asset Tag certificates can be created with a single REST API call, with any number of key/value pairs. Note that one certificate must be created for each host to be tagged, even if they will all be tagged with identical key/value pairs. POST https://verification.service.com:8443/hvs/v2/tag-certificates Authorization: Bearer <token> { \"hardware_uuid\" : \"<hardware UUID of host to be tagged>\" , \"selection_content\" : [ { \"name\" : \"<key>\" , \"value\" : \"<value>\" }, { \"name\" : \"<key>\" , \"value\" : \"<value>\" }, { \"name\" : \"<key>\" , \"value\" : \"<value>\" } ] } 6.4.2 Deploying Asset Tags 6.4.2.1 Windows and Red Hat Enterprise Linux Asset Tags can be provisioned to a Windows or RHEL host via a REST API request on the Verification Service that will in turn make a request to the Trust Agent on the host to be tagged. POST https://verification.service.com:8443/hvs/v2/rpc/deploy-tag-certificate Authorization: Bearer <token> { \"certificate_id\" : \"<certificate ID>\" } 6.4.2.2 VMWare Since VMWare ESXi hosts do not use a Trust Agent, the process for writing Asset Tags to a VMWare host is different from RHEL or Windows. A new interface has been added to ESXi via a new esxcli command starting in vSphere 6.5 Update 2 that allows the Asset Tag information to be written to the TPM via a command-line command. The older process is also described below. The high-level workflow for using Asset Tags with VMWare ESXi is: Create the Asset Tag Certificate for the host. Calculate the Certificate Hash value. Provision the Certificate Hash value to the host TPM and reboot Create the Asset Tag Flavor. Note : Asset Tag is currently not supported for VMWare hosts using TPM 2.0. Calculate the Certificate Hash Value Only the hash value of the Asset Tag Certificate can be provisioned to the TPM, due to the low size of the NVRAM. Retrieve the Asset Tag Certificate. The Asset Tag Certificate can be retrieved either from the response when the Asset Tag certificate is created, or by using a GET API request to retrieve the certificate: GET https://verification.service.com:8443/hvs/v2/tag-certificates?subjectEqualTo=<HardwareUUID> Authorization: Bearer <token> Copy only the certificate value (this will be the certificate in encoded format) and write the data to a file on a Linux system. Remove any line breaks and save the file. Assuming the filename used is tag-cert use the following to generate the correct hash: cat tag-cert | base64 --decode | openssl dgst -sha1 | awk -F \" \" '{print $2}' This hash value will be what is actually written to the TPM NVRAM. Provision the Certificate Hash to the Host TPM Due to a new feature added in vSphere 6.5 Update 2, the process for provisioning Asset Tags on VMWare ESXi hosts has been significantly improved. Both the old and new process for provisioning Asset Tags is documented below. Intel recommends using vSphere 6.5 Update 2 or later due to the significant difference in the process. vSphere 6.5 Update 2 or Later Starting in ESXi 6.5u2, you can now use SSH to write Asset Tags directly with no need for TPM clears, reboots, PXE, or BIOS access. SSH to the ESXi host using root credentials. Then use the command: Use the following command esxcli hardware tpm tag set -d <hash> You can use the following command to verify that the tag was written: esxcli hardware tpm tag get Reboot the host. After rebooting, the TPM PCR 22 will have the measured value of the hash. vSphere 6.5 Update 1 or Older There is no direct interface from VMWare vCenter or ESXi previous to vSphere 6.5 Update 2 that will write the Tag information to the host TPM. Writing Asset Tag information to a TPM requires TPM ownership; VMWare ESXi takes TPM ownership with a secret password at boot time. This means that the process for writing Asset Tags to a VMWare host requires: Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Booting to an OS that has the ability to issue TPM commands Typically the provisioning OS used is Ubuntu or RHEL, booted temporarily using PXE. Writing the Tag information The TPM index 0x40000010 must be defined, and the hash of the Asset Tag certificate must be written to that index. Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Boot back to VMWare ESXi. When the system is rebooted to ESXi, the Trusted Boot process will extend the value to PCR22, and this value can be used during attestation. Creating the Asset Tag Flavor (VMWare ESXi Only) While for RHEL and Windows hosts the Asset Tag Flavor is automatically created during the Tag Provisioning step, for VMWare ESXi hosts the Flavor must be created by importing it from the host after the Tag has been provisioned. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<VMWare vCenter connection string>\" , \"partial_flavor_types\" : [ \"ASSET_TAG\" ] } Once the Asset Tag Flavor is imported, the host can be attested including Asset Tags as normal. 6.5 Retrieving Current Attestation Reports GET https://verification.service.com:8443/hvs/v2/reports?latestPerHost=true Authorization: Bearer <token> 6.6 Retrieving Current Host State Information GET https://verification.service.com:8443/hvs/v2/host-status?latestPerHost=true Authorization: Bearer <token> 6.7 Upgrading Hosts in the Datacenter to a New BIOS or OS Version Software and firmware updates are a common occurrence in the datacenter. Automatic Flavor matching makes this process relatively simple: Create a new Flavor for the new version. This may be manually created or imported directly from a sample host that has already received the upgrade. Be sure to create new Flavors for each TPM version represented in your datacenter. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<connection string>\" , \"partial_flavor_types\" : [ \"PLATFORM\" , \"OS\" , \"HOST_UNIQUE\" ], fla vorgroup_ na mes\": [] } Update the hosts to the new software or firmware version as normal. On the next attestation attempt, the Verification Service will automatically match the updated hosts to the new Flavor. (Optional) If desired, delete the Flavor for the older version after the update is completed. This will cause any hosts that are still using the old version to attest as Untrusted. Which can easily flag hosts that missed the upgrade for remediation. DELETE https://verification.service.com:8443/hvs/v2/flavors/<flavorId> Authorization: Bearer <token> \u200b 6.8 Removing Hosts From the Verification Service Hosts can be deleted at any time. Reports for that host will remain in the Verification Service database for audit purposes. DELETE https://verification.service.com:8443/hvs/v2/hosts/<hostId> Authorization: Bearer <token> The hostId can be retrieved either at the time the host is created, or by searching hosts using the host\u2019s hostname. 6.9 Removing Flavors Flavors can be deleted; this will cause any hosts that match the deleted Flavor to evaluate as Untrusted. This can be done if, for example, an old BIOS version needs to be retired and should no longer exist in the datacenter. By deleting the PLATFORM Flavor, hosts with the old BIOS version will attest as Untrusted, flagging them for easy remediation. DELETE https://verification.service.com:8443/hvs/v2/flavors/<flavorId> 6.10 Invalidating Asset Tags Asset Tags can be deleted in two ways. Deleting the ASSET_TAG Flavor part will retain the Asset Tag certificate in the database, but will cause the host using this Tag to no longer use the Asset Tag for attestation (the Tag result will be disregarded and no tags will be exposed in the attestation Reports). DELETE https://verification.service.com:8443/hvs/v2/flavors/<assetTagflavorId> Authorization: Bearer <token> Deleting the actual Asset Tag certificate will remove the certificate from the database, but will not actually affect attestation results (the authority for attestation results is the Flavor). DELETE https://verification.service.com:8443/hvs/v2/tag-certificates/<assetTagCertificateId> Authorization: Bearer <token> 6.11 Remediating an Untrusted attestation Hosts can become Untrusted for a wide variety of causes. The first clue to finding the root cause for an Untrusted attestation is the attestation Report itself \u2013 the Report will show Trust results for the PLATFORM , OS , HOST_UNIQUE , and ASSET_TAG Flavor parts individually, along with the OVERALL trust. If the Report shows that the PLATFORM Flavor part trust is \u201cfalse\u201d for example, it means that the PLATFORM measurements did not match any Flavors in the host\u2019s Flavorgroup. Untrusted attestation Reports will contain faults that describe the specific attestation rules that were not satisfied. This often shows enough information to describe the cause of the Untrusted status. A fault like RequiredButNotDefined means that a Flavor part is required by the Flavorgroup policy, but no Flavors for that Flavor part exist in the Flavorgroup (for example, generally Flavorgroups should always require a PLATFORM Flavor part; if no PLATFORM Flavors are in the Flavorgroup, hosts in the Flavorgroup will attest with this fault). Other faults include: \"PcrMatchesConstant\" - describes a rule that evaluates whether a TPM PCR has a specific value \"PcrEventLogIntegrity\" - the module event log is replayed during attestation to verify that the resulting measurement matches the actual value in the module PCR. If the replay does not match, it indicates the event log cannot itself be trusted. \"AikCertificateTrusted\" \u2013 This rule evaluates whether the TPM quote was signed by the TPM associated with this host. As part of host registration, the public half of the Attestation Identity Keypair is captured, and this public key is used to verify the signature on TPM quotes from that host. See the Appendix for a full list of the rules evaluated during Attestation. The Flavor matching engine will use the most-similar Flavor for the attestation Report in the case of an Untrusted result. The fault will explain in a general sense what rule the host attestation violated. To remediate, the rule will need to be satisfied. This could mean creating a new Flavor to match the actual observed values, or it could mean that the host has been tampered with and should have its BIOS flashed or OS reloaded. 6.12 Attestation Reporting Attestation results are delivered in the form of Host Reports. A Report can delivered in several different formats, which can change the type of data returned. The preferred format for Host Reports is a SAML attestation. A SAML-formatted report includes a chain or signatures that provides auditability for the Report. The SAML attestation will include the base trust status of the host, as well as the overall trust for each individual Flavor used in the attestation. The Report will also contain host information, such as TPM version, Operating System name and version, BIOS version, etc. The SAML Report will not, however, contain individual measurements and comparisons of values. This format of the Report is ideal for securely communicating the trust status of a host and for audit history. Attestation Reports can also be retrieved in json or xml format. These formats will not include the signature chain provided in the SAML format, but will contain the actual measurement values and expected Flavor values used for comparison. These reports are typically used for remediation, because they will show specifically why a given Host attested as Untrusted. The format for a Report is determined by the Accept header in the request. Attestations are automatically generated in the Verification Service by a repeating scheduled background process. This process looks for Attestation Reports that are close to expiration, and triggers a new Attestation Report. By default, Attestation Reports are valid for 90 minutes, and the background refresh process will trigger a new attestation when a Report is found to be within 3 minutes of expiration. A user can either retrieve the most recent currently valid Attestation Report for a given host, or may trigger a new Attestation Report to be generated. Typically, it is best to retrieve an existing Report for performance reasons. Generating a new Attestation Report requires the generation of a new TPM quote from the TPM of the host being attested; TPM performance differs greatly between vendors, and a quote can take anywhere between 2-7 seconds to generate. 6.12.1 Sample Call \u2013 Generating a New Attestation Report POST https://verification.service.com:8443/hvs/v2/reports Authorization: Bearer <token> { \"host_name\" : \"host-1\" } Requires the permission reports:create 6.12.2 Sample Call \u2013 Retrieving an Existing Attestation Report GET https://verification.service.com:8443/hvs/v2/reports?hostName=HostName.server.com Authorization: Bearer <token> Below are the supported criteria options in order of precedence. If no host filter criteria is specified, then results are returned for all active hosts. id - unique UUID of the report entry in the database hostId - unique UUID of the host entry in the database hostName - name of the host hostHardwareId - hardware UUID of the host hostStatus - current state of the host, which supports the following options: CONNECTED - host is in connected state QUEUE - host is in queue to be processed CONNECTION_FAILURE - connection failure UNAUTHORIZED - unauthorized AIK_NOT_PROVISIONED - AIK certificate is not provisioned EC_NOT_PRESENT - endorsement certificate is not present MEASURED_LAUNCH_FAILURE - TXT measured launch failure TPM_OWNERSHIP_FAILURE - TPM ownership failureTPM_NOT_PRESENT - TPM is not present UNSUPPORTED_TPM - unsupported TPM version UNKNOWN - unknown host state Requires the permissions reports:search Other search criteria may also be used. By default, the most recent currently valid attestation is returned. However, different query parameters can be used to retrieve all attestations for a specific host over the last 30 days, for example. 6.13 Integration Intel\u00ae SecL can be integrated with scheduler services (or potentially other services) to provide additional security controls. For example, by integrating Intel\u00ae SecL with the OpenStack scheduler service, the OpenStack placement service can incorporate the Intel\u00ae SecL security attributes into VM scheduling. 6.13.1 The Integration Hub The Integration Hub acts as the integration point between the Verification Service and a third party service. The primary purpose of the Hub is to collect and maintain up-to-date attestation information, and to \u201cpush\u201d that information to the external service. The secondary purpose is to allow for multitenancy, the Verification Service does not allow for permissions to be applied for specific hosts, so a user with the \u201cattestation\u201d role can access all attestations for all hosts. By using separate Integration Hub instances for each Cloud environment (or \"tenant\"), the Hub will push attestations only for the associated hosts to a given tenant\u2019s integration endpoints. For example, Tenant A is using hosts 1-10 for an OpenStack environment. Tenant B is using hosts 11-15 for a Docker environment. Two Hub instances must be configured, one managing tenant A's OpenStack cluster and a second instance managing Tenant B's Docker environment. Each integration Hub will automatically retrieve the list of hosts used by its configured orchestration endpoint, retrieve the attestation reports only for those hosts, and push the attestation attribute information to each configured endpoint. Neither tenant will have access to the Verification Service, and will not be able to see attestation or other host details regarding infrastructure used by other tenants. Different integration endpoints can be added to the Integration Hub through a plugin architecture. By default, the Integration Hub includes plugins for OpenStack and Kubernetes (Kubernetes deployments require the additional installation of two Intel\u00ae SecL-DC Custom Resource Definitions on the Kube Control Plane). 6.13.2 Integration with OpenStack Starting in the Rocky release, OpenStack can now use \u201cTraits\u201d to provide qualitative data about Nova Compute hosts, and to establish Trait requirements for VM instances. The updated scheduler will place VMs requiring a given Trait on Nova Compute nodes that meet the Trait requirements. Intel SecL-DC uses the Integration Hub to continually push platform integrity and Asset Tag information to the OpenStack Traits resources. This means the OpenStack scheduler natively supports workload scheduling incorporating Intel SecL-DC security attributes, including attestation report Trust status and Asset Tags. The OpenStack Placement Service will automatically attempt to place images with Trait requirements on compute nodes that have those Traits. NOTE : This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices. 6.13.2.1 Prerequisites Verification Service must be installed and running. OpenStack* Rocky (or later) Nova, Glance, Horizon, and Keystone services must be installed and running The Integration Hub must be installed and running. 6.13.2.2 Setting Image Traits Image Traits define the policy for which Traits are required for that Image to be launched on a Nova Compute node. By setting these Traits to \u201crequired,\u201d the OpenStack scheduler will require these same Traits to be present on a Nova Compute node in order to launch instances of the image. To set the Image Traits for Intel SecL-DC, a specific naming convention is used. This naming convention will match the Traits that the Integration Hub will automatically push to OpenStack. Two types of Traits are currently supported \u2013 one Trait is used to require that the Compute Node be Trusted in the Attestation Report, and the other Trait is used to require specific Asset Tag key/value pairs. To require a Trusted Attestation Report: CUSTOM_ISECL_TRUSTED=required The naming convention for Asset Tags is more flexible, and any number of these Traits can be used simultaneously. Note : All of the Traits must be present on the Compute Node for the scheduler to allow instances to land, so be sure not to set mutually exclusive Asset Tag values. CUSTOM_ISECL_AT_TAG_<key>__<value>=required` For example, to define a Trait that will require an Asset Tag where State = CA use the following: CUSTOM_ISECL_AT_TAG__STATE_CA= required These Traits can be set using CLI commands for OpenStack Glance: openstack image set --property trait:CUSTOM_ISECL_AT_STATE__CA = required <image_name> openstack image set --property trait:CUSTOM_ISECL_TRUSTED = required <image_name> To remove a Trait so that it is no longer required for an Image: openstack image unset --property trait:CUSTOM_ISECL_AT_STATE__CA <image_name> openstack image unset --property trait:CUSTOM_ISECL_TRUSTED <image_name> 6.13.2.3 Configuring the Integration Hub for Use with OpenStack The Integration Hub must be configured with the API URLs and credentials for the OpenStack instance it will integrate with. This can be done during installation using the \"OPENSTACK...\" variables shown in the ihub.env answer file sample (see the Installing the Integration Hub section). 6.13.2.7 Scheduling Instances Once Trait requirements are set for Images and the Integration Hub is configured to push attributes to OpenStack, instances can be launched in OpenStack as normal. As long as the OpenStack Nova scheduler is used to schedule the workloads, only compliant Compute Nodes will be scheduled to run instances of controlled Images. NOTE : This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices. 6.13.3 Integration with Kubernetes Through the use of Custom Resource Definitions for the Kubernetes Control Plane, Intel\u00ae Security Libraries can make Kubernetes aware of Intel\u00ae SecL security attributes and make them available for pod orchestration. In this way, a security-sensitive pod can be launched only on Trusted physical worker nodes, or on physical worker nodes that match specified Asset Tag values. NOTE : This control only applies to pods launched using the Kubernetes scheduler, and these scheduling controls will not affect manually-launched instances where a specific worker node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing Kubernetes interfaces and does not modify Kubernetes code, using only the standard Custom Resource Definition mechanism to add this functionality to the Kubernetes Control Plane. The datacenter owner or Kubernetes administrator is responsible for the security of the Kubernetes workload scheduling process in general, and Intel recommends following published Kubernetes security best practices. 6.13.3.1 Prerequisites Verification Service must be installed and running. Kubernetes Control Plane Node must be installed and running The supported Kubernetes versions are from 1.14.8 - 1.17.3 and the integration is validated with 1.14.8 and 1.17.3 Kubernetes Worker Nodes must be configured as physical hosts and attached to the Control Plane Node 6.13.3.2 Installing the Intel\u00ae SecL Custom Resource Definitions Intel\u00ae SecL uses Custom Resource Definitions to add the ability to base orchestration decisions on Intel\u00ae SecL security attributes to Kubernetes. These CRDs allow Kubernetes administrators to configure pods to require specific security attributes so that the Kubernetes Control Plane Node will schedule those pods only on Worker Nodes that match the specified attributes. Two CRDs are required for integration with Intel\u00ae SecL \u2013 an extension for the Control Plane nodes, and a scheduler extension. A single installer will deploy both of these CRDs. The extensions are deployed as a Kubernetes deployment in the isecl namespace. To deploy the Kubernetes integration CRDs for Intel\u00ae SecL: Copy the isecl-k8s-extensions installer to the Kubernetes Control Plane and execute the installer ./isecl-k8s-extensions-v3.3.1.bin Add a mount path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - mountPath : /opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ name : extendedsched readOnly : true Add a volume path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - hostPath : path : /opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ type : \"\" name : extendedsched Add policy-config-file path in the /etc/kubernetes/manifests/kube-scheduler.yaml file under command section: - command : - kube-scheduler - --policy-config-file=/opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/scheduler-policy.json - --bind-address=127.0.0.1 - --kubeconfig=/etc/kubernetes/scheduler.conf - --leader-elect=true Wait for the isecl-controller and isecl-scheduler pods to be into running state shell kubectl get pods -n isecl Create role bindings on the Kubernetes Control Plane: kubectl create clusterrolebinding isecl-clusterrole --clusterrole=system:node --user=system:serviceaccount:default:default kubectl create clusterrolebinding isecl-crd-clusterrole --clusterrole=isecl-controller --user=system:serviceaccount:default:default Copy the Integration Hub public key to the Kubernetes Control Plane: scp -r /etc/ihub/ihub_public_key.pem k8s.maseter.server:/opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ Run the command systemctl restart kubelet to restart all the control plane container services, including the base scheduler. The scheduler yaml is present under /opt/isecl-k8s-extensions/yamls/isecl-scheduler.yaml If the Controller and/or Scheduler deployments are deleted, the following steps need to be performed: a. Edit /etc/kubernetes/manifests/kube-scheduler.yaml and remove/comment the following content and restart kubelet --policy-config-file = /opt/isecl-k8s-extensions/isecl-k8sscheduler/config/scheduler-policy.json systemctl restart kubelet b. Redeploy scheduler and controller kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-scheduler.yaml c. Edit /etc/kubernetes/manifests/kube-scheduler.yaml and add/uncomment the following content and restart kubelet --policy-config-file = /opt/isecl-k8s-extensions/isecl-k8sscheduler/config/scheduler-policy.json systemctl restart kubelet d. Logs will be appended to older logs in /var/log/isecl-k8s-extensions Whenever the CRD's are deleted and restarted for updates, the CRD's using the yaml files present under /opt/isecl-k8s-extensions/yamls/ . Kubernetes Version 1.14-1.15 uses crd-1.14.yaml and 1.16-1.17 uses crd-1.17.yaml kubectl delete hostattributes.crd.isecl.intel.com kubectl apply -f /opt/isecl-k8s-extensions/yamls/crd-<version>.yaml (Optional) Verify that the Intel \u00ae SecL Custom Resource Definitions have been started: To verify the Intel SecL CRDs have been deployed: kubectl get pods -n isecl 6.13.3.6 Configuring Pods to Require Intel\u00ae SecL Attributes (Optional) Verify that the worker nodes have had their Intel\u00ae SecL security attributes populated: kubectl get nodes --show-labels The output should show the Trust status and any Asset Tags applied to all of the registered Worker Nodes. Add the following to any Pod creation files: spec : affinity : nodeAffinity : requiredDuringSchedulingIgnoredDuringExecution : nodeSelectorTerms : - matchExpressions : - key : isecl.trusted operator : In values : - \"true\" - key : isecl.TAG_Country operator : In values : - CA - US - key : isecl.TAG_Customer operator : In values : - Coke - Pepsi - key : isecl.TAG_State operator : In values : - CA The isecl.trusted key defines the requirement for a Trusted host. Only one of these keys should be used. The isecl.TAG_ keys indicate Asset Tags; if the workload should only launch on hosts with the COUNTRY=US Asset Tag, the pod should be launched with the matchExpression key isecl.TAG_COUNTRY with the value US . All of the matchExpression definitions must be true for a given worker node to launch the pod \u2013 in the example above, the host must be attested as Trusted with Asset Tags Country=US , Customer=Customer1 and State=CA . If the worker node has additional Asset Tags beyond the ones required, the pod will still be able to be launched on that node. However, if one of the specified Tags is missing or has a different value, that worker node will not be used for that pod. 6.13.3.7 Tainting Untrusted Worker Nodes Optionally, the Intel\u00ae SecL Kubernetes CRDs can be configured to flag worker nodes as tainted to prevent any pods from launching on them. This restriction is applied regardless of whether the pod has a specific trust policy \u2013 if a worker node is flagged as tainted no pods will be launched on that worker. This setting is disabled by default. To enable this setting: Edit the isecl-controller.yaml file under /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml and set TAINT_UNTRUSTED_NODES=true Run kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml Worker nodes that attest as untrusted will be tainted with the NoExecute flag and unable to launch pods. If a worker was previously considered tainted and the untrusted state is resolved, the Intel\u00ae SecL CRDs will remove the tainted flag and the worker will be able to launch pods again. 7 Workload Confidentiality Workload Confidentiality builds upon Platform Attestation to protect data in virtual machine and container images. At its core, this feature is about allowing an image owner to set policies that define the conditions under which their image will be allowed to run; if the policy conditions are met, the decryption key will be provided, and if the conditions are not met, the image will remain encrypted and inaccessible. This provides a level of enforcement beyond integration with orchestrators, and protects sensitive data when the image is at rest. Workload Encryption relies on Platform Attestation to define the security attributes of hosts. When a protected image is launched, the Workload Agent on the host launching the VM or container image will detect the attempt (using either Libvirt hooks for VMs, or as a function of the Docker Secure Overlay Driver in the case of containers) and use the Image ID to find the Image Flavor on the Workload Service. The Workload Service will retrieve the current trust report for the host launching the image, and use that report to make a key retrieval request to the key transfer URL retrieved from the image flavor. The key transfer URL refers to the URL to the image owner\u2019s Key Broker Service, along with the ID of the key needed. In a typical production deployment, a Cloud Service Provider would enable Intel\u00ae SecL-DC security controls by installing the Intel\u00ae SecL-DC applications (with the exception of the Key Broker and Workload Policy Manager), and configuring each workload host to be Trusted (as per the Platform Integrity Attestation use case). The owner of the workload image(s) to be protected (for example, the end customer of the CSP) must install a Key Broker Service (which must be available for network communication from the Workload Service hosted on the CSP), the Workload Policy Manager, and their own Authentication and Authorization Service and Certificate Management Service (these will manage authentication and certificates for the KBS and WPM). Any number of image owner customers with their own unique KBS/WPM/AAS/CMS deployments may protect images that can be run by a single CSP deployment. The image owner will use the WPM to encrypt any image(s) to be protected; the WPM will automatically create a new image encryption key using the KBS, and will output the encrypted image and an Image Flavor. The image owner can then upload the encrypted image to the CSP\u2019s image storage service, and then upload the Image Flavor to the CSP-hosted WLS. When a compute host at the CSP attempts to launch a protected image, the WLA on the host will detect the launch request, and will issue a key transfer request to the WLS. The WLS will use the image ID to retrieve the Image Flavor, which contains the key retrieval URL for that image. This URL is hosted on the KBS of the image owner (which is why the KBS must be available to network requests from the WLS). The WLS will access the HVS to retrieve the current Platform Integrity Attestation report for the host, and will use this report to make a key transfer request to the KBS at the key transfer URL. The KBS will receive the request, verify that the Platform Integrity Attestation report is signed using a known SAML signing key (verifying that the report comes from a known and trusted HVS), and will then verify that the report shows that the host is trusted. If these requirements are met, the KBS will use the host\u2019s Binding Key (the public half of an asymmetric keypair generated by the host\u2019s TPM and included in the attestation report) as a Key Encryption Key to seal the Image Encryption Key to the TPM of the host that was attested. When the host receives the response to the key request, it will unseal the Image Encryption Key using its TPM. Because the Key Encryption Key is unique to this host\u2019s TPM, only the actual host that was attested will be able to gain access to the image. With the Image Encryption Key, the host\u2019s WLA will create the appropriate encrypted volume(s) for the image and begin the launch as normal. The WLA does not retain the key on disk; if/when the host is rebooted or the WLA is restarted, restarting the workloads based on protected images will trigger new key requests based on new Platform Integrity Attestation reports. In this way, if a host is compromised in a method detectable by the Platform Integrity feature, protected images will be unable to launch on this server. 7.1 Virtual Machine Confidentiality 7.1.1 Prerequisites To enable Virtual Machine Confidentiality, the following Intel\u00ae SecL-DC components must be installed and available: Authentication and Authorization Service Certificate Management Service Key Broker Service Host Verification Service Workload Service Trust Agent + Workload Agent (on each virtualization host) Workload Policy Manager See the Installation subsection on Recommended Service Layout for recommendations on how/where to install each service. It is strongly recommended to use a VM orchestration solution (for example, OpenStack) with the Intel\u00ae SecL-DC Integration Hub to schedule encrypted workloads on compute hosts that have already been pre-checked for their Platform Integrity status. See the Platform Integrity Attestation subsection on Integration with OpenStack for an example. You will need at least one QCOW2-format virtual machine image (for quick testing purposes, a very small minimal premade image like CirrOS is recommended; a good place to look for testing images is the OpenStack Image Guide found here: https://docs.openstack.org/image-guide/obtain-images.html ). One or more hypervisor compute nodes running QEMU/KVM is required. Each of these nodes must have the Intel\u00ae SecL-DC Trust Agent and Workload Agent installed, and they must be registered with the Verification Service. Each of these servers should show as trusted see the Platform Integrity Attestation section for details. You should have Flavors that match the system configuration for these hosts, and attestation reports should show all Flavor parts as trusted=true Hosts that are not trusted (including servers where there is no trust status, like hosts with no Trust Agent) will fail to launch any encrypted workloads. 7.1.2 Workflow 7.1.2.1 Encrypting Images wpm create-image-flavor -l <user-friendly unique label> -i <path to image file> -e <output path and filename for encrypted image> -o <output path for JSON image flavor> After generating the encrypted image with the WPM, the encrypted image can be uploaded to the Image Storage service of choice (for example, OpenStack Glance). Note that the ID of the image in this Image Storage service must be retained and used for the next steps. 7.1.2.2 Uploading the Image Flavor POST https://<Workload Service IP or Hostname>:5000/wls/flavors Authorization: Bearer <token> {<Image Flavor content from WPM output>} Use the above API request to upload the Image Flavor to the WLS. The Image Flavor will tell other Intel\u00ae SecL-DC components the Key Transfer URL for this image. 7.1.2.3 Creating the Image Flavor to Image ID Association The WLS needs to know the ID of the image as it exists in the image storage service used by the CSP (for example, OpenStack Glance). Use the below API request to create an association between the Image Flavor created in the previous step and the image ID. POST https://<Workload Service IP or Hostname>:5000/wls/images Authorization: Bearer <token> { \"id\": \"<image ID on image storage>\", \"flavor_ids\": [\"<Image Flavor ID>\"] } 7.1.2.4 Launching Encrypted VMs Instances of the protected images can now be launched as normal. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the VM is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided. 7.2 Docker Container Confidentiality 7.2.1 Docker Container Integrity Intel\u00ae recommends using Docker Notary to verify the integrity of Docker container images at launch. https://docs.docker.com/notary/getting_started/ 7.2.2 Prerequisites To enable Docker Container Confidentiality, the following Intel\u00ae SecL-DC components must be installed and available: Authentication and Authorization Service Certificate Management Service Key Broker Service Host Verification Service Workload Service Trust Agent + Workload Agent (on each Docker host) Workload Policy Manager See the Installation subsection on Recommended Service Layout for recommendations on how/where to install each service. It is strongly recommended to use a container orchestration solution (for example, Kubernetes) with the Intel\u00ae SecL-DC Integration Hub to schedule encrypted Docker containers on compute hosts that have already been pre-checked for their Platform Integrity status. See the Platform Integrity Attestation subsection on Integration with Kubernetes for an example. You will need at least one Docker container image. For quick testing purposes, Intel recommends one or more of the following: https://github.com/jessfraz/dockerfiles/ Image names: Openvpn k8scan postfix One or more Docker container worker nodes running Docker 19.03 is required. Each of these nodes must have the Intel\u00ae SecL-DC Trust Agent and Workload Agent installed, and they must be registered with the Verification Service. Each of these servers should show as \u201ctrusted;\u201d see the Platform Integrity Attestation section for details. You should have Flavors that match the system configuration for these hosts, and attestation reports should show all Flavor parts as \u201ctrusted=true.\u201d Hosts that are not trusted (including servers where there is no trust status, like hosts with no Trust Agent) will fail to launch any encrypted workloads. Important Note: Docker version 19.03.13 is specifically required, and other versions are not supported. Installation of the Workload Agent for Docker Container Confidentiality will replace the existing Docker binaries (the client and daemon, in /usr/bin/dockerd and /usr/bin/docker) with a recompiled Docker engine that includes the Secure Overlay Driver. This is what allows the launch of encrypted containers to be intercepted and decrypted. The Docker runtime must not be upgraded or downgraded to any other version; doing so will cause encrypted Docker Containers to fail to launch. In the future, the Container Encryption feature will be modified to use OCI-standard container encryption without the need for recompilation or file replacement. 7.2.3 Workflow 7.2.3.1 Encrypting Docker Container Images The first step is encryption of a Docker Container image. The WPM is a command line utility that will perform the actual image encryption and allow the resulting encrypted image to be uploaded to a Docker Registry. The commands needed are slightly different depending on whether Notary is being used to validate container integrity. If Notary is not being used: wpm create-container-image-flavor -i <container image name> -t <tag-name> -e -f <Dockerfile Path> -d <dirPath> -o <output path for JSON image flavor> If Notary is being used: wpm create-container-image-flavor -i <imageName> -t <TagName> -e -s -n https://<notaryIP>:<notaryPort>/ -f <Dockerfile Path> -d <dirPath> Also, if Notary is being used, set the following environment variable before uploading the image to the Registry: export DOCKER_CONTENT_TRUST = 1 After generating the encrypted image with the WPM, the encrypted image can be uploaded to a local Docker Registry. 7.2.3.2 Uploading the Image Flavor POST https://<Workload Service IP or Hostname>:5000/wls/flavors Authorization: Bearer <token> { <Image Flavor content from WPM output> } Use the above API request to upload the Image Flavor to the WLS. The Image Flavor will tell other Intel\u00ae SecL-DC components the Key Transfer URL for this image. 7.2.3.3 Creating the Image Flavor to Image ID Association For Docker images stored in a Docker Registry, the ID is typically an MD5 hash. This format must be converted for use with the Workload Service. To get the non-truncated ID of the image, use the Docker command: docker images --no-trunc Next, convert this to a UUID that can be used by Intel\u00ae SecL: wpm get-container-image-id <image-full-md5id> The output will be a UUID, which will be considered the ID of the image for the WLS. Use the below API request to create an association between the Image Flavor created in the previous step and the image ID. POST https://<Workload Service IP or Hostname>:5000/wls/images Authorization: Bearer <token> { \"id\" : \"<image ID on image storage>\" , \"flavor_ids\" : [ \"<Image Flavor ID>\" ] } 7.2.3.4 Launching Encrypted Docker Containers Containers of the protected images can now be launched as normal using Kubernetes pods and deployments. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the Docker Container is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided. 8 Trusted Virtual Kubernetes Worker Nodes While the existing Platform Integrity Attestation functions support bare-metal Kubernetes Worker Nodes, using Virtual Machines to host the Worker Nodes is a common deployment architecture. This feature aims to help extend the Chain of Trust to protect the integrity of Virtual Machines, including virtual Kubernetes Worker Nodes. This feature requires the foundational Platform integrity Attestation feature as a prerequisite for the bare-metal servers hosting the virtual Worker Nodes. Note : This feature requires a degree of separation between the VM and Kubernetes infrastructure. All physical, bare-metal servers should be virtualization hosts, and all Kubernetes Worker Nodes should be Virtual Machines running on those physical virtualization hosts. Kubernetes clusters should not use a mixture of both virtual and bare-metal Workers. The physical virtualization clusters should not include a mixture of hosts protected by Intel\u00ae SecL Platform integrity Attestation and hosts that are not protected. VM trust reports can only be generated for VM instances launched on hosts with Intel\u00ae SecL services enabled. Also important to note is that this feature alone will not prevent any VMs from launching . VMs will still be launched on Untrusted platforms unless additional steps are taken (for example, using OpenStack orchestration integration with Intel\u00ae SecL, or using the Workload Confidentiality feature to encrypt the Kubernetes Worker Node VM image). This feature generates VM attestation reports that can be used to audit compliance and extend the Chain of Trust, and relies on other datacenter policies and/or Intel\u00ae SecL features to enforce compliance. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes. Optionally, the Kubernetes Worker Node VM images can be encrypted and protected as per the Workload Confidentiality feature of Intel\u00ae SecL. This adds a layer of enforcement \u2013 rather than simply reporting whether the VM started on a Trusted platform (and is therefore Trusted), Workload Confidentiality ensures that the Worker Node VM image can only be decrypted on compliant platforms. In both cases (with VM image encryption and without), the VM Trust Reports are accessed through the Workload Service: GET https://<Workload Service IP or Hostname>:5000/wls/reports?instance_id=<instance ID> Authorization: Bearer <token> This query will return the latest VM trust report for the provided Instance ID (the Instance ID is the VM\u2019s ID as it is identified by Libvirt; in OpenStack this would correspond directly to the OpenStack Instance ID). As a best practice, Intel\u00ae recommends using an orchestration layer (such as OpenStack) integrated with Intel\u00ae SecL to launch VMs only on Trusted platforms. See the previous section, \u201cIntegration\u201d under the \u201cPlatform Integrity Attestation\u201d feature for details. As an additional layer of protection, the Kubernetes Worker Node VM images can be encrypted using the Workload Confidentiality feature. This adds cryptographic enforcement to the workload orchestration and ensures instances of the Worker Node images will only be launched on Trusted platforms. 8.1 Prerequisites All physical, bare-metal servers should be virtualization hosts. Virtualization hosts must be Linux platforms using Libvirt. All Kubernetes Worker Nodes should be Virtual Machines running on those physical virtualization hosts. Kubernetes clusters must not use a mixture of both virtual and bare-metal Workers. The physical virtualization clusters must not include a mixture of hosts protected by Intel\u00ae SecL Platform integrity Attestation and hosts that are not protected. VM trust reports can only be generated for VM instances launched on hosts with Intel\u00ae SecL services enabled. The Intel\u00ae SecL Platform integrity Attestation feature must be used to protect all physical virtualization hosts. These platforms must all be registered with the Verification Service, must have the Trust Agent installed and running, and must be Trusted. See the Platform integrity Attestation section for details. In addition to the services required by Platform Integrity Attestation, the Workload Agent must be installed on each physical virtualization host, and the Workload Service must be installed on the management plane. (Optional; recommended) Virtual Machines should be orchestrated using an Intel\u00ae SecL-supported orchestrator, such as OpenStack. This will help launch the VMs only on compliant platforms. (Optional) Virtual Machine Images may be encrypted using the Workload Confidentiality feature. This adds a layer of cryptographic enforcement to the orchestration of virtual worker VMs, ensuring that the VMs can only be launched on compliant platforms. 8.2 Workflow There are no additional steps required to enable this feature; if the Workload Agent is running on the physical virtualization host, VM trust reports will automatically be generated at every VM Start. Intel\u00ae strongly recommends using an orchestration integration for the VM management layer (for example, the provided Integration Hub integration with OpenStack) to help ensure that the worker node VMs only launch on Trusted physical hosts. If no orchestration is used, the platform service provider should ensure that all physical hosts are always in a Trusted state and take action to ensure Untrusted platforms cannot launch VMs. The primary benefit of the Trusted Virtual Kubernetes Worker Node feature is auditability of the Chain of Trust. By retrieving the VM Trust Report from the Workload Service for a given Worker Node instance, auditors can verify that the VM launched on a Trusted platform. The VM trust report also includes the hardware UUID of the physical host. This UUID, along with the time that the VM instance was launched, can be used to pull the correlating physical host trust report from the Verification Service to provide proof of compliance. To retrieve a VM trust report from the Workload Service: GET https://<Workload Service IP or Hostname>:5000/wls/reports?instance_id=<instance ID> Authorization: Bearer <token> This will return the latest report for the specified instance ID. 8.3 Sample VM Trust Report A sample VM Trust Report from the Workload Service is below. The report is generated by the Workload Agent and signed using the host\u2019s TPM, then stored in the Workload Service. The report contains some key attributes: instance_id : This is the ID of the instance. In OpenStack, this would correlate directly to the Instance ID for the VM. image_id : This is the ID for the source image used to launch the instance. In OpenStack, this correlates directly to the Image ID for the VM. host_hardware_uuid : The hardware UUID of the physical host that started the VM. This attribute identifies which host performed the VM start and attested the VM. This UUID can be used to query the Verification Service to retrieve attestations of the host. By correlating the VM Trust Report with the Host Trust Report, we can verify that this instance was started on a Trusted platform. image_encrypted : True or False based on whether the source image was protected using the Workload Confidentiality feature. trusted : True or False, based on whether the VM instance was started on a Trusted platform. Because the report is generated at every vm start through Libvirt, a new report will be generated whenever the VM is turned on or migrated, reflecting the state of the VM and its host at every opportunity for the state to change. <Response xmlns= \"http://wls.server.com/wls/reports\" > <instance_manifest> <instance_info> <instance_id> bd06385a-5530-4644-a510-e384b8c3323a </instance_id> <host_hardware_uuid> 00964993-89c1-e711-906e-00163566263e </host_hardware_uuid> <image_id> 773e22da-f687-47ca-89e7-5df655c60b7b </image_id> </instance_info> <image_encrypted> true </image_encrypted> </instance_manifest> <policy_name> Intel VM Policy </policy_name> <results> <e> <rule> <rule_name> EncryptionMatches </rule_name> <markers> <e> IMAGE </e> </markers> <expected> <name> encryption_required </name> <value> true </value> </expected> </rule> <flavor_id> 3a3e1ccf-2618-4a0d-8426-fb7acb1ebabc </flavor_id> <trusted> true </trusted> </e> </results> <trusted> true </trusted> <data> eyJpbnN0YW5jZV9tYW5pZmVzdC\u2026data> <hash_alg> SHA-256 </hash_alg> <cert> -----BEGIN CERTIFICATE----- \u2026 -----END CERTIFICATE----- </cert> <signature> \u2026 </signature> </Response> 9 Flavor Management 9.1 Flavor Format Definitions A Flavor is a standardized set of expectations that determines what platform measurements will be considered \u201ctrusted.\u201d Flavors are constructed in a specific format, containing a metadata section describing the Flavor, and then various other sections depending on the Flavor type or Flavor part. 9.1.1 Meta The first part of a Flavor is the meta section: \"meta\" :{ \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } } This section defines the Flavor part and any versioning information. NOTE : Even when the BIOS or OS version remains the same, the actual measurements in the measured boot process will be different between TPM 1.2 and TPM 2.0, and so the TPM version is captured here as well. The attributes in the Meta section are used by the Flavor matching engine when matching Flavors to Hosts. Note that TPM 1.2 is supported only for VMware ESXi hosts. 9.1.2 Hardware The hardware section is unique to PLATFORM flavor parts: \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } } This part of the Flavor defines expected hardware attributes of the host, and contains processor and TPM-related attributes. 9.1.3 PCRs The last section of a Flavor is the \u201cPCRs\u201d section, which contains the actual expected measurements for any PCRs. This section will contain PCR measurements for each applicable algorithm supported by the TPM (SHA1 only for TPM 1.2, SHA256 and SHA1 sections for TPM 2.0). Some PCRs simply have a value and nothing else. Other PCRs, however, contain different event measurements. This indicates that separate individual platform or OS components are independently measured and extended to the same PCR. PCRs with event measurements will contain an Event array that lists, in the correct order, all of the events in the measurement event log that are extended to this PCR. When the Verification Service attests a host against a given Flavor, each measurement event is compared to the Flavor value, and all of the events are replayed to confirm that a replay of all of the measurement extensions do in fact result in the hash seen in the PCR value. In this way, the Verification Service can ensure that the measurement event log contents are secure, and the individual measurements can be attested so that the cause for an Untrusted attestation can easily be seen. The full PCRs section is not shown here due to length; see the sample Flavor sections for a full sample. \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, ... 9.1.4 Sample PLATFORM Flavor The PLATFORM Flavor part encompasses measurements that are unique to a specific platform, including the server OEM, BIOS version, etc. A PLATFORM Flavor can be shared across all hosts of the same model that have the same BIOS version. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \" PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } }, \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } }, \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_0\" : { \"value\" : \"db83f0e8a1773c21164c17986037cdf8afc1bbdc1b815772c6da1befb1a7f8a3\" }, \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } 9.1.5 Sample OS Flavor An OS Flavor encompasses all of the measurements unique to a given OS. This includes the OS kernel and other measurements. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"OS\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.3\" , \"vmm_name\" : \"\" , \"vmm_version\" : \"\" , \"tpm_version\" : \"2.0\" } }, \"pcrs\" : { \"SHA1\" : { \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"26e1d98742f79c950dc637f8c067b0b72a1b0e8ff75db4e609c7e17321acf3f4\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"c89ad1d1e9adaa7ecfee2abce763b92472685f7d1b9f3799bf49974b66ed9638\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"81b88e268e697ccf1790d41b9de748a8f395acfb47aa67c9845479d4e8456f77\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }, \"flavorgroup_name\" : \"automatic\" } 9.1.6 Sample HOST_UNIQUE Flavor Host-Unique flavors define measurements for a specific host. This can be either a single large flavor that incorporates all of the host measurements into a single flavor document used only to attest a single host, or can be a small subset of measurements that are specific to a single host. For example, some VMWare module measurements will change from one host to the next, while most others will be shared assuming the same ESXi build is used. The full Flavor requirement for such a host would include Host-Unique flavors to cover the measurements that are unique to only this one host, and would still use a generic PLATFORM and OS flavor for the other measurements that would be identical for other similarly configured hosts. Note : The HOST_UNIQUE Flavors are unique to a specific host, and should always be imported directly from the specific host. Windows hosts do not require a HOST_UNIQUE flavor part. { \"flavors\" : [ { \"meta\" : { \"id\" : \"4d387cbd-f72b-4742-b4e5-c5b0ffed59e0\" , \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"HOST_UNIQUE\" , \"source\" : \"Purley11\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.4\" , \"tpm_version\" : \"2.0\" , \"hardware_uuid\" : \"00448C61-46F2-E711-906E-001560A04062\" } }, \"pcrs\" : { \"SHA256\" : { \"pcr_17\" : { \"value\" : \"f9ef8c53ddfc8096d36eda5506436c52b4bfa2bd451a89aaa102f03181722176\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"09f468dfc1d98a1fee86eb7297a56b0e097d57be66db4eae539061332da2e723\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"c1f7bfdae5f270d9f13aa9620b8977951d6b759f1131fe9f9289317f3a56efa1\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA1\" : { \"pcr_17\" : { \"value\" : \"48695f747a3d494710bd14d20cb0a93c78a485cc\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"b1f8db372e396bb128280821b7e0ac54a5ec2791\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"983ec7db975ed31e2c85ef8e375c038d6d307efb\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] } 9.1.7 Sample ASSET_TAG Flavor Asset Tag flavor parts are unique to Asset Tag attestation. These flavors verify that the Asset Tag data in the host\u2019s TPM correctly matches the most recently created, currently valid Asset Tag certificate that has been deployed to that host. { \"meta\" : { \"id\" : \"b3e0c056-5b6c-4b6b-95c4-de5f1473cac0\" , \"description\" : { \"flavor_part\" : \"ASSET_TAG\" , \"hardware_uuid\" : \"<Hardware UUID of the server to be tagged>\" } }, \"external\" : { \"asset_tag\" : { \"tag_certificate\" : { \"encoded\" : \"<Tag certificate in base64 encoded format>\" , \"issuer\" : \"CN=assetTagService\" , \"serial_number\" : 1519153541461 , \"subject\" : \"<Hardware UUID of the server to be tagged>\" , \"not_before\" : \"2018-02-20T11:05:41-0800\" , \"not_after\" : \"2019-02-20T11:05:41-0800\" , \"fingerprint_sha384\" : \"46001d8472e56de423aac7c55f061404d27d50e497dfc21a861ef1965d7ac1e44887aee918fb5805385a3cbdf820899d\" , \"attribute\" : [ { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] } ] } } } } 9.2 Flavor Matching Flavors are matched to host by objects called Flavor Groups A Flavor Group represents a set of rules to satisfy for a set of flavors to be matched to a host for attestation. For example, a Flavor Group can require that a PLATFORM Flavor and an OS Flavor be used for attestation. Without this level of association, a host that matches measurements for only a PLATFORM flavor, for example, can be attested as Trusted, even though the OS Flavor would attest the host as Untrusted. Flavor matching can be automatic (the default), or can explicitly specify a host to which the Flavor Group must apply. Automatic flavor matching allows for more ease in datacenter lifecycle management with updates and patches that may cause the appropriate flavors to change over time. Automatic flavor matching will trigger a new matching action when a new flavor is added, when an existing flavor is deleted, or when a host is initially attested as Untrusted. The system will automatically attempt to find a new set of flavors that match the Flavor Group rules that will attest the host as Trusted. For example, if a host in your datacenter has recently had a BIOS update, the next attestation will cause the host to appear Untrusted (because the PLATFORM measurements will now differ). Using automatic flavor matching, the Verification Service will automatically search for a new PLATFORM flavor that matches the actual BIOS version and measurement seen on the host. If a new BIOS version is successfully found, the Verification Service will use the new version for attestation, and the host will appear Trusted. If no matching PLATFORM flavor is found, the host will appear Untrusted. When automatic flavor matching is used, think of the various flavors in the Verification Service as a collection of valid configurations, and an attested host matching any combination of those configurations (within the confines of the Flavor Group requirements for which flavor types must be present) will be attested as Trusted. Host-based flavor matching explicitly maps a specific host to a flavor. Host-based attestation requires that a host saves its entire configuration in a composite flavor document in the system, and then later validates against this flavor to detect any changes. In this case, if a host received a BIOS upgrade, the host will attest as Untrusted, and no attempt will be made to re-match a new flavor. An administrator will need to explicitly specify a new flavor to be used for that host. 9.2.1 When Does Flavor Matching Happen? Generally speaking, a new Flavor match operation is triggered whenever a host is registered, whenever a host is attested and would be untrusted, and whenever a Flavor is added to or removed from a Flavor group. When a new host is registered, the Verification Service will retrieve the Host Report and derive the platform information needed for Flavor matching (BIOS version, server OEM, OS type and version, TPM version, etc.). The Verification Service then searches through the Flavors in the same Flavor group that the host is in, and finds any Flavors that match the platform information. If a Flavor is deleted, the Verification Service finds any hosts that are currently associated with that Flavor, and attempts to match them to alternative Flavors. If a Flavor is added, the Verification Service looks for any hosts in the same Flavor group that are not currently matched to a Flavor of the appropriate Flavor part, and checks to see whether those hosts should be mapped to the new Flavor. If a new Report is generated for a host and would not result in a Trusted attestation, the Verification Service will first repeat the Flavor matching process to be sure that no matching Flavors exist in the host\u2019s Flavor group that would result in a Trusted attestation. If the Service still finds no matching Flavors, the host will appear as Untrusted. 9.2.2 Flavor Matching Performance Flavor matching causes affected hosts to be moved into the QUEUE state while the host and Flavor are evaluated to determine whether the host and Flavor should be linked. Hosts can remain in the QUEUE state for varying amounts of time based on the extent of the Flavor match required. This means that the trust status of a host will not be actually updated to reflect a new Flavor until after the process finishes, which may take a few seconds or minutes depending on the number of registered hosts, Flavors in the same Flavorgroup, etc. If a new host is registered, only that host will be added to the queue, and other hosts will be unaffected. The Verification Service will look for only the HOST_UNIQUE flavor part applicable to that specific host, and then will look at all PLATFORM and OS Flavors in the same Flavorgroup has the host, using the Flavor metadata and host info to narrow the results. The Service will match the new host to the most similar Flavors, and then move the host to the CONNECTED state and generate a new trust report. When a new PLATFORM or OS Flavor is created, the Service will instead add all hosts in the same Flavorgroup as the new Flavors to the queue. Each host in the queue will then be re-evaluated against every PLATFORM and OS Flavor in the Flavorgroup to determine the closest match. This means that adding a new Flavor can cause more hosts to each spend more time in the QUEUE state, as compared to adding a new host. For this reason, as a best practice for initial population of Flavors and hosts for a new deployment, it is suggested that Flavors be created before registering hosts. This is not a concern after the initial population of Flavors and hosts. 9.2.3 Flavor Groups Flavor Groups represent a collection of one or more Flavors that are possible matches for a collection of one or more hosts. Flavor Groups link to both Flavors and hosts \u2013 a host in Flavor Group \"ABC\" will only be matched to Flavors in Flavor Group \"ABC\" 9.2.4 Default Flavor Group By default the Verification Service includes a Flavor Group named automatic and another named unique During host registration, the automatic Flavor Group is used as a default selection if no other Flavor Group is specified. 9.2.4.1 automatic The automatic Flavor Group is used as the default Flavor Group for all hosts and all Flavor parts. If no other Flavor Groups are specified when creating Flavors or Hosts, all Hosts and Flavors will be added to this group. This is useful for datacenters that want to manage a single set of acceptable configurations for all hosts. 9.2.4.2 unique The unique Flavor Group is used to contain HOST_UNIQUE Flavors. This Flavorgroup is used by the backend software and should not be managed manually. 9.2.5 Flavor Match Policies Flavor Match Policies are used to define how the Flavor Match engine will match Flavors to hosts for attestation for a given Flavor Group. Each Flavor part can have defined Flavor Match Policies within a given Flavor Group. { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"all_of\" , \"required_if_defined\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"SOFTWARE\" : { \"all_of\" , \"required_if_defined\" } } The sample Policy above would require that a PLATFORM Flavor part be matched, but any PLATFORM Flavor part in the Flavor Group may be matched. The OS Flavor Part will only be required if there is an OS Flavor part in the Flavor Group; if there are no OS Flavor parts in the Group, the match will not be required. If more than one OS Flavor part exists in the Group, all of those OS parts will be required to match for a host to be Trusted. 9.2.5.1 Default Flavor Match Policy The automatic Flavor Group, and any Flavor Group created without explicitly defining a Flavor Match Policy, will be created using the following Flavor Match Policy. This is the default behavior for Flavor Matching: { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"any_of\" , \"required\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"SOFTWARE\" : { \"all_of\" , \"required_if_defined\" } } 9.2.5.2 ANY_OF The ANY_OF Policy allows any Flavor of the specified Flavor part to be matched. If the Flavor Group contains OS Flavor 1 and OS Flavor 2, a host will be Trusted if it matches either OS Flavor 1 or OS Flavor 2. 9.2.5.3 ALL_OF The ALL_OF Policy requires all Flavors of the specified Flavor Part in the Flavor Group to be matched. For example, if Flavor Group X contains PLATFORM Flavor Part 1 and PLATFORM Flavor Part 2, a host in Flavor Group X will need to match both PLATFORM Flavor 1 and PLATFORM Flavor 2 to attest as Trusted. If the host matches only one of the Flavors, or neither of them, the host will be attested as Untrusted. 9.2.5.4 LATEST The LATEST Policy requires that the most recently created Flavor of the specified Flavor part be used when matching to a host. For example: \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored. 9.2.5.5 REQUIRED The REQUIRED Policy requires a Flavor of the specified part to be matched. For example: \"PLATFORM\" : { \"any_of\" , \"required\" } This policy means that a PLATFORM Flavor part must be used; if the Flavor Group contains no PLATFORM Flavor parts, hosts in this Flavor Group will always count as Untrusted. 9.2.5.6 REQUIRED_IF_DEFINED The REQUIRED_IF_DEFINED Policy requires that a Flavor part be used if a Flavor of that part exists. If no Flavor part of this type exists in the Flavor Group, the Flavor part will not be required. \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored. 9.2.6 Flavor Match Event Triggers Several events will cause the background queue service to attempt to re-match Flavors and hosts: Host registration This event is the first time a host will be attempted to be matched to appropriate Flavors in the same Flavor Group, and affects only the host that was added (other hosts will not be re-matched to Flavors when you add a new host). Flavor creation When a new Flavor is added to a Flavor Group, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the new Flavor. Flavor deletion When a Flavor is deleted, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the deleted Flavor. Creation of a new Attestation Report When a new Attestation Report is generated, if the host would attest as Untrusted with the currently-matched Flavors, the host being attested will be re-matched as part of the Report generation process. This ensures that Reports are always generated using the best possible Flavor matches available in the database. 9.2.7 Sample Flavorgroup API Calls 9.2.7.1 Create a New Flavorgroup POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavorgroups Authorization: Bearer <token> { \"flavorgroup_name\" : \"firstTest\" , \"flavor_match_policy_collection\" : { \"flavor_match_policies\" : [ { \"flavor_part\" : \" PLATFORM\" , \"match_policy\" : { \"match_type\" : \"ANY_OF\" , \"required\" : \"REQUIRED\" } } ] } } Response: { \"id\" : \"a0950923-596b-41f7-b9ad-09f525929ba1\" , \"flavorgroup_name\" : \"firstTest\" , \"flavor_match_policy_collection\" : { \"flavor_match_policies\" : [ { \"flavor_part\" : \" PLATFORM\" , \"match_policy\" : { \"match_type\" : \"ANY_OF\" , \"required\" : \"REQUIRED\" } } ] } } 9.3 SOFTWARE Flavor Management 9.3.1 What is a SOFTWARE Flavor? A SOFTWARE Flavor part defines the measurements expected for a specific application, or a specific set of files and folders on the physical host. SOFTWARE Flavors can be used to attest the boot-time integrity of any static files or folders on a physical server. A single server can have multiple SOFTWARE Flavors associated. Intel\u00ae SecL-DC provides a default SOFTWARE Flavor that is deployed to each Trust Agent server during the provisioning step. This default Flavor includes the static files and folders of the Trust Agent itself, so that the Trust Agent is measured during the server boot process, and its integrity is included in the attestation of the other server measurements. Using SOFTWARE Flavors consists of two parts \u2013 creating the actual SOFTWARE Flavor, and deploying the SOFTWARE Flavor manifest to the host. 9.3.2 Creating a SOFTWARE Flavor part Creating a new SOFTWARE Flavor requires creating a manifest of the files and folders that need to be measured. There are three different types of entries for the manifest: Directories , Symlinks and Files . 9.3.2.1 Directories A Directory defines measurement rules for measuring a directory. Effectively this involves listing the contents of the directory and hashing the results; in this way, a Directory measurement can verify that no files have been added or removed from the directory specified, but will not measure the integrity of individual files (ie, files can change within the directory, but cannot be renamed, added, or removed). Directory entries can use regular expressions to define explicit Include and Exclude filters. For example, Exclude=\\*.log would exclude all files ending with .log from the measurement, meaning files with the .log extension can be added or removed from the directory. <Dir Type= \"dir\" Include= \".*\" Exclude= \"\" Path= \"/opt/trustagent/hypertext/WEB-INF\" > 9.3.2.2 Symlinks A Symlink entry defines a symbolic link that will be measured. The actual symbolic link is hashed, not the file or folder the symlink points to. In this way, the measurement will detect the symbolic link being modified to point to a different location, but the actual file or folder pointed to can have its contents change. <Symlink Path= \"/opt/trustagent/bin/tpm_nvinfo\" > 9.3.2.3 Files Individual files can be explicitly specified for measurement as well. Each file listed will be hashed and extended separately. This means that if any file explicitly listed this way changes its contents or is deleted or moved, the measurement will change, and the host will become Untrusted. <File Path= \"/opt/trustagent/bin/module_analysis_da.sh\" > 9.3.3 Sample SOFTWARE Flavor Creation Call Creating a new SOFTWARE Flavor requires specifying a sample host where the application, files or folders that will be measured are currently present. The measurements specified in the manifest will be captures when this call is executed, and the Verification Service will communicate with the Trust Agent and create a SOFTWARE Flavor based on the file measurements. The Connection String must point to the sample Trust Agent host. The Label defines the name of the new Flavor (ideally this should be the name of the application being measured for easier management). POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavor-from-app-manifest Authorization: Bearer <token> < ManifestRequest xmlns = \"lib:wml:manifests-req:1.0\" > < connectionString > intel:https://trustagent.server.com:1443;u=trustagentUsername;p=trustagentPassword </ connectionString > < Manifest xmlns = \"lib:wml:manifests:1.0\" DigestAlg = \"SHA384\" Label = \"Tomcat\" Uuid = \"\" > + < Dir Type = \"dir\" Include = \".*\" Exclude = \"\" Path = \"/opt/trustagent/hypertext/WEB-INF\" /> < Symlink Path = \"/opt/trustagent/bin/tpm_nvinfo\" /> < File Path = \"/opt/trustagent/bin/module_analysis_da.sh\" /> </ Manifest > </ ManifestRequest > 9.3.4 Deploying a SOFTWARE Flavor Manifest to a Host Once the SOFTWARE Flavor has been created, it can be deployed to any number of Trust Agent servers. This requires the Flavor ID (returned from Flavor creation) and the Host ID (returned from host registration). The Verification Service will send a request to the appropriate Trust Agent and create the manifest. Note : After the SOFTWARE Flavor manifest is deployed to a host, the host must be rebooted. This will allow the measurements specified in the Flavor to be taken and extended to the TPM. Until the host is rebooted, the host will now appear Untrusted, as it now requires measurements from a SOFTWARE Flavor that have not yet been extended to the TPM POST https://<Verification Service IP or Hostname>:8443/hvs/v2/rpc/deploy-software-manifest Authorization: Bearer <token> { \"flavor_id\" : \"a6544ff4-6dc7-4c74-82be-578592e7e3ba\" , \"host_id\" : \"a6544ff4-6dc7-4c74-82be-578592e7e3ba\" } 9.3.5 SOFTWARE Flavor Matching The default Flavor Match Policy for SOFTWARE Flavor parts is ALL_OF , REQUIRED_IF_DEFINED . This means that all Software Flavors defined in a Flavorgroup must match to all hosts in that Flavorgroup. If no SOFTWARE Flavors are in the Flavorgroup, then hosts can still be considered Trusted. Because the default uses the ALL_OF Policy, it\u2019s recommended to use Flavorgroups dedicated to specific software loadouts. For example, if a number of hosts will act as virtualization hosts and will have SOFTWARE Flavors for the hypervisor and VM management applications, those hosts should be placed in their own Flavorgroup as they will all run similar or identical application loadouts. If another group of servers in the datacenter will act as container hosts, these hosts might need SOFTWARE Flavors that include attestation of container runtimes and management applications, and will have a very different application loadout from the VM-based hosts. These should be placed in their own Flavorgroup, so that the VM hosts are attested using the hypervisor-related SOFTWARE Flavors, and the container hosts are attested using the container-related SOFTWARE Flavors. As with other Flavor parts, hosts will be matched to Flavors in the same Flavorgroup that the host is added to, and will not be matched to Flavors in different Flavorgroups. Flavor matching will happen on the same events as for other Flavor parts. 9.3.6 Kernel Upgrades Because the Application Integrity functionality involves adding a measurement agent ( tbootXM ) to initrd , an additional process must be followed when updating the OS kernel to ensure the new initrd also contains the measurement agent. This is not required if Application Integrity will not be used. Update grub to have the boot menu-entry created for the new kernel version in grub.cfg grub2-mkconfig -o \\< path to grub file \\> 2. Reboot the host and boot into new kernel menu-entry. 3. Generate a new initrd with tbootXM. ( /opt/tbootxm/bin/generate\\_initrd.sh ) 4. Copy the generated initrd to the boot directory. ( cp /var/tbootxm/\\<generated initrd file name\\> /boot/ ) 5. Update the TCB protection menu-entry with the new kernel version. Source rustagent.env , or expor t GRUB_FILE=/boo t /e f i/EFI/redha t /grub.c f g Run the configure_host script: cd /opt/tbootxm/bin ./configure_host.sh Update the default boot menu-entry to have new kernel version. (edit /etc/default/grub ) Update the grub to reflect the updates. ( grub2-mkconfig -o \\<path to grub file\\> ) Reboot the host and boot into TCB protection menu-entry. After updating the system with the new initrd , the Software Flavor should attest as Trusted. Note that changing grub and initrd does result in a new OS Flavor measurements, so an updated OS Flavor should be imported after updating the kernel and regenerating initrd . 10 Scalability and Sizing 10.1 Configuration Maximums 10.1.1 Registered Hosts The Intel\u00ae SecL Verification Service can support a maximum of 2000 registered hosts with a single Verification Service instance with default settings. 10.1.2 HDD Space The HDD space recommendations below represent expected log and database growth using default settings. Altering the database or log rotation settings, or the SAML expiration setting, may change the amount of disk space required. For default settings, 100 GB of disk space is recommended. 10.2 Database Rotation Settings The Intel\u00ae SecL Verification Service database will automatically rotate the audit log table after one million records, and will retain up to ten total rotations. These settings are user-configurable if a longer retention period is needed. mtwilson.audit.log.num.rotations - defines the maximum number of rotations before the oldest rotation is deleted to make space for a new rotation. mtwilson.audit.log.max.row.count \u2013 defines the maximum number of rows in the audit log table before a rotation will occur. 10.3 Log Rotation The Intel\u00ae SecL services (the Verification Service, Trust Agent, and Integration Hub) use Logrotate to rotate logs automatically during a daily cron job. By default, logs are rotated once per month or when they exceed 1 GB in size, whichever comes first, and 12 total rotations will be retained. 11 Intel Security Libraries Configuration Settings 11.1 Verification Service 11.1.1 Installation Answer File Options # Authentication URL and service account credentials - mandatory AAS_API_URL = https://isecl-aas:8444/aas HVS_SERVICE_USERNAME = HVS_service HVS_SERVICE_PASSWORD = password # CMS URL and CMS webserivce TLS hash for server verification - mandatory CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = digest # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Skip setup - optional HVS_NOSETUP = false #default=false # Logging options - optional HVS_LOGLEVEL = info # options: critical|error|warning|info|debug|trace, default='info' HVS_LOG_MAX_LENGTH = 300 # default=300 HVS_ENABLE_CONSOLE_LOG = false # default=false # HRRS configuration - optional HRRS_REFRESH_PERIOD = 2m0s # default=2m0s HRRS_REFRESH_LOOK_AHEAD = 5m0s # default=5m0s # FVS configuration - optional FVS_NUMBER_OF_VERIFIERS = 20 # default=20 FVS_NUMBER_OF_DATA_FETCHERS = 20 # default=20 FVS_SKIP_FLAVOR_SIGNATURE_VERIFICATION = false # default=false # In case of trusted flavor storage, flavor signature verification can be skipped # using following flag - optional SKIP_FLAVOR_SIGNATURE_VERIFICATION = false # default=false # TLS certificate configuration - optional TLS_COMMON_NAME = \"HVS TLS Certificate\" # default=\"HVS TLS Certificate\" TLS_SAN_LIST = 127 .0.0.1,localhost # default=127.0.0.1,localhost # Server configuration - optional HVS_PORT = 8443 # default=8443 HVS_SERVER_READ_TIMEOUT = 30s # default=30s HVS_SERVER_READ_HEADER_TIMEOUT = 10s # default=10s HVS_SERVER_WRITE_TIMEOUT = 10s # default=10s HVS_SERVER_IDLE_TIMEOUT = 10s # default=10s HVS_SERVER_MAX_HEADER_BYTES = 1048576 # default=1048576 # Database - mandatory HVS_DB_USERNAME = runner HVS_DB_PASSWORD = test HVS_DB_SSLCERTSRC = /tmp/dbcert.pem # This doesn't need to be specified if HVS_DB_SSLCERT is given # Database - optional HVS_DB_HOSTNAME = localhost # default=localhost HVS_DB_NAME = hvs-pg-db # default=hvs-pg-db HVS_DB_PORT = 5432 # default=5432 HVS_DB_SSLMODE = verify-full # default=verify-full ;other options are like allow, prefer, require, verify-ca HVS_DB_SSLCERT = /etc/hvs/hvsdbcert.pem # default=/etc/hvs/hvsdbcert.pem # Webservice configuration - Optional HVS_PORT = 8443 HVS_SERVER_READ_TIMEOUT = 30s HVS_SERVER_READ_HEADER_TIMEOUT = 10s HVS_SERVER_WRITE_TIMEOUT = 10s HVS_SERVER_IDLE_TIMEOUT = 10s HVS_SERVER_MAX_HEADER_BYTES = 1048576 # Logging - Optional HVS_LOG_MAX_LENGTH = 300 HVS_ENABLE_CONSOLE_LOG = false # Flavor Signing Configuration - Optional FLAVOR_SIGNING_KEY_FILE = /etc/hvs/trusted-keys/flavor-signing.key FLAVOR_SIGNING_CERT_FILE = /etc/hvs/certs/trustedca/flavor-signing.pem FLAVOR_SIGNING_COMMON_NAME = HVS Flavor Signing Certificate # SAML Configuration - Optional SAML_KEY_FILE = /etc/hvs/trusted-keys/saml.key SAML_CERT_FILE = /etc/hvs/certs/trustedca/saml-cert.pem SAML_COMMON_NAME = HVS SAML Certificate # Endorsement CA Configuration - Optional ENDORSEMENT_CA_KEY_FILE = /etc/hvs/trusted-keys/endorsement-ca.key ENDORSEMENT_CA_CERT_FILE = /etc/hvs/certs/trustedca/EndorsementCA.pem ENDORSEMENT_CA_COMMON_NAME = HVS Endorsement Certificate ENDORSEMENT_CA_ISSUER = intel-secl ENDORSEMENT_CA_VALIDITY_YEARS = 5 # Privacy CA Configuration - Optional PRIVACY_CA_KEY_FILE = /etc/hvs/trusted-keys/privacy-ca.key PRIVACY_CA_CERT_FILE = /etc/hvs/certs/trustedca/privacy-ca-cert.pem PRIVACY_CA_COMMON_NAME = HVS Privacy Certificate PRIVACY_CA_ISSUER = intel-secl PRIVACY_CA_VALIDITY_YEARS = 5 # Asset Tag Configuration - Optional TAG_CA_KEY_FILE = /etc/hvs/trusted-keys/tag-ca.key TAG_CA_CERT_FILE = /etc/hvs/certs/trustedca/tag-ca-cert.pem TAG_CA_COMMON_NAME = HVS Tag Certificate TAG_CA_ISSUER = intel-secl TAG_CA_VALIDITY_YEARS = 5 11.1.2 Configuration Options The Verification Service configuration is stored in the file /etc/hvs/config.yml : tls: cert-file: /etc/hvs/tls-cert.pem key-file: /etc/hvs/tls.key common-name: Mt Wilson TLS Certificate san-list: 127 .0.0.1,localhost saml: common: cert-file: /etc/hvs/certs/trustedca/saml-cert.pem key-file: /etc/hvs/trusted-keys/saml.key common-name: mtwilson-saml issuer: AttestationService validity-days: 1 flavor-signing: cert-file: /etc/hvs/certs/trustedca/flavor-signing.pem key-file: /etc/hvs/trusted-keys/flavor-signing.key common-name: VS Flavor Signing Certificate privacy-ca: cert-file: /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem key-file: /etc/hvs/trusted-keys/privacy-ca.key common-name: HVS Privacy Certificate issuer: intel-secl validity-years: 5 endorsement-ca: cert-file: /etc/hvs/certs/endorsement/EndorsementCA.pem key-file: /etc/hvs/trusted-keys/endorsement-ca.key common-name: HVS Endorsement Certificate issuer: intel-secl validity-years: 5 tag-ca: cert-file: /etc/hvs/certs/trustedca/tag-ca-cert.pem key-file: /etc/hvs/trusted-keys/tag-ca.key common-name: HVS Tag Certificate issuer: intel-secl validity-years: 5 aik-certificate-validity-years: 5 server: port: 8898 read-timeout: 30s read-header-timeout: 10s write-timeout: 30s idle-timeout: 10s max-header-bytes: 1048576 log: max-length: 30000 enable-stdout: true level: TRACE db: vendor: postgres host: localhost port: \"5432\" name: hvs_db username: root password: password ssl-mode: allow ssl-cert: /etc/hvs/hvsdbsslcert.pem conn-retry-attempts: 5 conn-retry-time: 1 hrrs: refresh-period: 2m0s refresh-look-ahead: 5m0s fvs: number-of-verifiers: 20 number-of-data-fetchers: 20 skip-flavor-signature-verification: true 11.1.3 Command-Line Options The Verification Service supports several command-line commands that can be executed only as the Root user: Syntax: \u200b hvs \\<command> [arguments] Available Commands: \u200b help|-h|--help \u200b hvs help|-h|--help \u200b Show help message \u200b start \u200b hvs start \u200b Start hvs \u200b stop \u200b hvs stop \u200b Stop hvs \u200b status \u200b hvs status \u200b Show the status of hvs \u200b uninstall \u200b hvs uninstall [--purge] \u200b Uninstall hvs \u200b --purge all configuration and data files will be removed if this flag is set \u200b version|-v|--version \u200b hvs version|-v|--version \u200b Show the version of current hvs build \u200b config-db-rotation \u200b hvs config-db-rotation \u200b Configure database table rotaition for audit log table, reference db_rotation.sql \u200b in documents \u200b erase-data \u200b hvs erase-data \u200b Reset all tables in database and create default flavor groups \u200b setup \u200b hvs setup \\< task > [--help] [--force] [-f \\<answer-file>] \u200b Run setup task \u200b --help show help message for setup task \u200b --force existing configuration will be overwritten if this flag is set \u200b -f|--file \\ the answer file with required arguments \u200b Available tasks for setup: \u200b all \u200b Runs all setup tasks \u200b server \u200b Setup http server on given port \u200b - Required environment variables: SERVER_PORT \u200b database \u200b Setup hvs database \u200b - Required environment variables: DB_USERNAME , DB_PASSWORD , DB_CONN_RETRY_ATTEMPTS , \u200b DB_VENDOR , DB_HOST , DB_PORT , \u200b DB_NAME , DB_SSL_MODE , DB_SSL_CERT , \u200b DB_SSL_CERT_SOURCE , DB_CONN_RETRY_ATTEMPTS \u200b create-default-flavorgroup \u200b Create default flavor groups in database \u200b - Required environment variables: DB_VENDOR , DB_HOST , DB_SSL_CERT , \u200b DB_CONN_RETRY_ATTEMPTS , DB_CONN_RETRY_TIME , DB_PORT , DB_NAME , DB_USERNAME , \u200b DB_PASSWORD , DB_SSL_MODE , DB_SSL_CERT_SOURCE \u200b create-dek \u200b Create data encryption key for HVS \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Required environment variables: CMS_BASE_URL , CMS_TLS_CERT_SHA384 \u200b download-cert-tls \u200b Download CA certificate from CMS for tls \u200b - Required environment variables: BEARER_TOKEN , CMS_BASE_URL \u200b - Optional environmental variables: TLS_CERT_FILE , TLS_KEY_FILE , TLS_COMMON_NAME , \u200b TLS_SAN_LIST , TLS_ISSUER , TLS_VALIDITY_DAYS , \u200b download-cert-saml \u200b Download CA certificate from CMS for saml \u200b - Required environment variables: CMS_BASE_URL , BEARER_TOKEN \u200b - Optional environmental variables: SAML_VALIDITY_DAYS , SAML_CERT_FILE , SAML_KEY_FILE , \u200b SAML_COMMON_NAME , SAML_SAN_LIST , SAML_ISSUER \u200b download-cert-flavor-signing \u200b Download CA certificate from CMS for flavor signing \u200b - Required environment variables: CMS_BASE_URL , BEARER_TOKEN \u200b - Optional environmental variables: FLAVOR_SIGNING_CERT_FILE , FLAVOR_SIGNING_KEY_FILE , \u200b FLAVOR_SIGNING_COMMON_NAME , \u200b FLAVOR_SIGNING_SAN_LIST , FLAVOR_SIGNING_ISSUER , \u200b FLAVOR_SIGNING_VALIDITY_DAYS \u200b create-endorsement-ca \u200b Generate self-signed endorsement certificate \u200b create-privacy-ca \u200b Generate self-signed privacy certificate \u200b create-tag-ca \u200b Generate self-signed tag certificate \u200b Environment variables used by Hvs setup: \u200b * Indicates the environment variable is optional. \u200b DB_VENDOR \u200b - Vendor of database, or use HVS_DB_VENDOR alternatively \u200b DB_PASSWORD \u200b - Database password, or use HVS_DB_PASSWORD alternatively \u200b DB_SSL_CERT \u200b - Database SSL certificate, or use HVS_DB_SSLCERT alternatively \u200b DB_SSL_CERT_SOURCE \u200b - Database SSL certificate to be copied from, or use HVS_DB_SSLCERTSRC alternatively \u200b DB_CONN_RETRY_TIME \u200b - Database connection retry time \u200b DB_HOST \u200b - Database host name, or use HVS_DB_HOSTNAME alternatively \u200b DB_PORT \u200b - Database port, or use HVS_DB_PORT alternatively \u200b DB_NAME \u200b - Database name, or use HVS_DB_NAME alternatively \u200b DB_USERNAME \u200b - Database username, or use HVS_DB_USERNAME alternatively \u200b DB_SSL_MODE \u200b - Database SSL mode, or use HVS_DB_SSL_MODE alternatively \u200b DB_CONN_RETRY_ATTEMPTS \u200b - Database connection retry attempts \u200b BEARER_TOKEN \u200b - Bearer token for accessing CMS api \u200b CMS_BASE_URL \u200b - CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ \u200b SERVER_PORT \u200b - The port on which to listen, or use HVS_PORT alternatively \u200b HVS_SERVICE_USERNAME \u200b - The service username for HVS configured in AAS \u200b HVS_SERVICE_PASSWORD \u200b - The service password for HVS configured in AAS \u200b CMS_TLS_CERT_SHA384 \u200b - SHA384 hash value of CMS TLS certificate \u200b TLS_ISSUER * \u200b - The issuer of signed certificate \u200b TLS_VALIDITY_DAYS * \u200b - The validity time in days of signed certificate \u200b TLS_CERT_FILE * \u200b - The file to which certificate is created \u200b TLS_KEY_FILE * \u200b - The file to which private key is created \u200b TLS_COMMON_NAME * \u200b - The common name of signed certificate \u200b TLS_SAN_LIST * \u200b - Comma separated list of hostnames to add to Certificate, including IP addresses and dns \u200b names \u200b SAML_VALIDITY_DAYS * \u200b - The validity time in days of signed certificate \u200b SAML_CERT_FILE * \u200b - The file to which certificate is created \u200b SAML_KEY_FILE * \u200b - The file to which private key is created \u200b SAML_COMMON_NAME * \u200b - The common name of signed certificate \u200b SAML_SAN_LIST * \u200b - Comma separated list of hostnames to add to Certificate, including IP addresses and dns \u200b names \u200b SAML_ISSUER * \u200b - The issuer of signed certificate \u200b FLAVOR_SIGNING_CERT_FILE * \u200b - The file to which certificate is created \u200b FLAVOR_SIGNING_KEY_FILE * \u200b - The file to which private key is created \u200b FLAVOR_SIGNING_COMMON_NAME * \u200b - The common name of signed certificate \u200b FLAVOR_SIGNING_SAN_LIST * \u200b - Comma separated list of hostnames to add to Certificate, including IP addresses and dns \u200b names \u200b FLAVOR_SIGNING_ISSUER * \u200b - The issuer of signed certificate \u200b FLAVOR_SIGNING_VALIDITY_DAYS * \u200b - The validity time in days of signed certificate 11.1.4 Directory Layout The Host Verification Service installs by default to the following folders: This directory contains the config.yml configuration file, the database connection ssl cerificate, and the webservice TLS certificate. /etc/hvs/ - This directory contains the config.yml configuration file, the database connection ssl cerificate, and the webservice TLS certificate. certs/ - This directory contains endorsement, trustedca, trustedjwt cerificates. endorsement/ - Contains EndorsementCA and EndorsementCA-external certificates trustedca/ - Contains flavor-signing, saml-cert, tag-ca-cert certificates privacy-ca/ - Contains privary ca certificate root/ - Contains root certificate trustedjwt/ - Contains EndorsementCA and EndorsementCA-external certificates trusted-keys/ - Contains all the necessary keys needed for hvs. Like endorsement-ca.key, flavor-signing.key, privacy-ca.key, saml.key and tag-ca.key /opt/hvs/ - Contains hvs service file bin/ - Contains the hvs executable. privacyca-aik-requests/ - Contains the hvs executable. 11.2 Trust Agent 11.2.1 Installation Answer File Options Key Sample Value Description AAS_API_URL AAS_API_URL=https://{host}:{port}/aas/v1 API URL for Authentication Authorization Service (AAS). AUTOMATIC_PULL_MANIFEST AUTOMATIC_PULL_MANIFEST=Y Instructs the installer to automatically pull application-manifests from HVS similar to tagent setup get-configured-manifest AUTOMATIC_REGISTRATION AUTOMATIC_REGISTRATION=Y Instructs the installer to automatically register the host with HVS similar to running tagent setup create-host and tagent setup create-host-unique-flavor. BEARER_TOKEN BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsjdkMTdiNmUz... JWT from AAS that contains \"install\" permissions needed to access ISecL services during provisioning and registration CMS_BASE_URL CMS_BASE_URL=https://{host}:{port}/cms/v1 API URL for Certificate Management Service (CMS). CMS_TLS_CERT_SHA384 CMS_TLS_CERT_SHA384=bd8ebf5091289958b5765da4... SHA384 Hash sum for verifying the CMS TLS certificate. MTWILSON_API_URL MTWILSON_API_URL=https://{host}:{port}/hvs/v2 The url used during setup to request information from HVS. PROVISION_ATTESTATION PROVISION_ATTESTATION=Y When present, enables/disables whether tagent setup is called during installation. If trustagent.env is not present, the value defaults to no ('N'). SAN_LIST SAN_LIST=10.123.100.1,201.102.10.22,mya.example.com CSV list that sets the value for SAN list in the TA TLS certificate. Defaults to 127.0.0.1. TA_TLS_CERT_CN TA_TLS_CERT_CN=Acme Trust Agent 007 Sets the value for Common Name in the TA TLS certificate. Defaults to CN=trustagent. TPM_OWNER_SECRET TPM_OWNER_SECRET=625d6... 20 byte hex value to be used as the secret key when taking ownership of the TPM. Note: If this field is not specified, GTA will generate a random secret key. TPM_QUOTE_IPV4 TPM_QUOTE_IPV4=no When enabled (=y), uses the local system's ip address as a salt when processing a quote nonce. This field must align with the configuration of HVS. TA_SERVER_READ_TIMEOUT TA_SERVER_READ_TIMEOUT=30 Sets tagent server ReadTimeout. Defaults to 30 seconds. TA_SERVER_READ_HEADER_TIMEOUT TA_SERVER_READ_HEADER_TIMEOUT=10 Sets tagent server ReadHeaderTimeout. Defaults to 30 seconds. TA_SERVER_WRITE_TIMEOUT TA_SERVER_WRITE_TIMEOUT=10 Sets tagent server WriteTimeout. Defaults to 10 seconds. TA_SERVER_IDLE_TIMEOUT TA_SERVER_IDLE_TIMEOUT=10 Sets tagent server IdleTimeout. Defaults to 10 seconds. TA_SERVER_MAX_HEADER_BYTES TA_SERVER_MAX_HEADER_BYTES=1048576 Sets tagent server MaxHeaderBytes. Defaults to 1MB(1048576) TA_ENABLE_CONSOLE_LOG TA_ENABLE_CONSOLE_LOG=true When set true, tagent logs are redirected to stdout. Defaults to false TRUSTAGENT_LOG_LEVEL TRUSTAGENT_LOG_LEVEL=debug The logging level to be saved in config.yml during installation (\"trace\", \"debug\", \"info\"). TRUSTAGENT_PORT TRUSTAGENT_PORT=10433 The port on which the trust-agent service will listen. 11.2.2 Configuration Options The Trust Agent configuration settings are managed in /opt/trustagent/configuration/config.yml Setting Description tpmquoteipv4: true When enabled, the Trust Agent will perform an additional hash of the nonce using the bytes from the Trust Agent server IP when returning TPM quotes. This should always be set to True. logging: loglevel: info Defines the Trust Agent logging level logenablestdout: false If set to True, the Trust Agent will log to stdout. By default this is False and the logs are sent to /var/log/trustagent/trustagent.log logentrymaxlength: 300 Defines the maximum length of a single log entry webservice: port: 1443 Defines the port on which the Trust Agent API server will listen readtimeout: 30s readheadertimeout: 10s writetimeout: 10s idletimeout: 10s maxheaderbytes: 1048576 hvs: url: https://0.0.0.0:8443/hvs/v2 Defines the baseurl for the Verification Service tpm: ownersecretkey: 625d6d8...1be0b4e957 Defines the TPM ownership secret. This is randomly generated unless manually specified during installation in the trustagent.env file. Note that changing this value may require clearing the TPM ownership in the server BIOS. aiksecretkey: 59acd1367...edcbede60c Defines the AIK secret. Randomly generated. If this is changed, a new AIK will need to be provisioned. aas: baseurl: https://0.0.0.0:8444/aas/ Defines the base URL for the AAS cms: baseurl: https://0.0.0.0:8445/cms/v1 Defines the base URL for the CMS tlscertdigest: 330086b3...ae477c8502 Defines the SHA383 hash of the CMS TLS certificate tls: certsan: 10.1.2.3,server.domain.com,localhost Comma-separated list of hostnames and IP addresses for the Trust Agent. Used in the Agent TLS certificate. certcn: Trust Agent TLS Certificate Common Name for the Trust Agent TLS certificate 11.2.3 Command-Line Options Syntax: \u200b tagent \\<command> [arguments] Available Commands help|-h|-help tagent help|-h|-help Show the help message. \u200b setup \u200b tagent setup [task] \u200b Run setup task. \u200b Available Tasks for 'setup': \u200b [all] [/path/to/trustagent.env] \u200b tagent setup [all] [/path/to/trustagent.env] \u200b - Runs all setup tasks to provision the trust agent. \u200b - If path to trustagent.env not provided, settings are sourced from the environment. \u200b - Required environment variables: AAS_API_URL , CMS_BASE_URL , \u200b CMS_TLS_CERT_SHA384 , BEARER_TOKEN , MTWILSON_API_URL \u200b - Optional environment variables: TA_ENABLE_CONSOLE_LOG , \u200b TA_SERVER_IDLE_TIMEOUT , TA_SERVER_MAX_HEADER_BYTES , \u200b TA_SERVER_READ_HEADER_TIMEOUT , TA_SERVER_WRITE_TIMEOUT , SAN_LIST , \u200b TA_TLS_CERT_CN , TPM_OWNER_SECRET , TPM_QUOTE_IPV4 , TRUSTAGENT_LOG_LEVEL , \u200b TRUSTAGENT_PORT , TA_SERVER_READ_TIMEOUT \u200b download-ca-cert \u200b tagent setup download-ca-cert \u200b - Fetches the latest CMS Root CA Certificates, overwriting existing files. \u200b - Required environment variables: CMS_BASE_URL , CMS_TLS_CERT_SHA384 \u200b download-cert \u200b tagent setup download-cert \u200b - Fetches a signed TLS Certificate from CMS, overwriting existing files. \u200b - Required environment variables: CMS_BASE_URL , BEARER_TOKEN , \u200b - Optional environment variables: SAN_LIST , TA_TLS_CERT_CN \u200b update-certificates \u200b tagent setup update-certificates \u200b - Runs 'download-ca-cert' and 'download-cert' \u200b - Required environment variables: CMS_BASE_URL , CMS_TLS_CERT_SHA384 , \u200b BEARER_TOKEN \u200b - Optional environment variables: SAN_LIST , TA_TLS_CERT_CN \u200b provision-attestation \u200b tagent setup provision-attestation \u200b - Runs setup tasks associated with HVS/TPM provisioning. \u200b - Required environment variables: BEARER_TOKEN , MTWILSON_API_URL \u200b - Optional environment variables: TPM_OWNER_SECRET , TPM_QUOTE_IPV4 \u200b create-host \u200b tagent setup create-host \u200b - Registers the trust agent with the verification service. \u200b - Required environment variables: BEARER_TOKEN , MTWILSON_API_URL \u200b - Optional environment variables: TPM_OWNER_SECRET , TPM_QUOTE_IPV4 \u200b create-host-unique-flavor \u200b tagent setup create-host-unique-flavor \u200b - Populates the verification service with the host unique flavor \u200b - Required environment variables: BEARER_TOKEN , MTWILSON_API_URL \u200b get-configured-manifest \u200b tagent setup get-configured-manifest \u200b - Uses environment variables to pull application-integrity manifests from the \u200b verification service. \u200b - Required Environment variables: BEARER_TOKEN , MTWILSON_API_URL , \u200b FLAVOR_UUIDS or FLAVOR_LABELS \u200b Environment variables used by tagent setup: \u200b * Indicates the environment variable is optional. \u200b AAS_API_URL \u200b - AAS API URL \u200b - Ex. AAS_API_URL=https://{host}:{port}/aas/v1 \u200b CMS_BASE_URL \u200b - CMS API URL \u200b - Ex. CMS_BASE_URL=https://{host}:{port}/cms/v1 \u200b CMS_TLS_CERT_SHA384 \u200b - to ensure that TA is communicating with the right CMS instance \u200b - Ex. CMS_TLS_CERT_SHA384=bd8ebf5091289958b5765da4... \u200b BEARER_TOKEN \u200b - for authenticating with CMS and VS \u200b - Ex. BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsjdkMTdiNmUz... \u200b MTWILSON_API_URL \u200b - VS API URL \u200b - Ex. MTWILSON_API_URL=https://{host}:{port}/hvs/v2 \u200b TA_ENABLE_CONSOLE_LOG * \u200b - When set to 'true', trust agent logs are redirected to stdout. Defaults to false. \u200b - Ex. TA_ENABLE_CONSOLE_LOG=true \u200b TA_SERVER_IDLE_TIMEOUT * \u200b - Sets the trust agent service's idle timeout. Defaults to 10 seconds. \u200b - Ex. TA_SERVER_IDLE_TIMEOUT=10 \u200b TA_SERVER_MAX_HEADER_BYTES * \u200b - Sets trust agent service's maximum header bytes. Defaults to 1MB. \u200b - Ex. TA_SERVER_MAX_HEADER_BYTES=1048576 \u200b TA_SERVER_READ_TIMEOUT * \u200b - Sets trust agent service's read timeout. Defaults to 30 seconds. \u200b - Ex. TA_SERVER_READ_TIMEOUT=30 \u200b TA_SERVER_READ_HEADER_TIMEOUT * \u200b - Sets trust agent service's read header timeout. Defaults to 30 seconds. \u200b - Ex. TA_SERVER_READ_HEADER_TIMEOUT=10 \u200b TA_SERVER_WRITE_TIMEOUT * \u200b - Sets trust agent service's write timeout. Defaults to 10 seconds. \u200b - Ex. TA_SERVER_WRITE_TIMEOUT=10 \u200b SAN_LIST * \u200b - CSV list that sets the value for SAN list in the TA TLS certificate. \u200b Defaults to \"127.0.0.1,localhost\". \u200b - Ex. SAN_LIST=10.123.100.1,201.102.10.22,my.example.com \u200b TA_TLS_CERT_CN * \u200b - Sets the value for Common Name in the TA TLS certificate. \u200b Defaults to \"Trust Agent TLS Certificate\". \u200b - Ex. TA_TLS_CERT_CN=Acme Trust Agent 007 \u200b TPM_OWNER_SECRET * \u200b - When provided, setup uses the 40 character hex string for the TPM owner \u200b password. The TPM owner secret is generated when not provided. \u200b - Ex. TPM_OWNER_SECRET=625d6d8a18f98bf764760fa392b8c01be0b4e959 \u200b TPM_QUOTE_IPV4 * \u200b - When 'Y', used the local system's ip address a salt when processing TPM quotes. \u200b Defaults to 'N'. \u200b - Ex. TPM_QUOTE_IPV4=Y \u200b TRUSTAGENT_LOG_LEVEL * \u200b - Sets the verbosity level of logging (trace|debug|info|error). Defaults to 'info'. \u200b - Ex. TRUSTAGENT_LOG_LEVEL=debug \u200b TRUSTAGENT_PORT * \u200b - The port on which the trust agent service will listen. \u200b - Ex. TRUSTAGENT_PORT=10433 \u200b uninstall \u200b tagent uninstall \u200b Uninstall trust agent. \u200b version \u200b tagent version \u200b Print build version info. \u200b start \u200b tagent start \u200b Start the trust agent service. \u200b stop \u200b tagent stop \u200b Stop the trust agent service. \u200b status \u200b tagent status \u200b Get the status of the trust agent service. \u200b fetch-ekcert-with-issuer \u200b tagent fetch-ekcert-with-issuer \u200b Print Tpm Endorsement Certificate in Base64 encoded string along with issue. 11.2.4 Directory Layout Windows Linux The Linux Trust Agent installs by default to /opt/trustagent , with the following subfolders: Bin Contains executables and scripts. Configuration Contains the config.yml configuration file, as well as certificates and keystores. This includes the AIK public key blob after provitioning. Var Contains information gathered from the platform and SOFTWARE Flavor manifests. All files with the name manifest_*.xml will be parsed to define measurements during boot. Generally these should be automatically provisioned from the Verification Service when creating/deploying SOFTWARE Flavors. 11.3 Integration Hub 11.3.1 Installation Answer File # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME = <Integration Hub Service User username> IHUB_SERVICE_PASSWORD = <Integration Hub Service User password> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = <TLS hash> # TLS Configuration TLS_SAN_LIST = 127 .0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL = https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE = HVS #Integration tenant type. Currently supported values are \"KUBENETES\" or \"OPENSTACK\" TENANT = <KUBERNETES or OPENSTACK> # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_AUTH_URL = <OpenStack Keystone URL ; typically http://openstack-ip:5000/> OPENSTACK_PLACEMENT_URL = <OpenStack Nova API URL ; typically http://openstack-ip:8778/> OPENSTACK_USERNAME = <OpenStack username> OPENSTACK_PASSWORD = <OpenStack password> # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL = https://kubernetes:6443/ KUBERNETES_CRD = custom-isecl KUBERNETES_CERT_FILE = /etc/ihub/apiserver.crt KUBERNETES_TOKEN = eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Report Signing Certificate URL and service TLS hash for server verification # Required for Platform Integrity Attestation attributes. Not required for SGX #attributes. REPORT_SIGNING_CERT_URL = https://isecl-cms:8445/cms/v1 REPORT_SIGNING_SERVICE_TLS_CERT_SHA384 = bb3a1\u2026 11.3.2 Configuration Options ihub-service-username: ihub_service ihub-service-password: password aas: url: https://isecl-aas:8444/aas cms: url: https://isecl-cms:8445/cms/v1 report-signing: cert-url: https://isecl-cms:8445/cms/v1 service-tls-cert-sha384: bb3a1\u2026 attestation-service: url: https://isecl-hvs:8443/mtwilson/v2 endpoint: url: http://openstack:5000/v3 username: admin password: password signing-cert: common-name: \"IHUB Signing Certificate\" org: Intel org-unit: country: US province: CA locality: Folsom email: log: level: warning max-length: 300 enable-console: false poll-interval-minutes: 2 expiry-time-offset-hours: 2 attestation-type: hvs 11.3.3 Command-Line Options Syntax: \u200b ihub \\<command> [arguments] Available Commands \u200b -h|--help \u200b ihub -h|--help \u200b Shows help message. \u200b -v|--version \u200b ihub -v|--version \u200b Reports the version of the current ihub build. \u200b setup \u200b ihub setup \\< task > [--help] [--force] [-f \\<answer-file>] \u200b --help \u200b show help message for setup task \u200b --force \u200b existing configuration will be overwritten if this flag is set \u200b -f|--file \\ the answer file with required arguments \u200b Available tasks for setup: \u200b all \u200b Runs all setup tasks \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Required env variables: CMS_BASE_URL , CMS_TLS_CERT_SHA384 \u200b download-cert-tls \u200b Download CA certificate from CMS for tls \u200b - Required env variables: CMS_BASE_URL , BEARER_TOKEN \u200b - Optional env variables: TLS_CERT_FILE , TLS_KEY_FILE , TLS_COMMON_NAME , \u200b TLS_SAN_LIST , TLS_ISSUER , TLS_VALIDITY_DAYS \u200b attestation-service-connection \u200b Establish Attestation service connection \u200b - Required env variables: ATTESTATION_TYPE , ATTESTATION_URL \u200b tenant-service-connection \u200b Establish Tenant service connection \u200b - Required env variables: TENANT \u200b - Required env variables for Kubernetes tenant: KUBERNETES_URL , KUBERNETES_TOKEN , \u200b KUBERNETES_CERT_FILE , \u200b - Required env variables for OpenStack tenant: OPENSTACK_API_PORT , OPENSTACK_USERNAME , \u200b OPENSTACK_PASSWORD , OPENSTACK_IP , OPENSTACK_AUTH_PORT \u200b create-signing-key \u200b Create signing key for IHUB \u200b download-saml-cert \u200b Download SAML certificate from Attestation service \u200b - Required env variables: ATTESTATION_TYPE , ATTESTATION_URL \u200b Environment variables used by IHUB setup: \u200b * Indicates the environment variable is optional. \u200b ATTESTATION_TYPE \u200b - Type of Attestation Service \u200b ATTESTATION_URL \u200b - Base URL for the Attestation Service \u200b CMS_BASE_URL \u200b - CMS BASE URL \u200b - Ex. CMS_BASE_URL=https://{{cms}}:{{cms_port}}/cms/v1/ \u200b CMS_TLS_CERT_SHA384 \u200b - SHA384 hash value of CMS TLS certificate \u200b BEARER_TOKEN \u200b - for authenticating with CMS api \u200b TENANT \u200b - Type of Tenant Service \u200b KUBERNETES_URL \u200b - URL for Kubernetes deployment \u200b KUBERNETES_TOKEN \u200b - Token for Kubernetes deployment \u200b KUBERNETES_CERT_FILE \u200b - Certificate path for Kubernetes deployment \u200b OPENSTACK_API_PORT \u200b - API Port for OpenStack deployment \u200b OPENSTACK_USERNAME \u200b - UserName for OpenStack deployment \u200b OPENSTACK_PASSWORD \u200b - Password for OpenStack deployment \u200b OPENSTACK_IP \u200b - IP for OpenStack deployment \u200b OPENSTACK_AUTH_PORT \u200b - Authorization Port for OpenStack deployment \u200b TLS_CERT_FILE * \u200b - The file to which certificate is saved \u200b TLS_KEY_FILE * \u200b - The file to which private key is saved \u200b TLS_COMMON_NAME * \u200b - The common name of signed certificate \u200b TLS_SAN_LIST * \u200b - Comma separated list of hostnames to add to Certificate, including IP addresses and DNS \u200b names \u200b TLS_ISSUER * \u200b - The issuer of signed certificate \u200b TLS_VALIDITY_DAYS * \u200b - The validity time in days of signed certificate \u200b start \u200b ihub start \u200b Starts the ihub. \u200b status \u200b ihub status \u200b Reports the status of the ihub. \u200b stop \u200b ihub stop \u200b Stops the ihub. \u200b uninstall \u200b ihub uninstall [--purge] \u200b Uninstalls the ihub. \u200b --purge \u200b if this option is applied, all configuration and data files will be removed if the flag is set. \u200b 11.3.4 Directory Layout 11.3.4.1 Logs 11.4 Certificate Management Service 11.4.1 Installation Answer File Options Key Sample Value Description CMS_NOSETUP false Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. CMS_PORT 8445 Defines the HTTPS port the service will use. AAS_API_URL https://\\<Hostname or IP address of the AAS>:8444/aas/ URL to connect to the AAS, used during setup for authentication. AAS_TLS_SAN \\<Comma-separated list of IPs/hostnames for the AAS> SAN list populated in special JWT token, this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match. LOG_ROTATION_PERIOD hourly, daily, weekly, monthly, yearly log rotation period, for more details refer- https://linux.die.net/man/8/logrotate LOG_COMPRESS Compress Old versions of log files are compressed with gzip, for more details refer- https://linux.die.net/man/8/logrotate LOG_DELAYCOMPRESS delaycompress Postpone compression of the previous log file to the next rotation cycle, for more details refer- https://linux.die.net/man/8/logrotate LOG_COPYTRUNCATE Copytruncate Truncate the original log file in place after creating a copy,'create' creates new one, for more details refer- https://linux.die.net/man/8/logrotate LOG_SIZE 1K Log files are rotated when they grow bigger than size bytes, for more details refer- https://linux.die.net/man/8/logrotate LOG_OLD 12 Log files are rotated count times before being removed, for more details refer- https://linux.die.net/man/8/logrotate CMS_CA_CERT_VALIDITY 5 CMS Root Certificate Validity in years CMS_CA_ORGANIZATION INTEL CMS Certificate Organization CMS_CA_LOCALITY US CMS Certificate locality CMS_CA_PROVINCE CA CMS Certificate province CMS_CA_COUNTRY USA CMS Certificate country CMS_TLS_SAN_LIST Comma-separated list of IP addresses and hostnames to be added to the SAN list of CMS server CMS_SERVER_READ_TIMEOUT 30s MS server - ReadTimeout is the maximum duration for reading the entire request, including the body. CMS_SERVER_READ_HEADER_TIMEOUT 10s CMS server - ReadHeaderTimeout is the amount of time allowed to read request headers CMS_SERVER_WRITE_TIMEOUT 10s CMS server - WriteTimeout is the maximum duration before timing out writes of the response. CMS_SERVER_IDLE_TIMEOUT 10s CMS server - IdleTimeout is the maximum amount of time to wait for the next request when keep-alives are enabled. CMS_SERVER_MAX_HEADER_BYTES 1048576 CMS server - MaxHeaderBytes controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. AAS_JWT_CN AAS JWT Signing Certificate CN of AAS JWT certificate, this gets populated in special JWT token. AAS must send JWT certificate CSR with this CN. AAS_TLS_CN AAS TLS Certificate CN of AAS TLS certificate, this gets populated in special JWT token. AAS must send TLS certificate CSR with this CN. AAS_TLS_SAN SAN list populated in special JWT token, this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match. 11.4.2 Configuration Options The CMS configuration can be found in /etc/cms/config.yml port : 8445 loglevel : info authserviceurl : https://<AAS IP or hostname>:8444/aas/ cacertvalidity : 5 organization : INTEL locality : SC province : CA country : US keyalgorithm : rsa keyalgorithmlength : 3072 rootcacertdigest : <sha384> tlscertdigest : <sha384> tokendurationmins : 20 aasjwtcn : \"\" aastlscn : \"\" aastlssan : \"\" authdefender : maxattempts : 5 intervalmins : 5 lockoutdurationmins : 15 11.4.3 Command-Line Options Syntax: \u200b cms \\<command> [arguments] Available Commands: \u200b -h|--help \u200b cms -h|--help \u200b Shows help message. \u200b start \u200b cms start \u200b Start cms \u200b stop \u200b cms stop \u200b Stop cms \u200b status \u200b cms status \u200b Show the status of cms \u200b uninstall \u200b cms uninstall [--purge] \u200b Uninstall cms \u200b --purge option needs to be applied to remove configuration and data files \u200b -v|--version \u200b cms -v|--version \u200b Show the version of cms \u200b tlscertsha384 \u200b cms tlscertsha384 \u200b Show the SHA384 digest of the certificate used for TLS \u200b setup \u200b cms setup \\< task > [--arguments= ] [--force] \u200b Runs a specific setup task. \u200b Available Tasks for setup: \u200b all \u200b Runs all setup tasks \u200b - Required env variables: get required env variables from all the setup tasks \u200b - Optional env variables: get optional env variables from all the setup tasks \u200b root_ca \u200b Create its own self signed Root CA keypair in /etc/cms/root-ca for quality of life \u200b - Option [--force] overwrites any existing files, and always generate new \u200b Root CA keypair \u200b - Optional env variables specific to setup task are: \u200b - CMS_CA_CERT_VALIDITY=<cert life span in years> - Certificate Management \u200b Service Root Certificate Validitys \u200b - CMS_CA_ORGANIZATION=<cert org> - Certificate Management Service Root \u200b Certificate Organization \u200b - CMS_CA_LOCALITY=<cert locality> - Certificate Management Service Root \u200b Certificate Locality \u200b - CMS_CA_PROVINCE=<cert province> - Certificate Management Service Root \u200b Certificate Province \u200b - CMS_CA_COUNTRY=<cert country> - Certificate Management Service Root \u200b Certificate Country \u200b intermediate_ca \u200b Creates a root_ca signed intermediate CA keypair(signing, tls-server and tls-client) \u200b in /etc/cms/intermediate-ca/ for quality of life \u200b - Option [--force] overwrites any existing files, and always generate new root_ca signed \u200b Intermediate CA keypair \u200b - Available argument specific to setup task is: \u200b type - available options are: TLS, TLS-Client, Signing \u200b tls \u200b Create an intermediate_ca signed TLS keypair in /etc/cms for quality of life \u200b - Option [--force] overwrites any existing files, and always generate root_ca signed \u200b TLS keypair \u200b - Available argument and optional env variable specific to setup task is: \u200b host_names - alternatively, set environment variable SAN_LIST \u200b server \u200b Setup http server on given port \u200b - Available arguments and optional env variables specific to task are: \u200b port - alternatively, set environment variable CMS_PORT \u200b aas-url - alternatively, set environment variable AAS_API_URL \u200b - Optional env variables specific to setup task are: \u200b - CMS_SERVER_READ_TIMEOUT =<read timeout in seconds> - Certificate \u200b Management Service Read Timeout \u200b - CMS_SERVER_READ_HEADER_TIMEOUT =<read header timeout in seconds> - \u200b Certificate Management Service Read Header Timeout \u200b - CMS_SERVER_WRITE_TIMEOUT =<write timeout in seconds> - Certificate \u200b Management Service Write Timeout \u200b - CMS_SERVER_IDLE_TIMEOUT =<idle timeout in seconds> - Certificate \u200b Management Service Idle Timeout \u200b - CMS_SERVER_MAX_HEADER_BYTES =<max header bytes> - Certificate Management \u200b Service Max Header Bytes \u200b - LOG_ENTRY_MAXLENGTH =<log max length> - Maximum length of each entry in a \u200b log \u200b - CMS_ENABLE_CONSOLE_LOG =<bool> - Certificate Management Service Enable \u200b standard output \u200b cms_auth_token \u200b Create its own self signed JWT keypair in /etc/cms/jwt for quality of life \u200b - Option [--force] overwrites any existing files, and always generate new JWT keypair \u200b and token \u200b - Optional env variables specific to setup task are: \u200b - AAS_JWT_CN=<jwt common-name> - Authentication and Authorization JWT \u200b Common Name \u200b - AAS_TLS_CN=<tls common-name> - Authentication and Authorization TLS \u200b Common Name \u200b - AAS_TLS_SAN=<tls SAN> - Authentication and Authorization TLS SAN list 11.4.4 Directory Layout The Certificate Management Service installs by default to /opt/cms with the following folders. 11.4.4.1 Bin This folder contains executable scripts. 11.4.4.2 Cacerts This folder contains the CMS root CA certificate. 11.5 Authentication and Authorization Service 11.5.1 Installation Answer File Options Key Sample Value Description CMS_BASE_URL https://<cms IP or hostname>/cms/v1/ Required; Provides the URL for the CMS. AAS_NOSETUP false Optional. Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. AAS_DB_HOSTNAME localhost Required. Hostname or IP address of the AAS database AAS_DB_PORT 5432 Required. Database port number AAS_DB_NAME pgdb Required. Database name AAS_DB_USERNAME dbuser Required. Database username AAS_DB_PASSWORD dbpassword Required. Database password AAS_DB_SSLMODE verify-ca Defines the SSL mode for the connection to the database. If not specified, the database connection will not use certificate verification. If specified, certificate verification will be required for database connections. AAS_DB_SSLCERTSRC /usr/local/pgsql/data/server.crt Optional, required if the \u201cAAS_DB_SSLMODE is set to verify-ca Defines the location of the database SSL certificate. AAS_DB_SSLCERT \\<path_to_cert_file_on_system> Optional. The AAS_DB_SSLCERTSRC variable defines the source location of the database SSL certificate; this variable determines the local location. If the former option is used without specifying this option, the service will copy the SSL certificate to the default configuration directory. AAS_ADMIN_USERNAME admin@aas Required. Defines a new AAS administrative user. This user will be able to create new users, new roles, and new role-user mappings. This user will have the AAS:Administrator role. AAS_ADMIN_PASSWORD aasAdminPass Required. Password for the new AAS admin user. AAS_JWT_CERT_SUBJECT \"AAS JWT Signing Certificate\" Optional. Defines the subject of the JWT signing certificate. AAS_JWT_TOKEN_DURATION_MINS 5 Optional. Defines the amount of time in minutes that an issued token will be valid. SAN_LIST 127.0.0.1,localhost,10.x.x.x Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. BEARER_TOKEN \\<token> Required. Token from the CMS generated during CMS setup that allows the AAS to perform initial setup tasks. LOG_LEVEL Critical, error, warning, info, debug, trace Optional. Defaults to INFO. Changes the log level used. 11.5.2 Configuration Options 11.5.3 Command-Line Options Syntax: \u200b authservice \\<command> [arguments] Available Commands \u200b -h|--help \u200b authservice -h|--help \u200b Show this help message \u200b setup \u200b authservice setup \\< task > \u200b Run setup task \u200b Available Tasks for setup: \u200b all \u200b Runs all setup tasks \u200b - Required env variables: get required env variables from all the setup tasks \u200b - Optional env variables: get optional env variables from all the setup tasks \u200b database \u200b Setup authservice database \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Available arguments and Required Env variables specific to setup task are: \u200b - db-host alternatively, set environment variable AAS_DB_HOSTNAME \u200b - db-port alternatively, set environment variable AAS_DB_PORT \u200b - db-user alternatively, set environment variable AAS_DB_USERNAME \u200b - db-pass alternatively, set environment variable AAS_DB_PASSWORD \u200b - db-name alternatively, set environment variable AAS_DB_NAME \u200b - Available arguments and Optional env variables specific to setup task are: \u200b - db-sslmode \\<disable|allow|prefer|require|verify-ca|verify-full> \u200b alternatively, set environment variable AAS_DB_SSLMODE \u200b - db-sslcert path to where the certificate file of database. Only applicable \u200b for db-sslmode=\\<verify-ca|verify-full. If left empty, the cert will be \u200b copied to /etc/authservice/tdcertdb.pem alternatively, \u200b set environment variable AAS_DB_SSLCERT \u200b - db-sslcertsrc \\<path to where the database ssl/tls certificate file> \u200b mandatory if db-sslcert does not already exist \u200b alternatively, set environment variable AAS_DB_SSLCERTSRC \u200b admin \u200b Setup task to register authservice user with default admin roles to database \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Available arguments and Required Env variables specific to setup task are: \u200b \u200b - user - alternatively set environment variable AAS_ADMIN_USERNAME \u200b \u200b - pass - alternatively set environment variable AAS_ADMIN_PASSWORD \u200b \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required env variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b download_cert TLS \u200b Generates Key pair and CSR, gets it signed from CMS \u200b - Option [--force] overwrites any existing files, and always downloads newly signed \u200b TLS cert \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Required env variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - BEARER_TOKEN=<token> for authenticating with CMS \u200b - SAN_LIST=<san> - list of hosts which needs access to service \u200b - Optional env variables specific to setup task are: \u200b - KEY_PATH=<key_path> - Path of file where TLS key needs to be stored \u200b - CERT_PATH=<cert_path> - Path of file/directory where TLS certificate needs \u200b to be stored \u200b jwt \u200b Create jwt signing key and jwt certificate signed by CMS \u200b - Option [--force] overwrites any existing files, and always downloads newly signed \u200b JWT cert \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Available arguments and Required Env variables specific to setup task are: \u200b \u200b - cms-url - alternatively set environment variable CMS_BASE_URL \u200b \u200b - token - alternatively set environment variable BEARER_TOKEN \u200b - Available arguments and Optional env variables specific to setup task are: \u200b \u200b - subj - alternatively set environment variable AAS_JWT_CERT_CN \u200b \u200b - keyid - alternatively set environment variable AAS_JWT_INCLUDE_KEYID \u200b \u200b - valid-mins - alternatively set environment variable \u200b AAS_JWT_TOKEN_DURATION_MINS \u200b server \u200b Setup http server on given port \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Available arguments and Optional env variables specific to setup task are: \u200b \u200b - port - alternatively set environment variable AAS_PORT \u200b \u200b - AAS_SERVER_READ_TIMEOUT=<read timeout in seconds> \u200b \u200b - AAS_SERVER_READ_HEADER_TIMEOUT=<read header timeout in seconds> \u200b \u200b - AAS_SERVER_WRITE_TIMEOUT=<write timeout in seconds> \u200b \u200b - AAS_SERVER_IDLE_TIMEOUT=<idle timeout in seconds> \u200b \u200b - AAS_SERVER_MAX_HEADER_BYTES=<max header bytes> \u200b \u200b - AAS_LOG_MAX_LENGTH=<log max length> \u200b \u200b - AAS_ENABLE_CONSOLE_LOG=<bool> \u200b start \u200b authservice start \u200b Start authservice \u200b status \u200b authservice status \u200b Show the status of authservice \u200b stop \u200b authservice stop \u200b Stop authservice \u200b tlscertsha384 \u200b authservice tlscertsha384 \u200b Show the SHA384 digest of the certificate used for TLS \u200b uninstall \u200b authservice uninstall \u200b Uninstall authservice \u200b --purge option needs to be applied to remove configuration and data files \u200b -v|--version \u200b authservice -v|--version \u200b Shows the version of authservice. 11.5.4 Directory Layout The Verification Service installs by default to /opt/authservice with the following folders. 11.5.4.1 Bin Contains executable scripts and binaries. 11.5.4.2 dbscripts Contains database scripts. 11.6 Workload Service 11.6.1 Installation Answer File Options Key Sample Value Description WLS_LOGLEVEL INFO (Optional) Alternatives include WARN and DEBUG. Sets the log level for the service. WLS_NOSETUP false (Optional) Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. Defaults to \u201cfalse\u201d if unset. WLS_PORT 5000 (Optional) Defines the HTTPS port used by the service Defaults to 5000 if unset. WLS_DB_HOSTNAME localhost (Required) Database hostname WLS_DB wlsdb (Required) Database name WLS_DB_PORT 5432 (Required) Database port number WLS_DB_USERNAME wlsdbuser (Required) Database username WLS_DB_PASSWORD wlsdbuserpass (Required) Database password HVS_URL https://\\<HVS IP address or hostname>:8443/hvs/v2/ (Required) Base URL for the HVS AAS_API_URL https://\\<AAS IP address or hostname>:8444/aas Base URL for the AAS WLS_CERT_SAN_LIST 127.0.0.1,localhost,10.x.x.x Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. CMS_BASE_URL Base URL for the CMS BEARER_TOKEN \\<token> (Required) Token from the CMS generated during CMS setup that allows the AAS to perform initial setup tasks. WLS_TLS_CERT_CN 'WLS TLS Certificate (Optional) Set the Common name for TLS cert to be downloaded from CMS. Default is 'WLS TLS Certificate'. WLS_CERT_ORG 'INTEL' (Optional) Set the Organization in Subject of CSR. Default is 'INTEL'. WLS_CERT_COUNTRY 'US' (Optional) Set the Country in Subject of CSR. Default is 'US'. WLS_CERT_PROVINCE 'SF' (Optional) Set the Province in Subject of CSR. Default is 'SF'. WLS_CERT_LOCALITY 'SC' (Optional) Set the Locality in Subject of CSR. Default is 'SC'. KEY_CACHE_SECONDS 300 (Optional) Set the time till which the key will be cached. Default is '300 seconds'. WLS_LOGLEVEL Info, debug, error, warn (Optional) Set the log level. KEY_PATH (Optional) Redefines the path to the keystore folder CERT_PATH (Optional) Redefines the path to the certificates folder 11.6.2 Configuration Options The Workload Service configuration can be found in /etc/workload-service/config.yml : port : 5000 cmstlscertdigest : <sha384> postgres : dbname : wlsdb user : <database username> password : <database password> hostname : <database IP or hostname> port : 5432 sslmode : false hvs_api_url : https://<HVS IP or hostname>:8443/hvs/v2/ cms_base_url : https://<CMS IP or hostname>:8445:/cms/v1/ aas_api_url : https://<AAS IP or hostname>:8444/aas/ subject : tlscertcommonname : WLS TLS Certificate organization : INTEL country : US province : SF locality : SC wls : user : <username of service account used by WLS to access other services>> password : <password> loglevel : info key_cache_seconds : 300 11.6.3 Command-Line Options The Workload Service supports several command-line commands that can be executed only as the Root user: Syntax: \u200b workload-service \\<command> [argument] Available Commands: \u200b Help \u200b -help|--help Show this help message \u200b -v|--version Print version/build information \u200b start Start workload-service \u200b stop Stop workload-service \u200b status Determine if workload-service is running \u200b uninstall [--purge] Uninstall workload-service. --purge option needs to be \u200b applied to remove configuration and data files \u200b setup Run workload-service setup tasks \u200b start \u200b workload-service start \u200b Start workload-service \u200b stop \u200b workload-service stop \u200b Stop workload-service \u200b status \u200b workload-service status \u200b Determine if workload-service is running \u200b uninstall \u200b workload-service uninstall \u200b Uninstall workload-service \u200b [--purge] option needs to be applied to remove configuration and data files \u200b setup \u200b Setup workload-service for use \u200b workload-service setup \\< task > [--force] \u200b Available tasks for setup: \u200b all \u200b Runs all setup tasks \u200b - Required env variables: get required env variables from all the setup tasks \u200b - Optional env variables: get optional env variables from all the setup tasks \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Fetches the latest CMS Root CA Certificates, overwriting existing files. \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - AAS_API_URL=<url> - AAS API url \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required environment variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b download_cert TLS \u200b Generates Key pair and CSR, gets it signed from CMS \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required env variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - BEARER_TOKEN=<token> for authenticating with CMS \u200b - SAN_LIST=<CSV List> - List of FQDNs to be added to the SAN field in TLS cert \u200b to override \u200b - Optional env variables specific to setup task are: \u200b - KEY_PATH=<key_path> - Path of file where TLS key needs to be stored \u200b - CERT_PATH=<cert_path> - Path of file/directory where TLS certificate needs \u200b to be stored \u200b - WLS_TLS_CERT_CN=<COMMON NAME> to override default specified in config \u200b database \u200b Setup workload-service database \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required env variables specific to setup task are: \u200b - WLS_DB_HOSTNAME=<db host name> - database host name \u200b - WLS_DB_PORT=<db port> - database port number \u200b - WLS_DB=<db name> - database schema name \u200b - WLS_DB_USERNAME=<db user name> - database user name \u200b - WLS_DB_PASSWORD=<db password> - database password \u200b - Optional env variables specific to setup task are: \u200b - WLS_DB_SSLMODE=<db sslmode> - database SSL Connection Mode \u200b \\ \u200b - WLS_DB_SSLCERT=<ssl certificate path> - database SSL Certificate \u200b target path. \u200b Only applicable for WLS_DB_SSLMODE= . If left empty, \u200b the cert will be copied to /etc/workload-service/wlsdbsslcert.pem \u200b - WLS_DB_SSLCERTSRC=<ssl certificate source path> - database SSL Certificate \u200b source path. Mandatory if WLS_DB_SSLCERT does not already exist \u200b server \u200b Setup http server on given port \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - Required env variables specific to setup task are: \u200b - WLS_PORT=<port> - database port number \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b hvsconnection \u200b Setup task for setting up the connection to the Host Verification Service (HVS) \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required env variables specific to setup task are: \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b download_saml_ca_cert \u200b Setup to download SAML CA certificates from HVS \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required env variables specific to setup task are: \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - BEARER_TOKEN=<token> for authenticating with HVS 11.6.4 Directory Layout The Workload Service installs by default to /opt/wls with the following folders. 11.7 Key Broker Service 11.7.1 Installation Answer File Options Variable Name Default Value Notes USERNAME KBS admin username PASSWORD KBS admin password CMS_BASE_URL Required for generating TLS certificate CMS_TLS_CERT_SHA384 SHA384 digest of CMS TLS certificate AAS_API_URL AAS baseurl BEARER_TOKEN JWT token for installation user KMS_HOME /opt/kms Application home directory KBS_SERVICE_USERNAME kms Non-root user to run KMS JETTY_PORT 80 The server will listen for HTTP connections on this port JETTY_SECURE_PORT 443 The server will listen for HTTPS connections on this port KMS_LOG_LEVEL INFO Sets the root log level in logback.xml KMS_NOSETUP false Skips setup during installation if set to true ENDPOINT_URL http://localhost Endpoint to be used in key transfer url KEY_MANAGER_PROVIDER DirectoryKeyManager Key manager to be used for key management KBS_SERVICE_PASSWORD This password protects the configuration file and the password vault. It must be set before installing and before starting the KBS KMS_TLS_CERT_IP IP addresses to be included in SAN list KMS_TLS_CERT_DNS DNS addresses to be included in SAN list BARBICAN_PROJECT_ID OpenStack Barbican project id BARBICAN_ENDPOINT_URL OpenStack Barbican endpoint url BARBICAN_KEYSTONE_PUBLIC_ENDPOINT OpenStack Keystone endpoint url BARBICAN_TENANTNAME OpenStack Barbican tenant name BARBICAN_USERNAME OpenStack Barbican admin username BARBICAN_PASSWORD OpenStack Barbican admin password 11.7.2 Configuration Options 11.7.3 Command-Line Options The Key Broker Service supports several command-line commands that can be executed only as the Root user: Syntax: \u200b kms \\<command> \u200b Available Commands \u200b start \u200b kms start \u200b Starts the service \u200b stop \u200b kms stop \u200b Stops the service \u200b status \u200b kms status \u200b Reports the status of service \u200b restart \u200b kms restart \u200b Restarts the status of service \u200b uninstall \u200b kms uninstall \u200b Removes the service \u200b version \u200b kms version \u200b Displays the version of the service \u200b setup \u200b kms setup [--force|--noexec] [task1 task2...] \u200b Available setup tasks: \u200b kms setup password-vault \u200b kms setup jetty-tls-keystore \u200b kms setup shiro-ssl-port \u200b kms setup notary-key \u200b kms setup envelope-key \u200b kms setup storage-key \u200b kms setup saml-certificates \u200b kms setup tpm-identity-certificates 11.7.4 Directory Layout The Verification Service installs by default to /opt/kms with the following folders. 11.7.4.1 Bin Contains scripts and executable binaries 11.7.4.2 Configuration Contains configuration files 11.7.4.3 Env Contains environment details 11.7.4.4 Features 11.7.4.5 Java Contains Java artifacts 11.7.4.6 Logs Contains logs. Primary log file is kms.log 11.7.4.7 Repository Contains the keys subdirectory, which is used for storing image encryption keys. 11.7.4.8 Script Contains additional scripts 11.8 Workload Agent 11.8.1 Installation Answer File Options 11.8.2 Configuration Options 11.8.3 Command-Line Options Syntax: \u200b wlagent \\<command> Available Commands: \u200b help|-help|--help \u200b wlagent help|-help|--help \u200b Show help message \u200b setup \u200b wlagent setup \\< task > \u200b Run setup task \u200b Available Tasks for setup \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Environment variable CMS_BASE_URL=<url> for CMS API url \u200b - Environment variable CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to \u200b ensure that WLS is talking to the right CMS in \u200b SigningKey \u200b Generate a TPM signing key \u200b - Option [--force] overwrites any existing files, and always creates a new Signing key \u200b BindingKey \u200b Generate a TPM binding key \u200b - Option [--force] overwrites any existing files, and always creates a new Binding key \u200b RegisterSigningKey \u200b Register a signing key with the host verification service \u200b - Option [--force] Always registers the Signing key with Verification service \u200b - Environment variable MTWILSON_API_URL=<url> for registering the key with \u200b Verification service \u200b - Environment variable BEARER_TOKEN=<token> for authenticating with \u200b Verification service \u200b RegisterBindingKey \u200b Register a binding key with the host verification service \u200b - Option [--force] Always registers the Binding key with Verification service \u200b - Environment variable MTWILSON_API_URL=<url> for registering the key with \u200b Verification service \u200b - Environment variable BEARER_TOKEN=<token> for authenticating with \u200b Verification service \u200b - Environment variable TRUSTAGENT_USERNAME=<TA user> for changing binding \u200b key file ownership to TA application user \u200b start \u200b wlagent start \u200b Start wlagent \u200b stop \u200b wlagent stop \u200b Stop wlagent \u200b status \u200b wlagent status \u200b Reports the status of wlagent service \u200b uninstall \u200b wlagent uninstall [--purge] \u200b Uninstall wlagent \u200b [--purge] Uninstalls workload agent and deletes the existing configuration directory \u200b -v|--version \u200b wlagent -v|--version \u200b Print version/build information \u200b fetch-key-url \\ \u200b wlagent fetch-key-url \\ \u200b Fetch a key from the keyUrl 11.8.4 Directory Layout The Workload Agent installs by default to /opt/workload-agent with the following folders. 11.8.4.1 Bin Contains scripts and executable binaries. 11.9 Workload Policy Manager 11.9.1 Installation Answer File Options Key Sample Value Description KMS_API_URL https://\\<IP address or hostname of the KBS>:9443/v1/ Required. Defines the baseurl for the Key Broker Service. The WPM uses this URL to request new encryption keys when encrypting images. KMS_TLS_SHA384 Required. SHA384 hash of the Key Broker TLS certificate CMS_TLS_CERT_SHA384 Required. SHA384 hash of the CMS TLS certificate CMS_BASE_URL https://\\<IP address or hostname for CMS>:8445/cms/v1/ Required. Defines the base URL for the CMS owned by the image owner. Note that this CMS may be different from the CMS used for other components. AAS_API_URL https://\\<IP address or hostname for AAS>:8444/aas Required. Defines the baseurl for the AAS owned by the image owner. Note that this AAS may be different from the AAS used for other components. BEARER_TOKEN \\<token> Required; token from CMS with permissions used for installation. WPM_WITH_CONTAINER_SECURITY \u201cyes\u201d or \u201cno\u201d Optional, defaults to \u201cno.\u201d Defines whether the WPM will support Docker Container encryption. If this is set to Yes, the appropriate prerequisites for Docker Container encryption will be installed. If this is set to \u201cno,\u201d the WPM will not be able to encrypt Docker Container images, and will only be usable to encrypt Virtual Machine images. WPM_LOG_LEVEL INFO (default), DEBUG Optional; defines the log level for the WPM. Defaults to INFO. WPM_PASSWORD Defines the credentials for the WPM to use to access the KBS WPM_USERNAME Defines the credentials for the WPM to use to access the KBS 11.9.2 Configuration Options 11.9.3 Command-Line Options The Workload Policy Manager supports several command-line commands that can be executed only as the Root user: Syntax: \u200b wpm \\<command> [arguments] Available Commands \u200b -h|--help \u200b wpm -h|--help \u200b Displays help text \u200b -v|--version \u200b wpm -v|--version \u200b Print version/build information \u200b create-image-flavor \u200b Create VM image flavors and encrypt the image \u200b wpm create-image-flavor [-l label] [-i in] [-o out] [-e encout] [-k key] \u200b -l, --label image flavor label \u200b -i, --in input image file path \u200b -o, --out (optional) output image flavor file path \u200b if not specified, will print to the console \u200b -e, --encout (optional) output encrypted image file path \u200b if not specified, encryption is skipped \u200b -k, --key (optional) existing key ID \u200b if not specified, a new key is generated \u200b create-container-image-flavor \u200b Create container image flavors and encrypt the container image \u200b wpm create-container-image-flavor [-i img-name] [-t tag] [-f dockerFile] [-d build-dir] [-k keyId] [-e] [-s] [-n notaryServer] [-o out-file] \u200b -i, --img-name container image name \u200b -t, --tag (optional)container image tag name \u200b -f, --docker-file (optional) container file path to build the container image \u200b -d, --build-dir (optional) build directory to build the container image \u200b -k, --key-id (optional) existing key ID if not specified, a new key is \u200b generated \u200b -e, --encryption-required (optional) boolean parameter specifies if container \u200b image needs to be encrypted \u200b -s, --integrity-enforced (optional) boolean parameter specifies if container \u200b image should be signed \u200b -n, --notary-server (optional) specify notary server url \u200b -o, --out-file (optional) specify output file path \u200b get-container-image-id \u200b wpm get-container-image-id [\\ ] \u200b Fetch the container image ID given the sha256 digest of the image \u200b unwrap-key \u200b wpm unwrap-key [-i |--in] \\ \u200b Unwraps the image encryption key fetched from KMS \u200b fetch-key \u200b wpm fetch-key \u200b Fetch key from KMS \u200b create-software-flavor \u200b wpm create-software-flavor \u200b Not currently supported; intended for future functionality. \u200b uninstall \u200b wpm uninstall \u200b Uninstall wpm. \u200b --purge option needs to be applied to remove configuration and data files \u200b setup \u200b wpm setup \\< task > [--force] \u200b Run workload-policy-manager setup tasks \u200b Available tasks for setup: \u200b all \u200b Runs all setup tasks \u200b - Required env variables: get required env variables from all the setup tasks \u200b - Optional env variables: get optional env variables from all the setup tasks \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WPM_NOSETUP=true or variables not set \u200b in config.yml : \u200b - KMS_API_URL=<url> - KMS API url \u200b - AAS_API_URL=<url> - AAS API url \u200b - WPM_SERVICE_USERNAME=<service username> - WPM service username \u200b - WPM_SERVICE_PASSWORD=<service password> - WPM service password \u200b - Required environment variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WPM is \u200b talking to the right CMS instance \u200b download_cert flavor-signing \u200b Generates Key pair and CSR, gets it signed from CMS \u200b - Option [--force] overwrites any existing files, and always downloads newly signed \u200b WPM Flavor Signing cert \u200b - Required environment variables if WPM_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WPM is \u200b talking to the right CMS instance \u200b - KMS_API_URL=<url> - KMS API url \u200b - AAS_API_URL=<url> - AAS API url \u200b - WPM_SERVICE_USERNAME=<service username> - WPM service username \u200b - WPM_SERVICE_PASSWORD=<service password> - WPM service password \u200b - Required environment variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - BEARER_TOKEN=<token> for authenticating with CMS \u200b - Optional env variables specific to setup task are: \u200b - KEY_PATH=<key_path> - Path of file where Flavor-Signing key needs to be stored \u200b - CERT_PATH=<cert_path> - Path of file/directory where Flavor-Signing certificate \u200b needs to be stored \u200b - WPM_FLAVOR_SIGN_CERT_CN=<COMMON NAME> to override default specified in config \u200b createenvelopekey \u200b Creates the key pair required to securely transfer key from KMS \u200b - Option [--force] overwrites existing envelope key pairs 12 Certificate and Key Management 12.1 Authentication and Authorization Service The AAS uses a JWT signing certificate to generate JWT tokens. By default this certificate is issued by the CMS signing CA. Generally, this should not be changed. The JWT signing certificate and its private key can be found here: /etc/authservice/certs/tokensign/jwtsigncert.pem /etc/authservice/certs/tokensign/jwt.key 12.2 Host Verification Service 12.2.1 SAML The SAML Certificate is used to sign SAML attestation reports, and is itself signed by the intermediate signing CA from the CMS. This certificate is unique to the Verification Service. /etc/hvs/certs/trustedca/saml-crt.pem /etc/hvs/trusted-keys/saml.key Note that, if this certificate is replaced, all existing attestations in the HVS will immediately appear as invalid/untrusted due to a SAML signature mismatch. If the Integration Hub is being used, the new SAML certificate will need to be imported to the Hub. If the Key Broker Service is being used, the new SAML certificate will need to be imported to the KBS. To replace this certificate with a new SAML certificate using the CMS self-signed certificate chain, use the following command: hvs setup download-cert-saml 12.2.2 Asset Tag The Asset tag Certificate is used to sign all Asset Tag Certificates. This certificate is unique to the Verification Service. /etc/hvs/certs/trustedca/tag-ca-cert.pem /etc/hvs/trusted-keys/tag-ca.key If the Asset tag signing certificate is replaced, all existing Asset Tags will be considered invalid, and will need to be recreated. It is recommended to delete any existing Asset Tag certificates and Flavors, and then recreate and deploy new Tags. 12.2.3 Privacy CA The Privacy CA certificate is used as part of the certificate chain for creating the Attestation Identity Key (AIK) during Trust Agent provisioning. The Privacy CA must be a self-signed certificate. This certificate is unique to the Verification Service. The Privacy CA certificate is used by Trust Agent nodes during Trust Agent provisioning; if the Privacy CA certificate is changed, all Trust Agent nodes will need to be re-provisioned. /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem /etc/hvs/trusted-keys/privacy-ca.key If the Privacy CA certificate is replaced, all Trust Agent hosts will need to be re-provisioned with a new AIK: tagent setup provision-attestation Any Trust Agent hosts not reprovisioned will result in untrusted attestations, as the validation of the AIK used to sign the hosts' TPM quotes will no longer match the endorsement chain of the HVS. 12.2.4 Endorsement CA The Endorsement CA is a self-signed certificate used during Trust Agent provisioning. /etc/hvs/certs/endorsement/EndorsementCA.pem` /etc/hvs/trusted-keys/endorsement-ca.key /etc/hvs/certs/endorsement/EndorsementCA-external.pem` If the Endorsement CA certificate is replaced, all Trust Agent hosts will need to be re-provisioned with a new Endorsement Certificate: tagent setup provision-attestation Any Trust Agent hosts not reprovisioned will result in untrusted attestations, as the validation of the AIK used to sign the hosts' TPM quotes will no longer match the endorsement chain of the HVS. 12.3 Regenerating TLS Certificates TLS certificates for each service are issued by the Certificate Management Service during installation. If the CMS root certificate is changed, or to regenerate the TLS certificate for a given service, use the following commands (note: environment variables will need to be set; typically these are the same variables set in the service installation .env file): download_ca_cert` Set up required environment variables. These are some of the same variables that would be used in the .env installation file to install the service. Note that a new/valid bearer token will be needed; this can be generated using the populate-users.sh script with the AAS, or by using the installation admin user credentials to get a token from the AAS API. CMS_BASE_URL=<CMS API URL>` BEARER_TOKEN=<token> Use setup to re-download a new TLS certificate. <servicename> download-cert-tls --force This generates a new key pair and CSR, gets it signed by the CMS. 12.4 Replacing Self-Signed Certificates The CMS offers automatic generation of certificates based on a self-signed root CA. Certificates using this root CA may need to be replaced with certificates signed by a recognized CA. This effectively involves replacing the certificates deployed during installation with new certificates that use a hierarchy outside of the CMS. To replace any non-TLS certificate, simply replace the existing certificate file with the new certificate and its private key. Each certificate must include any intermediate certificate chain, excluding the root. The root CA certificate must also be replaced so that the new hierarchy is used for validation. TLS Certificates To replace the TLS certificates in ISecL services, generate new TLS certificates for each service. Each TLS certificate requires that a list of resolvable DNS hostnames and/or IP addresses be included as Subject Alternative Names in the new certificate. Copy the new TLS certificates to the appropriate directories, overwriting the existing TLS certificates deployed by the CMS during installation: /etc/<servicename>/tls-cert.pem /etc/<servicename>/tls.key Copy the new root CA to each service, overwriting the CMS-created root CA: /etc/<servicename>/certs/trustedca/root/ Restart each service so that the changes take effect. 13 Uninstallation This section describes steps used for uninstalling Intel SecL-DC services. This section does not apply for containerized deployments. To uninstall a containerized deployment, simply shut down the container and delete the persistence volumes. 13.1 Host Verification Service To uninstall the Verification Service, run the following command: hvs uninstall The hvs uninstall command will not delete any database content. To completely uninstall and delete all database content and user data, run the following: hvs erase-data hvs uninstall Note: The uninstall command must be issued last, because the uninstall process removes the scripts that execute the other commands, along with all database connectivity info. 13.2 Trust Agent To uninstall the Trust Agent, run the following command: tagent uninstall Backs up the configuration directory and removes all Trust Agent files, except for configuration files which are saved and restored. Removes following directories: /usr/local/bin/tagent TRUSTAGENT_HOME : `/opt/trustagent /opt/tbootxm /var/log/trustagent/measurement.* Note: TPM ownership can be preserved by retaining the TPM owner secret. If the Operating System will also be cleared, Linux systems will also require the /usr/local/var/lib/tpm/system.data file to be preserved. This file must be preserved from after ownership is taken, and then replaced after the OS reload before the Trust Agent attempts to reassert ownership. If the ownership secret and/or system.data file are not preserved, reinstallation will require clearing TPM ownership. 13.3 Integration Hub To uninstall the Integration Hub, run the following command: ihub uninstall Removes the following directories: /usr/local/bin/ihub /usr/bin/ihub /opt/ihub /etc/logrotate.d/ihub ihub uninstall --purge Removes the following directories (in addition to directories removed without the \u2013purge option): Drops the database Drops the user Removes integration hub tenant configuration path 13.4 Kubernetes CRDs Uninstalling the Intel\u00ae SecL Custom Resource Definitions To unisntall the Intel\u00ae SecL CRDs, run the following commands on the Kubernetes Control Plane where the CRDs were installed: kubectl delete deploy -n isecl --all rm -rf /opt/isecl-k8s-extensions rm -rf /var/log/isecl-k8s-extensions 14 Appendix 14.1 PCR Definitions 14.1.1 Microsoft Windows Server 2016 Datacenter 14.1.1.1 TPM 2.0 PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor All PCR 12 Data events and highly volatile events This PCR measures some of the modules which has boot counters in it. It changes on every boot and resume (Microsoft Windows ONLY; do not use for attestation as the values change on reboot) Microsoft Windows Server PCR 13 Boot Module Details This PCR remains static except major changes such as kernel module update, different device driver for different OEM servers, etc. (Microsoft Windows ONLY) Microsoft Windows Server PCR 14 Boot Authorities Used to record the Public keys of authorities that sign OS components. Expected not to change often. (Microsoft Windows ONLY) Microsoft Windows Server 14.1.2 Red Had Enterprise Linux 14.1.2.1 TPM 2.0 PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image Initial Boot Block (Intel\u00ae BootGuard only) This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. (Intel\u00ae BootGuard only): Extends measurements based on the Intel\u00ae BootGuard profile configuration and production vs non-production ACM flags; ACM signature; BootGuard key manifest hash; Boot Policy Manifest Signature All PCR 7 Intel\u00ae BootGuard configuration and profiles Describes the success of the IBB measurement event. All (Intel\u00ae BootGuard only) PCR 17 ACM BIOS AC registration information Digest of Processor S-CRTM Digest of Policycontrol Digest of all matching elements used by the policy Digest of STM Digest of Capability field of OsSinitData Digest of MLE For TA hosts, this PCR includes measurements of the OS, InitRD, and UUID. This changes with every install due to InitRD and UUID change. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] Digest of public key modulus used to verify SINIT signature Digest of Processor S-CRTM Digest of Capability field of OSSinitData table Digest of PolicyControl field of used policy Digest of LCP VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Linux hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux 14.1.3 VMWare ESXi 14.1.3.1 TPM 1.2 PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Citrix Xen hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts and is blank for all other host types. VMware ESXi PCR 22 Asset Tag This PCR contains the measurement of the SHA1 of the Asset Tag Certificate provisioned to the TPM, if any. VMware ESXi 14.1.3.2 TPM 2.0 VMWare supports TPM 2.0 with Intel TXT starting in vSphere 6.7 Update 1. Earlier versions will support TPM 1.2 only. PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as part of the PLATFORM flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi this PCR contains individual measurements of all of the non-Kernel modules \u2013 this includes all of the VIBs installed on the ESXi host. This is part of the OS flavor. Note that two ESXi hosts with the same version of ESXi installed may require different OS flavors if different VIBs are installed. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts for some host-specific measurements, and is part of the host-unique flavor. VMware ESXi PCR 22 Asset Tag Asset Tag is not currently supported for TPM 2.0 with ESXi. VMware ESXi A.1 Attestation Rules Platform TPM Flavor Type Rules to be verified Comments RHEL 2.0 HARDWARE PcrMatchesConstant rule for PCR 0 PcrEventLogIncludes rule for PCR 17 (LCP_DETAILS_HASH, BIOSAC_REG_DATA, OSSINITDATA_CAP_HASH, STM_HASH, MLE_HASH, NV_INFO_HASH, tb_policy, CPU_SCRTM_STAT, HASH_START, LCP_CONTROL_HASH) PcrEventLogIntegrity rule for PCR 17 Evaluation of PcrEventLogIncludes would not include initrd and vmlinuz modules. They would be handled in host_specific flavor. Evaluation of PcrEventLogIntegrity rule would also include OS modules (initrd & vmlinuz) OS PcrEventLogIntegrity rule for PCR 17 ASSET_TAG AssetTagMatches rule HOST_SPECIFIC PcrEventLogIncludes rule for PCR 17 (initrd & vmlinuz) VMware ESXi 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 PcrMatchesConstant rule for PCR 17 OS PcrMatchesConstant rule for PCR 18 PcrMatchesConstant rule for PCR 20 PcrEventLogEqualsExcluding rule for PCR 19 (excludes dynamic modules based on component name) PcrEventLogIntegrity rule for PCR 19 ASSET_TAG PcrMatchesConstant rule for PCR 22 VMware ESXi 2.0 NOT SUPPORTED Windows 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule Windows 2.0 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule AssetTagMatches rule needs to be updated to verify the key-value pairs after verifying the tag certificate.","title":"Intel\u00ae Security Libraries - Datacenter Foundational Security"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#intel-security-libraries-datacenter-foundational-security","text":"Product Guide January 2020 Revision 3.3.1 Notice: This document contains information on products in the design phase of development. The information here is subject to change without notice. Do not finalize a design with this information. Intel technologies\u2019 features and benefits depend on system configuration and may require enabled hardware, software, or service activation. Learn more at intel.com, or from the OEM or retailer. No computer system can be absolutely secure. Intel does not assume any liability for lost or stolen data or systems or any damages resulting from such losses. You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Intel products described herein. You agree to grant Intel a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications. Current characterized errata are available on request. This document contains information on products, services and/or processes in development. All information provided here is subject to change without notice. Contact your Intel representative to obtain the latest Intel product specifications and roadmaps. Intel disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. Warning: Altering PC clock or memory frequency and/or voltage may (i) reduce system stability and use life of the system, memory and processor; (ii) cause the processor and other system components to fail; (iii) cause reductions in system performance; (iv) cause additional heat or other damage; and (v) affect system data integrity. Intel assumes no responsibility that the memory, included if used with altered clock frequencies and/or voltages, will be fit for any particular purpose. Check with memory manufacturer for warranty and additional details. Tests document performance of components on a particular test, in specific systems. Differences in hardware, software, or configuration will affect actual performance. Consult other sources of information to evaluate performance as you consider your purchase. For more complete information about performance and benchmark results, visit http://www.intel.com/performance . Cost reduction scenarios described are intended as examples of how a given Intel- based product, in the specified circumstances and configurations, may affect future costs and provide cost savings. Circumstances will vary. Intel does not guarantee any costs or cost reduction. Results have been estimated or simulated using internal Intel analysis or architecture simulation or modeling, and provided to you for informational purposes. Any differences in your system hardware, software or configuration may affect your actual performance. Intel does not control or audit third-party benchmark data or the web sites referenced in this document. You should visit the referenced web site and confirm whether referenced data are accurate. Intel is a sponsor and member of the Benchmark XPRT Development Community, and was the major developer of the XPRT family of benchmarks. Principled Technologies is the publisher of the XPRT family of benchmarks. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases. Copies of documents which have an order number and are referenced in this document may be obtained by calling 1-800-548-4725 or by visiting w ww.intel.com/design/literature.htm. Intel, the Intel logo, Intel TXT, and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries. *Other names and brands may be claimed as the property of others. Copyright \u00a9 2020, Intel Corporation. All Rights Reserved.","title":"Intel\u00ae Security Libraries - Datacenter Foundational Security"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#revision-history","text":"Revision Number Description Date 1 Updated for all GA Failures May 2019 1.5 Updated for version 1.5 release July 2019 1.6 BETA Updated for 1.6 BETA release November 2019 1.6 Updated for version 1.6 release December 2019 2.0 Updated for version 2.0 release February 2020 2.1 Updated for version 2.1 release April 2020 2.2 Updated for version 2.2 release June 2020 3.0 Updated for version 3.0 release August 2020 3.1 Updated for version 3.1 release October 2020 3.2 Updated for version 3.2 release November 2020 3.3 Updated for version 3.3 release December 2020 3.3.1 Updated for version 3.3.1 release January 2020","title":"Revision History"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#table-of-contents","text":"Intel\u00ae Security Libraries - Datacenter Foundational Security Revision History Table of Contents 1 Introduction 1.1 Overview 1.1.1 Trusted Computing 1.1.1.1 The Chain of Trust 1.1.1.2 Hardware Root of Trust 1.1.1.2.1 Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) 1.1.1.2.2 Intel\u00ae BootGuard (Intel\u00ae BtG) 1.1.1.3 Supported Trusted Boot Options 1.1.1.4 Remote Attestation 1.1.2 Intel\u00ae Security Libraries for Datacenter Features 1.1.2.1 Platform Integrity 1.1.2.2 Data Sovereignty 1.1.2.3 Application Integrity 1.1.2.4 Workload Confidentiality for Virtual Machines and Containers 1.1.2.5 Signed Flavors 1.1.2.6 Trusted Virtual Kubernetes Worker Nodes 2 Intel\u00ae Security Libraries Components 2.1 Certificate Management Service 2.2 Authentication and Authorization Service 2.3 Verification Service 2.4 Workload Service 2.5 Trust Agent 2.6 Workload Agent 2.7 Integration Hub 2.8 Workload Policy Manager 2.9 Key Broker Service 3 Intel\u00ae Security Libraries Installation 3.1 Building from Source 3.2 Hardware Considerations 3.3 Recommended Service Layout 3.3.1 Platform Integrity 3.3.2 Workload Confidentiality 3.4 Installing/Configuring the Database 3.4.1 Using the Provided Database Installation Script 3.4.2 Provisioning the Database 3.4.3 Database Server TLS Certificate 3.5 Installing the Certificate Management Service 3.5.1 Required For 3.5.2 Supported Operating Systems 3.5.3 Recommended Hardware 3.5.4 Installation 3.6 Installing the Authentication and Authorization Service 3.6.1 Required For 3.6.2 Prerequisites 3.6.3 Package Dependencies 3.6.4 Supported Operating Systems 3.6.5 Recommended Hardware 3.6.6 Installation 3.6.7 Creating Users 3.7 Installing the Host Verification Service 3.7.1 Required For 3.7.2 Prerequisites 3.7.3 Package Dependencies 3.7.4 Supported Operating Systems 3.7.5 Recommended Hardware 3.7.6 Installation 3.8 Installing the Workload Service 3.8.1 Required For 3.8.2 Prerequisites 3.8.3 Supported Operating Systems 3.8.4 Recommended Hardware 3.8.5 Installation 3.9 Installing the Trust Agent for Linux 3.9.1 Required For 3.9.2 Package Dependencies 3.9.3 Supported Operating Systems 3.9.4 Prerequisites 3.9.4.1 Tboot Installation 3.9.5 Installation 3.10 Installing the Workload Agent 3.10.1 Required For 3.10.2 Supported Operating Systems 3.10.3 Prerequisites 3.10.4 Installation 3.12 Trust Agent Provisioning 3.13 Trust Agent Registration 3.14 Importing the HOST_UNIQUE Flavor 3.15 Installing the Integration Hub 3.15.1 Required For 3.15.2 Deployment Architecture Considerations for the Hub 3.15.3 Prerequisites 3.15.4 Package Dependencies 3.15.5 Supported Operating Systems 3.15.6 Recommended Hardware 3.15.7 Installing the Integration Hub 3.16 Installing the Key Broker Service 3.16.1 Required For 3.16.2 Prerequisites 3.16.3 Package Dependencies 3.16.4 Supported Operating Systems 3.16.5 Recommended Hardware 3.16.6 Installation 3.16.6.1 Configure the Key Broker to use a KMIP-compliant Key Management Server 3.16.7 Importing Verification Service Certificates 3.16.7.1 Importing a SAML certificate 3.16.7.2 Importing a PrivacyCA Certificate 3.17 Installing the Workload Policy Manager 3.17.1 Required For 3.17.2 Package Dependencies 3.17.3 Supported Operating Systems 3.17.4 Recommended Hardware 3.17.5 Installation 4 Authentication 4.1 Create Token 4.2 User Management 4.2.1 Username and Password requirements 4.2.2 Create User 4.2.3 Search User 4.2.4 Change User Password 4.2.5 Delete User 4.3 Roles and Permissions 4.3.1 Create Role 4.3.2 Search Roles 4.3.3 Delete Role 4.3.4 Assign Role to User 4.3.5 List Roles Assigned to User 4.3.6 Remove Role from User 4.3.7 Role Definitions 5 Connection Strings 5.1 Trust Agent 5.2 VMware ESXi 5.2.1 Importing VMware TLS Certificates 5.2.2 Registering a VMware ESXi Host 6 Platform Integrity Attestation 6.1 Host Registration 6.1.1 Trust Agent 6.1.1.1 Registration via Trust Agent Command Line 6.1.2 Registration via Verification Service API 6.1.2.1 Special Note for VMware ESXi Hosts and the vCenter TLS Certificate 6.1.2.2 Sample Call 6.1.2.3 Sample Call for ESXi Cluster Registration 6.2 Flavor Creation for Automatic Flavor Matching 6.2.1 Importing a Flavor from a Sample Host 6.2.2 Creating a Flavor Manually 6.3 Creating the Default SOFTWARE Flavor (Linux Only) 6.4 Creating and Provisioning Asset Tags 6.4.1 Creating Asset Tag Certificates 6.4.2 Deploying Asset Tags 6.4.2.1 Red Hat Enterprise Linux 6.4.2.2 VMWare 6.4.2.2.1 Calculate the Certificate Hash Value 6.4.2.2.2 Provision the Certificate Hash to the Host TPM vSphere 6.5 Update 2 or Later vSphere 6.5 Update 1 or Older 6.4.2.2.3 Creating the Asset Tag Flavor (VMWare ESXi Only) 6.5 Retrieving Current Attestation Reports 6.6 Retrieving Current Host State Information 6.7 Upgrading Hosts in the Datacenter to a New BIOS or OS Version 6.8 Removing Hosts From the Verification Service 6.9 Removing Flavors 6.10 Invalidating Asset Tags 6.11 Remediating an Untrusted attestation 6.12 Attestation Reporting 6.12.1 Sample Call \u2013 Generating a New Attestation Report 6.12.2 Sample Call \u2013 Retrieving an Existing Attestation Report 6.13 Integration 6.13.1 The Integration Hub 6.13.2 Integration with OpenStack 6.13.2.1 Prerequisites 6.13.2.2 Setting Image Traits 6.13.2.3 Configuring the Integration Hub for Use with OpenStack 6.13.2.7 Scheduling Instances 6.13.3 Integration with Kubernetes 6.13.3.1 Prerequisites 6.13.3.2 Installing the Intel\u00ae SecL Custom Resource Definitions 6.13.3.3 Configuring the Integration Hub for Use with Kubernetes 6.13.3.6 Configuring Pods to Require Intel\u00ae SecL Attributes 6.13.3.7 Tainting Untrusted Worker Nodes 7 Workload Confidentiality 7.1 Virtual Machine Confidentiality 7.1.1 Prerequisites 7.1.2 Workflow 7.1.2.1 Encrypting Images 7.1.2.2 Uploading the Image Flavor 7.1.2.3 Creating the Image Flavor to Image ID Association 7.1.2.4 Launching Encrypted VMs 7.2 Container Confidentiality 7.2.1 Container Integrity and Confidentiality with Docker 7.2.1.1 Docker Container Integrity 7.2.1.2 Prerequisites 7.2.1.3 Workflow 7.2.1.3.1 Encrypting Docker Container Images 7.2.1.3.2 Uploading the Image Flavor 7.2.1.3.3 Creating the Image Flavor to Image ID Association 7.2.1.3.4 Launching Encrypted Docker Containers 7.2.2 Container Confidentiality with Cri-o and Skopeo 7.2.2.1 Prerequisites 7.2.2.2 Workflow Skopeo Commands Examples Prepare an Image 7.2.2.2.1 Pulling and Encrypting a Container Image 7.2.2.2.2 Launching an Encrypted Container Image 8 Trusted Virtual Kubernetes Worker Nodes 8.1 Prerequisites 8.2 Workflow 8.3 Sample VM Trust Report 9 Flavor Management 9.1 Flavor Format Definitions 9.1.1 Meta 9.1.2 Hardware PCRs 9.1.4 Sample PLATFORM Flavor 9.1.5 Sample OS Flavor 9.1.6 Sample HOST_UNIQUE Flavor 9.1.7 Sample ASSET_TAG Flavor 9.2 Flavor Matching 9.2.1 When Does Flavor Matching Happen? 9.2.2 Flavor Matching Performance 9.2.3 Flavor Groups 9.2.4 Default Flavor Group 9.2.4.1 automatic 9.2.4.2 unique 9.2.5 Flavor Match Policies 9.2.5.1 Default Flavor Match Policy 9.2.5.2 ANY_OF 9.2.5.3 ALL_OF 9.2.5.4 LATEST 9.2.5.5 REQUIRED 9.2.5.6 REQUIRED_IF_DEFINED 9.2.6 Flavor Match Event Triggers 9.2.7 Sample Flavorgroup API Calls 9.2.7.1 Create a New Flavorgroup 9.3 SOFTWARE Flavor Management 9.3.1 What is a SOFTWARE Flavor? 9.3.2 Creating a SOFTWARE Flavor part 9.3.2.1 Directories 9.3.2.2 Symlinks 9.3.2.3 Files 9.3.3 Sample SOFTWARE Flavor Creation Call 9.3.4 Deploying a SOFTWARE Flavor Manifest to a Host 9.3.5 SOFTWARE Flavor Matching 9.3.6 Kernel Upgrades 10 Scalability and Sizing 10.1 Configuration Maximums 10.1.1 Registered Hosts 10.1.2 HDD Space 10.2 Database Rotation Settings 10.3 Log Rotation 11 Intel Security Libraries Configuration Settings 11.1 Verification Service 11.1.1 Installation Answer File Options 11.1.2 Configuration Options 11.1.3 Command-Line Options 11.1.3.1 Help 11.1.3.2 Start 11.1.3.3 Stop 11.1.3.5 Status 11.1.3.6 Uninstall 11.1.3.7 Version 11.1.3.10 Erase-data 11.1.3.16 Setup 11.1.4 Directory Layout 11.2 Trust Agent 11.2.1 Installation Answer File Options 11.2.2 Configuration Options 11.2.3 Command-Line Options 11.2.3.1 Available Commands 11.2.3.1.1 help 11.2.3.1.2 setup [task] tagent setup (all) tagent setup trustagent.env tagent setup download-ca-cert tagent setup download-cert tagent setup update-certificates tagent setup provision-attestation tagent setup create-host tagent setup create-host-unique-flavor tagent setup get-configured-manifest Environment variables used by tagent setup: 11.2.3.1.3 uninstall 11.2.3.1.4 version 11.2.3.1.5 start 11.2.3.1.6 stop 11.2.3.2.7 status 11.2.4 Directory Layout 11.2.4.1 Windows 11.2.4.2 Linux 11.2.4.2.1 Bin 11.2.4.2.2 Configuration 11.2.4.2.3 Var 11.3 Integration Hub 11.3.1 Installation Answer File 11.3.2 Configuration Options 11.3.3 Command-Line Options 11.3.3.1 Available Commands 11.3.3.1.1 Help 11.3.3.1.2 Start 11.3.3.1.3 Stop 11.3.3.1.5 Status 11.3.3.1.5 Uninstall 11.3.3.1.6 Version 11.3.3.1.10 Setup 11.3.4 Directory Layout 1.3.4.1 Logs 11.4 Certificate Management Service 11.4.1 Installation Answer File Options 11.4.2 Configuration Options 11.4.3 Command-Line Options 11.4.3.1 Help 11.4.3.2 Start 11.4.3.3 Stop 11.4.3.5 Status 11.4.3.6 Uninstall 11.4.3.7 Version 11.4.3.8 Tlscertsha384 11.4.3.9 setup [task] cms setup server [--port=<port>] cms setup root_ca [--force] cms setup tls [--force] [--host_names=<host_names>] cms setup cms_auth_token [--force] 11.4.4 Directory Layout 11.4.4.1 Bin 11.44.2 Cacerts 11.5 Authentication and Authorization Service 11.5.1 Installation Answer File Options 11.5.2 Configuration Options 11.5.3 Command-Line Options 11.5.3.1 Help 11.5.3.2 setup \\<task> 11.5.3.2.1 authservice setup all 11.5.3.2.2 authservice setup database [-force] [--arguments=\\<argument_value>] 11.5.3.2.3 authservice setup server [--port=<port>] 11.5.3.2.4 authservice setup admin [--user=<username>] [--pass=<password>] 11.5.3.2.5 authservice setup download_ca_cert [--force] 11.5.3.2.6 authservice setup download_cert TLS [--force] 11.5.3.2.7 authservice setup jwt 11.5.3.2.8 Start 11.5.3.2.9 Status 11.5.3.2.10 Stop 11.5.3.2.11 tlscertsha384 11.5.3.2.12 Uninstall 11.5.3.2.13 Version 11.5.4 Directory Layout 11.5.4.1 Bin 11.5.4.2 dbscripts 11.6 Workload Service 11.6.1 Installation Answer File Options 11.6.2 Configuration Options 11.6.3 Command-Line Options 11.6.3.1 Help 11.6.3.2 start 11.6.3.3 stop 11.6.3.4 status 11.6.3.5 uninstall 11.6.3.6 setup 11.6.3.6.1 download_ca_cert 11.6.3.6.2 download_cert TLS 11.6.3.6.3 server 11.6.3.6.4 database Setup workload-service database 11.6.3.6.5 hvsconnection 11.6.3.6.6 aasconnection 11.6.3.6.7 logs 11.6.4 Directory Layout 11.7 Key Broker Service 11.7.1 Installation Answer File Options 11.7.2 Configuration Options 11.7.3 Command-Line Options 11.7.4 Directory Layout /opt/kbs/bin /etc/kbs/ /var/log/kbs/ 11.8 Workload Agent 11.8.1 Installation Answer File Options 11.8.2 Configuration Options 11.8.3 Command-Line Options 11.8.3.1 Help 11.8.3.2 setup 11.8.3.2.1 Available Tasks for setup SigningKey BindingKey RegisterSigningKey RegisterBindingKey 11.8.3.3 start 11.8.3.4 stop 11.8.3.5 status 11.8.3.6 uninstall 11.8.3.7 uninstall --purge 11.8.3.8 version 11.8.4 Directory Layout 11.8.4.1 Bin 11.9 Workload Policy Manager 11.9.1 Installation Answer File Options 11.9.2 Configuration Options 11.9.3 Command-Line Options 11.9.3.1 create-image-flavor 11.9.3.2 create-container-image-flavor 11.9.3.3 get-container-image-id 11.9.3.4 create-software-flavor 11.9.3.5 Uninstall 11.9.3.6 --help 11.9.3.7 --version 11.9.3.8 Setup 11.9.3.8.1 wpm setup 11.9.3.8.2 wpm setup CreateEnvelopeKey 11.9.3.8.3 wpm setup RegisterEnvelopeKey 11.9.3.8.4 wpm setup download_ca_cert [--force] 11.9.3.8.5 wpm setup download_cert Flavor-Signing [--force] 12 Certificate and Key Management 12.1 Host Verification Service Certificates and Keys 12.1.1 SAML 12.1.2 Asset Tag 12.1.3 Privacy CA 12.1.4 Endorsement CA 12.2 TLS Certificates 13 Uninstallation 13.1 Host Verification Service 13.2 Trust Agent 13.3 Integration Hub 14Appendix 14.1 PCR Definitions 14.1.1 Red Had Enterprise Linux 14.1.1.1 TPM 2.0 14.1.2 VMWare ESXi 14.1.2.1 TPM 1.2 14.1.2.2 TPM 2.0 A.1 Attestation Rules A.2 Intel TXT and the Trusted Boot Process Table of Contents 1 Introduction 1.1 Overview 1.1.1 Trusted Computing 1.1.1.1 The Chain of Trust 1.1.1.2 Hardware Root of Trust Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) Intel\u00ae BootGuard (Intel\u00ae BtG) 1.1.1.3 Supported Trusted Boot Options 1.1.1.4 Remote Attestation 1.1.2 Intel\u00ae Security Libraries for Datacenter Features 1.1.2.1 Platform Integrity 1.1.2.2 Data Sovereignty 1.1.2.3 Application Integrity 1.1.2.4 Workload Confidentiality for Virtual Machines and Containers 1.1.2.5 Signed Flavors 1.1.2.6 Trusted Virtual Kubernetes Worker Nodes 2 Intel\u00ae Security Libraries Components 2.1 Certificate Management Service 2.2 Authentication and Authorization Service 2.3 Verification Service 2.4 Workload Service 2.5 Trust Agent 2.6 Workload Agent 2.7 Integration Hub 2.8 Workload Policy Manager 2.9 Key Broker Service 3 Intel\u00ae Security Libraries Installation 3.1 Building from Source 3.2 Hardware Considerations 3.3 Recommended Service Layout 3.3.1 Platform Integrity 3.3.2 Workload Confidentiality 3.4 Installing/Configuring the Database 3.4.1 Using the Provided Database Installation Script 3.4.2 Provisioning the Database 3.4.3 Database Server TLS Certificate 3.5 Installing the Certificate Management Service 3.5.1 Required For 3.5.2 Supported Operating Systems 3.5.3 Recommended Hardware 3.5.4 Installation 3.6 Installing the Authentication and Authorization Service 3.6.1 Required For 3.6.2 Prerequisites 3.6.3 Package Dependencies 3.6.4 Supported Operating Systems 3.6.5 Recommended Hardware 3.6.6 Installation 3.6.7 Creating Users 3.7 Installing the Host Verification Service 3.7.1 Required For 3.7.2 Prerequisites 3.7.3 Package Dependencies 3.7.4 Supported Operating Systems 3.7.5 Recommended Hardware 3.7.6 Installation 3.9.5 Installation 3.10 Installing the Workload Agent 3.10.1 Required For 3.10.2 Supported Operating Systems 3.10.3 Prerequisites 3.10.4 Installation 3.11 Trust Agent Provisioning 3.12 Trust Agent Registration 3.13 Importing the HOST_UNIQUE Flavor 3.14 Installing the Integration Hub 3.14.1 Required For 3.14.2 Deployment Architecture Considerations for the Hub 3.14.3 Prerequisites 3.14.4 Package Dependencies 3.14.5 Supported Operating Systems 3.14.6 Recommended Hardware 3.14.7 Installing the Integration Hub 3.15 Installing the Key Broker Service 3.15.1 Required For 3.15.2 Prerequisites 3.15.3 Package Dependencies 3.15.4 Supported Operating Systems 3.15.5 Recommended Hardware 3.15.6 Installation 3.15.6.1 Configure the Key Broker to use a KMIP-compliant Key Management Server 3.15.7 Importing Verification Service Certificates 3.15.7.1 Importing a SAML certificate 3.15.7.2 Importing a PrivacyCA Certificate 3.16 Installing the Workload Policy Manager 3.16.1 Required For 3.16.2 Package Dependencies 3.16.3 Supported Operating Systems 3.16.4 Recommended Hardware 3.16.5 Installation 4 Authentication 4.1 Create Token 4.2 User Management 4.2.1 Username and Password requirements 4.2.2 Create User 4.2.3 Search User 4.2.4 Change User Password 4.2.5 Delete User 4.3 Roles and Permissions 4.3.1 Create Role 4.3.2 Search Roles 4.3.3 Delete Role 4.3.4 Assign Role to User 4.3.5 List Roles Assigned to User 4.3.6 Remove Role from User 4.3.7 Role Definitions 5 Connection Strings 5.1 Trust Agent (Windows and Linux) 5.2 VMware ESXi 5.2.1 Importing VMware TLS Certificates 5.2.2 Registering a VMware ESXi Host 6 Platform Integrity Attestation 6.1 Host Registration 6.1.1 Trust Agent 6.1.1.1 Registration via Trust Agent Command Line 6.1.2 Registration via Verification Service API 6.1.2.1 Special Note for VMware ESXi Hosts and teh vCenter TLS Certificate 6.1.2.2 Sample Call 6.1.2.3 Sample Call for ESXi Cluster Registration 6.2 Flavor Creation for Automatic Flavor Matching 6.2.1 Importing a Flavor from a Sample Host 6.2.2 Creating a Flavor Manually 6.3 Creating the Default SOFTWARE Flavor (Linux Only) 6.4 Creating and Provisioning Asset Tags 6.4.1 Creating Asset Tag Certificates 6.4.2 Deploying Asset Tags 6.4.2.1 Windows and Red Hat Enterprise Linux 6.4.2.2 VMWare Calculate the Certificate Hash Value Provision the Certificate Hash to the Host TPM vSphere 6.5 Update 2 or Later vSphere 6.5 Update 1 or Older Creating the Asset Tag Flavor (VMWare ESXi Only) 6.5 Retrieving Current Attestation Reports 6.6 Retrieving Current Host State Information 6.7 Upgrading Hosts in the Datacenter to a New BIOS or OS Version 6.8 Removing Hosts From the Verification Service 6.9 Removing Flavors 6.10 Invalidating Asset Tags 6.11 Remediating an Untrusted attestation 6.12 Attestation Reporting 6.12.1 Sample Call \u2013 Generating a New Attestation Report 6.12.2 Sample Call \u2013 Retrieving an Existing Attestation Report 6.13 Integration 6.13.1 The Integration Hub 6.13.2 Integration with OpenStack 6.13.2.1 Prerequisites 6.13.2.2 Setting Image Traits 6.13.2.3 Configuring the Integration Hub for Use with OpenStack 6.13.2.7 Scheduling Instances 6.13.3 Integration with Kubernetes 6.13.3.1 Prerequisites 6.13.3.2 Installing the Intel\u00ae SecL Custom Resource Definitions 6.13.3.6 Configuring Pods to Require Intel\u00ae SecL Attributes 6.13.3.7 Tainting Untrusted Worker Nodes 7 Workload Confidentiality 7.1 Virtual Machine Confidentiality 7.1.1 Prerequisites 7.1.2 Workflow 7.1.2.1 Encrypting Images 7.1.2.2 Uploading the Image Flavor 7.1.2.3 Creating the Image Flavor to Image ID Association 7.1.2.4 Launching Encrypted VMs 7.2 Docker Container Confidentiality 7.2.1 Docker Container Integrity 7.2.2 Prerequisites 7.2.3 Workflow 7.2.3.1 Encrypting Docker Container Images 7.2.3.2 Uploading the Image Flavor 7.2.3.3 Creating the Image Flavor to Image ID Association 7.2.3.4 Launching Encrypted Docker Containers 8 Trusted Virtual Kubernetes Worker Nodes 8.1 Prerequisites 8.2 Workflow 8.3 Sample VM Trust Report 9 Flavor Management 9.1 Flavor Format Definitions 9.1.1 Meta 9.1.2 Hardware 9.1.3 PCRs 9.1.4 Sample PLATFORM Flavor 9.1.5 Sample OS Flavor 9.1.6 Sample HOST_UNIQUE Flavor 9.1.7 Sample ASSET_TAG Flavor 9.2 Flavor Matching 9.2.1 When Does Flavor Matching Happen? 9.2.2 Flavor Matching Performance 9.2.3 Flavor Groups 9.2.4 Default Flavor Group 9.2.4.1 automatic 9.2.4.2 unique 9.2.5 Flavor Match Policies 9.2.5.1 Default Flavor Match Policy 9.2.5.2 ANY_OF 9.2.5.3 ALL_OF 9.2.5.4 LATEST 9.2.5.5 REQUIRED 9.2.5.6 REQUIRED_IF_DEFINED 9.2.6 Flavor Match Event Triggers 9.2.7 Sample Flavorgroup API Calls 9.2.7.1 Create a New Flavorgroup 9.3 SOFTWARE Flavor Management 9.3.1 What is a SOFTWARE Flavor? 9.3.2 Creating a SOFTWARE Flavor part 9.3.2.1 Directories 9.3.2.2 Symlinks 9.3.2.3 Files 9.3.3 Sample SOFTWARE Flavor Creation Call 9.3.4 Deploying a SOFTWARE Flavor Manifest to a Host 9.3.5 SOFTWARE Flavor Matching 9.3.6 Kernel Upgrades 10 Scalability and Sizing 10.1 Configuration Maximums 10.1.1 Registered Hosts 10.1.2 HDD Space 10.2 Database Rotation Settings 10.3 Log Rotation 11 Intel Security Libraries Configuration Settings 11.1 Verification Service 11.1.1 Installation Answer File Options 11.1.2 Configuration Options 11.1.3 Command-Line Options 11.1.4 Directory Layout 11.2 Trust Agent 11.2.1 Installation Answer File Options 11.2.2 Configuration Options 11.2.3 Command-Line Options 11.2.4 Directory Layout Windows Linux Bin Configuration Var 11.3 Integration Hub 11.3.1 Installation Answer File 11.3.2 Configuration Options 11.3.3 Command-Line Options 11.3.4 Directory Layout 11.3.4.1 Logs 11.4 Certificate Management Service 11.4.1 Installation Answer File Options 11.4.2 Configuration Options 11.4.3 Command-Line Options 11.4.4 Directory Layout 11.4.4.1 Bin 11.4.4.2 Cacerts 11.5 Authentication and Authorization Service 11.5.1 Installation Answer File Options 11.5.2 Configuration Options 11.5.3 Command-Line Options 11.5.4 Directory Layout 11.5.4.1 Bin 11.5.4.2 dbscripts 11.6 Workload Service 11.6.1 Installation Answer File Options 11.6.2 Configuration Options 11.6.3 Command-Line Options 11.6.4 Directory Layout 11.7 Key Broker Service 11.7.1 Installation Answer File Options 11.7.2 Configuration Options 11.7.3 Command-Line Options 11.7.4 Directory Layout 11.7.4.1 Bin 11.7.4.2 Configuration 11.7.4.3 Env 11.7.4.4 Features 11.7.4.5 Java 11.7.4.6 Logs 11.7.4.7 Repository 11.7.4.8 Script 11.8 Workload Agent 11.8.1 Installation Answer File Options 11.8.2 Configuration Options 11.8.3 Command-Line Options 11.8.4 Directory Layout 11.8.4.1 Bin 11.9 Workload Policy Manager 11.9.1 Installation Answer File Options 11.9.2 Configuration Options 11.9.3 Command-Line Options 12 Certificate and Key Management 12.1 Authentication and Authorization Service 12.2 Host Verification Service 12.2.1 SAML 12.2.2 Asset Tag 12.2.3 Privacy CA 12.2.4 Endorsement CA 12.3 Regenerating TLS Certificates 12.4 Replacing Self-Signed Certificates TLS Certificates 13 Uninstallation 13.1 Host Verification Service 13.2 Trust Agent 13.3 Integration Hub 13.4 Kubernetes CRDs 14 Appendix 14.1 PCR Definitions 14.1.1 Microsoft Windows Server 2016 Datacenter 14.1.1.1 TPM 2.0 14.1.2 Red Had Enterprise Linux 14.1.2.1 TPM 2.0 14.1.3 VMWare ESXi 14.1.3.1 TPM 1.2 14.1.3.2 TPM 2.0 A.1 Attestation Rules","title":"Table of Contents"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1-introduction","text":"","title":"1  Introduction"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11-overview","text":"Intel Security Libraries for Datacenter is a collection of software applications and development libraries intended to help turn Intel platform security features into real-world security use cases.","title":"1.1  Overview"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#111-trusted-computing","text":"Trusted Computing consists of a set of industry standards defined by the Trusted Computing Group to harden systems and data against attack. These standards include verifying platform integrity, establishing identity, protection of keys and secrets, and more. One of the functions of Intel Security Libraries is to provide a \u201cTrusted Platform,\u201d using Intel security technologies to add visibility, auditability, and control to server platforms.","title":"1.1.1  Trusted Computing"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1111-the-chain-of-trust","text":"In a Trusted Computing environment, a key concept is verification of the integrity of the underlying platform. Verifying platform integrity typically means cryptographic measurement and/or verification of firmware and software components. The process by which this measurement and verification takes place affects the overall strength of the assertion that the measured and verified components have not been altered. Intel refers to this process as the \u201c Chain of Trust ,\u201d whereby at boot time, a sequence of cryptographic measurements and signature verification events happen in a defined order, such that measurement/verification happens before execution, and each entity responsible for performing a measurement or verification is measured by another step earlier in the process. Any break in this chain leads to an opportunity for an attacker to modify code and evade detection.","title":"1.1.1.1  The Chain of Trust"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1112-hardware-root-of-trust","text":"The Root of Trust, the first link in the chain, can be one of several different options. Anything that happens in the boot process before the Root of Trust must be considered to be within the \u201ctrust boundary,\u201d signifying components whose trustworthiness cannot be assessed. For this reason, it\u2019s best to use a Root of Trust that starts as early in the system boot process as possible, so that the Chain of Trust during the boot process can cover as much as possible. Multiple Root of Trust options exist, ranging from firmware to hardware. In general, a hardware Root of Trust will have a smaller \u201ctrust boundary\u201d than a firmware Root of Trust. A hardware Root of Trust will also have the benefit of immutability \u2013 where firmware can easily be flashed and modified, hardware is much more difficult to tamper with.","title":"1.1.1.2  Hardware Root of Trust"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11121-intel-trusted-execution-technology-intel-txt","text":"Intel\u00ae Trusted Execution Technology is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Grantley generation. Intel\u00ae TXT is enabled in the system BIOS (typically under the Processor > Advanced tab), and requires Intel\u00ae VT-d and Intel VT-x features to be enabled as prerequisites (otherwise the option will be grayed out). Intel\u00ae TXT will ship \u201cdisabled\u201d by default.","title":"1.1.1.2.1  Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11122-intel-bootguard-intel-btg","text":"Intel\u00ae BootGuard is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Purley-Refresh generation. Unlike Intel\u00ae TXT, Intel\u00ae BtG is configured in platform fuses, not in the system BIOS. Intel\u00ae BtG is fused into several \u201cprofiles\u201d that determine the behavior of the feature. Intel\u00ae BtG supports both \u201cverify\u201d and \u201cmeasure\u201d profiles; in \u201cverify\u201d profiles, Intel\u00ae BtG will verify the signature of the platform Initial Boot Block (IBB). In \u201cmeasure\u201dprofiles, Intel\u00ae BtG will hash the IBB and extend that measurement to a TPM PCR. It is recommended that Intel\u00ae BtG be fused into the \u201cmeasure and verify\u201d profile for maximum protection and auditability. Because the Intel\u00ae BtG profile is configured using fuses, the server OEM/ODM will determine the profile used at manufacturing time. Please contact your server vendor to determine what Intel\u00ae BtG profiles are available in their product line. Because Intel\u00ae BtG only measures/verifies the integrity of the IBB, it\u2019s important to have an additional technology handle measurements later in the boot process. Intel\u00ae TXT can provide this function using tboot to invoke SINIT, and UEFI SecureBoot can alternatively provide similar functionality (note that Linux users should properly configure Shim and use a signed kernel for UEFI SecureBoot).","title":"1.1.1.2.2  Intel\u00ae BootGuard (Intel\u00ae BtG)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1113-supported-trusted-boot-options","text":"Intel\u00ae SecL-DC supports several options for Trusted Computing, depending on the features available on the platform. Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode.","title":"1.1.1.3  Supported Trusted Boot Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1114-remote-attestation","text":"Trusted computing consists primarily of two activities \u2013 measurement, and attestation. Measurement is the act of obtaining cryptographic representations for the system state. Attestation is the act of comparing those cryptographic measurements against expected values to determine whether the system booted into an acceptable state. Attestation can be performed either locally, on the same host that is to be attested, or remotely, by an external authority. The trusted boot process can optionally include a local attestation involving the evaluation of a TPM-stored Launch Control Policy (LCP). In this case, the host\u2019s TPM will compare the measurements that have been taken so far to a set of expected PCR values stored in the LCP; if there is a mismatch, the boot process is halted entirely. Intel\u00ae SecL utilizes remote attestation, providing a remote Verification Service that maintains a database of expected measurements (or \u201cflavors\u201d), and compares the actual boot-time measurements from any number of hosts against its database to provide an assertion that the host booted into a \u201ctrusted\u201d or \u201cuntrusted\u201d state. Remote attestation is typically easier to centrally manage (as opposed to creating an LCP for each host and entering the policy into the host\u2019s TPM), does not halt the boot process allowing for easier remediation, and separates the attack surface into separate components that must both be compromised to bypass security controls. Both local and remote attestation can be used concurrently. However, Intel\u00ae SecL, and this document, will focus only on remote attestation. For more information on TPM Launch Control Policies, consult the Intel Trusted Execution Technology (Intel TXT) Software Development Guide ( https://www.intel.com/content/dam/www/public/us/en/documents/guides/intel-txt-software-development-guide.pdf ).","title":"1.1.1.4  Remote Attestation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112-intel-security-libraries-for-datacenter-features","text":"","title":"1.1.2  Intel\u00ae Security Libraries for Datacenter Features"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1121-platform-integrity","text":"Platform Integrity is the use case enabled by the specific implementation of the Chain of Trust and Remote Attestation concepts. This involves the use of a Root of Trust to begin an unbroken chain of platform measurements at server boot time, with measurements extended to the Trusted Platform Module and compared against expected values to verify the integrity of measured components. This use case is foundational for other Intel\u00ae SecL use cases.","title":"1.1.2.1  Platform Integrity"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1122-data-sovereignty","text":"Data Sovereignty builds on the Platform Integrity use case to allow physical TPMs to be written with Asset Tags containing any number of key/value pairs. This use case is typically used to identify the geographic location of the physical server, but can also be used to identify other attributes. For example, the Asset Tags provided by the Data Sovereignty use case could be used to identify hosts that meet specific compliance requirements and can run controlled workloads.","title":"1.1.2.2  Data Sovereignty"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1123-application-integrity","text":"Added in the Intel\u00ae SecL-DC 1.5 release, Application Integrity allows any files and folders on a Linux host system to be included in the Chain of Trust integrity measurements. These measurements are attested by the Verification Service along with the other platform measurements, and are included in determining the host\u2019s overall Trust status. The measurements are performed by a measurement agent called tbootXM, which is built into initrd during Trust Agent installation. Because initrd is included in other Trusted Computing measurements, this allows Intel\u00ae SecL-DC to carry the Chain of Trust all the way to the Linux filesystem.","title":"1.1.2.3  Application Integrity"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1124-workload-confidentiality-for-virtual-machines-and-containers","text":"Added in the Intel\u00ae SecL-DC 1.6 release, Workload Confidentiality allows virtual machine and Docker container images to be encrypted at rest, with key access tied to platform integrity attestation. Because security attributes contained in the platform integrity attestation report are used to control access to the decryption keys, this feature provides both protection for at-rest data, IP, code, etc in Docker container or virtual machine images, and also enforcement of image-owner-controlled placement policies. When decryption keys are released, they are sealed to the physical TPM of the host that was attested, meaning that only a server that has successfully met the policy requirements for the image can actually gain access. Workload Confidentiality begins with the Workload Policy Manager (WPM) and a qcow2 or Docker image that needs to be protected. The WPM is a lightweight application that will request a new key from the Key Broker, use that key to encrypt the image, and generate an Image Flavor. The image owner will then upload the encrypted image to their desired image storage service (for example, OpenStack Glance or a local Docker Registry), and the image ID from the image storage will be uploaded along with the Image Flavor to the Intel\u00ae SecL Workload Service. When that image is used to launch a new VM or container, the Workload Agent will intercept the VM or container start and request the decryption key for that image from the Workload Service. The Workload Service will use the image ID and the Image Flavor to find the key transfer URL for the appropriate Key Broker, and will query the Verification Service for the latest Platform Integrity trust attestation report for the host. The Key Broker will use the attestation report to determine whether the host meets the policy requirements for the key transfer, and to verify that the report is signed by a Verification Service known to the Broker. If the report is genuine and meets the policy requirements, the image decryption key is sealed using an asymmetric key from that host\u2019s TPM, and sent back to the Workload Service. The Workload Service then caches the key for 5 minutes (to avoid performance issues for multiple rapid launch requests; note that these keys are still wrapped using a sealing key unique to the hosts TPM, so multiple hosts would require multiple keys even for an identical image) and return the wrapped key to the Workload Agent on the host, which then uses the host TPM to unseal the image decryption key. The key is then used to create a new LUKS volume, and the image is decrypted into this volume. This functionality means that a physical host must pass policy requirements in order to gain access to the image key, and the image will be encrypted at rest both in image storage and on the compute host. Beginning with the Intel\u00ae SecL-DC version 2.1 release, the Key Broker now supports 3 rd -party key managers that are KMIP-compliant. The Key Broker has been updated to use the \u201clibkmip\u201d client.","title":"1.1.2.4  Workload Confidentiality for Virtual Machines and Containers"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1125-signed-flavors","text":"Added in the Intel\u00ae SecL-DC 1.6 release, Flavor signing is an improvement to the existing handling of expected attestation measurements, called \u201cFlavors.\u201d This feature adds the ability to digitally sign Flavors so that the integrity of the expected measurements themselves can be verified when attestations occur. This also means that Flavors can be more securely transferred between different Verification Service instances. Flavor signing is seamlessly added to the existing Flavor creation process (both importing from a sample host and \u201cmanually\u201d creating a Flavor using the POST method to the /v2/flavors resource). When a Flavor is created, the Verification Service will sign it using a signing certificate signed by the Certificate Management Service (this is created during Verification Service setup). Each time that the Verification Service evaluates a Flavor, it will first verify the signature on that Flavor to ensure the integrity of the Flavor contents before it is used to attest the integrity of any host.","title":"1.1.2.5  Signed Flavors"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1126-trusted-virtual-kubernetes-worker-nodes","text":"Added in the Intel\u00ae SecL-DC version 2.1 release, this feature provides a Chain of Trust solution extending to Kubernetes Worker Nodes deployed as Virtual Machines. This feature addresses Kubernetes deployments that use Virtual Machines as Worker Nodes, rather than using bare-metal servers. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes.","title":"1.1.2.6  Trusted Virtual Kubernetes Worker Nodes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#2-intel-security-libraries-components","text":"","title":"2  Intel\u00ae Security Libraries Components"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#21-certificate-management-service","text":"Starting with Intel\u00ae SecL-DC 1.6, most non-TPM-related certificates used by Intel\u00ae SecL-DC applications will be issued by the new Certificate Management Service. This includes acting as a root CA and issuing TLS certificates for all of the various web services.","title":"2.1  Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#22-authentication-and-authorization-service","text":"Starting with Intel\u00ae SecL-DC 1.6, authentication and authorization for all Intel\u00ae SecL applications will be centrally managed by the new Authentication and Authorization Service (AAS). Previously, each application would manage its own users and permissions independently; this change allows authentication and authorization management to be centralized.","title":"2.2  Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#23-verification-service","text":"The Verification Service component of Intel\u00ae Security Libraries performs the core Platform Integrity and Data Sovereignty functionality by acting as a remote attestation authority. Platform security technologies like Intel\u00ae TXT, Intel\u00ae BootGuard, and UEFI SecureBoot extend measurements of platform components (such as the system BIOS/UEFI, OS kernel, etc) to a Trusted Platform module as the server boots. Known-good measurements for each of these components can be directly imported from a sample server. These expected measurements can then be compared against actual measurements from registered servers, allowing the Verification Service to attest to the \"trustiness\" of the platform, meaning whether the platform booted into a \"known-good\" state.","title":"2.3  Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#24-workload-service","text":"The Workload Service acts as a management service for handling Workload Flavors (Flavors used for Virtual Machines and Containers). In the Intel\u00ae SecL-DC 1.6 release, the Workload Service uses Flavors to map decryption key IDs to image IDs. When a launch request for an encrypted workload image is intercepted by the Workload Agent, the Workload Service will handle mapping the image ID to the appropriate key ID and key request URL, and will initiate the key transfer request to the Key Broker.","title":"2.4  Workload Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#25-trust-agent","text":"The Trust Agent resides on physical servers and enables both remote attestation and the extended chain of trust capabilities. The Agent maintains ownership of the server's Trusted Platform Module, allowing secure attestation quotes to be sent to the Verification Service. Incorporating the Intel\u00ae SecL HostInfo and TpmProvider libraries, the Trust Agent serves to report on platform security capabilities and platform integrity measurements. The Trust Agent is supported for Windows Server 2016 Datacenter and Red Hat Enterprise Linux (RHEL) 8.1 and later.","title":"2.5  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#26-workload-agent","text":"The Workload Agent is the component responsible for handling all of the functions needed for Workload Confidentiality for virtual machines and Docker containers on a physical server. The Workload Agent uses libvirt hooks to identify VM lifecycle events (VM start, stop, hibernate, etc), and intercepts those events to perform needed functions like requesting decryption keys, creation and deletion of encrypted LUKS volumes, using the TPM to unseal decryption keys, etc. The WLA also includes the Docker SecureOverlay Driver that performs analogous functionality for Docker containers.","title":"2.6  Workload Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#27-integration-hub","text":"The Integration Hub acts as a middle-man between the Verification Service and one or more scheduler services (such as OpenStack* Nova), and \"pushes\" attestation information retrieved from the Verification Service to one or more scheduler services according to an assignment of hosts to specific tenants. In this way, Tenant A can receive attestation information for hosts that belong to Tenant A, but receive no information about hosts belonging to Tenant B. The Integration Hub serves to disassociate the process of retrieving attestations from actual scheduler queries, so that scheduler services can adhere to best practices and retain better performance at scale. The Integration Hub will regularly query the Intel\u00ae SecL Verification Service for SAML attestations for each host. The Integration Hub maintains only the most recent currently valid attestation for each host, and will refresh attestations when they would expire. The Integration Hub will verify the signature of the SAML attestation for each host assigned to a tenant, then parse the attestation status and asset tag information, and then will securely push the parsed key/value pairs to the plugin endpoints enabled. The Integration Hub features a plugin design for adding new scheduler endpoint types. Currently the Integration Hub supports OpenStack Nova and Kubernetes endpoint plugins. Other integration plugins may be added.","title":"2.7  Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#28-workload-policy-manager","text":"The Workload Policy Manager is a Linux command line utility used by an image owner to encrypt VM (qcow2) or container (Docker) images, and to create an Image Flavor used to provide the encryption key transfer URL during launch requests. The WPM utility will use an existing or request a new key from the Key Broker Service, use that key to encrypt the image, and output the Image Flavor in JSON format. The encrypted image can then be uploaded to the image store of choice (like OpenStack Glance), and the Image Flavor can be uploaded to the Workload Service. The ID of the image on the image storage system is then mapped to the Image Flavor in the WLS; when the image is used to launch a new instance, the WLS will find the Image Flavor associated with that image ID, and use the Image Flavor to determine the key transfer URL.","title":"2.8  Workload Policy Manager"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#29-key-broker-service","text":"The Key Broker Service is effectively a policy compliance engine. Its job is to manage key transfer requests, releasing keys only to servers that meet policy requirements. The Key Broker registers one or more SAML signing certificates from any Verification Services that it will trust. When a key transfer request is received, the request includes a trust attestation report signed by the Verification Service. If the signature matches a registered SAML key, the Broker will then look at the actual report to ensure the server requesting the key matches the image policy (currently only overall system trust is supported as a policy requirement). If the report indicates the policy requirements are met, the image decryption key is wrapped using a public key unique to the TPM of the host that was attested in the report, such that only the host that was attested can unseal the decryption key and gain access to the image.","title":"2.9  Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3-intel-security-libraries-installation","text":"","title":"3  Intel\u00ae Security Libraries Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#31-building-from-source","text":"Intel\u00ae Security Libraries is distributed as open source code, and must be compiled into installation binaries before installation. Instructions and sample scripts for building the Intel\u00ae SecL-DC components can be found here: https://github.com/intel-secl/build-manifest After the components have been built, the installation binaries can be found in the directories created by the build scripts. <servicename>/out/<servicename>.bin In addition, the build script will produce some sample database creation scripts that can be used during installation to configure database requirements (instructions are given in the installation sections): create_db: authservice/out/create_db.sh install_pgdb: authservice/out/install_pgdb.sh In addition, sample Ansible roles to automatically build and deploy a testbed environment are provided: https://github.com/intel-secl/utils/tree/v3.3.1/develop/tools/ansible-role Also provided are sample API calls organized by workflows for Postman: https://github.com/intel-secl/utils/tree/v3.3.1/develop/tools/api-collections","title":"3.1  Building from Source"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#32-hardware-considerations","text":"Intel\u00ae SecL-DC supports and uses a variety of Intel security features, but there are some key requirements to consider before beginning an installation. Most important among these is the Root of Trust configuration. This involves deciding what combination of TXT, Boot Guard, tboot, and UEFI Secure Boot to enable on platforms that will be attested using Intel\u00ae SecL. Key points: - At least one \"Static Root of Trust\" mechanism must be used (TXT and/or BtG) - For Legacy BIOS systems, tboot must be used - For UEFI mode systems, UEFI SecureBoot must be used* Use the chart below for a guide to acceptable configuration options. . *Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode.","title":"3.2  Hardware Considerations"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#33-recommended-service-layout","text":"The Intel\u00ae SecL-DC services can be installed in a variety of layouts, partially depending on the use cases desired and the OS of the server(s) to be protected. In general, the Intel\u00ae SecL-DC applications can be divided into management services that are deployed on the network on the management plane, and host or node components that must be installed on each protected server. Management services can typically be deployed anywhere with network access to all of the protected servers. This could be a set of individual VMs per service; containers; or all installed on a single physical or virtual machine. Node components must be installed on each protected physical server. Typically this is needed for Windows and Linux deployments.","title":"3.3  Recommended Service Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#331-platform-integrity","text":"The most basic use case enabled by Intel\u00ae SecL-DC, Platform Integrity requires only the Verification Service and, to protect Windows or Linux hosts, the Trust Agent. This also enables the Application Integrity use case by default for Linux systems. The Integration Hub may be added to provide integration support for OpenStack or Kubernetes. The Hub is often installed on the same machine as the Verification Service, but optionally can be installed separately.","title":"3.3.1  Platform Integrity"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#332-workload-confidentiality","text":"Workload Confidentiality introduces a number of additional services and agents. For a POC environment, all of the management services can be installed on a single machine or VM. This includes: Certificate Management Service (CMS) Authorization and Authentication Service (AAS) Host Verification Service (HVS) Workload Service (WLS) Integration Hub (HUB) Key Broker Service (KBS) with backend key management Workload Policy Manager (WPM) In a production environment, it is strongly suggested that the WPM and KBS be deployed (with their own CMS and AAS) separately for each image owner. For a Cloud Service Provider, this would mean that each customer/tenant who will use the Workload Confidentiality feature would have their own dedicated AAS/CMS/KBS/WPM operated on their own networks, not controlled by the CSP. This is because the Key Broker and WPM are the tools used to define the policies that will allow images to launch, and these policies and their enforcement should remain entirely under the control of the image owner. The node components must be installed on each protected physical server: Trust Agent (TA) Workload Agent (WLA)","title":"3.3.2  Workload Confidentiality"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#34-installingconfiguring-the-database","text":"The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. Scripts (install_pgdb.sh, create_db.sh) are provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation.","title":"3.4  Installing/Configuring the Database"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#341-using-the-provided-database-installation-script","text":"Install a sample Postgresql 11 database using the install_pgdb.sh script. This script will automatically install the Postgresql database and client packages required. Add the Postgresql 11 repository: https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm Create the iseclpgdb.env answer file: ISECL_PGDB_IP_INTERFACES = localhost ISECL_PGDB_PORT = 5432 ISECL_PGDB_SAVE_DB_INSTALL_LOG = true ISECL_PGDB_CERT_DNS = localhost ISECL_PGDB_CERT_IP = 127 .0.0.1 Note that the values above assume that the database will be accessed locally. If the database server will be external to the Intel\u00ae SecL services, change these values to the hostname or FQDN and IP address where the client will access the database server. Run the following command: dnf module disable postgresql -y Execute the installation script: ./install_pgdb.sh Note : the database installation only needs to be performed once if the same database server will be used for all services that require a database. Only the \"create_db\" step needs to be repeated if the database server will be shared.","title":"3.4.1  Using the Provided Database Installation Script"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#342-provisioning-the-database","text":"Each Intel\u00ae SecL service that uses a database (the Authentication and Authorization Service, the Verification Service, the Integration Hub, the Workload Service) requires its own schema and access. After installation, the database must be created initialized and tables created. Execute the create_db.sh script to configure the database. If a single shared database server will be used for each Intel\u00ae SecL service (for example, if all management plane services will be installed on a single VM), run the script multiple times, once for each service that requires a database. If separate database servers will be used (for example, if the management plane services will reside on separate systems and will use their own local database servers), execute the script on each server hosting a database. ./create_db.sh <database name> <database_username> <database_password> For example: ./create_db.sh isecl_hvs_db hvs_db_username hvs_db_password ./create_db.sh isecl_aas_db aas_db_username aas_db_password ./create_db.sh isecl_wls_db wls_db_username wls_db_password Note that the database name, username, and password details for each service must be used in the corresponding installation answer file for that service.","title":"3.4.2  Provisioning the Database"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#343-database-server-tls-certificate","text":"The database client for Intel\u00ae SecL services requires the database TLS certificate to authenticate communication with the database server. If the database server for a service is located on the same server that the service will run on, only the path to this certificate is needed. If the provided Postgres scripts are used, the certificate will be located in /usr/local/pgsql/data/server.crt If the database server will be run separately from the Intel\u00ae SecL service(s), the certificate will need to be copied from the database server to the service machine before installing the Intel\u00ae SecL services. The database client for Intel\u00ae SecL services will validate that the Subject Alternative Names in the database server\u2019s TLS certificate contain the hostname(s)/IP address(es) that the clients will use to access the database server. If configuring a database without using the provided scripts, ensure that these attributes are present in the database TLS certificate.","title":"3.4.3  Database Server TLS Certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#35-installing-the-certificate-management-service","text":"","title":"3.5  Installing the Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#351-required-for","text":"The CMS is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers)","title":"3.5.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#352-supported-operating-systems","text":"The Intel\u00ae Security Libraries Certificate Management Service supports Red Hat Enterprise Linux 8.2.","title":"3.5.2  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#353-recommended-hardware","text":"1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services","title":"3.5.3  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#354-installation","text":"To install the Intel\u00ae SecL-DC Certificate Management Service: Copy the Certificate Management Service installation binary to the /root/ directory. Create the cms.env installation answer file for an unattended installation: AAS_TLS_SAN = <comma-separated list of IPs and hostnames for the AAS> AAS_API_URL = https://<Authentication and Authorization Service IP or Hostname>:8444/aas SAN_LIST = <Comma-separated list of IP addresses and hostnames for the CMS>,127.0.0.1,localhost The SAN list will be used to authenticate the Certificate Signing Request from the AAS to the CMS. Only a CSR originating from a host matching the SAN list will be honored. Later, in the AAS authservice.env installation answer file, this same SAN list will be provided for the AAS installation. These lists must match, and must be valid for IPs and/or hostnames used by the AAS system. If both the AAS and CMS will be installed on the same system, \"127.0.0.1,localhost\" may be used. The SAN list variables also accept the wildcards \u201c?\u201d (for single-character wildcards) and \"*\" (for multiple-character wildcards) to allow address ranges or multiple FQDNs. The AAS_API_URL represents the URL for the AAS that will exist after the AAS is installed. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Certificate Management Service. Execute the installer binary. ./cms-v3.3.1.bin When the installation completes, the Certificate Management Service is available. The services can be verified by running cms status from the command line. shell cms status After installation is complete, the CMS will output a bearer token to the console. This token will be used with the AAS during installation to authenticate certificate requests to the CMS. If this token expires or otherwise needs to be recreated, use the following command: ```shell cms setup cms_auth_token --force In addition, the SHA384 digest of the CMS TLS certificate will be needed for installation of the remaining Intel\u00ae SecL services. The digest can be obtained using the following command: ```shell cms tlscertsha384","title":"3.5.4  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#36-installing-the-authentication-and-authorization-service","text":"","title":"3.6  Installing the Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#361-required-for","text":"The AAS is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers)","title":"3.6.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#362-prerequisites","text":"The following must be completed before installing the Authentication and Authorization Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service database must be available","title":"3.6.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#363-package-dependencies","text":"The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. A script (install_pgdb.sh) is provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation.","title":"3.6.3  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#364-supported-operating-systems","text":"The Intel\u00ae Security Libraries Authentication and Authorization Service supports Red Hat Enterprise Linux 8.2.","title":"3.6.4  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#365-recommended-hardware","text":"1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services","title":"3.6.5  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#366-installation","text":"To install the AAS, a bearer token from the CMS is required. This bearer token is output at the end of the CMS installation. However, if a new token is needed, simply use the following command from the CMS command line: cms setup cms_auth_token --force Create the authservice.env installation answer file: CMS_BASE_URL = https://<CMS IP or hostname>:8445/cms/v1/ CMS_TLS_CERT_SHA384 = <CMS TLS certificate sha384> AAS_DB_HOSTNAME = <IP or hostname of database server> AAS_DB_PORT = <database port number ; default is 5432 > AAS_DB_NAME = <database name> AAS_DB_USERNAME = <database username> AAS_DB_PASSWORD = <database password> AAS_DB_SSLCERTSRC = <path to database TLS certificate ; the default location is typically /usr/local/pgsql/data/server.crt> AAS_ADMIN_USERNAME = <username for AAS administrative user> AAS_ADMIN_PASSWORD = <password for AAS administrative user> SAN_LIST = <comma-separated list of IPs and hostnames for the AAS ; this should match the value for the AAS_TLS_SAN in the cms.env file from the CMS installation> BEARER_TOKEN = <bearer token from CMS installation> Execute the AAS installer: ./authservice-v3.3.1.bin Note: the AAS_ADMIN credentials specified in this answer file will have administrator rights for the AAS and can be used to create other users, create new roles, and assign roles to users.","title":"3.6.6  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#367-creating-users","text":"After installation is complete, a number of roles and user accounts must be generated. Most of these accounts will be service users, used by the various Intel\u00ae SecL services to work together. Another set of users will be used for installation permissions, and a final administrative user will be created to provide the initial authentication interface for the actual human user. The administrative user can be used to create additional users with appropriately restricted roles based on organizational needs. Creating these required users and roles is facilitated by a script that will accept credentials and some configuration settings from an answer file and automate the process. Create the populate-users.env file: ISECL_INSTALL_COMPONENTS = KBS,TA,WLS,WPM,IHUB,HVS,WLA,AAS AAS_API_URL = https://<AAS IP address or hostname>:8444/aas AAS_ADMIN_USERNAME = <AAS username> AAS_ADMIN_PASSWORD = <AAS password> HVS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Host Verification Service> IH_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Integration Hub> WLS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Workload Service> KBS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Key Broker Service> TA_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Trust Agent> HVS_SERVICE_USERNAME = <Username for the HVS service user> HVS_SERVICE_PASSWORD = <Password for the HVS service user> IHUB_SERVICE_USERNAME = <Username for the Hub service user> IHUB_SERVICE_PASSWORD = <Password for the Hub service user> WPM_SERVICE_USERNAME = <Username for the WPM service user> WPM_SERVICE_PASSWORD = <Password for the WPM service user> WLS_SERVICE_USERNAME = <Username for the WLS service user> WLS_SERVICE_PASSWORD = <Password for the WLS service user> WLA_SERVICE_USERNAME = <Username for the WLA service user> WLA_SERVICE_PASSWORD = <Password for the WLA service user> GLOBAL_ADMIN_USERNAME = <Username for the global Administrator user GLOBAL_ADMIN_PASSWORD = <Password for the global Administrator user INSTALL_ADMIN_USERNAME = <Username for the installation user INSTALL_ADMIN_PASSWORD = <Password for the global installation user Note : The ISECL_INSTALL_COMPONENTS variable is a comma-separated list of the components that will be used in your environment. Not all services are required for every use case. If a given service will not be used in your deployment, simply delete the unnecessary service abbreviation from the ISECL_INSTALL_COMPONENTS list, and leave the SAN and credential variables for that service blank. Note : The SAN list variables each support wildcards( \"*\" and \"?\"). In particular, without wildcards the Trust Agent SAN list would need to explicitly list each hostname or IP address for all Trust Agents that will be installed, which is not generally feasible. Using wildcards, domain names and entire IP ranges can be included in the SAN list, which will allow any host matching those ranges to install the relevant service. The SAN list specified here must exactly match the SAN list for the applicable service in that service\u2019s env installation file. Execute the populate-users script: ./populate-users Note: The script can be executed with the \u2013output_json argument to create the populate-user.json .This json output file will contain all of the users created by the script, along with usernames, passwords, and role assignments. This file can be used both as a record of the service and administrator accounts, and can be used as alternative inputs to recreate the same users with the same credentials in the future if needed. Be sure to protect this file if the \u2013output_json argument is used. The script will automatically generate the following users: Verification Service User Attestation Hub Service User Workload Policy Manager Service User Workload Service User Name Workload Service User Global Admin User Installation User These user accounts will be used during installation of several of the Intel\u00ae SecL-DC applications. In general, whenever credentials are required by an installation answer file, the variable name should match the name of the corresponding variable used in the populate-users.env file. The Global Admin user account has all roles for all services. This is a default administrator account that can be used to perform any task, including creating any other users. In general this account is useful for POC installations, but in production it should be used only to create user accounts with more restrictive roles. The administrator credentials should be protected and not shared. The populate-users script will also output an installation token. This token has all privileges needed for installation of the Intel\u00ae SecL services, and uses the credentials provided with the INSTALLATION_ADMIN_USERNAME and password. The remaining Intel \u00ae SecL-DC services require this token (set as the BEARER_TOKEN variable in the installation env files) to grant the appropriate privileges for installation. By default this token will be valid for two hours; the populate-users script can be rerun with the same populate-users.env file to regenerate the token if more time is required, or the INSTALLATION_ADMIN_USERNAME and password can be used to generate an authentication token.","title":"3.6.7  Creating Users"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#37-installing-the-host-verification-service","text":"This section details how to install the Intel\u00ae SecL-DC services. For instructions on running these services as containers, see the following section.","title":"3.7  Installing the Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#371-required-for","text":"The Host Verification Service is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers)","title":"3.7.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#372-prerequisites","text":"The following must be completed before installing the Verification Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available The Verification Service database must be available","title":"3.7.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#373-package-dependencies","text":"The Intel\u00ae Security Libraries Verification Service requires the following packages and their dependencies: logback Postgres* client and server 11.6 (server component optional if an external Postgres database is used) unzip zip openssl wget net-tools python3-policycoreutils If they are not already installed, the Verification Service installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation.","title":"3.7.3  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#374-supported-operating-systems","text":"The Intel\u00ae Security Libraries Verification Service supports Red Hat Enterprise Linux 8.2.","title":"3.7.4  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#375-recommended-hardware","text":"4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers (Optional) One network interface for Asset Tag provisioning (only required for \u201cpull\u201d tag provisioning; required to provision Asset Tags to VMware ESXi servers).","title":"3.7.5  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#376-installation","text":"To install the Verification Service, follow these steps: Copy the Verification Service installation binary to the /root directory. Create the hvs.env installation answer file. A sample minimal hvs.env file is provided below. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Verification Service. # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas HVS_SERVICE_USERNAME = <username> HVS_SERVICE_PASSWORD = <password> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = <digest> # TLS Configuration SAN_LIST = 127 .0.0.1,192.168.1.1,hvs.server.com #comma-separated list of IP addresses and hostnames for the HVS to be used in the Subject Alternative Names list in the TLS Certificate # Installation admin bearer token for CSR approval request to CMS BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Database HVS_DB_NAME = <database name> HVS_DB_USERNAME = <database username> HVS_DB_PASSWORD = <database password> HVS_DB_SSLCERTSRC = /tmp/dbcert.pem # Not required if VS_DB_SSLCERT is given Execute the installer binary. ```shell ./hvs-v3.3.1.bin When the installation completes, the Verification Service is available. The services can be verified by running **hvs status** from the Verification Service command line. ```shell hvs status","title":"3.7.6  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#38-installing-the-workload-service","text":"","title":"3.8  Installing the Workload Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#381-required-for","text":"The WLS is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Docker Containers)","title":"3.8.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#382-prerequisites","text":"The following must be completed before installing the Workload Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available The Verification Service must be installed and available The Workload Service database must be available","title":"3.8.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#383-supported-operating-systems","text":"The Intel\u00ae Security Libraries Workload Service supports Red Hat Enterprise Linux 8.2","title":"3.8.3  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#384-recommended-hardware","text":"","title":"3.8.4  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#385-installation","text":"Copy the Workload Service installation binary to the /root directory. Create the workload-service.env installation answer file WLS_DB_USERNAME = <database username> WLS_DB_PASSWORD = <database password> WLS_DB_HOSTNAME = <IP or hostname of database server> WLS_DB_PORT = <Database port ; 5432 by default> WLS_DB = <name of the WLS database> WLS_DB_SSLCERTSRC = <path to database TLS certificate ; the default location is typically /usr/local/pgsql/data/server.crt > HVS_URL = https://<Ip address or hostname of the Host verification Service>:8443/hvs/v2/ WLS_SERVICE_USERNAME = <username for WLS service account> WLS_SERVICE_PASSWORD = <password for WLS service account> CMS_BASE_URL = https://<IP or hostname to CMS>:8445/cms/v1/ CMS_TLS_CERT_SHA384 = <sha384 of CMS TLS certificate> AAS_API_URL = https://<IP or hostname to AAS>:8444/aas/ SAN_LIST = <comma-separated list of IPs and hostnames for the WLS> BEARER_TOKEN = <Installation token from populate-users script> Execute the WLS installer binary: ./wls-v3.3.1.bin","title":"3.8.5  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#39-installing-the-trust-agent-for-linux","text":"","title":"3.9  Installing the Trust Agent for Linux"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#391-required-for","text":"The Trust Agent for Linux is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers)","title":"3.9.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#392-package-dependencies","text":"The Trust Agent requires the following packages and their dependencies: Tboot (Optional, for TXT-based deployments without UEFI SecureBoot only) openssl tar redhat-lsb If they are not already installed, the Trust Agent installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation. Tboot will not be installed automatically. Instructions for installing and configuring tboot are documented later in this section.","title":"3.9.2  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#393-supported-operating-systems","text":"The Intel\u00ae Security Libraries Trust Agent for Linux supports Red Hat Enterprise Linux 8.2. Windows support is described in the section \"Installing the Trust Agent for Windows\"","title":"3.9.3  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#394-prerequisites","text":"The following must be completed before installing the Trust Agent: Supported server hardware including an Intel\u00ae Xeon\u00ae processor with Intel Trusted Execution Technology activated in the system BIOS. Trusted Platform Module (version 2.0) installed and activated in the system BIOS, with cleared ownership status. Note: For Linux systems, TPM 1.2 and TPM resource sharing to applications other than the Trust Agent are not supported at this time. Do not install trousers or another TSS stack application after installing the Trust Agent on Linux systems. System must be booted to a tboot boot option OR use UEFI SecureBoot. Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. (Provisioning step only) Intel\u00ae SecL Verification Service server installed and active. (REQUIRED for servers configured with TXT and tboot only) If the server is installed using an LVM, the LVM name must be identical for all Trust Agent systems. The Grub bootloader line that calls the Linux kernel will contain the LVM name of the root volume, and this line with all arguments is part of what is measured in the TXT/Tboot boot process. This will cause the OS Flavor measurements to differ between two otherwise identical hosts if their LVM names are different. Simply using a uniform name for the LVM during OS installation will resolve this possible discrepancy. (Optional, REQUIRED for Virtual Machine Confidentiality only): QEMU/KVM must be installed Libvirt must be installed (Optional, REQUIRED for Docker Container Confidentiality only): Docker CE 19.03.13 must be installed Note : The specific Docker-CE version 19.03.13 is required for Docker Container Confidentiality. Only this version is supported for this use case.","title":"3.9.4  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3941-tboot-installation","text":"Note : A solution to a security bug has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. Tboot is required to build a complete Chain of Trust for Intel\u00ae TXT systems that are not using UEFI Secure Boot. Tboot acts to initiate the Intel\u00ae TXT SINIT ACM (Authenticated Code Module), which populates several TPM measurements including measurement of the kernel, grub command line, and initrd. Without either tboot or UEFI Secure Boot, the Chain of Trust will be broken because the OS-related components will be neither measured nor signature-verified prior to execution. Because tboot acts to initiate the Intel\u00ae TXT SINIT ACM, tboot is only required for platforms using Intel\u00ae TXT, and is not required for platforms using another hardware Root of Trust technology like Intel\u00ae Boot Guard. Intel\u00ae SecL-DC requires tboot 1.9.7 or greater. For most platforms, the version of tboot available from the RedHat software repository will meet all requirements. Some newer platforms and platform firmware versions may require a later version of tboot, including later versions than are available on the RedHat software repositories. This is due to updates that can be made to the Intel\u00ae TXT SINIT ACM behavior, and the SINIT ACM is contained in the BIOS firmware. If a newer version of tboot is required than is available from the repository, the most current version can be found here: https://sourceforge.net/projects/tboot/files/tboot/ Tboot requires configuration of the grub boot loader after installation. To install and configure tboot: Install tboot yum install tboot Make a backup of your current grub.cfg file The below examples assume RedHat has been installed on a platform using Legacy boot mode.The grub path will be slightly different for platforms using Legacy BIOS. cp /boot/grub2/grub.cfg /boot/grub2/grub.bak Generate a new grub.cfg with the tboot boot option grub2-mkconfig -o /boot/grub2/grub.cfg Update the default boot option Ensure that the GRUB_DEFAULT value is set to the tboot option. a. Update /etc/default/grub and set the GRUB_DEFAULT value to \"saved\" GRUB_DEFAULT=saved b. Set the grub default option to tboot using the following grub2-set-default 2 Note that option 2 will be the correct Grub option assuming an otherwise-default installation of RHEL. A different option may be needed depending on the system configuration. c. Regenerate grub.cfg: grub2-mkconfig -o /boot/grub2/grub.cfg Reboot the system Because measurement happens at system boot, a reboot is needed to boot to the tboot boot option and populate measurements in the TPM. Verify a successful trusted boot with tboot Tboot provides the txt-stat command to show the tboot log. The first part of the output of this command can be used to verify a successful trusted launch. In the output below, note the \u201cTXT measured launch\u201d and \u201csecrets flag set\u201d at the bottom. Both of these should show \" TRUE \" if the tboot measured launch was successful. If either of these show \" FALSE \" the measured launch has failed. This usually simply indicates that the tboot boot option was not selected during boot. If the measured launch was successful, proceed to install the Trust Agent. ``` Intel\u00ae TXT Configuration Registers: STS: 0x0001c091 senter_done: TRUE sexit_done: FALSE mem_config_lock: FALSE private_open: TRUE locality_1_open: TRUE locality_2_open: TRUE ESTS: 0x00 txt_reset: FALSE E2STS: 0x0000000000000006 secrets: TRUE ERRORCODE: 0x00000000 DIDVID: 0x00000001b0078086 vendor_id: 0x8086 device_id: 0xb007 revision_id: 0x1 FSBIF: 0xffffffffffffffff QPIIF: 0x000000009d003000 SINIT.BASE: 0x6fec0000 SINIT.SIZE: 262144B (0x40000) HEAP.BASE: 0x6ff00000 HEAP.SIZE: 1048576B (0x100000) DPR: 0x0000000070000051 lock: TRUE top: 0x70000000 size: 5MB (5242880B) PUBLIC.KEY: 9c 78 f0 d8 53 de 85 4a 2f 47 76 1c 72 b8 6a 11 16 4a 66 a9 84 c1 aa d7 92 e3 14 4f b7 1c 2d 11 TXT measured launch: TRUE secrets flag set: TRUE ```","title":"3.9.4.1  Tboot Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#395-installation","text":"Installation of the Trust Agent is split into two major steps: Installation, which covers the creation of system files and folders, and Provisioning, which involves the creation of keys and secrets and links the Trust Agent to a specific Verification Service. Both operations can be performed at the same time using an installation answer file. Without the answer file, the Trust Agent can be installed and left in an un-provisioned state regardless of whether a Verification Service is up and running, until such time as the datacenter administrator is ready to run the provisioning step and link the Trust Agent to a Verification Service. To install the Trust Agent for Linux: Copy the Trust Agent installation binary to the /root/ directory. (Optional; required to perform Provisioning and Installation at the same time.) Create the trustagent.env answer file in the /root directory (for full configuration options, see section 9.2). The minimum configuration options for installation are provided below. For Platform Attestation only, provide the following in trustagent.env shell HVS_URL=https://<Verification Service IP or Hostname>:8443/hvs/v2 PROVISION_ATTESTATION=y GRUB_FILE=<path to grub.cfg> CURRENT_IP=<Trust Agent IP address> CMS_TLS_CERT_SHA384=<CMS TLS digest> BEARER_TOKEN=<Installation token from populate-users script> AAS_API_URL=https://<AAS IP or Hostname>:8444/aas CMS_BASE_URL=https://<CMS IP or Hostname>:8445/cms/v1 SAN_LIST=<Comma-separated list of IP addresses and hostnames for the TAgent matching the SAN list specified in the populate-users script; may include wildcards> For Workload Confidentiality with VM Encryption, add the following ( in addition to the basic Platform Attestation sample): shell WLA_SERVICE_USERNAME=<Username for the WLA service user> WLA_SERVICE_PASSWORD=<Username for the WLA service user> WLS_API_URL=https://<WLS IP address or hostname>:5000/wls/ For Workload Confidentiality with Docker Container Encryption, add the following ( in addition to the basic Platform Attestation sample): shell WLA_SERVICE_USERNAME=<Username for the WLA service user> WLA_SERVICE_PASSWORD=<Username for the WLA service user> WLS_API_URL=https://<WLS IP address or hostname>:5000/wls/ WA_WITH_CONTAINER_SECURITY=yes NO_PROXY=<Registry_ip> HTTPS_PROXY=<proxy_url> REGISTRY_SCHEME_TYPE=https Execute the Trust Agent installer and wait for the installation to complete. ./trustagent-v3.3.1.bin If the trustagent.env answer file was provided with the minimum required options, the Trust Agent will be installed and also Provisioned to the Verification Service specified in the answer file. If no answer file was provided, the Trust Agent will be installed, but will not be Provisioned. TPM-related functionality will not be available from the Trust Agent until the Provisioning step is completed. The Trust Agent will add a new grub menu entry for application measurement. This new entry will include tboot if the existing grub contains tboot as the default boot option. Note: If the Linux Trust Agent is installed without being Provisioned, the Trust Agent process will not actually run until the Provisioning step has been completed. Legacy BIOS systems using tboot ONLY) Update the grub boot loader: grub2-mkconfig -o /boot/grub2/grub.cfg After Provisioning is completed, the Linux Trust Agent must be rebooted so that the default SOFTWARE Flavor manifest can be measured and extended to the TPM. If the Workload Agent will also be installed on the system (see the next section), wait to reboot the server until after the Workload Agent has been installed, as this modifies the default SOFTWARE Flavor manifest.","title":"3.9.5  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#310-installing-the-workload-agent","text":"","title":"3.10  Installing the Workload Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3101-required-for","text":"Workload Confidentiality (both VMs and Docker Containers)","title":"3.10.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3102-supported-operating-systems","text":"The Intel\u00ae Security Libraries Workload Agent supports Red Hat Enterprise Linux 8.2","title":"3.10.2  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3103-prerequisites","text":"The following must be completed before installing the Workload Agent: Intel\u00ae SecL Trust Agent installed and active. cryptsetup (REQUIRED for Virtual Machine Confidentiality only): QEMU/KVM must be installed libvirt must be installed (REQUIRED for Docker Container Confidentiality only): Docker CE 19.03.13 must be installed Note : The specific Docker-CE version 19.03.13 is required for Docker Container Confidentiality. Only this version is supported for this use case.","title":"3.10.3  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3104-installation","text":"Copy the Workload Agent installation binary to the /root/ directory Verify that the trustagent.env answer file is present. This file was necessary for installing/provisioning the Trust Agent. Note that the additional content required for Workload Confidentiality with either VM Encryption or Docker Container Encryption must be included in the trustagent.env file (samples provided in the previous section) for use by the Workload Agent. Execute the Workload Agent installer binary. ./workload-agent-v3.3.1.bin (Legacy BIOS systems using tboot ONLY) Update the grub boot loader: grub2-mkconfig -o /boot/grub2/grub.cfg Reboot the server. The Workload Agent populates files that are needed for the default SOFTWARE Flavor, and a reboot is required for those measurements to happen.","title":"3.10.4  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#312-trust-agent-provisioning","text":"\"Provisioning\" the Trust Agent involves connecting to a Verification Service to download the Verification Service PrivacyCA certificate, create a new Attestation Identity Keypair in the TPM, and verify or create the TPM Endorsement Certificate and Endorsement Key. The Verification Service PrivacyCA root certificate is used to sign the EC, and the EC is used to generate the Attestation Identity Keypair. The AIK is used by the Verification Service to verify the integrity of quotes from the host\u2019s TPM. Provisioning can be performed separately from installation (meaning you can install the Trust Agent without Provisioning, and then Provision later). If the trustagent.env answer file is present and has the required Verification Service information during installation, the Agent will automatically run the Provisioning steps. Note: The trustagent.env answer file must contain user credentials for a user with sufficient privileges. The minimum role required for performing provisioning is the \"trustagent_provisioner\" role. Note: If the Linux Trust Agent is installed without being Provisioned, the Trust Agent process will not actually run until the Provisioning step has been completed. If the answer file is not present during installation, the Agent can be Provisioned later by adding the trustagent.env file and running the following command: tagent provision-attestation <trustagent.env or trustagent.ini file path>","title":"3.12  Trust Agent Provisioning"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#313-trust-agent-registration","text":"Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report. The Trust Agent can register the host with a Verification Service by running the following command (the trustagent.env or trustagent.ini answer file must be present in the current working directory): tagent create-host Hosts can also be registered using a REST API request to the Verification Service: POST <https://verification.service.com:8443/hvs/v2/hosts> { \"host_name\": \"<hostname of host to be registered>\" \"connection_string\": \"intel:https://<hostname or IP address>:1443\", \"flavorgroup_names\": [], \"description\": \"<description>\" } Note: When a new host is registered, the Verification Service will automatically attempt to match the host to appropriate Flavors. If appropriate Flavors are not found, the host will still be registered, but will be in an Untrusted state until/unless appropriate Flavors are added to the Verification Service.","title":"3.13  Trust Agent Registration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#314-importing-the-host_unique-flavor","text":"RHEL and VMWare ESXi hosts have measured components that are unique to each host. This means that a special HOST_UNIQUE flavor part needs to be imported for each RHEL and ESXi host, in addition to any other OS or Platform Flavors. Note: Importing a Flavor requires user credentials for a user with sufficient privileges. The minimum role required for creating the HOST_UNIQUE Flavor part is the \u201chost_unique_flavor_creator\u201d role. This role can only create HOST_UNIQUE Flavor parts, and cannot create any other Flavors. On Red Hat Enterprise Linux hosts with the Trust Agent, this can be performed from the Trust Agent command line (this requires the trustagent.env answer file to be present in the current working directory): tagent create-host-unique-flavor This can also be performed using a REST API (required for VMWare ESXi hosts): POST https://verification.service.com:8443/hvs/v2/flavors { \"connection_string\": \"<Connection string>\", \"partial_flavor_types\": [\"HOST_UNIQUE\"] }","title":"3.14  Importing the HOST_UNIQUE Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#315-installing-the-integration-hub","text":"Note: The Integration Hub is only required to integrate Intel\u00ae SecL with third-party scheduler services, such as OpenStack Nova or Kubernetes. The Hub is not required for usage models that do not require Intel\u00ae SecL security attributes to be pushed to an integration endpoint.","title":"3.15  Installing the Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3151-required-for","text":"The Hub is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Containers) The Hub is OPTIONAL for the following use cases (used only if orchestration or other integration support is needed): Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity","title":"3.15.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3152-deployment-architecture-considerations-for-the-hub","text":"A separate Hub instance is REQUIRED for each Cloud environment (also referred to as a Hub \"tenant\"). For example, if a single datacenter will have an OpenStack cluster and also two separate Kubernetes clusters, a total of three Hub instances must be installed, though additional instances of other Intel SecL services are not required (in the same example, only a single Verification Service is required). Each Hub will manage a single orchestrator environment. Each Hub instance should be installed on a separate VM or physical server","title":"3.15.2  Deployment Architecture Considerations for the Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3153-prerequisites","text":"The Intel\u00ae Security Libraries Integration Hub can be run as a VM or as a bare-metal server. The Hub may be installed on the same server (physical or VM) as the Verification Service. The Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available (REQUIRED for Kubernetes integration only) The Intel SecL Custom Resource Definitions must be installed and available (see the Integration section for details)","title":"3.15.3  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3154-package-dependencies","text":"The Intel\u00ae SecL Integration Hub requires a number of packages and their dependencies: If these are not already installed, the Integration Hub installer attempts to install these packages automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update your repository package lists before installation.","title":"3.15.4  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3155-supported-operating-systems","text":"The Intel Security Libraries Integration Hub supports Red Hat Enterprise Linux 8.2","title":"3.15.5  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3156-recommended-hardware","text":"1 vCPUs RAM: 2 GB 1 GB free space to install the Verification Service services. Additional free space is needed for the Attestation Hub database and logs (database and log space requirements are dependent on the number of managed servers). One network interface with network access to the Verification Service. One network interface with network access to any integration endpoints (for example, OpenStack Nova).","title":"3.15.6  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3157-installing-the-integration-hub","text":"To install the Integration Hub, follow these steps: Copy the Integration Hub installation binary to the /root directory. Create the ihub.env installation answer file. See the sample file below. # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME = <Username for the Hub service user> IHUB_SERVICE_PASSWORD = <Password for the Hub service user> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = <TLS hash> # TLS Configuration TLS_SAN_LIST = 127 .0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL = https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE = HVS #Integration tenant type. Currently supported values are \"KUBENETES\" or \"OPENSTACK\" TENANT = <KUBERNETES or OPENSTACK> # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_AUTH_URL = <OpenStack Keystone URL ; typically http://openstack-ip:5000/> OPENSTACK_PLACEMENT_URL = <OpenStack Nova API URL ; typically http://openstack-ip:8778/> OPENSTACK_USERNAME = <OpenStack username> OPENSTACK_PASSWORD = <OpenStack password> # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL = https://kubernetes:6443/ KUBERNETES_CRD = custom-isecl KUBERNETES_CERT_FILE = /etc/ihub/apiserver.crt KUBERNETES_TOKEN = eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 3. Execute the installer binary. ./ihub-v3.3.1.bin After installation, the Hub must be configured to integrate with a Cloud orchestration platform (for example, OpenStack or Kubernetes). See the Integration section for details.","title":"3.15.7  Installing the Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#316-installing-the-key-broker-service","text":"","title":"3.16  Installing the Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3161-required-for","text":"The KBS is REQUIRED for the following use cases: Workload Confidentiality (both VMs and Docker Containers)","title":"3.16.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3162-prerequisites","text":"The following must be completed before installing the Key Broker: The Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available (Recommended; Required if a 3 rd -party Key Management Server will be used) A KMIP 2.0-compliant 3 rd -party Key management Server must be available. The Key Broker will require the KMIP server\u2019s client certificate, client key and root ca certificate. The Key Broker uses the libkmip client to connect to a KMIP server The Key Broker has been validated using the pykmip 0.9.1 KMIP server as a 3 rd -party Key Management Server. While any general KMIP 2.0-compliant Key Management Server should work, implementation differences among KMIP providers may prevent functionality with specific providers.","title":"3.16.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3163-package-dependencies","text":"","title":"3.16.3  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3164-supported-operating-systems","text":"The Intel\u00ae Security Libraries Key Broker Service supports Red Hat Enterprise Linux 8.2","title":"3.16.4  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3165-recommended-hardware","text":"","title":"3.16.5  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3166-installation","text":"Copy the Key Broker installation binary to the /root/ directory. Create the installation answer file kbs.env: AAS_API_URL = https://<AAS IP or hostname>:8444/aas CMS_BASE_URL = https://<CMS IP or hostname>:8445/cms/v1/ ENDPOINT_URL = https://<KBS IP or hostname>:9443/kbs/v1/ SAN_LIST = <comma-separated list of hostnames and IP addresses for the Key Broker> CMS_TLS_CERT_SHA384 = <SHA384 hash of CMS TLS certificate> BEARER_TOKEN = <Installation token from populate-users script> ### OPTIONAL - KMIP configuration only KEY_MANAGER = KMIP KMIP_SERVER_IP = <IP address of KMIP server> KMIP_SERVER_PORT = <Port number of KMIP server> ### Retrieve the following certificates and keys from the KMIP server KMIP_CLIENT_KEY_PATH = <path>/client_key.pem KMIP_ROOT_CERT_PATH = <path>/root_certificate.pem KMIP_CLIENT_CERT_PATH = <path>/client_certificate.pem Execute the KBS installer. ./kbs-3.3.0.bin","title":"3.16.6  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#31661-configure-the-key-broker-to-use-a-kmip-compliant-key-management-server","text":"The Key Broker can be configured to use a 3 rd -party KMIP key manager as part of installation using optional kbs.env installation variables. Without using these variables, the Key Broker will be configured to use a filesystem key management solution. This should be used only for testing and POC purposes; using a secure 3 rd -party Key management Server should be used for production deployments. To configure the Key Broker to point to a 3 rd -party KMIP-compliant Key Management Server: Copy the KMIP server\u2019s client certificate, client key and root ca certificate to the Key Broker system Change the ownership of these files to kms:kms chown kms:kms <path>/* Configure the variables for kmip support as below kbs config key.manager.provider com.intel.kbs.keystore.kmip.KMIPKeyManager kbs config kmip.server.address <IP> kbs config kmip.server.port <PORT> kbs config kmip.ca.certificates.path <path to kmip ca certificate> kbs config kmip.client.certificate.path <path to kmip client certificate> kbs config kmip.client.key.path <path to kmip client key> Restart the Key Broker for the settings to take effect kbs stop kbs start","title":"3.16.6.1  Configure the Key Broker to use a KMIP-compliant Key Management Server"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3167-importing-verification-service-certificates","text":"After installation, the Key Broker must import the SAML and PrivacyCA certificates from any Verification Services it will trust. This provides the Key Broker a way to ensure that only attestations that come from a \u201cknown\u201d Verification Service. The SAML and PrivacyCA certificates needed can be found on the Verification Service.","title":"3.16.7  Importing Verification Service Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#31671-importing-a-saml-certificate","text":"Display the SAML certificate: cat /etc/hvs/certs/trustedca/saml-crt.pem Use the SAML certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:9443/kbs/v1/saml-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIID9TCCAl2gAwIBAgIBCTANBgkqhkiG9w0BAQwFADBQMQswCQYDVQQGEwJVUzEL MAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEXMBUGA1UE AxMOQ01TIFNpZ25pbmcgQ0EwHhcNMTkxMjExMTkzOTU1WhcNMjAxMjExMTkzOTU1 WjAYMRYwFAYDVQQDEw1tdHdpbHNvbi1zYW1sMIIBojANBgkqhkiG9w0BAQEFAAOC AY8AMIIBigKCAYEArbrDpzR4Ry0MVhSJULHZoiVL020YqtyRH+R2NlVXTpJzqmEA Ep2utfcP8+mSCT7DLpGBO6KACPCz3pmqj3wZyqZNTrG7IF2Z4Fuf641fPcxA3WVH 3lXz0L5Ep4jOUdfT8kj4hHxHJVJhDsW4J2fds2RGnn8bZG/QbmmGNRfqdxht0zMh 63ik8jBWNWHxYSRbck27FyTj9hDU+z+rFfIdNv1SiQ9FyndgOytK/m7ijoAetkSF bCsauzUL7DFdRzTmB2GCF/Zd957V51GNpvan6uwqDTL6T4NFX2sqoVduu/WIyTpO /6D2aA741CR3Bmk9945TSeDKZNz2HkihuE+d8ES68W1t4rvox/Noi74e0k35AqcQ Q3P0DZpD+XaRapz5CHcOPwOpZ3A/8wN2f+CS2HqDx8FwABkh7l8OdiIWs8+TDQZe 1x4e/50jE/8zMR/tsAy1EXkm3OTOVxih0u18J84x4OT+rHAIcoQ+TOJ40aHrWGHg kVCfiCUzYYT/W/RBAgMBAAGjEjAQMA4GA1UdDwEB/wQEAwIGwDANBgkqhkiG9w0B AQwFAAOCAYEAP/ABHdPquBNrMOCU+v7SfMLmIfJymA15mCorMEiKZ1d7oNnoPP0G pfyRA4TUiyFLCOLi4jIXWuu4Lt6RUz6bnzn8JRWD5ocIJGGxWjOA66xyS3o9iG7G otOh1pzp5wlwPG7r8ZJ7Q26J+NuHpN1GW5U5Vjww1J9rEKnsKp45QHkG2nXEujdx YXmKXtEG2gOMVjaLiqromf6VxbdNoKHZGEfqU3H5ymMgqIrnXl3MivA30CymCDLl rJGRQSwOfzywPCnUOAVptBwLs2kwOtdvnq+BTK3q/dKKoNiFURj/mQ70egquW9ly TOkYivmKqMZxZlq0//cre4K35aCW3ZArzGgNM8Pk0V/hZp8ZHrWLNAdo4w/Pj1oC Yq7R0RQ8jQerkewYBfrv3O3e9c22h48fsHnun6F3sbcDjws/sWJIOcrPyqJE26HY DmIKpvjqc0jI31ndBBwkb+RIBFkz1Ycob9rsW16uVqbjBFDjJ5QKOdXxhqulyboa JAF53vmU+1jE -----END CERTIFICATE-----","title":"3.16.7.1  Importing a SAML certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#31672-importing-a-privacyca-certificate","text":"Use OpenSSL to display the PrivacyCA certificate content: openssl x509 -in /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem Use the PrivacyCA certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:9443/kbs/v1/tpm-identity-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIIHaDCCBdCgAwIBAgIGAW72eWZ9MA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMT EG10d2lsc29uLXBjYS1haWswHhcNMTkxMjExMTkzOTQxWhcNMjkxMjEwMTkzOTQx WjAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlrMIIBojANBgkqhkiG9w0BAQEF AAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4YiHtueWBdW0sibtH1QRSbI KtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSUnn07xjWJRP1EcvSaufO1 MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwuattxTelpmgucDp98MqW/ uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337yx3VBK59Dwtsmfsrd5tMn IuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y3saXeNBDg9J363imOHIH haP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZloxJzcNgtimQw3RbyrB3C KijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwCQNnBP4UJXwAflO7COG7P mpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqvtTVtFX+oRWRsgaEdxKf7 LJx4aIjXwP2s6PIiOSalAgMBAAGjggOwMIIDrDCCAbMGA1UdDgSCAaoEggGmMIIB ojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4Yi HtueWBdW0sibtH1QRSbIKtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSU nn07xjWJRP1EcvSaufO1MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwu attxTelpmgucDp98MqW/uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337y x3VBK59Dwtsmfsrd5tMnIuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y 3saXeNBDg9J363imOHIHhaP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZl oxJzcNgtimQw3RbyrB3CKijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwC QNnBP4UJXwAflO7COG7Pmpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqv tTVtFX+oRWRsgaEdxKf7LJx4aIjXwP2s6PIiOSalAgMBAAEwDwYDVR0TAQH/BAUw AwEB/zCCAeAGA1UdIwSCAdcwggHTgIIBpjCCAaIwDQYJKoZIhvcNAQEBBQADggGP ADCCAYoCggGBAJlqga9mIsnGWxf0IBW8U6+GIh7bnlgXVtLIm7R9UEUmyCrZGxbJ q+iekIiwWl3BeylTeg2g9I+bFOHGUrbaisJUlJ59O8Y1iUT9RHL0mrnztTGq3sIA aRUHCNk+mk7Nc4le+waCs9JFrXlEc9Y09SksLmrbcU3paZoLnA6ffDKlv7lrJYh1 FcYedSUxNcp+1X9UAls92vjQx/fC4K+ZLN9+8sd1QSufQ8LbJn7K3ebTJyLlfScN GNlBHQ4tNOBVyOKuuDLDKVgO7eTjUQFPlTVNGN7Gl3jQQ4PSd+t4pjhyB4Wj/IsQ 4amfl2/0xmn4BXhBwZCU7+m1qQ6qHW1lQ24GZaMSc3DYLYpkMN0W8qwdwioo5RKO QUGOmznHTBu4Aqu+7v32zry2+SF80vGQ6cLsAkDZwT+FCV8AH5Tuwjhuz5qY/W01 dTrRYj7WBXOCXRnWn9T5ds1hnkdHNzyM2EMar7U1bRV/qEVkbIGhHcSn+yyceGiI 18D9rOjyIjkmpQIDAQABoR+kHTAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlr ggYBbvZ5Zn0wDQYJKoZIhvcNAQELBQADggGBAC3PEB8Av0PBJgrJMxzMbuf1FCdD AUrfYmP81Hs0/v70efviMEF2s3GAyLHD9v+1nNFCQrjcNCar18k45BlcodBEmxKA DZoioFykRtlha6ByVvuN6wD93KQbKsXPKhUp8X67fLuOcQgfc3BoDRlw/Ha1Ib6X fliE+rQzLCOgClK7ZdTwl9Ok0VbR7Mbal/xShIqr2WopjBtal9p4RsnIxilTHI+m qzbV8zvZXYfYtEb3MMMT5EnjIV8O498KKOjxohD2vqaxqItd58pOi6z/q5f4pLHc DvdsJecJEoWb2bxWQdBgthMjX6AUV/B5G/LTfaPwVbTLdEc+S6Nrobf/TFYV0pvG OzF3ltYag0fupuYJ991s/JhVwgJhCGq7YourDGkNIWAjt0Z2FWuQKnxWvmResgkS WTeXt+1HCFSo5WcAZWV8R9FYv7tzFxPY8aoLj82sgrOE4IwRqaA8KMbq3anF4RCk +D8k6etqMcNHFS8Fj6GlCd80mb4Q3sxuCiBvZw== -----END CERTIFICATE-----","title":"3.16.7.2  Importing a PrivacyCA Certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#317-installing-the-workload-policy-manager","text":"","title":"3.17  Installing the Workload Policy Manager"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3171-required-for","text":"The WPM is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Docker Containers)","title":"3.17.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3172-package-dependencies","text":"(Required only if Docker Container encryption is needed) Docker-ce 19.03.13 must be installed. This is needed only if the option WPM_WITH_CONTAINER_SECURITY=yes is set in the wpm.env answer file.","title":"3.17.2  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3173-supported-operating-systems","text":"The Intel\u00ae Security Libraries Workload Policy Manager supports Red Hat Enterprise Linux 8.2.","title":"3.17.3  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3174-recommended-hardware","text":"2 vCPUs RAM: 8 GB 100 GB One network interface with network access to the Key Broker and Workload Service Additional memory and disk space may be required depending on the size of images to be encrypted","title":"3.17.4  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3175-installation","text":"Copy the WPM installer to the /root directory Create the wpm.env answer file: KMS_API_URL = https://<IP address or hostname of the KBS>:9443/v1/ WPM_SERVICE_USERNAME = <WPM_Service username from populate-users script> WPM_SERVICE_PASSWORD = <WPM Service password from populate-users script> CMS_TLS_CERT_SHA384 = <Sha384 hash of the CMS TLS certificate> CMS_BASE_URL = https://<IP address or hostname for CMS>:8445/cms/v1/ AAS_API_URL = https://<Hostname or IP address of the AAS>:8444/aas BEARER_TOKEN = <Installation token from populate-users script> For Docker Container Encryption only, add the following line to the wpm.env installation answer file: WPM_WITH_CONTAINER_SECURITY = yes Execute the WPM installer: ./wpm-v3.3.1.bin","title":"3.17.5  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#4-authentication","text":"Beginning in the Intel\u00ae SecL-DC 1.6 release, authentication is centrally managed by the Authentication and Authorization Service (AAS). This service uses a Bearer Token authentication method, which replaces the previous HTTP BASIC authentication. This service also centralizes the creation of roles and users, allowing much easier management of users, passwords, and permissions across all Intel\u00ae SecL-DC services. To make an API request to an Intel\u00ae SecL-DC service, an authentication token is now required. API requests must now include an Authorization header with an appropriate token: Authorization: Bearer $TOKEN The token is issued by the AAS and will expire after a set amount of time. This token may be used with any Intel\u00ae SecL-DC service, and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for.","title":"4  Authentication"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#41-create-token","text":"To request a new token from the AAS: POST https://<AAS IP or hostname>:8444/aas/token { \"username\" : \"<username>\", \"password\" : \"<password>\" } The response will be a token that can be used in the Authorization header for other requests. The length of time for which the token will be valid is configured on the AAS using the key AAS\\_JWT\\_TOKEN\\_DURATION\\_MINS (in the installation answer file during installation) or aas.jwt.token.duration.mins (configured on the AAS after installation). In both cases the value is the length of time in minutes that issued tokens will remain valid before expiring.","title":"4.1  Create Token"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#42-user-management","text":"Users in Intel\u00ae SecL-DC are no longer restrained to a specific service, as they are now centrally managed by the Authentication and Authorization Service. Any user may now be assigned roles for any service, allowing user accounts to be fully defined by the tasks needed.","title":"4.2  User Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#421-username-and-password-requirements","text":"Passwords have the following constraints: cannot be empty - i.e must at least have one character maximum length of 255 characters Usernames have the following requirements: Format: username[@host_name[domain]] [@host_name[domain]] is optional username shall be minimum of 2 and maximum of 255 characters username allowed characters are alphanumeric, ., -, _ - but cannot start with -. Domain name must meet requirements of a host name or fully qualified internet host name Examples admin, admin_wls, admin@wls, admin@wls.intel.com , wls-admin@intel.com","title":"4.2.1  Username and Password requirements"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#422-create-user","text":"POST https://<IP or hostname of AAS>:8444/aas/users Authorization: Bearer <token> { \"username\" : \"<username>\", \"password\" : \"<password>\" }","title":"4.2.2  Create User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#423-search-user","text":"GET https://<IP or hostname of AAS>:8444/aas/users?<parameter>=<value> Authorization: Bearer <token>","title":"4.2.3  Search User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#424-change-user-password","text":"PATCH https://<IP or hostname of AAS>:8444/aas/users/changepassword Authorization: Bearer <token> { \"username\": \"<username>\", \"old_password\": \"<old_password>\", \"new_password\": \"<new_password>\", \"password_confirm\": \"<new_password>\" }","title":"4.2.4  Change User Password"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#425-delete-user","text":"DELETE https://<IP or hostname of AAS>:8444/aas/users/<User ID> Authorization: Bearer <token>","title":"4.2.5  Delete User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#43-roles-and-permissions","text":"Permissions in Intel\u00ae SecL-DC are managed by Roles. Roles are a set of predefined permissions applicable to a specific service. Any number of Roles may be applied to a User. While new Roles can be created, each Intel\u00ae SecL service defines permissions that are applicable to specific predetermined Roles. This means that only pre-defined Roles will actually have any permissions. Role creation is intended to allow Intel\u00ae SecL-DC services to define their permissions while allowing role and user management to be centrally managed on the AAS. When a new service is installed, it will use the Role creation functions to define roles applicable for that service in the AAS.","title":"4.3  Roles and Permissions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#431-create-role","text":"POST https://<AAS IP or Hostname>:8444/aas/roles Authorization: Bearer <token> { \"service\": \"<Service name>\", \"name\": \"<Role Name>\", \"permissions\": [<array of permissions>] } service field contains a minimum of 1 and maximum of 20 characters. Allowed characters are alphanumeric plus the special charecters -, _, @, ., , name field contains a minimum of 1 and maximum of 40 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , service and name fields are mandatory context field is optional and can contain up to 512 characters. Allowed characters are alphanumeric plus -, _, @, ., ,,=,;,:,* permissions field is optional and allow up to a maximum of 512 characters. The Permissions array must a comma-separated list of permissions formatted as resource:action: Permissions required to execute specific API requests are listed with the API resource and method definitions in the API documentation.","title":"4.3.1  Create Role"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#432-search-roles","text":"GET https://<AAS IP or Hostname>:8444/aas/roles?<parameter>=<value> Authorization: Bearer <token> Search parameters supported: Service=<name of service> Name=<role name> Context=<context> contextContains=<partial \"context\" string> allContexts=<true or false> filter=false","title":"4.3.2  Search Roles"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#433-delete-role","text":"DELETE https://<AAS IP or Hostname>:8444/aas/roles/<role ID> Authorization: Bearer <token>","title":"4.3.3  Delete Role"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#434-assign-role-to-user","text":"POST https://<AAS IP or Hostname>:8444/aas/users/<user ID>/roles Authorization: Bearer <token> { \"role_ids\": [\"<comma-separated list of role IDs>\"] }","title":"4.3.4  Assign Role to User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#435-list-roles-assigned-to-user","text":"GET https://<AAS IP or Hostname\\>:8444/aas/users/<user ID>/roles Authorization: Bearer <token>","title":"4.3.5  List Roles Assigned to User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#436-remove-role-from-user","text":"DELETE https://<AAS IP or Hostname>:8444/aas/users/<userID>/roles/<role ID> Authorization: Bearer <token>","title":"4.3.6  Remove Role from User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#437-role-definitions","text":"The following roles are created during installation (or by the CreateUsers script) and exist by default. Role Name Permissions Utility TA:Administrator TA:*:* Used by the Verification Service to access Trust Agent APIs, including retrieval of TPM quotes, provisioning Asset Tags and SOFTWARE Flavors, etc. HVS:ReportSearcher HVS: [reports:search:*\"] Used by the Integration Hub to retrieve attestation reports from the Verification Service KMS:Keymanager KBS: [\"keys:create:*\", \"keys:transfer:*\"] Used by the WPM to create and retrieve symmetric encryption keys to encrypt workload images WLS:FlavorsImageRetrieval WLS: image_flavors:retrieve:* Used by the Workload Agent during Workload Confidentiality flows to retrieve the image Flavor HVS: ReportCreator HVS: [\"reports:create:*\"] Used by the Workload Service to create new attestation reports on the Verification Service as part of Workload Confidentiality key retrievals. Administrator *:*:* Global administrator role used for the initial administrator account. This role has all permissions across all services, including permissions to create new roles and users. AAS: Administrator *:*:* Administrator role for the AAS only. Has all permissions for AAS resources, including the ability to create or delete users and roles. AAS: RoleManager AAS: [roles:create:*, roles:retrieve:*, roles:search:*, roles:delete:*] AAS role that allows all actions for Roles, but cannot create or delete Users or assign Roles to Users. AAS: UserManager AAS: [users:create:*, users:retrieve:*, users:store:*, users:search:*, users:delete:*] AAS role with all permissions for Users, but has no ability to create Roles or assign Roles to Users. AAS: UserRoleManager AAS: [user_roles:create:*, user_roles:retrieve:*, user_roles:search:*, user_roles:delete:*, AAS role with permissions to assign Roles to Users, but cannot create delete or modify Users or Roles. HVS: AttestationRegister HVS: [host_tls_policies:create:*, hosts:create:*, hosts:store:*, hosts:search:*, host_unique_flavors:create:*, flavors:search:*, tpm_passwords:retrieve:*, tpm_passwords:create:*, host_aiks:certify:* Role used for Trust Agent provisioning. Used to create the installation token provided during installation. HVS: Certifier HVS: host_signing_key_certificates:create:* Used for installation of the Workload Agent","title":"4.3.7  Role Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#5-connection-strings","text":"Connection Strings define a remote API resource endpoint that will be used to communicate with the registered host for retrieving TPM quotes and other host information. Connection Strings differ based on the type of host.","title":"5  Connection Strings"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#51-trust-agent","text":"The Trust Agent connection string connects directly to the Trust Agent on a given host. The Verification Service will use a service account with the needed Trust Agent permissions to connect to the Trust Agent. In previous Intel\u00ae SecL versions, each Trust Agent had its own unique user access controls. Starting in the 1.6 release, all authentication has been centralized with the new Authentication and Authorization Service, eliminating the need for credentials to be provided for connection strings connecting to Trust Agent resources. intel:https://<HostNameOrIp>:1443","title":"5.1  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#52-vmware-esxi","text":"","title":"5.2  VMware ESXi"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#521-importing-vmware-tls-certificates","text":"Before connecting to vCenter to register hosts or clusters, the vCenter TLS certificate needs to be imported to the Verification Service. This must be done for each vCenter server that the Verification Service will connect to, for importing Flavors or registering hosts. Download the root CA certs from vCenter: ```shell wget --no-proxy \"*\" https:// /certs/download.zip --no-check-certificate This downloads all the root CA certificates for you into `download.zip` file. ```shell unzip download.zip All of the certificates will be stored under <pwd>/certs/ . Certs will be in PEM format. Upload the certificates to the HVS POST https://%3CIP%3E:8443/hvs/v2/ca-certificates { \"name\": \"<cert name>\", \"type\": \"root\", \"certificate\": \"MIIELTCCAxW...\" } Note Please make sure that the certificate does not contain any other characters other than the base64 characters like that of \\n or -----BEGIN CERTIFICATE----- etc. After upload is successful, restart the HVS hvs restart","title":"5.2.1 Importing VMware TLS Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#522-registering-a-vmware-esxi-host","text":"The VMware ESXi connection string is actually directed to vCenter, not the actual ESXi host. Many ESXi hosts managed by the same vCenter server will use the same connection string. The username and password specified are vCenter credentials, and the vCenter \"Validate Session\" privilege is required for access. vmware:https://<vCenterHostNameOrIp>:443/sdk ; h = <hostname of ESXi host> ; u = <username> ; p = <password>","title":"5.2.2  Registering a VMware ESXi Host"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6-platform-integrity-attestation","text":"Platform attestation is the cornerstone use case for ISecL. Platform attestation involves taking measurements of system components during system boot, and then cryptographically verifying that the actual measurements taken matched a set of expected or approved values, ensuring that the measured components were in an acceptable or \" trusted \" state at the time of the last system boot. ISecL leverages the Trusted Compute Group specification for a trusted boot process, extending measurements of platform components to registers in a Trusted Platform Module, and securely generating quotes of those measurements from the TPM for remote comparison to expected values (attestation). This section includes basic REST API examples for these workflows. See the Javadoc for more detailed documentation on REST APIs supported by ISecL. Typical workflows in the datacenter might include: Creating a set of acceptable flavors for attestation with automatic flavor matching that represent the known-good measurements for acceptable BIOS and OS versions in the datacenter Registering hosts for attestation with automatic flavor matching Upgrading hosts in the datacenter to a new BIOS or OS version Removing hosts from the Verification Service Removing flavors Provisioning asset tags to hosts Invalidating asset tags Retrieving current attestation reports Retrieving current host state information Remediating an untrusted attestation","title":"6  Platform Integrity Attestation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61-host-registration","text":"Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report.","title":"6.1  Host Registration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#611-trust-agent","text":"","title":"6.1.1  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6111-registration-via-trust-agent-command-line","text":"The Trust Agent can register the host with a Verification Service by running the following command: tagent create-host <Verification Service base URL> <username> <password> Note : Because VMWare ESXi hosts do not use a Trust Agent, this method is not applicable for registration of ESXi hosts.","title":"6.1.1.1  Registration via Trust Agent Command Line"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#612-registration-via-verification-service-api","text":"Any Trust Agent or VMware ESXi host/cluster can be registered using a Verification Service API request. Registration can be performed with or without a set of existing Flavors. Rules for Flavor matching can be set by using the Flavor Group in the request; if no Flavor Group is specified, the mtwilson_automatic Flavor Group will be used. See the Flavor Management section for additional details on Flavors, Flavor Groups, and Flavor matching.","title":"6.1.2  Registration via Verification Service API"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6121-special-note-for-vmware-esxi-hosts-and-the-vcenter-tls-certificate","text":"","title":"6.1.2.1  Special Note for VMware ESXi Hosts and the vCenter TLS Certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6122-sample-call","text":"POST https://verification.service.com:8443/hvs/v2/hosts Authorization: Bearer <token> { \"host_name\": \"<hostname of host to be registered>\", \"connection_string\": \"<connection string>\", \"flavorgroup_name\" : \"\", \"description\" : \"<description>\" } Requires the permission hosts:create","title":"6.1.2.2  Sample Call"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6123-sample-call-for-esxi-cluster-registration","text":"POST https://verification.service.com:8443/hvs/v2/hosts Authorization: Bearer <token> { \" esxi_clusters\": [ { \"connection_string\": \"<password>\", \"cluster_name\": \"<cluster name>\" } ] } Requires the permission esxi_clusters:create","title":"6.1.2.3  Sample Call for ESXi Cluster Registration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#62-flavor-creation-for-automatic-flavor-matching","text":"Flavor creation is the process of adding one or more sets of acceptable measurements to the Verification Service database. These measurements correspond to specific system components, and are used as the basis of comparison to generate trust attestations. Flavors can be created manually, or can be imported from an example host. Flavors are automatically matched to hosts based on the Flavorgroup used by the host and the Flavors, and the Flavor Match Policies of the Flavorgroup. The ISecL Verification Service creates a default Flavorgroups during installation called \" automatic \" This Flavorgroup is configured to be used as a pool of all acceptable Flavors in a given environment, and will automatically match the appropriate Flavor parts to the correct host. This Flavorgroup is used by default and is expected to be useful for the majority of deployments. If no Flavorgroup is specified when creating a Flavor, it will be placed in the \" automatic \" Flavorgroup. Flavors are also divided into Flavor parts, which correspond to the PLATFORM , OS , HOST_UNIQUE , SOFTWARE , and ASSET_TAG measurements. These can be created and maintained separately (so that users can manage acceptable OS and BIOS versions, rather than entire host configurations). By default, if not specified, the Verification Service will import Flavors as separate Flavor parts, as appropriate for the host type. By using individual Flavor parts, individual versions of OS or PLATFORM measurements can be managed and automatically mapped. Whenever a host changes states (Untrusted, Connected, etc.) the Verification Service will attempt to match appropriate Flavors to that host. If a Flavor is removed or added, all appropriate hosts will be updated to use the new Flavor, or to no longer use the deleted Flavor. Hosts that are currently using a BIOS where that BIOS versions\u2019 PLATFORM Flavor was deleted will now appear Untrusted, for example. This can be used to easily flag as Untrusted hosts that are using software that has been End-Of-Lifed, or perhaps an OS kernel with a known security vulnerability. Note : See the Flavor Management section for additional details on how flavors can be managed, and how the Flavor matching engine works. The sample workflow provided here is intended to be an introduction only.","title":"6.2  Flavor Creation for Automatic Flavor Matching"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#621-importing-a-flavor-from-a-sample-host","text":"POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"PLATFORM\", \"OS\", \"HOST_UNIQUE\"], \"flavorgroup_names\": [] } Requires the permission flavors:create Note :The HOST_UNIQUE Flavor parts, used by Red Hat Enterprise Linux and VMWare ESXi host types, MUST be created for each registered host of that type, and should in general be imported from that host. This means that importing the HOST_UNIQUE flavor should always be done for each host registered. To import ONLY the HOST_UNIQUE Flavor part from a host: POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"HOST_UNIQUE\"], flavorgroup_names\": [] } Requires the permission flavors:create","title":"6.2.1  Importing a Flavor from a Sample Host"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#622-creating-a-flavor-manually","text":"Flavors can be directly created (rather than importing from a sample host) if the required information is known. If no Flavorgroup is specified, the Flavor will be placed in the automatic group. Note that the label is a required field and must be unique. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"\", \"flavor_collection\": { \"flavors\": [ { \"meta\": { \"vendor\": \"INTEL\", \"description\": { \"flavor_part\": \"PLATFORM\", \"label\": \"Intel Corporation_SE5C610.86B.01.01.1008.031920151331_TPM2.0\", \"bios_name\": \"Intel Corporation\", \"bios_version\": \"SE5C620.86B.00.01.0004.071220170215\", \"tpm_version\": \"2.0\" } }, \"hardware\": { \"processor_info\": \"\u2026\", \"processor_flags\": \"\u2026\", \"feature\": { \"tpm\": { \"enabled\": true, \"pcr_banks\": [ \"SHA1\", \"SHA256\" ] }, \"txt\": { \"enabled\": true } } }, \"pcrs\": { \"SHA1\": { \"pcr_0\": { \"value\": \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\": { \"value\": \"1ec12004b371e3afd43d04155abde7476a3794fa\", \"event\": ... } Requires the permission flavors:create","title":"6.2.2  Creating a Flavor Manually"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#63-creating-the-default-software-flavor-linux-only","text":"As part of the new Application Integrity feature added in Intel\u00ae SecL-DC version 1.5, a new default SOFTWARE Flavor part is provided so that the Linux Trust Agent itself can be measured and included in the attestation process. The default SOFTWARE Flavor includes a manifest for the static files and folders in the Trust Agent. The manifest is automatically deployed to each Linux Trust Agent during the provisioning step. Note : The Linux Trust Agent must be rebooted after the Provisioning step is completed (typically Provisioning happens during installation, based on whether all of the required variables are set in the trustagent.env file). Rebooting allows the default SOFTWARE Flavor manifest to be measured and extended to the TPM PCRs. If the reboot is not performed, the system will require a SOFTWARE Flavor, but the measurements will not exist, and the system will appear Untrusted. If an un-rebooted host is used to create the SOFTWARE Flavor, the Flavor will be created based on measurements that do not exist, and will fail. The SOFTWARE Flavor part should be created separately from the other Flavor parts. Only one default SOFTWARE Flavor needs to be created for each version of the Linux Trust Agent. If the SOFTWARE Flavor for the same Trust Agent version is imported multiple times, subsequent imports will fail as the Flavor already exists. To import the SOFTWARE Flavor part from a host: POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"SOFTWARE\"], flavorgroup_names\": [] } Requires the permission flavors:create","title":"6.3  Creating the Default SOFTWARE Flavor (Linux Only)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#64-creating-and-provisioning-asset-tags","text":"Asset Tags represent a set of key/value pairs that can be associated with a host in hardware. This enables usages around restricting workflows to specific hosts based on tags, which could include location information, compliance tags, etc. ISecL creates Asset Tags by creating a certificate containing the list of key/value pairs to be tagged to the host, with the host\u2019s hardware UUID as the certificate subject. A hash of this certificate is then written to an NVRAM index in the host\u2019s TPM. This value is included in TPM quotes, and can be attested using an Asset Tag flavor that matches up the expected value and the actual key/value pairs.","title":"6.4  Creating and Provisioning Asset Tags"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#641-creating-asset-tag-certificates","text":"Asset Tag certificates can be created with a single REST API call, with any number of key/value pairs. Note that one certificate must be created for each host to be tagged, even if they will all be tagged with identical key/value pairs. POST https://verification.service.com:8443/hvs/v2/tag-certificates Authorization: Bearer <token> { \"hardware_uuid\": \"<hardware UUID of host to be tagged>\", \"selection_content\": [ { \"name\": \"<key>\", \"value\": \"<value>\" }, { \"name\": \"<key>\", \"value\": \"<value>\" }, { \"name\": \"<key>\", \"value\": \"<value>\" } ] }","title":"6.4.1  Creating Asset Tag Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#642-deploying-asset-tags","text":"","title":"6.4.2  Deploying Asset Tags"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6421-red-hat-enterprise-linux","text":"Asset Tags can be provisioned to a Windows or RHEL host via a REST API request on the Verification Service that will in turn make a request to the Trust Agent on the host to be tagged. POST https://verification.service.com:8443/hvs/v2/rpc/deploy-tag-certificate Authorization: Bearer <token> { \"certificate_id\": \"<certificate ID>\" }","title":"6.4.2.1  Red Hat Enterprise Linux"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6422-vmware","text":"Since VMWare ESXi hosts do not use a Trust Agent, the process for writing Asset Tags to a VMWare host is different from RHEL. A new interface has been added to ESXi via a new esxcli command starting in vSphere 6.5 Update 2 that allows the Asset Tag information to be written to the TPM via a command-line command. The older process is also described below. The high-level workflow for using Asset Tags with VMWare ESXi is: Create the Asset Tag Certificate for the host. Calculate the Certificate Hash value. Provision the Certificate Hash value to the host TPM and reboot Create the Asset Tag Flavor. Note : Asset Tag is currently not supported for VMWare hosts using TPM 2.0.","title":"6.4.2.2  VMWare"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#64221-calculate-the-certificate-hash-value","text":"Only the hash value of the Asset Tag Certificate can be provisioned to the TPM, due to the low size of the NVRAM. Retrieve the Asset Tag Certificate. The Asset Tag Certificate can be retrieved either from the response when the Asset Tag certificate is created, or by using a GET API request to retrieve the certificate: GET https://verification.service.com:8443/hvs/v2/tag-certificates?subjectEqualTo=<HardwareUUID> Authorization: Bearer <token> Copy only the certificate value (this will be the certificate in encoded format) and write the data to a file on a Linux system. Remove any line breaks and save the file. Assuming the filename used is tag-cert use the following to generate the correct hash: cat tag-cert | base64 --decode | openssl dgst -sha1 | awk -F \" \" '{print $2}' This hash value will be what is actually written to the TPM NVRAM.","title":"6.4.2.2.1  Calculate the Certificate Hash Value"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#64222-provision-the-certificate-hash-to-the-host-tpm","text":"Due to a new feature added in vSphere 6.5 Update 2, the process for provisioning Asset Tags on VMWare ESXi hosts has been significantly improved. Both the old and new process for provisioning Asset Tags is documented below. Intel recommends using vSphere 6.5 Update 2 or later due to the significant difference in the process.","title":"6.4.2.2.2  Provision the Certificate Hash to the Host TPM"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#vsphere-65-update-2-or-later","text":"Starting in ESXi 6.5u2, you can now use SSH to write Asset Tags directly with no need for TPM clears, reboots, PXE, or BIOS access. SSH to the ESXi host using root credentials. Then use the command: ```shell esxcli hardware tpm tag set -d You can use the following command to verify that the tag was written: ```shell esxcli hardware tpm tag get Reboot the host. After rebooting, the TPM PCR 22 will have the measured value of the hash.","title":"vSphere 6.5 Update 2 or Later"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#vsphere-65-update-1-or-older","text":"There is no direct interface from VMWare vCenter or ESXi previous to vSphere 6.5 Update 2 that will write the Tag information to the host TPM. Writing Asset Tag information to a TPM requires TPM ownership; VMWare ESXi takes TPM ownership with a secret password at boot time. This means that the process for writing Asset Tags to a VMWare host requires: Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Booting to an OS that has the ability to issue TPM commands Typically the provisioning OS used is Ubuntu or RHEL, booted temporarily using PXE. Writing the Tag information The TPM index 0x40000010 must be defined, and the hash of the Asset Tag certificate must be written to that index. Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Boot back to VMWare ESXi. When the system is rebooted to ESXi, the Trusted Boot process will extend the value to PCR22, and this value can be used during attestation.","title":"vSphere 6.5 Update 1 or Older"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#64223-creating-the-asset-tag-flavor-vmware-esxi-only","text":"While for RHEL and Windows hosts the Asset Tag Flavor is automatically created during the Tag Provisioning step, for VMWare ESXi hosts the Flavor must be created by importing it from the host after the Tag has been provisioned. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<VMWare vCenter connection string>\", \"partial_flavor_types\": [\"ASSET_TAG\"] } Once the Asset Tag Flavor is imported, the host can be attested including Asset Tags as normal.","title":"6.4.2.2.3  Creating the Asset Tag Flavor (VMWare ESXi Only)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#65-retrieving-current-attestation-reports","text":"GET https://verification.service.com:8443/hvs/v2/reports?latestPerHost=true Authorization: Bearer <token>","title":"6.5  Retrieving Current Attestation Reports"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#66-retrieving-current-host-state-information","text":"GET https://verification.service.com:8443/hvs/v2/host-status?latestPerHost=true Authorization: Bearer <token>","title":"6.6  Retrieving Current Host State Information"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#67-upgrading-hosts-in-the-datacenter-to-a-new-bios-or-os-version","text":"Software and firmware updates are a common occurrence in the datacenter. Automatic Flavor matching makes this process relatively simple: Create a new Flavor for the new version. This may be manually created or imported directly from a sample host that has already received the upgrade. Be sure to create new Flavors for each TPM version represented in your datacenter. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"PLATFORM\", \"OS\", \"HOST_UNIQUE\"], flavorgroup_names\": [] } Update the hosts to the new software or firmware version as normal. On the next attestation attempt, the Verification Service will automatically match the updated hosts to the new Flavor. (Optional) If desired, delete the Flavor for the older version after the update is completed. This will cause any hosts that are still using the old version to attest as Untrusted. Which can easily flag hosts that missed the upgrade for remediation. DELETE https://verification.service.com:8443/hvs/v2/flavors/<flavorId> Authorization: Bearer <token>","title":"6.7  Upgrading Hosts in the Datacenter to a New BIOS or OS Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#68-removing-hosts-from-the-verification-service","text":"Hosts can be deleted at any time. Reports for that host will remain in the Verification Service database for audit purposes. DELETE https://verification.service.com:8443/hvs/v2/hosts/<hostId> Authorization: Bearer <token> The hostId can be retrieved either at the time the host is created, or by searching hosts using the host\u2019s hostname.","title":"6.8  Removing Hosts From the Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#69-removing-flavors","text":"Flavors can be deleted; this will cause any hosts that match the deleted Flavor to evaluate as Untrusted. This can be done if, for example, an old BIOS version needs to be retired and should no longer exist in the datacenter. By deleting the PLATFORM Flavor, hosts with the old BIOS version will attest as Untrusted, flagging them for easy remediation. DELETE https://verification.service.com:8443/hvs/v2/flavors/<flavorId>","title":"6.9  Removing Flavors"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#610-invalidating-asset-tags","text":"Asset Tags can be deleted in two ways. Deleting the ASSET_TAG Flavor part will retain the Asset Tag certificate in the database, but will cause the host using this Tag to no longer use the Asset Tag for attestation (the Tag result will be disregarded and no tags will be exposed in the attestation Reports). DELETE https://verification.service.com:8443/hvs/v2/flavors/<assetTagflavorId> Authorization: Bearer <token> Deleting the actual Asset Tag certificate will remove the certificate from the database, but will not actually affect attestation results (the authority for attestation results is the Flavor). DELETE https://verification.service.com:8443/hvs/v2/tag-certificates/<assetTagCertificateId> Authorization: Bearer <token>","title":"6.10 Invalidating Asset Tags"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#611-remediating-an-untrusted-attestation","text":"Hosts can become Untrusted for a wide variety of causes. The first clue to finding the root cause for an Untrusted attestation is the attestation Report itself \u2013 the Report will show Trust results for the PLATFORM , OS , HOST_UNIQUE , and ASSET_TAG Flavor parts individually, along with the OVERALL trust. If the Report shows that the PLATFORM Flavor part trust is \u201cfalse\u201d for example, it means that the PLATFORM measurements did not match any Flavors in the host\u2019s Flavorgroup. Untrusted attestation Reports will contain faults that describe the specific attestation rules that were not satisfied. This often shows enough information to describe the cause of the Untrusted status. A fault like RequiredButNotDefined means that a Flavor part is required by the Flavorgroup policy, but no Flavors for that Flavor part exist in the Flavorgroup (for example, generally Flavorgroups should always require a PLATFORM Flavor part; if no PLATFORM Flavors are in the Flavorgroup, hosts in the Flavorgroup will attest with this fault). Other faults include: \"PcrMatchesConstant\" - describes a rule that evaluates whether a TPM PCR has a specific value \"PcrEventLogIntegrity\" - the module event log is replayed during attestation to verify that the resulting measurement matches the actual value in the module PCR. If the replay does not match, it indicates the event log cannot itself be trusted. \"AikCertificateTrusted\" \u2013 This rule evaluates whether the TPM quote was signed by the TPM associated with this host. As part of host registration, the public half of the Attestation Identity Keypair is captured, and this public key is used to verify the signature on TPM quotes from that host. See the Appendix for a full list of the rules evaluated during Attestation. The Flavor matching engine will use the most-similar Flavor for the attestation Report in the case of an Untrusted result. The fault will explain in a general sense what rule the host attestation violated. To remediate, the rule will need to be satisfied. This could mean creating a new Flavor to match the actual observed values, or it could mean that the host has been tampered with and should have its BIOS flashed or OS reloaded.","title":"6.11  Remediating an Untrusted attestation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#612-attestation-reporting","text":"Attestation results are delivered in the form of Host Reports. A Report can delivered in several different formats, which can change the type of data returned. The preferred format for Host Reports is a SAML attestation. A SAML-formatted report includes a chain or signatures that provides auditability for the Report. The SAML attestation will include the base trust status of the host, as well as the overall trust for each individual Flavor used in the attestation. The Report will also contain host information, such as TPM version, Operating System name and version, BIOS version, etc. The SAML Report will not, however, contain individual measurements and comparisons of values. This format of the Report is ideal for securely communicating the trust status of a host and for audit history. Attestation Reports can also be retrieved in json or xml format. These formats will not include the signature chain provided in the SAML format, but will contain the actual measurement values and expected Flavor values used for comparison. These reports are typically used for remediation, because they will show specifically why a given Host attested as Untrusted. The format for a Report is determined by the Accept header in the request. Attestations are automatically generated in the Verification Service by a repeating scheduled background process. This process looks for Attestation Reports that are close to expiration, and triggers a new Attestation Report. By default, Attestation Reports are valid for 90 minutes, and the background refresh process will trigger a new attestation when a Report is found to be within 3 minutes of expiration. A user can either retrieve the most recent currently valid Attestation Report for a given host, or may trigger a new Attestation Report to be generated. Typically, it is best to retrieve an existing Report for performance reasons. Generating a new Attestation Report requires the generation of a new TPM quote from the TPM of the host being attested; TPM performance differs greatly between vendors, and a quote can take anywhere between 2-7 seconds to generate.","title":"6.12  Attestation Reporting"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6121-sample-call-generating-a-new-attestation-report","text":"POST https://verification.service.com:8443/hvs/v2/reports Authorization: Bearer <token> { \"host_name\":\"host-1\" } Requires the permission reports:create","title":"6.12.1  Sample Call \u2013 Generating a New Attestation Report"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6122-sample-call-retrieving-an-existing-attestation-report","text":"GET https://verification.service.com:8443/hvs/v2/reports?hostName=HostName.server.com Authorization: Bearer <token> Below are the supported criteria options in order of precedence. If no host filter criteria is specified, then results are returned for all active hosts. id - unique UUID of the report entry in the database hostId - unique UUID of the host entry in the database hostName - name of the host hostHardwareId - hardware UUID of the host hostStatus - current state of the host, which supports the following options: CONNECTED - host is in connected state QUEUE - host is in queue to be processed CONNECTION_FAILURE - connection failure UNAUTHORIZED - unauthorized AIK_NOT_PROVISIONED - AIK certificate is not provisioned EC_NOT_PRESENT - endorsement certificate is not present MEASURED_LAUNCH_FAILURE - TXT measured launch failure TPM_OWNERSHIP_FAILURE - TPM ownership failureTPM_NOT_PRESENT - TPM is not present UNSUPPORTED_TPM - unsupported TPM version UNKNOWN - unknown host state Requires the permissions reports:search Other search criteria may also be used. By default, the most recent currently valid attestation is returned. However, different query parameters can be used to retrieve all attestations for a specific host over the last 30 days, for example.","title":"6.12.2  Sample Call \u2013 Retrieving an Existing Attestation Report"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#613-integration","text":"Intel\u00ae SecL can be integrated with scheduler services (or potentially other services) to provide additional security controls. For example, by integrating Intel\u00ae SecL with the OpenStack scheduler service, the OpenStack placement service can incorporate the Intel\u00ae SecL security attributes into VM scheduling.","title":"6.13  Integration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6131-the-integration-hub","text":"The Integration Hub acts as the integration point between the Verification Service and a third party service. The primary purpose of the Hub is to collect and maintain up-to-date attestation information, and to \u201cpush\u201d that information to the external service. The secondary purpose is to allow for multitenancy, the Verification Service does not allow for permissions to be applied for specific hosts, so a user with the \u201cattestation\u201d role can access all attestations for all hosts. By using separate Integration Hub instances for each Cloud environment (or \"tenant\"), the Hub will push attestations only for the associated hosts to a given tenant\u2019s integration endpoints. For example, Tenant A is using hosts 1-10 for an OpenStack environment. Tenant B is using hosts 11-15 for a Docker environment. Two Hub instances must be configured, one managing tenant A's OpenStack cluster and a second instance managing Tenant B's Docker environment. Each integration Hub will automatically retrieve the list of hosts used by its configured orchestration endpoint, retrieve the attestation reports only for those hosts, and push the attestation attribute information to each configured endpoint. Neither tenant will have access to the Verification Service, and will not be able to see attestation or other host details regarding infrastructure used by other tenants. Different integration endpoints can be added to the Integration Hub through a plugin architecture. By default, the Attestation Hub includes plugins for OpenStack and Kubernetes (Kubernetes deployments require the additional installation of two Intel\u00ae SecL-DC Custom Resource Definitions on the Kube Control Plane).","title":"6.13.1  The Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6132-integration-with-openstack","text":"Starting in the Rocky release, OpenStack can now use \u201cTraits\u201d to provide qualitative data about Nova Compute hosts, and to establish Trait requirements for VM instances. The updated scheduler will place VMs requiring a given Trait on Nova Compute nodes that meet the Trait requirements. Intel SecL-DC uses the Integration Hub to continually push platform integrity and Asset Tag information to the OpenStack Traits resources. This means the OpenStack scheduler natively supports workload scheduling incorporating Intel SecL-DC security attributes, including attestation report Trust status and Asset Tags. The OpenStack Placement Service will automatically attempt to place images with Trait requirements on compute nodes that have those Traits. NOTE : This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices.","title":"6.13.2  Integration with OpenStack"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61321-prerequisites","text":"Verification Service must be installed and running. OpenStack* Rocky (or later) Nova, Glance, Horizon, and Keystone services must be installed and running The Integration Hub must be installed and running.","title":"6.13.2.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61322-setting-image-traits","text":"Image Traits define the policy for which Traits are required for that Image to be launched on a Nova Compute node. By setting these Traits to \u201crequired,\u201d the OpenStack scheduler will require these same Traits to be present on a Nova Compute node in order to launch instances of the image. To set the Image Traits for Intel SecL-DC, a specific naming convention is used. This naming convention will match the Traits that the Integration Hub will automatically push to OpenStack. Two types of Traits are currently supported \u2013 one Trait is used to require that the Compute Node be Trusted in the Attestation Report, and the other Trait is used to require specific Asset Tag key/value pairs. To require a Trusted Attestation Report: CUSTOM_ISECL_TRUSTED=required The naming convention for Asset Tags is more flexible, and any number of these Traits can be used simultaneously. Note : All of the Traits must be present on the Compute Node for the scheduler to allow instances to land, so be sure not to set mutually exclusive Asset Tag values. CUSTOM_ISECL_AT_TAG_<key>__<value>=required` For example, to define a Trait that will require an Asset Tag where State = CA use the following: CUSTOM_ISECL_AT_TAG__STATE_CA= required These Traits can be set using CLI commands for OpenStack Glance: openstack image set --property trait:CUSTOM_ISECL_AT_STATE__CA = required <image_name> openstack image set --property trait:CUSTOM_ISECL_TRUSTED = required <image_name> To remove a Trait so that it is no longer required for an Image: openstack image unset --property trait:CUSTOM_ISECL_AT_STATE__CA <image_name> openstack image unset --property trait:CUSTOM_ISECL_TRUSTED <image_name>","title":"6.13.2.2  Setting Image Traits"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61323-configuring-the-integration-hub-for-use-with-openstack","text":"The Integration Hub must be configured with the API URLs and credentials for the OpenStack instance it will integrate with. This can be done during installation using the \"OPENSTACK_...\" variables shown in the ihub.env answer file sample (see the Installing the Integration Hub section). However, this configuration can also be performed after installation using CLI commands: ihub setup openstack --endpoint-url=\"http://openstack:5000/v3\" --endpoint-user=\"username\" --endpoint-pass=\"password\" Restart the Integration Hub after configuring the endpoint. Note that \"endpoint name\" should be replaced with any user-friendly name for the OpenStack instance you would prefer.","title":"6.13.2.3  Configuring the Integration Hub for Use with OpenStack"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61327-scheduling-instances","text":"Once Trait requirements are set for Images and the Integration Hub is configured to push attributes to OpenStack, instances can be launched in OpenStack as normal. As long as the OpenStack Nova scheduler is used to schedule the workloads, only compliant Compute Nodes will be scheduled to run instances of controlled Images. NOTE : This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices.","title":"6.13.2.7  Scheduling Instances"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6133-integration-with-kubernetes","text":"Through the use of Custom Resource Definitions for the Kubernetes Control Plane, Intel\u00ae Security Libraries can make Kubernetes aware of Intel\u00ae SecL security attributes and make them available for pod orchestration. In this way, a security-sensitive pod can be launched only on Trusted physical worker nodes, or on physical worker nodes that match specified Asset Tag values. NOTE : This control only applies to pods launched using the Kubernetes scheduler, and these scheduling controls will not affect manually-launched instances where a specific worker node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing Kubernetes interfaces and does not modify Kubernetes code, using only the standard Custom Resource Definition mechanism to add this functionality to the Kubernetes Control Plane. The datacenter owner or Kubernetes administrator is responsible for the security of the Kubernetes workload scheduling process in general, and Intel recommends following published Kubernetes security best practices.","title":"6.13.3  Integration with Kubernetes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61331-prerequisites","text":"Verification Service must be installed and running. Kubernetes Control Plane Node must be installed and running The supported Kubernetes versions are from 1.14.8 - 1.17.3 and the integration is validated with 1.14.8 and 1.17.3 Kubernetes Worker Nodes must be configured as physical hosts and attached to the Control Plane Node","title":"6.13.3.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61332-installing-the-intel-secl-custom-resource-definitions","text":"Intel\u00ae SecL uses Custom Resource Definitions to add the ability to base orchestration decisions on Intel\u00ae SecL security attributes to Kubernetes. These CRDs allow Kubernetes administrators to configure pods to require specific security attributes so that the Kubernetes Control Plane Node will schedule those pods only on Worker Nodes that match the specified attributes. Two CRDs are required for integration with Intel\u00ae SecL \u2013 an extension for the Control Plane nodes, and a scheduler extension. A single installer will deploy both of these CRDs. The extensions are deployed as a Kubernetes deployment in the isecl namespace. To deploy the Kubernetes integration CRDs for Intel\u00ae SecL: Copy the isecl-k8s-extensions installer to the Kubernetes Control Plane Node and execute the installer ./isecl-k8s-extensions-v3.3.1.bin Add a mount path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - mountPath : /opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ name : extendedsched readOnly : true Add a volume path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - hostPath : path : /opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ type : \"\" name : extendedsched Add policy-config-file path in the /etc/kubernetes/manifests/kube-scheduler.yaml file under command section: - command : - kube-scheduler - --policy-config-file=/opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/scheduler-policy.json - --bind-address=127.0.0.1 - --kubeconfig=/etc/kubernetes/scheduler.conf - --leader-elect=true Wait for the isecl-controller and isecl-scheduler pods to be into running state shell kubectl get pods -n isecl Create role bindings on the Kubernetes Control Plane Node: kubectl create clusterrolebinding isecl-clusterrole --clusterrole=system:node --user=system:serviceaccount:isecl:isecl kubectl create clusterrolebinding isecl-crd-clusterrole --clusterrole=isecl-controller --user=system:serviceaccount:isecl:isecl Copy the Integration Hub public key to the Kubernetes Control Plane Node: scp -r /etc/ihub/ihub_public_key.pem k8s.maseter.server:/opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ Run the command systemctl restart kubelet to restart all the control plane container services, including the base scheduler. The scheduler yaml is present under /opt/isecl-k8s-extensions/yamls/isecl-scheduler.yaml If the Controller and/or Scheduler deployments are deleted, the following steps need to be performed: a. Edit /etc/kubernetes/manifests/kube-scheduler.yaml and remove/comment the following content and restart kubelet \u200b --policy-config-file=/opt/isecl-k8s-extensions/isecl-k8sscheduler/config/scheduler-policy.json \u200b systemctl restart kubelet b. Redeploy scheduler and controller kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-scheduler.yaml c. Edit /etc/kubernetes/manifests/kube-scheduler.yaml and add/uncomment the following content and restart kubelet \u200b --policy-config-file=/opt/isecl-k8s-extensions/isecl-k8sscheduler/config/scheduler-policy.json \u200b systemctl restart kubelet d. Logs will be appended to older logs in /var/log/isecl-k8s-extensions Whenever the CRD's are deleted and restarted for updates, the CRD's using the yaml files present under /opt/isecl-k8s-extensions/yamls/ . Kubernetes Version 1.14-1.15 uses crd-1.14.yaml and 1.16-1.17 uses crd-1.17.yaml kubectl delete hostattributes.crd.isecl.intel.com kubectl apply -f /opt/isecl-k8s-extensions/yamls/crd-<version>.yaml (Optional) Verify that the Intel \u00ae SecL Custom Resource Definitions have been started: To verify the Intel SecL CRDs have been deployed: kubectl get crds","title":"6.13.3.2  Installing the Intel\u00ae SecL Custom Resource Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61333-configuring-the-integration-hub-for-use-with-kubernetes","text":"The Integration Hub should be installed after the Intel SecL CRDs have already been installed on the Kubernetes Control Plane. If the Hub has already been installed without an available tenant endpoint, the installer can simply be rerun with a modified ihub.env answer file containing the required tenant variables. The ihub.env answer file requires two variables to be configured with information from the Kubernetes environment before installation: KUBERNETES_CERT_FILE=/etc/ihub/apiserver.crt This file can be copied from the Kuberetes Control Plane Node, and can be found at the following path: /etc/kubernetes/pki/apiserver.crt KUBERNETES_TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... This token can be retrieved from Kubernetes using the following command: kubectl get secrets -n isecl -o jsonpath=\"{.items[?(@.metadata.annotations['kubernetes\\.io/service-account\\.name']=='default')].data.token}\"|base64 --decode See section 3.15.7 on Installing the Integration Hub. Use the following variables in the ihub.env answer file: # Authentication URL and service account credentials AAS_API_URL=https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME=<Username for the Hub service user> IHUB_SERVICE_PASSWORD=<Password for the Hub service user> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL=https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384=<TLS hash> # TLS Configuration TLS_SAN_LIST=127.0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL=https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE=HVS # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL=https://kubernetes:6443/ KUBERNETES_CRD=custom-isecl KUBERNETES_CERT_FILE=/etc/ihub/apiserver.crt KUBERNETES_TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026","title":"6.13.3.3   Configuring the Integration Hub for Use with Kubernetes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61336-configuring-pods-to-require-intel-secl-attributes","text":"(Optional) Verify that the worker nodes have had their Intel\u00ae SecL security attributes populated: kubectl get nodes --show-labels The output should show the Trust staus and any Asset Tags applied to all of the registered Worker Nodes. Add the following to any Pod creation files: spec : affinity : nodeAffinity : requiredDuringSchedulingIgnoredDuringExecution : nodeSelectorTerms : - matchExpressions : - key : isecl.trusted operator : In values : - \"true\" - key : isecl.TAG_Country operator : In values : - CA - US - key : isecl.TAG_Customer operator : In values : - Coke - Pepsi - key : isecl.TAG_State operator : In values : - CA The isecl.trusted key defines the requirement for a Trusted host. Only one of these keys should be used. The isecl.TAG_ keys indicate Asset Tags; if the workload should only launch on hosts with the COUNTRY=US Asset Tag, the pod should be launched with the matchExpression key isecl.TAG_COUNTRY with the value US . All of the matchExpression definitions must be true for a given worker node to launch the pod \u2013 in the example above, the host must be attested as Trusted with Asset Tags Country=US , Customer=Customer1 and State=CA . If the worker node has additional Asset Tags beyond the ones required, the pod will still be able to be launched on that node. However, if one of the specified Tags is missing or has a different value, that worker node will not be used for that pod.","title":"6.13.3.6  Configuring Pods to Require Intel\u00ae SecL Attributes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61337-tainting-untrusted-worker-nodes","text":"Optionally, the Intel\u00ae SecL Kubernetes CRDs can be configured to flag worker nodes as tainted to prevent any pods from launching on them. This restriction is applied regardless of whether the pod has a specific trust policy \u2013 if a worker node is flagged as tainted no pods will be launched on that worker. This setting is disabled by default. To enable this setting: Edit the isecl-controller.yaml file under /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml and set TAINT_UNTRUSTED_NODES=true Run kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml Worker nodes that attest as untrusted will be tainted with the NoExecute flag and unable to launch pods. If a worker was previously considered tainted and the untrusted state is resolved, the Intel\u00ae SecL CRDs will remove the tainted flag and the worker will be able to launch pods again.","title":"6.13.3.7  Tainting Untrusted Worker Nodes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7-workload-confidentiality","text":"Workload Confidentiality builds upon Platform Attestation to protect data in virtual machine and container images. At its core, this feature is about allowing an image owner to set policies that define the conditions under which their image will be allowed to run; if the policy conditions are met, the decryption key will be provided, and if the conditions are not met, the image will remain encrypted and inaccessible. This provides a level of enforcement beyond integration with orchestrators, and protects sensitive data when the image is at rest. Workload Encryption relies on Platform Attestation to define the security attributes of hosts. When a protected image is launched, the Workload Agent on the host launching the VM or container image will detect the attempt (using either Libvirt hooks for VMs, or as a function of the Docker Secure Overlay Driver in the case of containers) and use the Image ID to find the Image Flavor on the Workload Service. The Workload Service will retrieve the current trust report for the host launching the image, and use that report to make a key retrieval request to the key transfer URL retrieved from the image flavor. The key transfer URL refers to the URL to the image owner\u2019s Key Broker Service, along with the ID of the key needed. In a typical production deployment, a Cloud Service Provider would enable Intel\u00ae SecL-DC security controls by installing the Intel\u00ae SecL-DC applications (with the exception of the Key Broker and Workload Policy Manager), and configuring each workload host to be Trusted (as per the Platform Integrity Attestation use case). The owner of the workload image(s) to be protected (for example, the end customer of the CSP) must install a Key Broker Service (which must be available for network communication from the Workload Service hosted on the CSP), the Workload Policy Manager, and their own Authentication and Authorization Service and Certificate Management Service (these will manage authentication and certificates for the KBS and WPM). Any number of image owner customers with their own unique KBS/WPM/AAS/CMS deployments may protect images that can be run by a single CSP deployment. The image owner will use the WPM to encrypt any image(s) to be protected; the WPM will automatically create a new image encryption key using the KBS, and will output the encrypted image and an Image Flavor. The image owner can then upload the encrypted image to the CSP\u2019s image storage service, and then upload the Image Flavor to the CSP-hosted WLS. When a compute host at the CSP attempts to launch a protected image, the WLA on the host will detect the launch request, and will issue a key transfer request to the WLS. The WLS will use the image ID to retrieve the Image Flavor, which contains the key retrieval URL for that image. This URL is hosted on the KBS of the image owner (which is why the KBS must be available to network requests from the WLS). The WLS will access the HVS to retrieve the current Platform Integrity Attestation report for the host, and will use this report to make a key transfer request to the KBS at the key transfer URL. The KBS will receive the request, verify that the Platform Integrity Attestation report is signed using a known SAML signing key (verifying that the report comes from a known and trusted HVS), and will then verify that the report shows that the host is trusted. If these requirements are met, the KBS will use the host\u2019s Binding Key (the public half of an asymmetric keypair generated by the host\u2019s TPM and included in the attestation report) as a Key Encryption Key to seal the Image Encryption Key to the TPM of the host that was attested. When the host receives the response to the key request, it will unseal the Image Encryption Key using its TPM. Because the Key Encryption Key is unique to this host\u2019s TPM, only the actual host that was attested will be able to gain access to the image. With the Image Encryption Key, the host\u2019s WLA will create the appropriate encrypted volume(s) for the image and begin the launch as normal. The WLA does not retain the key on disk; if/when the host is rebooted or the WLA is restarted, restarting the workloads based on protected images will trigger new key requests based on new Platform Integrity Attestation reports. In this way, if a host is compromised in a method detectable by the Platform Integrity feature, protected images will be unable to launch on this server.","title":"7  Workload Confidentiality"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#71-virtual-machine-confidentiality","text":"","title":"7.1  Virtual Machine Confidentiality"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#711-prerequisites","text":"To enable Virtual Machine Confidentiality, the following Intel\u00ae SecL-DC components must be installed and available: Authentication and Authorization Service Certificate Management Service Key Broker Service Host Verification Service Workload Service Trust Agent + Workload Agent (on each virtualization host) Workload Policy Manager See the Installation subsection on Recommended Service Layout for recommendations on how/where to install each service. It is strongly recommended to use a VM orchestration solution (for example, OpenStack) with the Intel\u00ae SecL-DC Integration Hub to schedule encrypted workloads on compute hosts that have already been pre-checked for their Platform Integrity status. See the Platform Integrity Attestation subsection on Integration with OpenStack for an example. You will need at least one QCOW2-format virtual machine image (for quick testing purposes, a very small minimal premade image like CirrOS is recommended; a good place to look for testing images is the OpenStack Image Guide found here: https://docs.openstack.org/image-guide/obtain-images.html ). One or more hypervisor compute nodes running QEMU/KVM is required. Each of these nodes must have the Intel\u00ae SecL-DC Trust Agent and Workload Agent installed, and they must be registered with the Verification Service. Each of these servers should show as trusted see the Platform Integrity Attestation section for details. You should have Flavors that match the system configuration for these hosts, and attestation reports should show all Flavor parts as trusted=true Hosts that are not trusted (including servers where there is no trust status, like hosts with no Trust Agent) will fail to launch any encrypted workloads.","title":"7.1.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#712-workflow","text":"","title":"7.1.2  Workflow"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7121-encrypting-images","text":"wpm create-image-flavor -l <user-friendly unique label> -i <path to image file> -e <output path and filename for encrypted image> -o <output path for JSON image flavor> ` After generating the encrypted image with the WPM, the encrypted image can be uploaded to the Image Storage service of choice (for example, OpenStack Glance). Note that the ID of the image in this Image Storage service must be retained and used for the next steps.","title":"7.1.2.1  Encrypting Images"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7122-uploading-the-image-flavor","text":"POST https://<Workload Service IP or Hostname>:5000/wls/flavors Authorization: Bearer <token> {<Image Flavor content from WPM output>} Use the above API request to upload the Image Flavor to the WLS. The Image Flavor will tell other Intel\u00ae SecL-DC components the Key Transfer URL for this image.","title":"7.1.2.2  Uploading the Image Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7123-creating-the-image-flavor-to-image-id-association","text":"The WLS needs to know the ID of the image as it exists in the image storage service used by the CSP (for example, OpenStack Glance). Use the below API request to create an association between the Image Flavor created in the previous step and the image ID. POST https://<Workload Service IP or Hostname>:5000/wls/images Authorization: Bearer <token> { \"id\": \"<image ID on image storage>\", \"flavor_ids\": [\"<Image Flavor ID>\"] }","title":"7.1.2.3  Creating the Image Flavor to Image ID Association"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7124-launching-encrypted-vms","text":"Instances of the protected images can now be launched as normal. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the VM is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided.","title":"7.1.2.4  Launching Encrypted VMs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#72-container-confidentiality","text":"","title":"7.2  Container Confidentiality"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#721-container-integrity-and-confidentiality-with-docker","text":"","title":"7.2.1  Container Integrity and Confidentiality with Docker"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7211-docker-container-integrity","text":"Intel\u00ae recommends using Docker Notary to verify the integrity of Docker container images at launch. https://docs.docker.com/notary/getting_started/","title":"7.2.1.1  Docker Container Integrity"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7212-prerequisites","text":"To enable Docker Container Confidentiality, the following Intel\u00ae SecL-DC components must be installed and available: Authentication and Authorization Service Certificate Management Service Key Broker Service Host Verification Service Workload Service Trust Agent + Workload Agent (on each Docker host) Workload Policy Manager See the Installation subsection on Recommended Service Layout for recommendations on how/where to install each service. It is strongly recommended to use a container orchestration solution (for example, Kubernetes) with the Intel\u00ae SecL-DC Integration Hub to schedule encrypted Docker containers on compute hosts that have already been pre-checked for their Platform Integrity status. See the Platform Integrity Attestation subsection on Integration with Kubernetes for an example. You will need at least one Docker container image. For quick testing purposes, any small public image can be used. Some examples can be found here: https://github.com/jessfraz/dockerfiles/ Image names: Openvpn k8scan postfix One or more Docker container worker nodes running Docker 19.03 is required. Each of these nodes must have the Intel\u00ae SecL-DC Trust Agent and Workload Agent installed, and they must be registered with the Verification Service. Each of these servers should show as \u201ctrusted;\u201d see the Platform Integrity Attestation section for details. You should have Flavors that match the system configuration for these hosts, and attestation reports should show all Flavor parts as \u201ctrusted=true.\u201d Hosts that are not trusted (including servers where there is no trust status, like hosts with no Trust Agent) will fail to launch any encrypted workloads. Important Note: Docker version 19.03.13 is specifically required, and other versions are not supported. Installation of the Workload Agent for Docker Container Confidentiality will replace the existing Docker binaries (the client and daemon, in /usr/bin/dockerd and /usr/bin/docker) with a recompiled Docker engine that includes the Secure Overlay Driver. This is what allows the launch of encrypted containers to be intercepted and decrypted. The Docker runtime must not be upgraded or downgraded to any other version; doing so will cause encrypted Docker Containers to fail to launch. In the future, the Container Encryption feature will be modified to use OCI-standard container encryption without the need for recompilation or file replacement.","title":"7.2.1.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7213-workflow","text":"","title":"7.2.1.3  Workflow"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#72131-encrypting-docker-container-images","text":"The first step is encryption of a Docker Container image. The WPM is a command line utility that will perform the actual image encryption and allow the resulting encrypted image to be uploaded to a Docker Registry. The commands needed are slightly different depending on whether Notary is being used to validate container integrity. If Notary is not being used: wpm create-container-image-flavor -i <container image name> -t <tag-name> -e -f <Dockerfile Path> -d <dirPath> -o <output path for JSON image flavor> If Notary is being used: wpm create-container-image-flavor -i <imageName> -t <TagName> -e -s -n https://<notaryIP>:<notaryPort>/ -f <Dockerfile Path> -d <dirPath> Also, if Notary is being used, set the following environment variable before uploading the image to the Registry: export DOCKER_CONTENT_TRUST=1 After generating the encrypted image with the WPM, the encrypted image can be uploaded to a local Docker Registry.","title":"7.2.1.3.1  Encrypting Docker Container Images"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#72132-uploading-the-image-flavor","text":"POST https://<Workload Service IP or Hostname>:5000/wls/flavors Authorization: Bearer <token> {<Image Flavor content from WPM output>} Use the above API request to upload the Image Flavor to the WLS. The Image Flavor will tell other Intel\u00ae SecL-DC components the Key Transfer URL for this image.","title":"7.2.1.3.2  Uploading the Image Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#72133-creating-the-image-flavor-to-image-id-association","text":"For Docker images stored in a Docker Registry, the ID is typically an MD5 hash. This format must be converted for use with the Workload Service. To get the non-truncated ID of the image, use the Docker command: docker images --no-trunc Next, convert this to a UUID that can be used by Intel\u00ae SecL: wpm get-container-image-id <image-full-md5id> The output will be a UUID, which will be considered the ID of the image for the WLS. Use the below API request to create an association between the Image Flavor created in the previous step and the image ID. POST https://<Workload Service IP or Hostname>:5000/wls/images Authorization: Bearer <token> { \"id\": \"<image ID on image storage>\", \"flavor_ids\": [\"<Image Flavor ID>\"] }","title":"7.2.1.3.3  Creating the Image Flavor to Image ID Association"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#72134-launching-encrypted-docker-containers","text":"Containers of the protected images can now be launched as normal using Kubernetes pods and deployments. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the Docker Container is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided.","title":"7.2.1.3.4  Launching Encrypted Docker Containers"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#722-container-confidentiality-with-cri-o-and-skopeo","text":"","title":"7.2.2  Container Confidentiality with Cri-o and Skopeo"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7221-prerequisites","text":"Container Confidentiality with Cri-o and Skopeo requires modified versions of both Cri-o and Skopeo. Both of these are automatically built with the Intel SecL build scripts, and can be found here after the script has executed: isecl/cc-crio/binaries/ Skopeo The patched version of Skopeo 0.1.41-dev must be installed on each Worker Node: https://github.com/lumjjb/skopeo/tree/sample_integration . The Skopeo wrapper that allows Skopeo to interface with the ISecL components must be installed on each Worker Node: https://github.com/lumjjb/skopeo/blob/sample_integration/vendor/github.com/lumjjb/seclkeywrap/keywrapper_secl.go . Copy the Skopeo wrapper into /usr/bin: cp isecl/cc-crio/binaries/skopeo /usr/bin/skopeo Add the following to the crio.service definition to always start Cri-o with the Intel SecL policy parameters enabled: vi /usr/local/lib/systemd/system/crio.service ExecStart=/usr/local/bin/crio \\ $CRIO_CONFIG_OPTIONS \\ $CRIO_RUNTIME_OPTIONS \\ $CRIO_STORAGE_OPTIONS \\ $CRIO_NETWORK_OPTIONS \\ $CRIO_METRICS_OPTIONS \\ --decryption-secl-parameters secl:enabled Cri-o 1.17 The patched version of Cri-o 1.17 must be installed on each Worker Node: https://github.com/lumjjb/cri-o/blob/1.16_encryption_sample_integration . Copy the CRI-O binary from IsecL build script to /usr/bin/: cp isecl/cc-crio/binaries/crio /usr/bin/crio The Cri-o wrapper that allows Cri-o to interface with ISecL components must be installed on each Worker Node: https://github.com/lumjjb/cri-o/blob/1.16_encryption_sample_integration/vendor/github.com/lumjjb/seclkeywrap/keywrapper_secl.go . GoLang 1.14.4 or later must be installed on each Kubernetes Worker Node Crictl must be installed on each Kubernetes Worker Node $ VERSION=\"v1.17.0\" $ wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz $ sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin $ rm -f crictl-$VERSION-linux-amd64.tar.gz Kubernetes must be configured to use Cri-o and Skopeo Platform Integrity Attestation must be configured for the physical Kubernetes Worker Nodes. This includes, at minimum, the CMS; AAS; HVS; KBS; WPM; and the Trust Agent must be installed on each Worker Node. See the Installation section for details installing these services. Each Kubernetes Worker Node should be Trusted in the attestation reports generated by the HVS. Only physical Worker Nodes are supported at this time.","title":"7.2.2.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7222-workflow","text":"","title":"7.2.2.2  Workflow"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#skopeo-commands","text":"skopeo copy source-image destination-image Options: --encryption-key [secl:asset_tag|keyfile] Specifies the encryption protocol. When using secl protocol, provide either \"any\" or an asset tag in the form \"at_key:at_value\"; only one asset tag can be used at this time. Alternatively, a specific key can be provided to be used for encryption. --decryption-key [secl:enabled|keyfile] specifies the decryption Alternatively, a specific key can be provided to be used for decryption. This flag can be repeated if an image requires more than one key to be decrypted. See https://github.com/lumjjb/skopeo/blob/sample_integration/docs/skopeo-copy.1.md for more details.","title":"Skopeo Commands"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#examples","text":"Copy a container image from a registry to a local server: $ skopeo copy docker://docker.io/library/nginx:latest oci:nginx_local To encrypt an image (this will allow the image to run only on Trusted platforms): $ skopeo copy --encryption-key secl:any oci:nginx_local oci:nginx_secl_enc To encrypt an image with an Asset Tag (this will allow the image to run only on Trusted platforms with the specified Asset tag): $ skopeo copy --encryption-key secl:asset_tag_key:asset_tag_value oci:nginx_local oci:nginx_secl_enc_w_at To decrypt an image: $ skopeo copy --decryption-key secl:enabled oci:nginx_secl_enc oci:nginx_secl_dec To copy an encrypted image without decryption: $ skopeo copy oci:nginx_secl_enc oci:nginx_secl_enc_copy To copy a local image to a remote registry: $ skopeo copy oci:nginx_secl_enc docker://10.80.245.116/nginx_secl_enc:latest","title":"Examples"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#prepare-an-image","text":"Convert the image to an OCI image using Skopeo: $ skopeo copy docker-daemon:custom-image:latest oci:custom-image:latest Encrypt the image using Skopeo copy command $ skopeo copy --encryption-key secl:any oci:custom-image:latest oci:custom-image:enc Push the image to a registry: $ skopeo copy oci:custom-image:enc docker://Registry.server.com:5000/custom-image:enc Alternatively, encrypt the image and push it to a registry in a single step: $ skopeo copy --encryption-key secl:any oci:custom-image:latest docker://registry.server.com:5000/custom-image:enc","title":"Prepare an Image"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#72221-pulling-and-encrypting-a-container-image","text":"Skopeo can be used to pull a container image from an external registry (a private Docker registry is used in teh examples below). This image may be encrypted already, but if you wish to pull an image for encryption, it must be in plaintext format. Skopeo has a wrapper that can interact with the Workload Policy Manager. When trying to encrypt an image, Skopeo calls the WPM CLI fetch-key command. In the command, the KBS is called in order to create a new key. The return from the KBS includes the key retrieval URL, which is used when trying to decrypt. After the key is returned to the WPM, the WPM passes the key back to Skopeo. Skopeo uses the key to encrypt the image layer by layer as well as associate the encrypted image with the key's URL. Skopeo then uploads the encrypted image to a remote container registry. The modified Cri-o and wrapper will modify the Cri-o commands to allow Intel SecL policies to be utilized.","title":"7.2.2.2.1 Pulling and Encrypting a Container Image"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#72222-launching-an-encrypted-container-image","text":"Cri-o allows for pulling and decryption of an encrypted container image from a container registry. When trying to pull and decrypt a container image, Cri-o has a hook that calls into the Workload Agent (WLA). The WLA will call into the Workload Service (WLS) and pass it the key URL associated with the encrypted image as well as the host's hardware UUID. These two serve as input to /keys endpoint of the WLS. The WLS initializes a HVS client in order to retrieve the host SAML report and then validates the report. If the host is trusted, the WLS will attempt to get the key. First, it will check if it's been cached alredy. If not, it will initialize a KBS client. The WLS uses this client to retrieve the key from the KBS. If the key is retrieved, it will be cached in the WLS temporarily so that the WLS will not need to requery the KBS if attempting to decrypt with the same key. The key is then passed back to the WLA as the return of the WLS's keys API. Finally, the key is returned to Cri-o, which uses the key to decrypt the container image layer by layer. Containers of the protected images can now be launched as normal using Kubernetes pods and deployments. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the Crio Container is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided.","title":"7.2.2.2.2 Launching an Encrypted Container Image"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#8-trusted-virtual-kubernetes-worker-nodes","text":"While the existing Platform Integrity Attestation functions support bare-metal Kubernetes Worker Nodes, using Virtual Machines to host the Worker Nodes is a common deployment architecture. This feature aims to help extend the Chain of Trust to protect the integrity of Virtual Machines, including virtual Kubernetes Worker Nodes. This feature requires the foundational Platform integrity Attestation feature as a prerequisite for the bare-metal servers hosting the virtual Worker Nodes. Note : This feature requires a degree of separation between the VM and Kubernetes infrastructure. All physical, bare-metal servers should be virtualization hosts, and all Kubernetes Worker Nodes should be Virtual Machines running on those physical virtualization hosts. Kubernetes clusters should not use a mixture of both virtual and bare-metal Workers. The physical virtualization clusters should not include a mixture of hosts protected by Intel\u00ae SecL Platform integrity Attestation and hosts that are not protected. VM trust reports can only be generated for VM instances launched on hosts with Intel\u00ae SecL services enabled. Also important to note is that this feature alone will not prevent any VMs from launching . VMs will still be launched on Untrusted platforms unless additional steps are taken (for example, using OpenStack orchestration integration with Intel\u00ae SecL, or using the Workload Confidentiality feature to encrypt the Kubernetes Worker Node VM image). This feature generates VM attestation reports that can be used to audit compliance and extend the Chain of Trust, and relies on other datacenter policies and/or Intel\u00ae SecL features to enforce compliance. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes. Optionally, the Kubernetes Worker Node VM images can be encrypted and protected as per the Workload Confidentiality feature of Intel\u00ae SecL. This adds a layer of enforcement \u2013 rather than simply reporting whether the VM started on a Trusted platform (and is therefore Trusted), Workload Confidentiality ensures that the Worker Node VM image can only be decrypted on compliant platforms. In both cases (with VM image encryption and without), the VM Trust Reports are accessed through the Workload Service: GET https://<Workload Service IP or Hostname>:5000/wls/reports?instance_id=<instance ID> Authorization: Bearer <token> This query will return the latest VM trust report for the provided Instance ID (the Instance ID is the VM\u2019s ID as it is identified by Libvirt; in OpenStack this would correspond directly to the OpenStack Instance ID). As a best practice, Intel\u00ae recommends using an orchestration layer (such as OpenStack) integrated with Intel\u00ae SecL to launch VMs only on Trusted platforms. See the previous section, \u201cIntegration\u201d under the \u201cPlatform Integrity Attestation\u201d feature for details. As an additional layer of protection, the Kubernetes Worker Node VM images can be encrypted using the Workload Confidentiality feature. This adds cryptographic enforcement to the workload orchestration and ensures instances of the Worker Node images will only be launched on Trusted platforms.","title":"8  Trusted Virtual Kubernetes Worker Nodes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#81-prerequisites","text":"All physical, bare-metal servers should be virtualization hosts. Virtualization hosts must be Linux platforms using Libvirt. All Kubernetes Worker Nodes should be Virtual Machines running on those physical virtualization hosts. Kubernetes clusters must not use a mixture of both virtual and bare-metal Workers. The physical virtualization clusters must not include a mixture of hosts protected by Intel\u00ae SecL Platform integrity Attestation and hosts that are not protected. VM trust reports can only be generated for VM instances launched on hosts with Intel\u00ae SecL services enabled. The Intel\u00ae SecL Platform integrity Attestation feature must be used to protect all physical virtualization hosts. These platforms must all be registered with the Verification Service, must have the Trust Agent installed and running, and must be Trusted. See the Platform integrity Attestation section for details. In addition to the services required by Platform Integrity Attestation, the Workload Agent must be installed on each physical virtualization host, and the Workload Service must be installed on the management plane. (Optional; recommended) Virtual Machines should be orchestrated using an Intel\u00ae SecL-supported orchestrator, such as OpenStack. This will help launch the VMs only on compliant platforms. (Optional) Virtual Machine Images may be encrypted using the Workload Confidentiality feature. This adds a layer of cryptographic enforcement to the orchestration of virtual worker VMs, ensuring that the VMs can only be launched on compliant platforms.","title":"8.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#82-workflow","text":"There are no additional steps required to enable this feature; if the Workload Agent is running on the physical virtualization host, VM trust reports will automatically be generated at every VM Start. Intel\u00ae strongly recommends using an orchestration integration for the VM management layer (for example, the provided Integration Hub integration with OpenStack) to help ensure that the worker node VMs only launch on Trusted physical hosts. If no orchestration is used, the platform service provider should ensure that all physical hosts are always in a Trusted state and take action to ensure Untrusted platforms cannot launch VMs. The primary benefit of the Trusted Virtual Kubernetes Worker Node feature is auditability of the Chain of Trust. By retrieving the VM Trust Report from the Workload Service for a given Worker Node instance, auditors can verify that the VM launched on a Trusted platform. The VM trust report also includes the hardware UUID of the physical host. This UUID, along with the time that the VM instance was launched, can be used to pull the correlating physical host trust report from the Verification Service to provide proof of compliance. To retrieve a VM trust report from the Workload Service: GET https://<Workload Service IP or Hostname>:5000/wls/reports?instance_id=<instance ID> Authorization: Bearer <token> This will return the latest report for the specified instance ID.","title":"8.2  Workflow"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#83-sample-vm-trust-report","text":"A sample VM Trust Report from the Workload Service is below. The report is generated by the Workload Agent and signed using the host\u2019s TPM, then stored in the Workload Service. The report contains some key attributes: instance_id : This is the ID of the instance. In OpenStack, this would correlate directly to the Instance ID for the VM. image_id : This is the ID for the source image used to launch the instance. In OpenStack, this correlates directly to the Image ID for the VM. host_hardware_uuid : The hardware UUID of the physical host that started the VM. This attribute identifies which host performed the VM start and attested the VM. This UUID can be used to query the Verification Service to retrieve attestations of the host. By correlating the VM Trust Report with the Host Trust Report, we can verify that this instance was started on a Trusted platform. image_encrypted : True or False based on whether the source image was protected using the Workload Confidentiality feature. trusted : True or False, based on whether the VM instance was started on a Trusted platform. Because the report is generated at every vm start through Libvirt, a new report will be generated whenever the VM is turned on or migrated, reflecting the state of the VM and its host at every opportunity for the state to change. <Response xmlns= \"http://wls.server.com/wls/reports\" > <instance_manifest> <instance_info> <instance_id> bd06385a-5530-4644-a510-e384b8c3323a </instance_id> <host_hardware_uuid> 00964993-89c1-e711-906e-00163566263e </host_hardware_uuid> <image_id> 773e22da-f687-47ca-89e7-5df655c60b7b </image_id> </instance_info> <image_encrypted> true </image_encrypted> </instance_manifest> <policy_name> Intel VM Policy </policy_name> <results> <e> <rule> <rule_name> EncryptionMatches </rule_name> <markers> <e> IMAGE </e> </markers> <expected> <name> encryption_required </name> <value> true </value> </expected> </rule> <flavor_id> 3a3e1ccf-2618-4a0d-8426-fb7acb1ebabc </flavor_id> <trusted> true </trusted> </e> </results> <trusted> true </trusted> <data> eyJpbnN0YW5jZV9tYW5pZmVzdC\u2026data> <hash_alg> SHA-256 </hash_alg> <cert> -----BEGIN CERTIFICATE----- \u2026 -----END CERTIFICATE----- </cert> <signature> \u2026 </signature> </Response>","title":"8.3  Sample VM Trust Report"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9-flavor-management","text":"","title":"9  Flavor Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#91-flavor-format-definitions","text":"A Flavor is a standardized set of expectations that determines what platform measurements will be considered \u201ctrusted.\u201d Flavors are constructed in a specific format, containing a metadata section describing the Flavor, and then various other sections depending on the Flavor type or Flavor part.","title":"9.1  Flavor Format Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#911-meta","text":"The first part of a Flavor is the meta section: \"meta\" :{ \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } } This section defines the Flavor part and any versioning information. NOTE : Even when the BIOS or OS version remains the same, the actual measurements in the measured boot process will be different between TPM 1.2 and TPM 2.0, and so the TPM version is captured here as well. The attributes in the Meta section are used by the Flavor matching engine when matching Flavors to Hosts. Note that TPM 1.2 is supported only for VMware ESXi hosts.","title":"9.1.1  Meta"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#912-hardware","text":"The hardware section is unique to PLATFORM flavor parts: \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } } This part of the Flavor defines expected hardware attributes of the host, and contains processor and TPM-related attributes.","title":"9.1.2  Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#pcrs","text":"The last section of a Flavor is the \u201cPCRs\u201d section, which contains the actual expected measurements for any PCRs. This section will contain PCR measurements for each applicable algorithm supported by the TPM (SHA1 only for TPM 1.2, SHA256 and SHA1 sections for TPM 2.0). Some PCRs simply have a value and nothing else. Other PCRs, however, contain different event measurements. This indicates that separate individual platform or OS components are independently measured and extended to the same PCR. PCRs with event measurements will contain an Event array that lists, in the correct order, all of the events in the measurement event log that are extended to this PCR. When the Verification Service attests a host against a given Flavor, each measurement event is compared to the Flavor value, and all of the events are replayed to confirm that a replay of all of the measurement extensions do in fact result in the hash seen in the PCR value. In this way, the Verification Service can ensure that the measurement event log contents are secure, and the individual measurements can be attested so that the cause for an Untrusted attestation can easily be seen. The full PCRs section is not shown here due to length; see the sample Flavor sections for a full sample. \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, ...","title":"PCRs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#914-sample-platform-flavor","text":"The PLATFORM Flavor part encompasses measurements that are unique to a specific platform, including the server OEM, BIOS version, etc. A PLATFORM Flavor can be shared across all hosts of the same model that have the same BIOS version. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \" PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } }, \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } }, \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_0\" : { \"value\" : \"db83f0e8a1773c21164c17986037cdf8afc1bbdc1b815772c6da1befb1a7f8a3\" }, \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } }","title":"9.1.4  Sample PLATFORM Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#915-sample-os-flavor","text":"An OS Flavor encompasses all of the measurements unique to a given OS. This includes the OS kernel and other measurements. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"OS\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.3\" , \"vmm_name\" : \"\" , \"vmm_version\" : \"\" , \"tpm_version\" : \"2.0\" } }, \"pcrs\" : { \"SHA1\" : { \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"26e1d98742f79c950dc637f8c067b0b72a1b0e8ff75db4e609c7e17321acf3f4\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"c89ad1d1e9adaa7ecfee2abce763b92472685f7d1b9f3799bf49974b66ed9638\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"81b88e268e697ccf1790d41b9de748a8f395acfb47aa67c9845479d4e8456f77\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }, \"flavorgroup_name\" : \"automatic\" }","title":"9.1.5  Sample OS Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#916-sample-host_unique-flavor","text":"Host-Unique flavors define measurements for a specific host. This can be either a single large flavor that incorporates all of the host measurements into a single flavor document used only to attest a single host, or can be a small subset of measurements that are specific to a single host. For example, some VMWare module measurements will change from one host to the next, while most others will be shared assuming the same ESXi build is used. The full Flavor requirement for such a host would include Host-Unique flavors to cover the measurements that are unique to only this one host, and would still use a generic PLATFORM and OS flavor for the other measurements that would be identical for other similarly configured hosts. Note :The HOST_UNIQUE Flavors are unique to a specific host, and should always be imported directly from the specific host. { \"flavors\" : [ { \"meta\" : { \"id\" : \"4d387cbd-f72b-4742-b4e5-c5b0ffed59e0\" , \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"HOST_UNIQUE\" , \"source\" : \"Purley11\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.4\" , \"tpm_version\" : \"2.0\" , \"hardware_uuid\" : \"00448C61-46F2-E711-906E-001560A04062\" } }, \"pcrs\" : { \"SHA256\" : { \"pcr_17\" : { \"value\" : \"f9ef8c53ddfc8096d36eda5506436c52b4bfa2bd451a89aaa102f03181722176\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"09f468dfc1d98a1fee86eb7297a56b0e097d57be66db4eae539061332da2e723\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"c1f7bfdae5f270d9f13aa9620b8977951d6b759f1131fe9f9289317f3a56efa1\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA1\" : { \"pcr_17\" : { \"value\" : \"48695f747a3d494710bd14d20cb0a93c78a485cc\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"b1f8db372e396bb128280821b7e0ac54a5ec2791\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"983ec7db975ed31e2c85ef8e375c038d6d307efb\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }","title":"9.1.6  Sample HOST_UNIQUE Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#917-sample-asset_tag-flavor","text":"Asset Tag flavor parts are unique to Asset Tag attestation. These flavors verify that the Asset Tag data in the host\u2019s TPM correctly matches the most recently created, currently valid Asset Tag certificate that has been deployed to that host. { \"meta\" : { \"id\" : \"b3e0c056-5b6c-4b6b-95c4-de5f1473cac0\" , \"description\" : { \"flavor_part\" : \"ASSET_TAG\" , \"hardware_uuid\" : \"<Hardware UUID of the server to be tagged>\" } }, \"external\" : { \"asset_tag\" : { \"tag_certificate\" : { \"encoded\" : \"<Tag certificate in base64 encoded format>\" , \"issuer\" : \"CN=assetTagService\" , \"serial_number\" : 1519153541461 , \"subject\" : \"<Hardware UUID of the server to be tagged>\" , \"not_before\" : \"2018-02-20T11:05:41-0800\" , \"not_after\" : \"2019-02-20T11:05:41-0800\" , \"fingerprint_sha384\" : \"46001d8472e56de423aac7c55f061404d27d50e497dfc21a861ef1965d7ac1e44887aee918fb5805385a3cbdf820899d\" , \"attribute\" : [ { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] } ] } } } }","title":"9.1.7  Sample ASSET_TAG Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#92-flavor-matching","text":"Flavors are matched to host by objects called Flavor Groups A Flavor Group represents a set of rules to satisfy for a set of flavors to be matched to a host for attestation. For example, a Flavor Group can require that a PLATFORM Flavor and an OS Flavor be used for attestation. Without this level of association, a host that matches measurements for only a PLATFORM flavor, for example, can be attested as Trusted, even though the OS Flavor would attest the host as Untrusted. Flavor matching can be automatic (the default), or can explicitly specify a host to which the Flavor Group must apply. Automatic flavor matching allows for more ease in datacenter lifecycle management with updates and patches that may cause the appropriate flavors to change over time. Automatic flavor matching will trigger a new matching action when a new flavor is added, when an existing flavor is deleted, or when a host is initially attested as Untrusted. The system will automatically attempt to find a new set of flavors that match the Flavor Group rules that will attest the host as Trusted. For example, if a host in your datacenter has recently had a BIOS update, the next attestation will cause the host to appear Untrusted (because the PLATFORM measurements will now differ). Using automatic flavor matching, the Verification Service will automatically search for a new PLATFORM flavor that matches the actual BIOS version and measurement seen on the host. If a new BIOS version is successfully found, the Verification Service will use the new version for attestation, and the host will appear Trusted. If no matching PLATFORM flavor is found, the host will appear Untrusted. When automatic flavor matching is used, think of the various flavors in the Verification Service as a collection of valid configurations, and an attested host matching any combination of those configurations (within the confines of the Flavor Group requirements for which flavor types must be present) will be attested as Trusted. Host-based flavor matching explicitly maps a specific host to a flavor. Host-based attestation requires that a host saves its entire configuration in a composite flavor document in the system, and then later validates against this flavor to detect any changes. In this case, if a host received a BIOS upgrade, the host will attest as Untrusted, and no attempt will be made to re-match a new flavor. An administrator will need to explicitly specify a new flavor to be used for that host.","title":"9.2  Flavor Matching"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#921-when-does-flavor-matching-happen","text":"Generally speaking, a new Flavor match operation is triggered whenever a host is registered, whenever a host is attested and would be untrusted, and whenever a Flavor is added to or removed from a Flavor group. When a new host is registered, the Verification Service will retrieve the Host Report and derive the platform information needed for Flavor matching (BIOS version, server OEM, OS type and version, TPM version, etc.). The Verification Service then searches through the Flavors in the same Flavor group that the host is in, and finds any Flavors that match the platform information. If a Flavor is deleted, the Verification Service finds any hosts that are currently associated with that Flavor, and attempts to match them to alternative Flavors. If a Flavor is added, the Verification Service looks for any hosts in the same Flavor group that are not currently matched to a Flavor of the appropriate Flavor part, and checks to see whether those hosts should be mapped to the new Flavor. If a new Report is generated for a host and would not result in a Trusted attestation, the Verification Service will first repeat the Flavor matching process to be sure that no matching Flavors exist in the host\u2019s Flavor group that would result in a Trusted attestation. If the Service still finds no matching Flavors, the host will appear as Untrusted.","title":"9.2.1  When Does Flavor Matching Happen?"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#922-flavor-matching-performance","text":"Flavor matching causes affected hosts to be moved into the QUEUE state while the host and Flavor are evaluated to determine whether the host and Flavor should be linked. Hosts can remain in the QUEUE state for varying amounts of time based on the extent of the Flavor match required. This means that the trust status of a host will not be actually updated to reflect a new Flavor until after the process finishes, which may take a few seconds or minutes depending on the number of registered hosts, Flavors in the same Flavorgroup, etc. If a new host is registered, only that host will be added to the queue, and other hosts will be unaffected. The Verification Service will look for only the HOST\\_UNIQUE flavor part applicable to that specific host, and then will look at all PLATFORM and OS Flavors in the same Flavorgroup has the host, using the Flavor metadata and host info to narrow the results. The Service will match the new host to the most similar Flavors, and then move the host to the CONNECTED state and generate a new trust report. When a new PLATFORM or OS Flavor is created, the Service will instead add all hosts in the same Flavorgroup as the new Flavors to the queue. Each host in the queue will then be re-evaluated against every PLATFORM and OS Flavor in the Flavorgroup to determine the closest match. This means that adding a new Flavor can cause more hosts to each spend more time in the QUEUE state, as compared to adding a new host. For this reason, as a best practice for initial population of Flavors and hosts for a new deployment, it is suggested that Flavors be created before registering hosts. This is not a concern after the initial population of Flavors and hosts.","title":"9.2.2  Flavor Matching Performance"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#923-flavor-groups","text":"Flavor Groups represent a collection of one or more Flavors that are possible matches for a collection of one or more hosts. Flavor Groups link to both Flavors and hosts \u2013 a host in Flavor Group \"ABC\" will only be matched to Flavors in Flavor Group \"ABC\"","title":"9.2.3  Flavor Groups"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#924-default-flavor-group","text":"By default the Verification Service includes a Flavor Group named automatic and another named unique During host registration, the automatic Flavor Group is used as a default selection if no other Flavor Group is specified.","title":"9.2.4  Default Flavor Group"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9241-automatic","text":"The automatic Flavor Group is used as the default Flavor Group for all hosts and all Flavor parts. If no other Flavor Groups are specified when creating Flavors or Hosts, all Hosts and Flavors will be added to this group. This is useful for datacenters that want to manage a single set of acceptable configurations for all hosts.","title":"9.2.4.1  automatic"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9242-unique","text":"The unique Flavor Group is used to contain HOST\\_UNIQUE Flavors. This Flavorgroup is used by the backend software and should not be managed manually.","title":"9.2.4.2  unique"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#925-flavor-match-policies","text":"Flavor Match Policies are used to define how the Flavor Match engine will match Flavors to hosts for attestation for a given Flavor Group. Each Flavor part can have defined Flavor Match Policies within a given Flavor Group. { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"all_of\" , \"required_if_defined\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"SOFTWARE\" : { \"all_of\" , \"required_if_defined\" } } The sample Policy above would require that a PLATFORM Flavor part be matched, but any PLATFORM Flavor part in the Flavor Group may be matched. The OS Flavor Part will only be required if there is an OS Flavor part in the Flavor Group; if there are no OS Flavor parts in the Group, the match will not be required. If more than one OS Flavor part exists in the Group, all of those OS parts will be required to match for a host to be Trusted.","title":"9.2.5  Flavor Match Policies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9251-default-flavor-match-policy","text":"The automatic Flavor Group, and any Flavor Group created without explicitly defining a Flavor Match Policy, will be created using the following Flavor Match Policy. This is the default behavior for Flavor Matching: { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"any_of\" , \"required\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"SOFTWARE\" : { \"all_of\" , \"required_if_defined\" } }","title":"9.2.5.1  Default Flavor Match Policy"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9252-any_of","text":"The ANY_OF Policy allows any Flavor of the specified Flavor part to be matched. If the Flavor Group contains OS Flavor 1 and OS Flavor 2, a host will be Trusted if it matches either OS Flavor 1 or OS Flavor 2.","title":"9.2.5.2  ANY_OF"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9253-all_of","text":"The ALL_OF Policy requires all Flavors of the specified Flavor Part in the Flavor Group to be matched. For example, if Flavor Group X contains PLATFORM Flavor Part 1 and PLATFORM Flavor Part 2, a host in Flavor Group X will need to match both PLATFORM Flavor 1 and PLATFORM Flavor 2 to attest as Trusted. If the host matches only one of the Flavors, or neither of them, the host will be attested as Untrusted.","title":"9.2.5.3  ALL_OF"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9254-latest","text":"The LATEST Policy requires that the most recently created Flavor of the specified Flavor part be used when matching to a host. For example: \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored.","title":"9.2.5.4  LATEST"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9255-required","text":"The REQUIRED Policy requires a Flavor of the specified part to be matched. For example: \"PLATFORM\" : { \"any_of\" , \"required\" } This policy means that a PLATFORM Flavor part must be used; if the Flavor Group contains no PLATFORM Flavor parts, hosts in this Flavor Group will always count as Untrusted.","title":"9.2.5.5  REQUIRED"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9256-required_if_defined","text":"The REQUIRED_IF_DEFINED Policy requires that a Flavor part be used if a Flavor of that part exists. If no Flavor part of this type exists in the Flavor Group, the Flavor part will not be required. \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored.","title":"9.2.5.6  REQUIRED_IF_DEFINED"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#926-flavor-match-event-triggers","text":"Several events will cause the background queue service to attempt to re-match Flavors and hosts: Host registration This event is the first time a host will be attempted to be matched to appropriate Flavors in the same Flavor Group, and affects only the host that was added (other hosts will not be re-matched to Flavors when you add a new host). Flavor creation When a new Flavor is added to a Flavor Group, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the new Flavor. Flavor deletion When a Flavor is deleted, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the deleted Flavor. Creation of a new Attestation Report When a new Attestation Report is generated, if the host would attest as Untrusted with the currently-matched Flavors, the host being attested will be re-matched as part of the Report generation process. This ensures that Reports are always generated using the best possible Flavor matches available in the database.","title":"9.2.6  Flavor Match Event Triggers"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#927-sample-flavorgroup-api-calls","text":"","title":"9.2.7  Sample Flavorgroup API Calls"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9271-create-a-new-flavorgroup","text":"POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavorgroups Authorization: Bearer <token> { \"flavorgroup_name\": \"firstTest\", \"flavor_match_policy_collection\": { \"flavor_match_policies\": [ { \"flavor_part\": \" PLATFORM\", \"match_policy\": { \"match_type\": \"ANY_OF\", \"required\": \"REQUIRED\" } } ] } } Response: { \"id\" : \"a0950923-596b-41f7-b9ad-09f525929ba1\" , \"flavorgroup_name\" : \"firstTest\" , \"flavor_match_policy_collection\" : { \"flavor_match_policies\" : [ { \"flavor_part\" : \" PLATFORM\" , \"match_policy\" : { \"match_type\" : \"ANY_OF\" , \"required\" : \"REQUIRED\" } } ] } }","title":"9.2.7.1  Create a New Flavorgroup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#93-software-flavor-management","text":"","title":"9.3  SOFTWARE Flavor Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#931-what-is-a-software-flavor","text":"A SOFTWARE Flavor part defines the measurements expected for a specific application, or a specific set of files and folders on the physical host. SOFTWARE Flavors can be used to attest the boot-time integrity of any static files or folders on a physical server. A single server can have multiple SOFTWARE Flavors associated. Intel\u00ae SecL-DC provides a default SOFTWARE Flavor that is deployed to each Trust Agent server during the provisioning step. This default Flavor includes the static files and folders of the Trust Agent itself, so that the Trust Agent is measured during the server boot process, and its integrity is included in the attestation of the other server measurements. Using SOFTWARE Flavors consists of two parts \u2013 creating the actual SOFTWARE Flavor, and deploying the SOFTWARE Flavor manifest to the host.","title":"9.3.1  What is a SOFTWARE Flavor?"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#932-creating-a-software-flavor-part","text":"Creating a new SOFTWARE Flavor requires creating a manifest of the files and folders that need to be measured. There are three different types of entries for the manifest: Directories , Symlinks and Files .","title":"9.3.2  Creating a SOFTWARE Flavor part"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9321-directories","text":"A Directory defines measurement rules for measuring a directory. Effectively this involves listing the contents of the directory and hashing the results; in this way, a Directory measurement can verify that no files have been added or removed from the directory specified, but will not measure the integrity of individual files (ie, files can change within the directory, but cannot be renamed, added, or removed). Directory entries can use regular expressions to define explicit Include and Exclude filters. For example, Exclude=\\*.log would exclude all files ending with .log from the measurement, meaning files with the .log extension can be added or removed from the directory. <Dir Type= \"dir\" Include= \".*\" Exclude= \"\" Path= \"/opt/trustagent/hypertext/WEB-INF\" >","title":"9.3.2.1  Directories"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9322-symlinks","text":"A Symlink entry defines a symbolic link that will be measured. The actual symbolic link is hashed, not the file or folder the symlink points to. In this way, the measurement will detect the symbolic link being modified to point to a different location, but the actual file or folder pointed to can have its contents change. <Symlink Path= \"/opt/trustagent/bin/tpm_nvinfo\" >","title":"9.3.2.2  Symlinks"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9323-files","text":"Individual files can be explicitly specified for measurement as well. Each file listed will be hashed and extended separately. This means that if any file explicitly listed this way changes its contents or is deleted or moved, the measurement will change, and the host will become Untrusted. <File Path= \"/opt/trustagent/bin/module_analysis_da.sh\" >","title":"9.3.2.3  Files"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#933-sample-software-flavor-creation-call","text":"Creating a new SOFTWARE Flavor requires specifying a sample host where the application, files or folders that will be measured are currently present. The measurements specified in the manifest will be captures when this call is executed, and the Verification Service will communicate with the Trust Agent and create a SOFTWARE Flavor based on the file measurements. The Connection String must point to the sample Trust Agent host. The Label defines the name of the new Flavor (ideally this should be the name of the application being measured for easier management). POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavor-from-app-manifest Authorization: Bearer <token> <ManifestRequest xmlns=\"lib:wml:manifests-req:1.0\"> <connectionString>intel:https://trustagent.server.com:1443;u=trustagentUsername;p=trustagentPassword</connectionString> <Manifest xmlns=\"lib:wml:manifests:1.0\" DigestAlg=\"SHA384\" Label=\"Tomcat\" Uuid=\"\">+ <Dir Type=\"dir\" Include=\".*\" Exclude=\"\" Path=\"/opt/trustagent/hypertext/WEB-INF\" /> <Symlink Path=\"/opt/trustagent/bin/tpm_nvinfo\" /> <File Path=\"/opt/trustagent/bin/module_analysis_da.sh\" /> </Manifest> </ManifestRequest>","title":"9.3.3  Sample SOFTWARE Flavor Creation Call"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#934-deploying-a-software-flavor-manifest-to-a-host","text":"Once the SOFTWARE Flavor has been created, it can be deployed to any number of Trust Agent servers. This requires the Flavor ID (returned from Flavor creation) and the Host ID (returned from host registration). The Verification Service will send a request to the appropriate Trust Agent and create the manifest. Note : After the SOFTWARE Flavor manifest is deployed to a host, the host must be rebooted. This will allow the measurements specified in the Flavor to be taken and extended to the TPM. Until the host is rebooted, the host will now appear Untrusted, as it now requires measurements from a SOFTWARE Flavor that have not yet been extended to the TPM. POST https://<Verification Service IP or Hostname>:8443/hvs/v2/rpc/deploy-software-manifest Authorization: Bearer <token> { \"flavor_id\":\"a6544ff4-6dc7-4c74-82be-578592e7e3ba\", \"host_id\":\"a6544ff4-6dc7-4c74-82be-578592e7e3ba\" }","title":"9.3.4  Deploying a SOFTWARE Flavor Manifest to a Host"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#935-software-flavor-matching","text":"The default Flavor Match Policy for SOFTWARE Flavor parts is ALL_OF , REQUIRED_IF_DEFINED . This means that all Software Flavors defined in a Flavorgroup must match to all hosts in that Flavorgroup. If no SOFTWARE Flavors are in the Flavorgroup, then hosts can still be considered Trusted. Because the default uses the ALL_OF Policy, it\u2019s recommended to use Flavorgroups dedicated to specific software loadouts. For example, if a number of hosts will act as virtualization hosts and will have SOFTWARE Flavors for the hypervisor and VM management applications, those hosts should be placed in their own Flavorgroup as they will all run similar or identical application loadouts. If another group of servers in the datacenter will act as container hosts, these hosts might need SOFTWARE Flavors that include attestation of container runtimes and management applications, and will have a very different application loadout from the VM-based hosts. These should be placed in their own Flavorgroup, so that the VM hosts are attested using the hypervisor-related SOFTWARE Flavors, and the container hosts are attested using the container-related SOFTWARE Flavors. As with other Flavor parts, hosts will be matched to Flavors in the same Flavorgroup that the host is added to, and will not be matched to Flavors in different Flavorgroups. Flavor matching will happen on the same events as for other Flavor parts.","title":"9.3.5  SOFTWARE Flavor Matching"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#936-kernel-upgrades","text":"Because the Application Integrity functionality involves adding a measurement agent ( tbootXM ) to initrd , an additional process must be followed when updating the OS kernel to ensure the new initrd also contains the measurement agent. This is not required if Application Integrity will not be used. Update grub to have the boot menu-entry created for the new kernel version in grub.cfg ( grub2-mkconfig -o \\<path to grub file\\> ) Reboot the host and boot into new kernel menu-entry. Generate a new initrd with tbootXM. ( /opt/tbootxm/bin/generate\\_initrd.sh ) Copy the generated initrd to the boot drectory. ( cp /var/tbootxm/\\<generated initrd file name\\> /boot/ ) Update the TCB protection menu-entry with the new kernel version. Source rustagent.env , or expor t GRUB_FILE=/boo t /e f i/EFI/redha t /grub.c f g Run the configure_host script: cd /opt/tbootxm/bin ./configure_host.sh Update the default boot menu-entry to have new kernel version. (edit /etc/default/grub ) Update the grub to reflect the updates. ( grub2-mkconfig -o \\<path to grub file\\> ) Reboot the host and boot into TCB protection menu-entry. After updating the system with the new initrd , the Software Flavor should attest as Trusted. Note that changing grub and initrd does result in a new OS Flavor measurements, so an updated OS Flavor should be imported after updating the kernel and regenerating initrd .","title":"9.3.6  Kernel Upgrades"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#10-scalability-and-sizing","text":"","title":"10  Scalability and Sizing"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#101-configuration-maximums","text":"","title":"10.1  Configuration Maximums"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1011-registered-hosts","text":"The Intel\u00ae SecL Verification Service can support a maximum of 2000 registered hosts with a single Verification Service instance with default settings.","title":"10.1.1  Registered Hosts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1012-hdd-space","text":"The HDD space recommendations below represent expected log and database growth using default settings. Altering the database or log rotation settings, or the SAML expiration setting, may change the amount of disk space required. For default settings, 100 GB of disk space is recommended.","title":"10.1.2  HDD Space"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#102-database-rotation-settings","text":"The Intel\u00ae SecL Verification Service database will automatically rotate the audit log table after one million records, and will retain up to ten total rotations. These settings are user-configurable if a longer retention period is needed. mtwilson.audit.log.num.rotations - defines the maximum number of rotations before the oldest rotation is deleted to make space for a new rotation. mtwilson.audit.log.max.row.count \u2013 defines the maximum number of rows in the audit log table before a rotation will occur.","title":"10.2  Database Rotation Settings"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#103-log-rotation","text":"The Intel\u00ae SecL services (the Verification Service, Trust Agent, and Integration Hub) use Logrotate to rotate logs automatically during a daily cron job. By default, logs are rotated once per month or when they exceed 1 GB in size, whichever comes first, and 12 total rotations will be retained.","title":"10.3  Log Rotation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11-intel-security-libraries-configuration-settings","text":"","title":"11  Intel Security Libraries Configuration Settings"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#111-verification-service","text":"","title":"11.1  Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1111-installation-answer-file-options","text":"# Authentication URL and service account credentials - mandatory AAS_API_URL=https://isecl-aas:8444/aas HVS_SERVICE_USERNAME=HVS_service HVS_SERVICE_PASSWORD=password # CMS URL and CMS webserivce TLS hash for server verification - mandatory CMS_BASE_URL=https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384=digest # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Skip setup - optional HVS_NOSETUP=false #default=false # Logging options - optional HVS_LOGLEVEL=info # options: critical|error|warning|info|debug|trace, default='info' HVS_LOG_MAX_LENGTH=300 # default=300 HVS_ENABLE_CONSOLE_LOG=false # default=false # HRRS configuration - optional HRRS_REFRESH_PERIOD=2m0s # default=2m0s HRRS_REFRESH_LOOK_AHEAD=5m0s # default=5m0s # FVS configuration - optional FVS_NUMBER_OF_VERIFIERS=20 # default=20 FVS_NUMBER_OF_DATA_FETCHERS=20 # default=20 FVS_SKIP_FLAVOR_SIGNATURE_VERIFICATION=false # default=false # In case of trusted flavor storage, flavor signature verification can be skipped # using following flag - optional SKIP_FLAVOR_SIGNATURE_VERIFICATION=false # default=false # TLS certificate configuration - optional TLS_COMMON_NAME=\"HVS TLS Certificate\" # default=\"HVS TLS Certificate\" TLS_SAN_LIST=127.0.0.1,localhost # default=127.0.0.1,localhost # Server configuration - optional HVS_PORT=8443 # default=8443 HVS_SERVER_READ_TIMEOUT=30s # default=30s HVS_SERVER_READ_HEADER_TIMEOUT=10s # default=10s HVS_SERVER_WRITE_TIMEOUT=10s # default=10s HVS_SERVER_IDLE_TIMEOUT=10s # default=10s HVS_SERVER_MAX_HEADER_BYTES=1048576 # default=1048576 # Database - mandatory HVS_DB_USERNAME=runner HVS_DB_PASSWORD=test HVS_DB_SSLCERTSRC=/tmp/dbcert.pem # This doesn't need to be specified if HVS_DB_SSLCERT is given # Database - optional HVS_DB_HOSTNAME=localhost # default=localhost HVS_DB_NAME=hvs-pg-db # default=hvs-pg-db HVS_DB_PORT=5432 # default=5432 HVS_DB_SSLMODE=verify-full # default=verify-full ;other options are like allow, prefer, require, verify-ca HVS_DB_SSLCERT=/etc/hvs/hvsdbcert.pem # default=/etc/hvs/hvsdbcert.pem # Webservice configuration - Optional HVS_PORT=8443 HVS_SERVER_READ_TIMEOUT=30s HVS_SERVER_READ_HEADER_TIMEOUT=10s HVS_SERVER_WRITE_TIMEOUT=10s HVS_SERVER_IDLE_TIMEOUT=10s HVS_SERVER_MAX_HEADER_BYTES=1048576 # Logging - Optional HVS_LOG_MAX_LENGTH=300 HVS_ENABLE_CONSOLE_LOG=false # Flavor Signing Configuration - Optional FLAVOR_SIGNING_KEY_FILE=/etc/hvs/trusted-keys/flavor-signing.key FLAVOR_SIGNING_CERT_FILE=/etc/hvs/certs/trustedca/flavor-signing.pem FLAVOR_SIGNING_COMMON_NAME=HVS Flavor Signing Certificate # SAML Configuration - Optional SAML_KEY_FILE=/etc/hvs/trusted-keys/saml.key SAML_CERT_FILE=/etc/hvs/certs/trustedca/saml-cert.pem SAML_COMMON_NAME=HVS SAML Certificate # Endorsement CA Configuration - Optional ENDORSEMENT_CA_KEY_FILE=/etc/hvs/trusted-keys/endorsement-ca.key ENDORSEMENT_CA_CERT_FILE=/etc/hvs/certs/trustedca/EndorsementCA.pem ENDORSEMENT_CA_COMMON_NAME=HVS Endorsement Certificate ENDORSEMENT_CA_ISSUER=intel-secl ENDORSEMENT_CA_VALIDITY_YEARS=5 # Privacy CA Configuration - Optional PRIVACY_CA_KEY_FILE=/etc/hvs/trusted-keys/privacy-ca.key PRIVACY_CA_CERT_FILE=/etc/hvs/certs/trustedca/privacy-ca-cert.pem PRIVACY_CA_COMMON_NAME=HVS Privacy Certificate PRIVACY_CA_ISSUER=intel-secl PRIVACY_CA_VALIDITY_YEARS=5 # Asset Tag Configuration - Optional TAG_CA_KEY_FILE=/etc/hvs/trusted-keys/tag-ca.key TAG_CA_CERT_FILE=/etc/hvs/certs/trustedca/tag-ca-cert.pem TAG_CA_COMMON_NAME=HVS Tag Certificate TAG_CA_ISSUER=intel-secl TAG_CA_VALIDITY_YEARS=5","title":"11.1.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1112-configuration-options","text":"The Verification Service configuration is stored in the file /etc/hvs/config.yml : tls: cert-file: /etc/hvs/tls-cert.pem key-file: /etc/hvs/tls.key common-name: Mt Wilson TLS Certificate san-list: 127.0.0.1,localhost saml: common: cert-file: /etc/hvs/certs/trustedca/saml-cert.pem key-file: /etc/hvs/trusted-keys/saml.key common-name: mtwilson-saml issuer: AttestationService validity-days: 1 flavor-signing: cert-file: /etc/hvs/certs/trustedca/flavor-signing.pem key-file: /etc/hvs/trusted-keys/flavor-signing.key common-name: VS Flavor Signing Certificate privacy-ca: cert-file: /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem key-file: /etc/hvs/trusted-keys/privacy-ca.key common-name: HVS Privacy Certificate issuer: intel-secl validity-years: 5 endorsement-ca: cert-file: /etc/hvs/certs/endorsement/EndorsementCA.pem key-file: /etc/hvs/trusted-keys/endorsement-ca.key common-name: HVS Endorsement Certificate issuer: intel-secl validity-years: 5 tag-ca: cert-file: /etc/hvs/certs/trustedca/tag-ca-cert.pem key-file: /etc/hvs/trusted-keys/tag-ca.key common-name: HVS Tag Certificate issuer: intel-secl validity-years: 5 aik-certificate-validity-years: 5 server: port: 8898 read-timeout: 30s read-header-timeout: 10s write-timeout: 30s idle-timeout: 10s max-header-bytes: 1048576 log: max-length: 30000 enable-stdout: true level: TRACE db: vendor: postgres host: localhost port: \"5432\" name: hvs_db username: root password: password ssl-mode: allow ssl-cert: /etc/hvs/hvsdbsslcert.pem conn-retry-attempts: 5 conn-retry-time: 1 hrrs: refresh-period: 2m0s refresh-look-ahead: 5m0s fvs: number-of-verifiers: 20 number-of-data-fetchers: 20 skip-flavor-signature-verification: true","title":"11.1.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1113-command-line-options","text":"The Verification Service supports several command-line commands that can be executed only as the Root user: Syntax: hvs <command>","title":"11.1.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11131-help","text":"hvs help Displays the list of available CLI commands.","title":"11.1.3.1  Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11132-start","text":"hvs start Starts the services.","title":"11.1.3.2  Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11133-stop","text":"hvs stop Stops the services.","title":"11.1.3.3  Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11135-status","text":"hvs status Reports whether the service is currently running.","title":"11.1.3.5  Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11136-uninstall","text":"hvs uninstall Uninstalls the service, including the deletion of all files and folders. Database content is not removed. See section 14.1 for additional details.","title":"11.1.3.6  Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11137-version","text":"hvs version Reports the version of the service.","title":"11.1.3.7  Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#111310-erase-data","text":"hvs erase-data Deletes all non-user information from the database. All data in teh following tables will be deleted; the database schema will be preserved: flavor_host flavor_flavorgroup flavorgroup_host queue report host_status flavorgroup host flavor host_credential tag_certificate audit_log_entry tls_policy","title":"11.1.3.10  Erase-data"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#111316-setup","text":"hvs setup <task> [--help] [--force] [-f <answer-file>] \u200b --help show help message for setup task \u200b --force existing configuration will be overwritten if this flag is set \u200b -f|--file the answer file with required argument Re-runs the installation setup tasks, or the specific tasks listed.","title":"11.1.3.16  Setup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1114-directory-layout","text":"The Host Verification Service installs by default to the following folders: /etc/hvs/ This directory contains the config.yml configuration file, the database connection ssl cerificate, and the webservice TLS certificate. /etc/hvs/ \u251c\u2500\u2500 certs \u2502 \u251c\u2500\u2500 endorsement \u2502 \u2502 \u251c\u2500\u2500 EndorsementCA-external.pem \u2502 \u2502 \u2514\u2500\u2500 EndorsementCA.pem \u2502 \u251c\u2500\u2500 trustedca \u2502 \u2502 \u251c\u2500\u2500 flavor-signing.pem \u2502 \u2502 \u251c\u2500\u2500 privacy-ca \u2502 \u2502 \u2502 \u2514\u2500\u2500 privacy-ca-cert.pem \u2502 \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2502 \u251c\u2500\u2500 58f6bcfcd.pem \u2502 \u2502 \u2502 \u251c\u2500\u2500 vmware-cert1.pem \u2502 \u2502 \u2502 \u2514\u2500\u2500 vmware-cert2.pem \u2502 \u2502 \u251c\u2500\u2500 saml-cert.pem \u2502 \u2502 \u2514\u2500\u2500 tag-ca-cert.pem \u2502 \u2514\u2500\u2500 trustedjwt \u2502 \u2514\u2500\u2500 f29aa4ab3.pem \u251c\u2500\u2500 config.yml \u251c\u2500\u2500 hvsdbsslcert.pem \u251c\u2500\u2500 tls-cert.pem \u251c\u2500\u2500 tls.key \u2514\u2500\u2500 trusted-keys \u200b \u251c\u2500\u2500 endorsement-ca.key \u200b \u251c\u2500\u2500 flavor-signing.key \u200b \u251c\u2500\u2500 privacy-ca.key \u200b \u251c\u2500\u2500 saml.key \u200b \u2514\u2500\u2500 tag-ca.key","title":"11.1.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112-trust-agent","text":"","title":"11.2  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1121-installation-answer-file-options","text":"Key Sample Value Description AAS_API_URL AAS_API_URL=https://{host}:{port}/aas/v1 API URL for Authentication Authorization Service (AAS). AUTOMATIC_PULL_MANIFEST AUTOMATIC_PULL_MANIFEST=Y Instructs the installer to automatically pull application-manifests from HVS similar to tagent setup get-configured-manifest AUTOMATIC_REGISTRATION AUTOMATIC_REGISTRATION=Y Instructs the installer to automatically register the host with HVS similar to running tagent setup create-host and tagent setup create-host-unique-flavor. BEARER_TOKEN BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsjdkMTdiNmUz... JWT from AAS that contains \"install\" permissions needed to access ISecL services during provisioning and registration CMS_BASE_URL CMS_BASE_URL=https://{host}:{port}/cms/v1 API URL for Certificate Management Service (CMS). CMS_TLS_CERT_SHA384 CMS_TLS_CERT_SHA384=bd8ebf5091289958b5765da4... SHA384 Hash sum for verifying the CMS TLS certificate. MTWILSON_API_URL MTWILSON_API_URL=https://{host}:{port}/hvs/v2 The url used during setup to request information from HVS. PROVISION_ATTESTATION PROVISION_ATTESTATION=Y When present, enables/disables whether tagent setup is called during installation. If trustagent.env is not present, the value defaults to no ('N'). SAN_LIST SAN_LIST=10.123.100.1,201.102.10.22,mya.example.com CSV list that sets the value for SAN list in the TA TLS certificate. Defaults to 127.0.0.1. TA_TLS_CERT_CN TA_TLS_CERT_CN=Acme Trust Agent 007 Sets the value for Common Name in the TA TLS certificate. Defaults to CN=trustagent. TPM_OWNER_SECRET TPM_OWNER_SECRET=625d6... 20 byte hex value to be used as the secret key when taking ownership of the TPM. Note: If this field is not specified, GTA will generate a random secret key. TPM_QUOTE_IPV4 TPM_QUOTE_IPV4=no When enabled (=y), uses the local system's ip address as a salt when processing a quote nonce. This field must align with the configuration of HVS. TA_SERVER_READ_TIMEOUT TA_SERVER_READ_TIMEOUT=30 Sets tagent server ReadTimeout. Defaults to 30 seconds. TA_SERVER_READ_HEADER_TIMEOUT TA_SERVER_READ_HEADER_TIMEOUT=10 Sets tagent server ReadHeaderTimeout. Defaults to 30 seconds. TA_SERVER_WRITE_TIMEOUT TA_SERVER_WRITE_TIMEOUT=10 Sets tagent server WriteTimeout. Defaults to 10 seconds. TA_SERVER_IDLE_TIMEOUT TA_SERVER_IDLE_TIMEOUT=10 Sets tagent server IdleTimeout. Defaults to 10 seconds. TA_SERVER_MAX_HEADER_BYTES TA_SERVER_MAX_HEADER_BYTES=1048576 Sets tagent server MaxHeaderBytes. Defaults to 1MB(1048576) TA_ENABLE_CONSOLE_LOG TA_ENABLE_CONSOLE_LOG=true When set true, tagent logs are redirected to stdout. Defaults to false TRUSTAGENT_LOG_LEVEL TRUSTAGENT_LOG_LEVEL=debug The logging level to be saved in config.yml during installation (\"trace\", \"debug\", \"info\"). TRUSTAGENT_PORT TRUSTAGENT_PORT=10433 The port on which the trust-agent service will listen.","title":"11.2.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1122-configuration-options","text":"The Trust Agent configuration settings are managed in /opt/trustagent/configuration/config.yml Setting Description tpmquoteipv4: true When enabled, the Trust Agent will perform an additional hash of the nonce using the bytes from the Trust Agent server IP when returning TPM quotes. This should always be set to True. logging: loglevel: info Defines the Trust Agent logging level logenablestdout: false If set to True, the Trust Agent will log to stdout. By default this is False and the logs are sent to /var/log/trustagent/trustagent.log logentrymaxlength: 300 Defines the maximum length of a single log entry webservice: port: 1443 Defines the port on which the Trust Agent API server will listen readtimeout: 30s readheadertimeout: 10s writetimeout: 10s idletimeout: 10s maxheaderbytes: 1048576 hvs: url: https://0.0.0.0:8443/hvs/v2 Defines the baseurl for the Verification Service tpm: ownersecretkey: 625d6d8...1be0b4e957 Defines the TPM ownership secret. This is randomly generated unless manually specified during installation in the trustagent.env file. Note that changing this value may require clearing the TPM ownership in the server BIOS. aiksecretkey: 59acd1367...edcbede60c Defines the AIK secret. Randomly generated. If this is changed, a new AIK will need to be provisioned. aas: baseurl: https://0.0.0.0:8444/aas/ Defines the base URL for the AAS cms: baseurl: https://0.0.0.0:8445/cms/v1 Defines the base URL for the CMS tlscertdigest: 330086b3...ae477c8502 Defines the SHA383 hash of the CMS TLS certificate tls: certsan: 10.1.2.3,server.domain.com,localhost Comma-separated list of hostnames and IP addresses for the Trust Agent. Used in the Agent TLS certificate. certcn: Trust Agent TLS Certificate Common Name for the Trust Agent TLS certificate","title":"11.2.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1123-command-line-options","text":"","title":"11.2.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11231-available-commands","text":"","title":"11.2.3.1  Available Commands"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112311-help","text":"Show the help message.","title":"11.2.3.1.1  help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112312-setup-task","text":"Run setup task. Available Tasks for 'setup':","title":"11.2.3.1.2  setup [task]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-all","text":"- Runs all setup tasks to provision the trust agent. - Required environment variables: AAS_API_URL, CMS_BASE_URL, CMS_TLS_CERT_SHA384, BEARER_TOKEN, MTWILSON_API_URL","title":"tagent setup (all)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-trustagentenv","text":"- Runs all setup tasks to provision the trust agent using trustagent.env file for environment variables (the file must contain all of the required environment variables listed in 'tagent setup (all)'. See \"Environment variables\" below).","title":"tagent setup trustagent.env"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-download-ca-cert","text":"- Fetches the latest CMS Root CA Certificates, overwriting existing files. - Required environment variables: BEARER_TOKEN, CMS_BASE_URL","title":"tagent setup download-ca-cert"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-download-cert","text":"- Fetches a signed TLS Certificate from CMS, overwriting existing files. - Required environment variables: CMS_BASE_URL, CMS_TLS_CERT_SHA384","title":"tagent setup download-cert"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-update-certificates","text":"- Runs 'download-ca-cert' and 'download-cert' - Required environment variables: CMS_BASE_URL, CMS_TLS_CERT_SHA384, BEARER_TOKEN","title":"tagent setup update-certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-provision-attestation","text":"- Runs setup tasks associated with HVS/TPM provisioning. - Required environment variables: BEARER_TOKEN, MTWILSON_API_URL","title":"tagent setup provision-attestation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-create-host","text":"- Registers the trust agent with the verification service. - Required environment variables: BEARER_TOKEN, MTWILSON_API_URL","title":"tagent setup create-host"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-create-host-unique-flavor","text":"- Populates the verification service with the host unique flavor - Required environment variables: BEARER_TOKEN, MTWILSON_API_URL","title":"tagent setup create-host-unique-flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tagent-setup-get-configured-manifest","text":"- Uses environment variables to pull application-integrity. manifests from the verification service. - Required Environment variables: BEARER_TOKEN, MTWILSON_API_URL, FLAVOR_UUIDS or FLAVOR_LABELS","title":"tagent setup get-configured-manifest"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#environment-variables-used-by-tagent-setup","text":"* Indicates the environment variable is optional. AAS_API_URL - Used by the trust agent service to validate jwt/bearer tokens. - Ex. AAS_API_URL=https://{host}:{port}/aas/v1 AUTOMATIC_PULL_MANIFEST* - When 'Y', instructs the installer to download application manifests using the FLAVOR_UUIDS or FLAVOR_LABELS environment variables by running 'get-configured-manifest'. Defaults to 'N'. - Ex. AUTOMATIC_PULL_MANIFEST=Y AUTOMATIC_REGISTRATION* - When 'Y', instructs the installer to register the host with HVS by running 'create-host' and 'create-host-unique-flavor'. Defaults to 'N'. - Ex. AUTOMATIC_REGISTRATION=Y BEARER_TOKEN - 'jwt' token used during setup to communicate to CMS and HVS. - Ex. BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsjdkMTdiNmUz... CMS_BASE_URL - URL used by setup to download root-ca and tls certificates from CMS. - Ex. CMS_BASE_URL=https://{host}:{port}/cms/v1 CMS_TLS_CERT_SHA384 - SHA384 sum used during setup to secure communications with CMS. - Ex. CMS_TLS_CERT_SHA384=bd8ebf5091289958b5765da4... MTWILSON_API_URL - The URL used during setup to collect information from HVS. - MTWILSON_API_URL=https://{host}:{port}/hvs/v2 PROVISION_ATTESTATION* - When 'Y', instructs the installer to provision the host with HVS by calling 'tagent setup'. Defaults to 'N'. - Ex. AUTOMATIC_REGISTRATION=Y SAN_LIST* - CSV list that sets the value for SAN list in the TA TLS certificate. Defaults to \"127.0.0.1,localhost\". - Ex. SAN_LIST=10.123.100.1,201.102.10.22,my.example.com TA_ENABLE_CONSOLE_LOG* - When set to 'true', trust agent logs are redirected to stdout. Defaults to false. - Ex. TA_ENABLE_CONSOLE_LOG=true TA_SERVER_IDLE_TIMEOUT* - Sets the trust agent service's idle timeout. Defaults to 10 seconds. - Ex. TA_SERVER_IDLE_TIMEOUT=10 TA_SERVER_MAX_HEADER_BYTES* - Sets trust agent service's maximum header bytes. Defaults to 1MB. - Ex. TA_SERVER_MAX_HEADER_BYTES=1048576 TA_SERVER_READ_TIMEOUT* - Sets trust agent service's read timeout. Defaults to 30 seconds. - Ex. TA_SERVER_READ_TIMEOUT=30 TA_SERVER_READ_HEADER_TIMEOUT* - Sets trust agent service's read header timeout. Defaults to 30 seconds. - Ex. TA_SERVER_READ_HEADER_TIMEOUT=10 TA_SERVER_WRITE_TIMEOUT* - Sets trust agent service's write timeout. Defaults to 10 seconds. - Ex. TA_SERVER_WRITE_TIMEOUT=10 TA_TLS_CERT_CN* - Sets the value for Common Name in the TA TLS certificate. Defaults to \"Trust Agent TLS Certificate\". - Ex. TA_TLS_CERT_CN=Acme Trust Agent 007 TPM_OWNER_SECRET* - When provided, setup uses the 40 character hex string for the TPM owner password. The TPM owner secret is generated when not provided. - Ex. TPM_OWNER_SECRET=625d6d8a18f98bf764760fa392b8c01be0b4e959 TPM_QUOTE_IPV4* - When 'Y', used the local system's ip address a salt when processing TPM quotes. Defaults to 'N'. - Ex. TPM_QUOTE_IPV4=Y TRUSTAGENT_LOG_LEVEL* - Sets the verbosity level of logging (trace|debug|info|error). Defaults to 'info'. - Ex. TRUSTAGENT_LOG_LEVEL=debug TRUSTAGENT_PORT* - The port on which the trust agent service will listen. - Ex. TRUSTAGENT_PORT=10433","title":"Environment variables used by tagent setup:"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112313-uninstall","text":"Uninstall trust agent.","title":"11.2.3.1.3  uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112314-version","text":"Print build version info.","title":"11.2.3.1.4  version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112315-start","text":"Start the trust agent service.","title":"11.2.3.1.5  start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112316-stop","text":"Stop the trust agent service.","title":"11.2.3.1.6  stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112327-status","text":"Get the status of the trust agent service.","title":"11.2.3.2.7  status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1124-directory-layout","text":"","title":"11.2.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11241-windows","text":"","title":"11.2.4.1  Windows"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11242-linux","text":"The Linux Trust Agent installs by default to /opt/trustagent , with the following subfolders:","title":"11.2.4.2 Linux"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112421-bin","text":"Contains executables and scripts.","title":"11.2.4.2.1  Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112422-configuration","text":"Contains the config.yml configuration file, as well as certificates and keystores. This includes the AIK public key blob after provitioning.","title":"11.2.4.2.2  Configuration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112423-var","text":"Contains information gathered from the platform and SOFTWARE Flavor manifests. All files with the name manifest_*.xml will be parsed to define measurements during boot. Generally these should be automatically provisioned from the Verification Service when creating/deploying SOFTWARE Flavors.","title":"11.2.4.2.3  Var"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#113-integration-hub","text":"","title":"11.3  Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1131-installation-answer-file","text":"# Authentication URL and service account credentials AAS_API_URL=https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME=<Integration Hub Service User username> IHUB_SERVICE_PASSWORD=<Integration Hub Service User password> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL=https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384=<TLS hash> # TLS Configuration TLS_SAN_LIST=127.0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL=https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE=HVS #Integration tenant type. Currently supported values are \"KUBENETES\" or \"OPENSTACK\" TENANT=<KUBERNETES or OPENSTACK> # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_AUTH_URL=<OpenStack Keystone URL; typically http://openstack-ip:5000/> OPENSTACK_PLACEMENT_URL=<OpenStack Nova API URL; typically http://openstack-ip:8778/> OPENSTACK_USERNAME=<OpenStack username> OPENSTACK_PASSWORD=<OpenStack password> # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL=https://kubernetes:6443/ KUBERNETES_CRD=custom-isecl KUBERNETES_CERT_FILE=/etc/ihub/apiserver.crt KUBERNETES_TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 #Optional, configures the polling interval at which the Hub retrieves attestations from the HVS POLL_INTERVAL_MINUTES=2 #Optional, runs the installer skipping setup IHUB_NO_SETUP=false #Optional, configures the TLS certificate common name TLS_COMMON_NAME=Integration Hub TLS Certificate #Optional, log configuration LOG_MAX_LENGTH=1500 LOG_LEVEL=Info LOG_ENABLE_STDOUT=true","title":"11.3.1  Installation Answer File"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1132-configuration-options","text":"config-file: /etc/ihub/config log: max-length: 1500 enable-stdout: true level: trace ihub: service-username: admin@hub service-password: hubAdminPass poll-interval-minutes: 1 aas: url: https://<aas_ip>:8444/aas cms: url: https://<cms_ip>:8445/cms/v1/ tls-cert-digest: 8a035e3cdd... attestation-service: attestation-url: https://<hvs_ip>:8443/hvs/v2 attestation-type: HVS end-point: type: KUBERNETES or OPENSTACK url: https://<kubernetes_ip>:6443/ or OpenStack Nova URL crd-name: custom-isecl token: eyJhbGciOiJSUzI... username: OpenStack Username password: OpenStack Password auth-url: OpenStack Authentication URL cert-file: /etc/ihub/apiserver.crt tls: cert-file: /etc/ihub/tls-cert.pem key-file: /etc/ihub/tls-key.pem common-name: Integration Hub TLS Certificate san-list: 127.0.0.1,localhost","title":"11.3.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1133-command-line-options","text":"","title":"11.3.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11331-available-commands","text":"","title":"11.3.3.1  Available Commands"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#113311-help","text":"ihub -h | --help Displays the list of available CLI commands.","title":"11.3.3.1.1  Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#113312-start","text":"ihub start Starts the services.","title":"11.3.3.1.2  Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#113313-stop","text":"ihub stop Stops the services.","title":"11.3.3.1.3  Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#113315-status","text":"ihub status Reports whether the service is currently running.","title":"11.3.3.1.5  Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#113315-uninstall","text":"ihub uninstall [--purge] Uninstalls the service, including the deletion of all files and folders. Database content is not removed. If the --purge option is used, database content will be removed during the uninstallation.","title":"11.3.3.1.5  Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#113316-version","text":"ihub -v | --version Reports the version of the service.","title":"11.3.3.1.6  Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1133110-setup","text":"ihub setup <task> [--help] [--force] [-f <answer-file>] Re-runs the installation setup tasks, or the specific tasks listed. --help Shows help message for setup tasks --force Any existing configuration will be overwritten if this flag is set -f|--file Path to the ihub.env answer file Available Tasks for setup: \u200b all Runs all setup tasks \u200b download-ca-cert Download CMS root CA certificate \u200b download-cert-tls Download CA certificate from CMS for tls \u200b attestation-service-connection Establish Attestation service connection \u200b tenant-service-connection Establish Tenant service connection \u200b create-signing-key Create signing key for IHUB \u200b download-saml-cert Download SAML certificate from Attestation service","title":"11.3.3.1.10  Setup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1134-directory-layout","text":"The ihub installs by default to /etc/ihub. This directory contains the config.yaml configuration file, saml certificate, trusted ca, and the webservice TLS certificate. /etc/ihub/ \u251c\u2500\u2500 apiserver.crt \u251c\u2500\u2500 certs \u2502 \u251c\u2500\u2500 saml \u2502 \u2502 \u2514\u2500\u2500 saml-cert.pem \u2502 \u2514\u2500\u2500 trustedca \u2502 \u2514\u2500\u2500 58f6bcfcd.pem \u251c\u2500\u2500 config.yml \u251c\u2500\u2500 ihub_private_key.pem \u251c\u2500\u2500 ihub_public_key.pem \u251c\u2500\u2500 tls-cert.pem \u2514\u2500\u2500 tls-key.pem","title":"11.3.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1341-logs","text":"/var/logs/ihub","title":"1.3.4.1  Logs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#114-certificate-management-service","text":"","title":"11.4  Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1141-installation-answer-file-options","text":"Key Sample Value Description CMS_NOSETUP false Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. CMS_PORT 8445 Defines the HTTPS port the service will use. AAS_API_URL https://\\<Hostname or IP address of the AAS>:8444/aas/ URL to connect to the AAS, used during setup for authentication. AAS_TLS_SAN \\<Comma-separated list of IPs/hostnames for the AAS> SAN list populated in special JWT token, this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match. LOG_ROTATION_PERIOD hourly, daily, weekly, monthly, yearly log rotation period, for more details refer- https://linux.die.net/man/8/logrotate LOG_COMPRESS Compress Old versions of log files are compressed with gzip, for more details refer- https://linux.die.net/man/8/logrotate LOG_DELAYCOMPRESS delaycompress Postpone compression of the previous log file to the next rotation cycle, for more details refer- https://linux.die.net/man/8/logrotate LOG_COPYTRUNCATE Copytruncate Truncate the original log file in place after creating a copy,'create' creates new one, for more details refer- https://linux.die.net/man/8/logrotate LOG_SIZE 1K Log files are rotated when they grow bigger than size bytes, for more details refer- https://linux.die.net/man/8/logrotate LOG_OLD 12 Log files are rotated count times before being removed, for more details refer- https://linux.die.net/man/8/logrotate CMS_CA_CERT_VALIDITY 5 CMS Root Certificate Validity in years CMS_CA_ORGANIZATION INTEL CMS Certificate Organization CMS_CA_LOCALITY US CMS Certificate locality CMS_CA_PROVINCE CA CMS Certificate province CMS_CA_COUNTRY USA CMS Certificate country CMS_TLS_SAN_LIST Comma-separated list of IP addresses and hostnames to be added to the SAN list of CMS server CMS_SERVER_READ_TIMEOUT 30s MS server - ReadTimeout is the maximum duration for reading the entire request, including the body. CMS_SERVER_READ_HEADER_TIMEOUT 10s CMS server - ReadHeaderTimeout is the amount of time allowed to read request headers CMS_SERVER_WRITE_TIMEOUT 10s CMS server - WriteTimeout is the maximum duration before timing out writes of the response. CMS_SERVER_IDLE_TIMEOUT 10s CMS server - IdleTimeout is the maximum amount of time to wait for the next request when keep-alives are enabled. CMS_SERVER_MAX_HEADER_BYTES 1048576 CMS server - MaxHeaderBytes controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. AAS_JWT_CN AAS JWT Signing Certificate CN of AAS JWT certificate, this gets populated in special JWT token. AAS must send JWT certificate CSR with this CN. AAS_TLS_CN AAS TLS Certificate CN of AAS TLS certificate, this gets populated in special JWT token. AAS must send TLS certificate CSR with this CN. AAS_TLS_SAN SAN list populated in special JWT token, this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match.","title":"11.4.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1142-configuration-options","text":"The CMS configuration can be found in /etc/cms/config.yml port : 8445 loglevel : info authserviceurl : https://<AAS IP or hostname>:8444/aas/ cacertvalidity : 5 organization : INTEL locality : SC province : CA country : US keyalgorithm : rsa keyalgorithmlength : 3072 rootcacertdigest : <sha384> tlscertdigest : <sha384> tokendurationmins : 20 aasjwtcn : \"\" aastlscn : \"\" aastlssan : \"\" authdefender : maxattempts : 5 intervalmins : 5 lockoutdurationmins : 15","title":"11.4.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1143-command-line-options","text":"","title":"11.4.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11431-help","text":"cms help Displays the list of available CLI commands.","title":"11.4.3.1  Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11432-start","text":"cms start Starts the services.","title":"11.4.3.2  Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11433-stop","text":"cms stop Stops the service.","title":"11.4.3.3  Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11435-status","text":"cms status Reports whether the service is currently running.","title":"11.4.3.5  Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11436-uninstall","text":"cms uninstall Uninstalls the service, including the deletion of all files and folders.","title":"11.4.3.6  Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11437-version","text":"cms version Reports the version of the service.","title":"11.4.3.7  Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11438-tlscertsha384","text":"Shows the SHA384 of the TLS certificate.","title":"11.4.3.8  Tlscertsha384"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11439-setup-task","text":"Runs a specific setup task. Avaliable Tasks for setup:","title":"11.4.3.9  setup [task]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#cms-setup-server-portport","text":"- Setup http server on \\<port> - Environment variable CMS_PORT=\\<port> can be set alternatively","title":"cms setup server [--port=&lt;port&gt;]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#cms-setup-root_ca-force","text":"- Create its own self signed Root CA keypair in /etc/cms for quality of life - Option [--force] overwrites any existing files, and always generate new Root CA keypair","title":"cms setup root_ca [--force]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#cms-setup-tls-force-host_nameshost_names","text":"- Create its own root_ca signed TLS keypair in /etc/cms for quality of life - Option [--force] overwrites any existing files, and always generate root_ca signed TLS keypair - Argument \\<host_names> is a list of host names used by local machine, seperated by comma - Environment variable CMS_HOST_NAMES=\\<host_names> can be set alternatively","title":"cms setup tls [--force] [--host_names=&lt;host_names&gt;]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#cms-setup-cms_auth_token-force","text":"- Create its own self signed JWT keypair in /etc/cms/jwt for quality of life - Option [--force] overwrites any existing files, and always generate new JWT keypair and token","title":"cms setup cms_auth_token [--force]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1144-directory-layout","text":"The Certificate Management Service installs by default to /opt/cms with the following folders.","title":"11.4.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11441-bin","text":"This folder contains executable scripts.","title":"11.4.4.1  Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11442-cacerts","text":"This folder contains the CMS root CA certificate.","title":"11.44.2 Cacerts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115-authentication-and-authorization-service","text":"","title":"11.5  Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1151-installation-answer-file-options","text":"Key Sample Value Description CMS_BASE_URL https://<cms IP or hostname>/cms/v1/ Required; Provides the URL for the CMS. AAS_NOSETUP false Optional. Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. AAS_DB_HOSTNAME localhost Required. Hostname or IP address of the AAS database AAS_DB_PORT 5432 Required. Database port number AAS_DB_NAME pgdb Required. Database name AAS_DB_USERNAME dbuser Required. Database username AAS_DB_PASSWORD dbpassword Required. Database password AAS_DB_SSLMODE verify-ca Defines the SSL mode for the connection to the database. If not specified, the database connection will not use certificate verification. If specified, certificate verification will be required for database connections. AAS_DB_SSLCERTSRC /usr/local/pgsql/data/server.crt Optional, required if the \u201cAAS_DB_SSLMODE is set to verify-ca Defines the location of the database SSL certificate. AAS_DB_SSLCERT \\<path_to_cert_file_on_system> Optional. The AAS_DB_SSLCERTSRC variable defines the source location of the database SSL certificate; this variable determines the local location. If the former option is used without specifying this option, the service will copy the SSL certificate to the default configuration directory. AAS_ADMIN_USERNAME admin@aas Required. Defines a new AAS administrative user. This user will be able to create new users, new roles, and new role-user mappings. This user will have the AAS:Administrator role. AAS_ADMIN_PASSWORD aasAdminPass Required. Password for the new AAS admin user. AAS_JWT_CERT_SUBJECT \"AAS JWT Signing Certificate\" Optional. Defines the subject of the JWT signing certificate. AAS_JWT_TOKEN_DURATION_MINS 5 Optional. Defines the amount of time in minutes that an issued token will be valid. SAN_LIST 127.0.0.1,localhost,10.x.x.x Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. BEARER_TOKEN \\<token> Required. Token from the CMS generated during CMS setup that allows the AAS to perform initial setup tasks. LOG_LEVEL Critical, error, warning, info, debug, trace Optional. Defaults to INFO. Changes the log level used.","title":"11.5.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1152-configuration-options","text":"","title":"11.5.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1153-command-line-options","text":"","title":"11.5.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11531-help","text":"Displays the list of available CLI commands.","title":"11.5.3.1  Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11532-setup-task","text":"Executes a specific setup task. Can be used to change the current configuration. Available Tasks for setup:","title":"11.5.3.2  setup \\&lt;task>"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115321-authservice-setup-all","text":"- Runs all setup tasks","title":"11.5.3.2.1  authservice setup all"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115322-authservice-setup-database-force-argumentsargument_value","text":"- Available arguments are: - db-host alternatively, set environment variable AAS_DB_HOSTNAME - db-port alternatively, set environment variable AAS_DB_PORT - db-user alternatively, set environment variable AAS_DB_USERNAME - db-pass alternatively, set environment variable AAS_DB_PASSWORD - db-name alternatively, set environment variable AAS_DB_NAME - db-sslmode \\<disable|allow|prefer|require|verify-ca|verify-full> alternatively, set environment variable AAS_DB_SSLMODE - db-sslcert path to where the certificate file of database. Only applicable for db-sslmode=\\<verify-ca|verify-full. If left empty, the cert will be copied to /etc/authservice/tdcertdb.pem alternatively, set environment variable AAS_DB_SSLCERT - db-sslcertsrc \\<path to where the database ssl/tls certificate file> mandatory if db-sslcert does not already exist alternatively, set environment variable AAS_DB_SSLCERTSRC - Run this command with environment variable AAS_DB_REPORT_MAX_ROWS and AAS_DB_REPORT_NUM_ROTATIONS can update db rotation arguments","title":"11.5.3.2.2  authservice setup database [-force] [--arguments=\\&lt;argument_value>]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115323-authservice-setup-server-portport","text":"- Setup http server on \\<port> - Environment variable AAS_PORT=\\<port> can be set alternatively authservice setup tls [--force] [--host_names=\\<host_names>] - Use the key and certificate provided in /etc/threat-detection if files exist - Otherwise create its own self-signed TLS keypair in /etc/authservice for quality of life - Option [--force] overwrites any existing files, and always generate self-signed keypair - Argument \\<host_names> is a list of host names used by local machine, seperated by comma - Environment variable AAS_TLS_HOST_NAMES=\\<host_names> can be set alternatively","title":"11.5.3.2.3  authservice setup server [--port=&lt;port&gt;]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115324-authservice-setup-admin-userusername-passpassword","text":"- Environment variable AAS_ADMIN_USERNAME=\\<username> can be set alternatively - Environment variable AAS_ADMIN_PASSWORD=\\<password> can be set alternatively","title":"11.5.3.2.4  authservice setup admin [--user=&lt;username&gt;] [--pass=&lt;password&gt;]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115325-authservice-setup-download_ca_cert-force","text":"- Download CMS root CA certificate - Option [--force] overwrites any existing files, and always downloads new root CA cert - Environment variable CMS_BASE_URL=\\<url> for CMS API url","title":"11.5.3.2.5  authservice setup download_ca_cert [--force]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115326-authservice-setup-download_cert-tls-force","text":"- Generates Key pair and CSR, gets it signed from CMS - Option [--force] overwrites any existing files, and always downloads newly signed TLS cert - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS - Environment variable KEY_PATH=\\<key_path> to override default specified in config - Environment variable CERT_PATH=\\<cert_path> to override default specified in config - Environment variable AAS_TLS_CERT_CN=\\<TLS CERT COMMON NAME> to override default specified in config - Environment variable AAS_CERT_ORG=\\<CERTIFICATE ORGANIZATION> to override default specified in config - Environment variable AAS_CERT_COUNTRY=\\<CERTIFICATE COUNTRY> to override default specified in config - Environment variable AAS_CERT_LOCALITY=\\<CERTIFICATE LOCALITY> to override default specified in config - Environment variable AAS_CERT_PROVINCE=\\<CERTIFICATE PROVINCE> to override default specified in config - Environment variable SAN_LIST=\\<san> list of hosts which needs access to service","title":"11.5.3.2.6  authservice setup download_cert TLS [--force]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115327-authservice-setup-jwt","text":"- Create jwt signing key and jwt certificate signed by CMS - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable AAS_JWT_CERT_CN=\\<CERTIFICATE SUBJECT> AAS JWT Certificate Subject - Environment variable AAS_JWT_INCLUDE_KEYID=\\<KEY ID> AAS include key id in JWT Token - Environment variable AAS_JWT_TOKEN_DURATION_MINS=\\<DURATION> JWT Token validation minutes - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS","title":"11.5.3.2.7  authservice setup jwt"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115328-start","text":"Starts the service.","title":"11.5.3.2.8  Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115329-status","text":"Displays the current status of the service.","title":"11.5.3.2.9  Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1153210-stop","text":"Stops the service.","title":"11.5.3.2.10  Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1153211-tlscertsha384","text":"Shows the SHA384 of the TLS certificate.","title":"11.5.3.2.11  tlscertsha384"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1153212-uninstall","text":"Removes the service. Use the \u201c--purge\u201d flag to also delete all data.","title":"11.5.3.2.12  Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1153213-version","text":"Shows the version of the service.","title":"11.5.3.2.13  Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1154-directory-layout","text":"The Verification Service installs by default to /opt/authservice with the following folders.","title":"11.5.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11541-bin","text":"Contains executable scripts and binaries.","title":"11.5.4.1 Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11542-dbscripts","text":"Contains database scripts.","title":"11.5.4.2  dbscripts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116-workload-service","text":"","title":"11.6  Workload Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1161-installation-answer-file-options","text":"Key Sample Value Description WLS_LOGLEVEL INFO (Optional) Alternatives include WARN and DEBUG. Sets the log level for the service. WLS_NOSETUP false (Optional) Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. Defaults to \u201cfalse\u201d if unset. WLS_PORT 5000 (Optional) Defines the HTTPS port used by the service Defaults to 5000 if unset. WLS_DB_HOSTNAME localhost (Required) Database hostname WLS_DB wlsdb (Required) Database name WLS_DB_PORT 5432 (Required) Database port number WLS_DB_USERNAME wlsdbuser (Required) Database username WLS_DB_PASSWORD wlsdbuserpass (Required) Database password HVS_URL https://\\<HVS IP address or hostname>:8443/hvs/v2/ (Required) Base URL for the HVS AAS_API_URL https://\\<AAS IP address or hostname>:8444/aas Base URL for the AAS SAN_LIST 127.0.0.1,localhost,10.x.x.x Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. CMS_BASE_URL Base URL for the CMS BEARER_TOKEN \\<token> (Required) Token from the CMS generated during CMS setup that allows the AAS to perform initial setup tasks. WLS_TLS_CERT_CN 'WLS TLS Certificate (Optional) Set the Common name for TLS cert to be downloaded from CMS. Default is 'WLS TLS Certificate'. WLS_CERT_ORG 'INTEL' (Optional) Set the Organization in Subject of CSR. Default is 'INTEL'. WLS_CERT_COUNTRY 'US' (Optional) Set the Country in Subject of CSR. Default is 'US'. WLS_CERT_PROVINCE 'SF' (Optional) Set the Province in Subject of CSR. Default is 'SF'. WLS_CERT_LOCALITY 'SC' (Optional) Set the Locality in Subject of CSR. Default is 'SC'. KEY_CACHE_SECONDS 300 (Optional) Set the time till which the key will be cached. Default is '300 seconds'. WLS_LOGLEVEL Info, debug, error, warn (Optional) Set the log level. KEY_PATH (Optional) Redefines the path to the keystore folder CERT_PATH (Optional) Redefines the path to the certificates folder","title":"11.6.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1162-configuration-options","text":"The Workload Service configuration can be found in /etc/workload-service/config.yml : port: 5000 cmstlscertdigest: <sha384> postgres: dbname: wlsdb user: <database username> password: <database password> hostname: <database IP or hostname> port: 5432 sslmode: false hvs_api_url: https://<HVS IP or hostname>:8443/hvs/v2/ cms_base_url: https://<CMS IP or hostname>:8445:/cms/v1/ aas_api_url: https://<AAS IP or hostname>:8444/aas/ subject: tlscertcommonname: WLS TLS Certificate organization: INTEL country: US province: SF locality: SC wls: user: <username of service account used by WLS to access other services>> password: <password> loglevel: info key_cache_seconds: 300","title":"11.6.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1163-command-line-options","text":"The Workload Service supports several command-line commands that can be executed only as the Root user: Syntax: workload-service <command>","title":"11.6.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11631-help","text":"Available Commands: help|-help|--help Show this help message start Start workload-service stop Stop workload-service status Determine if workload-service is running uninstall [--purge] Uninstall workload-service. --purge option needs to be applied to remove configuration and data files setup Setup workload-service for use Setup command usage: workload-service \\<command> [task...] Available tasks for setup: download_ca_cert - Download CMS root CA certificate - Environment variable CMS_BASE_URL=\\<url> for CMS API url download_cert TLS - Generates Key pair and CSR, gets it signed from CMS - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS - Environment variable KEY_PATH=\\<key_path> to override default specified in config - Environment variable CERT_PATH=\\<cert_path> to override default specified in config - Environment variable WLS_TLS_CERT_CN=\\<COMMON NAME> to override default specified in config - Environment variable WLS_CERT_ORG=\\<CERTIFICATE ORGANIZATION> to override default specified in config - Environment variable WLS_CERT_COUNTRY=\\<CERTIFICATE COUNTRY> to override default specified in config - Environment variable WLS_CERT_LOCALITY=\\<CERTIFICATE LOCALITY> to override default specified in config - Environment variable WLS_CERT_PROVINCE=\\<CERTIFICATE PROVINCE> to override default specified in config server Setup http server on given port -Environment variable WLS_PORT=\\<port> should be set database Setup workload-service database Required env variables are: - WLS_DB_HOSTNAME : database host name - WLS_DB_PORT : database port number - WLS_DB_USERNAME : database user name - WLS_DB_PASSWORD : database password - WLS_DB : database schema name hvsconnection Setup task for setting up the connection to the Host Verification Service(HVS) Required env variables are: - HVS_URL : HVS URL aasconnection Setup to create workload service user roles in AAS - AAS_API_URL : AAS API URL - BEARER_TOKEN : Bearer Token logs Setup workload-service log level - Environment variable WLS_LOG_LEVEL=\\<log level> should be set","title":"11.6.3.1  Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11632-start","text":"Start workload-service","title":"11.6.3.2  start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11633-stop","text":"Stop workload-service","title":"11.6.3.3  stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11634-status","text":"Determine if workload-service is running","title":"11.6.3.4  status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11635-uninstall","text":"[--purge] Uninstall workload-service. --purge option needs to be applied to remove configuration and data files","title":"11.6.3.5  uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11636-setup","text":"Setup workload-service for use Setup command usage: workload-service \\<command> [task...]","title":"11.6.3.6  setup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116361-download_ca_cert","text":"- Download CMS root CA certificate - Environment variable CMS_BASE_URL=\\<url> for CMS API url","title":"11.6.3.6.1  download_ca_cert"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116362-download_cert-tls","text":"- Generates Key pair and CSR, gets it signed from CMS - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS - Environment variable KEY_PATH=\\<key_path> to override default specified in config - Environment variable CERT_PATH=\\<cert_path> to override default specified in config - Environment variable WLS_TLS_CERT_CN=\\<COMMON NAME> to override default specified in config - Environment variable WLS_CERT_ORG=\\<CERTIFICATE ORGANIZATION> to override default specified in config - Environment variable WLS_CERT_COUNTRY=\\<CERTIFICATE COUNTRY> to override default specified in config - Environment variable WLS_CERT_LOCALITY=\\<CERTIFICATE LOCALITY> to override default specified in config - Environment variable WLS_CERT_PROVINCE=\\<CERTIFICATE PROVINCE> to override default specified in config","title":"11.6.3.6.2  download_cert TLS"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116363-server","text":"Setup http server on given port -Environment variable WLS_PORT=\\<port> should be set","title":"11.6.3.6.3  server"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116364-database-setup-workload-service-database","text":"Required env variables are: - WLS_DB_HOSTNAME : database host name - WLS_DB_PORT : database port number - WLS_DB_USERNAME : database user name - WLS_DB_PASSWORD : database password - WLS_DB : database schema name","title":"11.6.3.6.4  database     Setup workload-service database"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116365-hvsconnection","text":"Setup task for setting up the connection to the Host Verification Service(HVS) Required env variables are: - HVS_URL : HVS URL","title":"11.6.3.6.5  hvsconnection"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116366-aasconnection","text":"Setup to create workload service user roles in AAS - AAS_API_URL : AAS API URL - BEARER_TOKEN : Bearer Token","title":"11.6.3.6.6  aasconnection"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116367-logs","text":"Setup workload-service log level - Environment variable WLS_LOG_LEVEL=\\<log level> should be set","title":"11.6.3.6.7  logs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1164-directory-layout","text":"The Workload Service installs by default to /opt/wls with the following folders.","title":"11.6.4 Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#117-key-broker-service","text":"","title":"11.7  Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1171-installation-answer-file-options","text":"Variable Name Default Value Notes USERNAME KBS admin username PASSWORD KBS admin password CMS_BASE_URL Required for generating TLS certificate CMS_TLS_CERT_SHA384 SHA384 digest of CMS TLS certificate AAS_API_URL AAS baseurl BEARER_TOKEN JWT token for installation user KMS_HOME /opt/kms Application home directory KBS_SERVICE_USERNAME kms Non-root user to run KMS JETTY_PORT 80 The server will listen for HTTP connections on this port JETTY_SECURE_PORT 443 The server will listen for HTTPS connections on this port KMS_LOG_LEVEL INFO Sets the root log level in logback.xml KMS_NOSETUP false Skips setup during installation if set to true ENDPOINT_URL http://localhost Endpoint to be used in key transfer url KEY_MANAGER_PROVIDER DirectoryKeyManager Key manager to be used for key management KBS_SERVICE_PASSWORD This password protects the configuration file and the password vault. It must be set before installing and before starting the KBS KMS_TLS_CERT_IP IP addresses to be included in SAN list KMS_TLS_CERT_DNS DNS addresses to be included in SAN list BARBICAN_PROJECT_ID OpenStack Barbican project id BARBICAN_ENDPOINT_URL OpenStack Barbican endpoint url BARBICAN_KEYSTONE_PUBLIC_ENDPOINT OpenStack Keystone endpoint url BARBICAN_TENANTNAME OpenStack Barbican tenant name BARBICAN_USERNAME OpenStack Barbican admin username BARBICAN_PASSWORD OpenStack Barbican admin password","title":"11.7.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1172-configuration-options","text":"","title":"11.7.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1173-command-line-options","text":"The Key Broker Service supports several command-line commands that can be executed only as the Root user: Usage: kbs [arguments] Available Commands: help|-h|--help Show this help message version|-v|--version Show the version of current kbs build setup Run setup task start Start kbs status Show the status of kbs stop Stop kbs uninstall [--purge] Uninstall kbs --purge all configuration and data files will be removed if this flag is set Usage of kbs setup: kbs setup [--help] [--force] [-f ] --help show help message for setup task --force existing configuration will be overwritten if this flag is set -f|--file the answer file with required arguments Available Tasks for setup: all Runs all setup tasks server Setup http server on given port download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls create-default-key-transfer-policy Create default key transfer policy for KBS","title":"11.7.3 Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#_1","text":"","title":""},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1174-directory-layout","text":"The Verification Service installs by default with the following folders:","title":"11.7.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#optkbsbin","text":"Contains KBS binaries","title":"/opt/kbs/bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#etckbs","text":"Contains KBS configuration files","title":"/etc/kbs/"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#varlogkbs","text":"Contains KBS logs","title":"/var/log/kbs/"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#118-workload-agent","text":"","title":"11.8  Workload Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1181-installation-answer-file-options","text":"","title":"11.8.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1182-configuration-options","text":"","title":"11.8.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1183-command-line-options","text":"Available Commands:","title":"11.8.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11831-help","text":"wlagent help|-help|--help Show help message","title":"11.8.3.1  Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11832-setup","text":"wlagent setup [task] Run setup task","title":"11.8.3.2  setup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#118321-available-tasks-for-setup","text":"","title":"11.8.3.2.1  Available Tasks for setup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#signingkey","text":"Generate a TPM signing key","title":"SigningKey"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#bindingkey","text":"Generate a TPM binding key","title":"BindingKey"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#registersigningkey","text":"Register a signing key with the host verification service Environment variable BEARER_TOKEN=\\<token> for authenticating with Verification service","title":"RegisterSigningKey"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#registerbindingkey","text":"Register a binding key with the host verification service Environment variable BEARER_TOKEN=\\<token> for authenticating with Verification service","title":"RegisterBindingKey"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11833-start","text":"Start wlagent","title":"11.8.3.3  start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11834-stop","text":"Stop wlagent","title":"11.8.3.4  stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11835-status","text":"Reports the status of wlagent service","title":"11.8.3.5  status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11836-uninstall","text":"Uninstall wlagent","title":"11.8.3.6  uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11837-uninstall-purge","text":"Uninstalls workload agent and deletes the existing configuration directory","title":"11.8.3.7  uninstall --purge"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11838-version","text":"Reports the version of the workload agent","title":"11.8.3.8  version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1184-directory-layout","text":"The Workload Agent installs by default to /opt/workload-agent with the following folders.","title":"11.8.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11841-bin","text":"Contains scripts and executable binaries.","title":"11.8.4.1  Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#119-workload-policy-manager","text":"","title":"11.9  Workload Policy Manager"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1191-installation-answer-file-options","text":"Key Sample Value Description KMS_API_URL https://\\<IP address or hostname of the KBS>:9443/v1/ Required. Defines the baseurl for the Key Broker Service. The WPM uses this URL to request new encryption keys when encrypting images. CMS_TLS_CERT_SHA384 Required. SHA384 hash of the CMS TLS certificate CMS_BASE_URL https://\\<IP address or hostname for CMS>:8445/cms/v1/ Required. Defines the base URL for the CMS owned by the image owner. Note that this CMS may be different from the CMS used for other components. AAS_API_URL https://\\<IP address or hostname for AAS>:8444/aas Required. Defines the baseurl for the AAS owned by the image owner. Note that this AAS may be different from the AAS used for other components. BEARER_TOKEN \\<token> Required; token from CMS with permissions used for installation. WPM_WITH_CONTAINER_SECURITY \u201cyes\u201d or \u201cno\u201d Optional, defaults to \u201cno.\u201d Defines whether the WPM will support Docker Container encryption. If this is set to Yes, the appropriate prerequisites for Docker Container encryption will be installed. If this is set to \u201cno,\u201d the WPM will not be able to encrypt Docker Container images, and will only be usable to encrypt Virtual Machine images. WPM_LOG_LEVEL INFO (default), DEBUG Optional; defines the log level for the WPM. Defaults to INFO. WPM_SERVICE_PASSWORD Defines the credentials for the WPM to use to access the KBS WPM_SERVICE_USERNAME Defines the credentials for the WPM to use to access the KBS","title":"11.9.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1192-configuration-options","text":"","title":"11.9.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1193-command-line-options","text":"The Workload Policy Manager supports several command-line commands that can be executed only as the Root user: Syntax: wpm \\<command>","title":"11.9.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11931-create-image-flavor","text":"Creates a new image flavor and encrypts a source image. Output is the image flavor in JSON format and the encrypted image. usage: wpm create-image-flavor [-l label] [-i in] [-o out] [-e encout] [-k key] -l, --label image flavor label -i, --in input image file path -o, --out (optional) output image flavor file path if not specified, will print to the console -e, --encout (optional) output encrypted image file path if not specified, encryption is skipped -k, --key (optional) existing key ID if not specified, a new key is generated","title":"11.9.3.1  create-image-flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11932-create-container-image-flavor","text":"Used to encrypt Docker container images and generate a container image flavor. usage: wpm create-container-image-flavor [-i img-name] [-t tag] [-f dockerFile] [-d build-dir] [-k keyId] [-e] [-s] [-n notaryServer] [-o out-file] -i, --img-name container image name -t, --tag (optional)container image tag name -f, --docker-file (optional) container file path to build the container image -d, --build-dir (optional) build directory to build the container image -k, --key-id (optional) existing key ID if not specified, a new key is generated -e, --encryption-required (optional) boolean parameter specifies if container image needs to be encrypted -s, --integrity-enforced (optional) boolean parameter specifies if container image should be signed -n, --notary-server (optional) specify notary server url -o, --out-file (optional) specify output file path","title":"11.9.3.2  create-container-image-flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11933-get-container-image-id","text":"","title":"11.9.3.3  get-container-image-id"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11934-create-software-flavor","text":"Not currently supported; intended for future functionality.","title":"11.9.3.4  create-software-flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11935-uninstall","text":"Removes the WPM.","title":"11.9.3.5  Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11936-help","text":"Displays help text","title":"11.9.3.6  --help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11937-version","text":"Displays the WPM version","title":"11.9.3.7  --version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11938-setup","text":"usage : wpm setup [\\<tasklist>] \\<tasklist>-space separated list of tasks","title":"11.9.3.8  Setup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#119381-wpm-setup","text":"","title":"11.9.3.8.1  wpm setup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#119382-wpm-setup-createenvelopekey","text":"","title":"11.9.3.8.2  wpm setup CreateEnvelopeKey"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#119383-wpm-setup-registerenvelopekey","text":"","title":"11.9.3.8.3  wpm setup RegisterEnvelopeKey"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#119384-wpm-setup-download_ca_cert-force","text":"- Download CMS root CA certificate - Option [--force] overwrites any existing files, and always downloads new root CA cert - Environment variable CMS_BASE_URL=\\<url> for CMS API url","title":"11.9.3.8.4  wpm setup download_ca_cert [--force]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#119385-wpm-setup-download_cert-flavor-signing-force","text":"- Generates Key pair and CSR, gets it signed from CMS - Option [--force] overwrites any existing files, and always downloads newly signed Flavor Signing cert - Environment variable CMS_BASE_URL=\\<url> for CMS API url - Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS - Environment variable KEY_PATH=\\<key_path> to override default specified in config - Environment variable CERT_PATH=\\<cert_path> to override default specified in config - Environment variable WPM_FLAVOR_SIGN_CERT_CN=\\<COMMON NAME> to override default specified in config - Environment variable WPM_CERT_ORG=\\<CERTIFICATE ORGANIZATION> to override default specified in config - Environment variable WPM_CERT_COUNTRY=\\<CERTIFICATE COUNTRY> to override default specified in config - Environment variable WPM_CERT_LOCALITY=\\<CERTIFICATE LOCALITY> to override default specified in config - Environment variable WPM_CERT_PROVINCE=\\<CERTIFICATE PROVINCE> to override default specified in config","title":"11.9.3.8.5 wpm setup download_cert Flavor-Signing [--force]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#12-certificate-and-key-management","text":"","title":"12  Certificate and Key Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#121-host-verification-service-certificates-and-keys","text":"The Host Verification Service has several unique certificates not present on other services.","title":"12.1  Host Verification Service Certificates and Keys"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1211-saml","text":"The SAML Certificate a is used to sign SAML attestation reports, and is itself signed by the Root Certificate. This certificate is unique to the Verification Service. /opt/hvs/configuration/saml.crt /opt/hvs/configuration/saml.crt.pem /opt/hvs/configuration/SAML.jks The SAML Certificate can be replaced with a user-specified keypair and certificate chain using the following command: mtwilson replace-saml-key-pair --private-key=new.key.pem --cert-chain=new.cert-chain.pem This will: Replace key pair in /opt/hvs/configuration/SAML.jks , alias samlkey1 Update /opt/hvs/configuration/saml.crt with saml DER public key cert Update /opt/hvs/configuration/saml.crt.pem with saml PEM public key cert Update configuration properties: saml.key.password to null saml.certificate.dn saml.issuer When the SAML certificate is replaced, all hosts will immediately be added to a queue to generate a new attestation report, since the old signing certificate is no longer valid. No service restart is necessary. If the Integration Hub is being used, the new SAML certificate will need to be imported to the Hub.","title":"12.1.1  SAML"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1212-asset-tag","text":"The Asset tag Certificate is used to sign all Asset Tag Certificates. This certificate is unique to the Verification Service. /opt/hvs/configuration/tag-cacerts.pem The Asset Tag Certificate can be replaced with a user-specified keypair and certificate chain using the following command: mtwilson replace-tag-key-pair --private-key=new.key.pem --cert-chain=new.cert-chain.pem This will: Replace key pair in database table mw_file (cakey is private and public key pem formatted, cacerts is cert chain) Update /opt/hvs/configuration/tag-cacerts.pem with cert chain Update configuration properties: tag.issuer.dn No service restart is needed. However, all existing Asset Tags will be considered invalid, and will need to be recreated. It is recommended to delete any existing Asset Tag certificates and Flavors, and then recreate and deploy new Tags.","title":"12.1.2  Asset Tag"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1213-privacy-ca","text":"The Privacy CA certificate is used as part of the certificate chain for creating the Attestation Identity Key (AIK) during Trust Agent provisioning. The Privacy CA must be a self-signed certificate. This certificate is unique to the Verification Service. The Privacy CA certificate is used by Trust Agent nodes during Trust Agent provisioning; if the Privacy CA certificate is changed, all Trust Agent nodes will need to be re-provisioned. /opt/hvs/configuration/PrivacyCA.p12 /opt/hvs/configuration/PrivacyCA.pem The Privacy CA Certificate can be replaced with a user-specified keypair and certificate chain using the following command: mtwilson replace-pca-key-pair --private-key=new.key.pem --cert-chain=new.cert-chain.pem This will: Replace key pair in /opt/hvs/configuration/PrivacyCA.p12 , alias 1 Update /opt/hvs/configuration/PrivacyCA.pem with cert Update configuration properties: mtwilson.privacyca.aik.issuer mtwilson.privacyca.aik.validity.days After the Privacy CA certificate is replaced, all Trust Agent hosts will need to be re-provisioned with a new AIK: tagent setup download-mtwilson-privacy-ca-certificate --force tagent setup request-aik-certificate --force tagent restart","title":"12.1.3  Privacy CA"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1214-endorsement-ca","text":"The Endorsement CA is a self-signed certificate used during Trust Agent provisioning. /opt/hvs/configuration/EndorsementCA.p12 /opt/hvs/configuration/EndorsementCA.pem The Endorsement CA Certificate can be replaced with a user-specified keypair and certificate chain using the following command: mtwilson replace-eca-key-pair --private-key=new.key.pem --cert-chain=new.cert-chain.pem This will: Replace key pair in /opt/hvs/configuration/EndorsementCA.p12 , alias 1 Update /opt/hvs/configuration/EndorsementCA.pem with accepted ECs Update configuration properties: mtwilson.privacyca.ek.issuer mtwilson.privacyca.ek.validity.days After the Endorsement CA certificate is replaced, all Trust Agent hosts will need to be re-provisioned with a new Endorsement Certificate: tagent setup request-endorsement-certificate --force tagent restart","title":"12.1.4  Endorsement CA"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#122-tls-certificates","text":"TLS certificates for each service are issued by the Certificate Management Service during installation. If the CMS root certificate is changed, or to regenerate the TLS certificate for a given service, use the following commands (note: environment variables will need to be set; typically these are the same variables set in the service installation .env file): <servicename> download_ca_cert Download CMS root CA certificate Environment variable CMS_BASE_URL=\\<url> for CMS API url <servicename> download_cert TLS Generates Key pair and CSR, gets it signed from CMS Environment variable CMS_BASE_URL=\\<url> for CMS API url Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS Environment variable KEY_PATH=\\<key_path> to override default specified in config Environment variable CERT_PATH=\\<cert_path> to override default specified in config","title":"12.2  TLS Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#13-uninstallation","text":"This section describes steps used for uninstalling Intel SecL-DC services. This section does not apply for containerized deployments. To uninstall a containerized deployment, simply shut down the container and delete the persistence volumes.","title":"13  Uninstallation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#131-host-verification-service","text":"To uninstall the Verification Service, run the following command: hvs uninstall The hvs uninstall command will not delete any database content. To completely uninstall and delete all database content and user data, run the following: hvs erase-data hvs uninstall Note: The uninstall command must be issued last, because the uninstall process removes the scripts that execute the other commands, along with all database connectivity info.","title":"13.1 Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#132-trust-agent","text":"To uninstall the Trust Agent, run the following command: tagent uninstall Backs up the configuration directory and removes all Trust Agent files, except for configuration files which are saved and restored. Removes following directories: /usr/local/bin/tagent TRUSTAGENT_HOME : `/opt/trustagent /opt/tbootxm /var/log/trustagent/measurement.* Note: TPM ownership can be preserved by retaining the TPM owner secret. If the Operating System will also be cleared, Linux systems will also require the /usr/local/var/lib/tpm/system.data file to be preserved. This file must be preserved from after ownership is taken, and then replaced after the OS reload before the Trust Agent attempts to reassert ownership. If the ownership secret and/or system.data file are not preserved, reinstallation will require clearing TPM ownership.","title":"13.2  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#133-integration-hub","text":"To uninstall the Integration Hub, run the following command: ihub uninstall","title":"13.3  Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14appendix","text":"","title":"14Appendix"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#141-pcr-definitions","text":"","title":"14.1  PCR Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1411-red-had-enterprise-linux","text":"","title":"14.1.1  Red Had Enterprise Linux"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14111-tpm-20","text":"PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image Initial Boot Block (Intel\u00ae BootGuard only) This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. (Intel\u00ae BootGuard only): Extends measurements based on the Intel\u00ae BootGuard profile configuration and production vs non-production ACM flags; ACM signature; BootGuard key manifest hash; Boot Policy Manifest Signature All PCR 7 Intel\u00ae BootGuard configuration and profiles Describes the success of the IBB measurement event. All (Intel\u00ae BootGuard only) PCR 17 ACM BIOS AC registration information Digest of Processor S-CRTM Digest of Policycontrol Digest of all matching elements used by the policy Digest of STM Digest of Capability field of OsSinitData Digest of MLE For TA hosts, this PCR includes measurements of the OS, InitRD, and UUID. This changes with every install due to InitRD and UUID change. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] Digest of public key modulus used to verify SINIT signature Digest of Processor S-CRTM Digest of Capability field of OSSinitData table Digest of PolicyControl field of used policy Digest of LCP VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Linux hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux","title":"14.1.1.1  TPM 2.0"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1412-vmware-esxi","text":"","title":"14.1.2  VMWare ESXi"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14121-tpm-12","text":"PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Citrix Xen hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts and is blank for all other host types. VMware ESXi PCR 22 Asset Tag This PCR contains the measurement of the SHA1 of the Asset Tag Certificate provisioned to the TPM, if any. VMware ESXi","title":"14.1.2.1  TPM 1.2"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14122-tpm-20","text":"VMWare supports TPM 2.0 with Intel TXT starting in vSphere 6.7 Update 1. Earlier versions will support TPM 1.2 only. PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as part of the PLATFORM flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi this PCR contains individual measurements of all of the non-Kernel modules \u2013 this includes all of the VIBs installed on the ESXi host. This is part of the OS flavor. Note that two ESXi hosts with the same version of ESXi installed may require different OS flavors if different VIBs are installed. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts for some host-specific measurements, and is part of the host-unique flavor. VMware ESXi PCR 22 Asset Tag Asset Tag is not currently supported for TPM 2.0 with ESXi. VMware ESXi","title":"14.1.2.2  TPM 2.0"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#a1-attestation-rules","text":"Platform TPM Flavor Type Rules to be verified Comments RHEL 2.0 HARDWARE PcrMatchesConstant rule for PCR 0 PcrEventLogIncludes rule for PCR 17 (LCP_DETAILS_HASH, BIOSAC_REG_DATA, OSSINITDATA_CAP_HASH, STM_HASH, MLE_HASH, NV_INFO_HASH, tb_policy, CPU_SCRTM_STAT, HASH_START, LCP_CONTROL_HASH) PcrEventLogIntegrity rule for PCR 17 Evaluation of PcrEventLogIncludes would not include initrd and vmlinuz modules. They would be handled in host_specific flavor. Evaluation of PcrEventLogIntegrity rule would also include OS modules (initrd & vmlinuz) OS PcrEventLogIntegrity rule for PCR 17 ASSET_TAG AssetTagMatches rule HOST_SPECIFIC PcrEventLogIncludes rule for PCR 17 (initrd & vmlinuz) VMware ESXi 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 PcrMatchesConstant rule for PCR 17 OS PcrMatchesConstant rule for PCR 18 PcrMatchesConstant rule for PCR 20 PcrEventLogEqualsExcluding rule for PCR 19 (excludes dynamic modules based on component name) PcrEventLogIntegrity rule for PCR 19 ASSET_TAG PcrMatchesConstant rule for PCR 22 VMware ESXi 2.0 NOT SUPPORTED Windows 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule Windows 2.0 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule AssetTagMatches rule needs to be updated to verify the key-value pairs after verifying the tag certificate.","title":"A.1  Attestation Rules"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#a2-intel-txt-and-the-trusted-boot-process","text":"","title":"A.2  Intel TXT and the Trusted Boot Process"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#_2","text":"Intel\u00ae Security Libraries - Datacenter Functional Security Product Guide August 2020 Revision 3.0 Disclaimer Notice: This document contains information on products in the design phase of development. The information here is subject to change without notice. Do not finalize a design with this information. Intel technologies\u2019 features and benefits depend on system configuration and may require enabled hardware, software, or service activation. Learn more at intel.com, or from the OEM or retailer. No computer system can be absolutely secure. Intel does not assume any liability for lost or stolen data or systems or any damages resulting from such losses. You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Intel products described herein. You agree to grant Intel a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications. Current characterized errata are available on request. This document contains information on products, services and/or processes in development. All information provided here is subject to change without notice. Contact your Intel representative to obtain the latest Intel product specifications and roadmaps. Intel disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. Warning: Altering PC clock or memory frequency and/or voltage may (i) reduce system stability and use life of the system, memory and processor; (ii) cause the processor and other system components to fail; (iii) cause reductions in system performance; (iv) cause additional heat or other damage; and (v) affect system data integrity. Intel assumes no responsibility that the memory, included if used with altered clock frequencies and/or voltages, will be fit for any particular purpose. Check with memory manufacturer for warranty and additional details. Tests document performance of components on a particular test, in specific systems. Differences in hardware, software, or configuration will affect actual performance. Consult other sources of information to evaluate performance as you consider your purchase. For more complete information about performance and benchmark results, visit http://www.intel.com/performance . Cost reduction scenarios described are intended as examples of how a given Intel- based product, in the specified circumstances and configurations, may affect future costs and provide cost savings. Circumstances will vary. Intel does not guarantee any costs or cost reduction. Results have been estimated or simulated using internal Intel analysis or architecture simulation or modeling, and provided to you for informational purposes. Any differences in your system hardware, software or configuration may affect your actual performance. Intel does not control or audit third-party benchmark data or the web sites referenced in this document. You should visit the referenced web site and confirm whether referenced data are accurate. Intel is a sponsor and member of the Benchmark XPRT Development Community, and was the major developer of the XPRT family of benchmarks. Principled Technologies is the publisher of the XPRT family of benchmarks. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases. Copies of documents which have an order number and are referenced in this document may be obtained by calling 1-800-548-4725 or by visiting www.intel.com/design/literature.htm. Intel, the Intel logo, Intel TXT, and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries. *Other names and brands may be claimed as the property of others. Copyright \u00a9 2020, Intel Corporation. All Rights Reserved. Revision History Document Number Revision Number Description Date 1 Updated for all GA Failures May 2019 1.5 Updated for version 1.5 release July 2019 1.6 BETA Updated for 1.6 BETA release November 2019 1.6 Updated for version 1.6 release December 2019 2.0 Updated for version 2.0 release February 2020 2.1 Updated for version 2.1 release April 2020 2.2 Updated for version 2.2 release June 2020 3.0 Updated for version 3.0 release August 2020","title":""},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#table-of-contents_1","text":"[[ TOC ]]","title":"Table of Contents"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1-introduction_1","text":"","title":"1  Introduction"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11-overview_1","text":"Intel Security Libraries for Datacenter is a collection of software applications and development libraries intended to help turn Intel platform security features into real-world security use cases.","title":"1.1  Overview"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#111-trusted-computing_1","text":"Trusted Computing consists of a set of industry standards defined by the Trusted Computing Group to harden systems and data against attack. These standards include verifying platform integrity, establishing identity, protection of keys and secrets, and more. One of the functions of Intel Security Libraries is to provide a \u201cTrusted Platform,\u201d using Intel security technologies to add visibility, auditability, and control to server platforms.","title":"1.1.1  Trusted Computing"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1111-the-chain-of-trust_1","text":"In a Trusted Computing environment, a key concept is verification of the integrity of the underlying platform. Verifying platform integrity typically means cryptographic measurement and/or verification of firmware and software components. The process by which this measurement and verification takes place affects the overall strength of the assertion that the measured and verified components have not been altered. Intel refers to this process as the \u201c Chain of Trust ,\u201d whereby at boot time, a sequence of cryptographic measurements and signature verification events happen in a defined order, such that measurement/verification happens before execution, and each entity responsible for performing a measurement or verification is measured by another step earlier in the process. Any break in this chain leads to an opportunity for an attacker to modify code and evade detection.","title":"1.1.1.1  The Chain of Trust"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1112-hardware-root-of-trust_1","text":"The Root of Trust, the first link in the chain, can be one of several different options. Anything that happens in the boot process before the Root of Trust must be considered to be within the \u201ctrust boundary,\u201d signifying components whose trustworthiness cannot be assessed. For this reason, it\u2019s best to use a Root of Trust that starts as early in the system boot process as possible, so that the Chain of Trust during the boot process can cover as much as possible. Multiple Root of Trust options exist, ranging from firmware to hardware. In general, a hardware Root of Trust will have a smaller \u201ctrust boundary\u201d than a firmware Root of Trust. A hardware Root of Trust will also have the benefit of immutability \u2013 where firmware can easily be flashed and modified, hardware is much more difficult to tamper with.","title":"1.1.1.2  Hardware Root of Trust"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#intel-trusted-execution-technology-intel-txt","text":"Intel\u00ae Trusted Execution Technology is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Grantley generation. Intel\u00ae TXT is enabled in the system BIOS (typically under the Processor > Advanced tab), and requires Intel\u00ae VT-d and Intel VT-x features to be enabled as prerequisites (otherwise the option will be grayed out). Intel\u00ae TXT will ship \u201cdisabled\u201d by default.","title":"Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#intel-bootguard-intel-btg","text":"Intel\u00ae BootGuard is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Purley-Refresh generation. Unlike Intel\u00ae TXT, Intel\u00ae BtG is configured in platform fuses, not in the system BIOS. Intel\u00ae BtG is fused into several \u201cprofiles\u201d that determine the behavior of the feature. Intel\u00ae BtG supports both \u201cverify\u201d and \u201cmeasure\u201d profiles; in \u201cverify\u201d profiles, Intel\u00ae BtG will verify the signature of the platform Initial Boot Block (IBB). In \u201cmeasure\u201dprofiles, Intel\u00ae BtG will hash the IBB and extend that measurement to a TPM PCR. It is recommended that Intel\u00ae BtG be fused into the \u201cmeasure and verify\u201d profile for maximum protection and auditability. Because the Intel\u00ae BtG profile is configured using fuses, the server OEM/ODM will determine the profile used at manufacturing time. Please contact your server vendor to determine what Intel\u00ae BtG profiles are available in their product line. Because Intel\u00ae BtG only measures/verifies the integrity of the IBB, it\u2019s important to have an additional technology handle measurements later in the boot process. Intel\u00ae TXT can provide this function using tboot to invoke SINIT, and UEFI SecureBoot can alternatively provide similar functionality (note that Linux users should properly configure Shim and use a signed kernel for UEFI SecureBoot).","title":"Intel\u00ae BootGuard (Intel\u00ae BtG)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1113-supported-trusted-boot-options_1","text":"Intel\u00ae SecL-DC supports several options for Trusted Computing, depending on the features available on the platform. Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode.","title":"1.1.1.3  Supported Trusted Boot Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1114-remote-attestation_1","text":"Trusted computing consists primarily of two activities \u2013 measurement, and attestation. Measurement is the act of obtaining cryptographic representations for the system state. Attestation is the act of comparing those cryptographic measurements against expected values to determine whether the system booted into an acceptable state. Attestation can be performed either locally, on the same host that is to be attested, or remotely, by an external authority. The trusted boot process can optionally include a local attestation involving the evaluation of a TPM-stored Launch Control Policy (LCP). In this case, the host\u2019s TPM will compare the measurements that have been taken so far to a set of expected PCR values stored in the LCP; if there is a mismatch, the boot process is halted entirely. Intel\u00ae SecL utilizes remote attestation, providing a remote Verification Service that maintains a database of expected measurements (or \u201cflavors\u201d), and compares the actual boot-time measurements from any number of hosts against its database to provide an assertion that the host booted into a \u201ctrusted\u201d or \u201cuntrusted\u201d state. Remote attestation is typically easier to centrally manage (as opposed to creating an LCP for each host and entering the policy into the host\u2019s TPM), does not halt the boot process allowing for easier remediation, and separates the attack surface into separate components that must both be compromised to bypass security controls. Both local and remote attestation can be used concurrently. However, Intel\u00ae SecL, and this document, will focus only on remote attestation. For more information on TPM Launch Control Policies, consult the Intel Trusted Execution Technology (Intel TXT) Software Development Guide ( https://www.intel.com/content/dam/www/public/us/en/documents/guides/intel-txt-software-development-guide.pdf ).","title":"1.1.1.4  Remote Attestation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112-intel-security-libraries-for-datacenter-features_1","text":"","title":"1.1.2  Intel\u00ae Security Libraries for Datacenter Features"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1121-platform-integrity_1","text":"Platform Integrity is the use case enabled by the specific implementation of the Chain of Trust and Remote Attestation concepts. This involves the use of a Root of Trust to begin an unbroken chain of platform measurements at server boot time, with measurements extended to the Trusted Platform Module and compared against expected values to verify the integrity of measured components. This use case is foundational for other Intel\u00ae SecL use cases.","title":"1.1.2.1  Platform Integrity"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1122-data-sovereignty_1","text":"Data Sovereignty builds on the Platform Integrity use case to allow physical TPMs to be written with Asset Tags containing any number of key/value pairs. This use case is typically used to identify the geographic location of the physical server, but can also be used to identify other attributes. For example, the Asset Tags provided by the Data Sovereignty use case could be used to identify hosts that meet specific compliance requirements and can run controlled workloads.","title":"1.1.2.2  Data Sovereignty"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1123-application-integrity_1","text":"Added in the Intel\u00ae SecL-DC 1.5 release, Application Integrity allows any files and folders on a Linux host system to be included in the Chain of Trust integrity measurements. These measurements are attested by the Verification Service along with the other platform measurements, and are included in determining the host\u2019s overall Trust status. The measurements are performed by a measurement agent called tbootXM, which is built into initrd during Trust Agent installation. Because initrd is included in other Trusted Computing measurements, this allows Intel\u00ae SecL-DC to carry the Chain of Trust all the way to the Linux filesystem.","title":"1.1.2.3  Application Integrity"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1124-workload-confidentiality-for-virtual-machines-and-containers_1","text":"Added in the Intel\u00ae SecL-DC 1.6 release, Workload Confidentiality allows virtual machine and Docker container images to be encrypted at rest, with key access tied to platform integrity attestation. Because security attributes contained in the platform integrity attestation report are used to control access to the decryption keys, this feature provides both protection for at-rest data, IP, code, etc in Docker container or virtual machine images, and also enforcement of image-owner-controlled placement policies. When decryption keys are released, they are sealed to the physical TPM of the host that was attested, meaning that only a server that has successfully met the policy requirements for the image can actually gain access. Workload Confidentiality begins with the Workload Policy Manager (WPM) and a qcow2 or Docker image that needs to be protected. The WPM is a lightweight application that will request a new key from the Key Broker, use that key to encrypt the image, and generate an Image Flavor. The image owner will then upload the encrypted image to their desired image storage service (for example, OpenStack Glance or a local Docker Registry), and the image ID from the image storage will be uploaded along with the Image Flavor to the Intel\u00ae SecL Workload Service. When that image is used to launch a new VM or container, the Workload Agent will intercept the VM or container start and request the decryption key for that image from the Workload Service. The Workload Service will use the image ID and the Image Flavor to find the key transfer URL for the appropriate Key Broker, and will query the Verification Service for the latest Platform Integrity trust attestation report for the host. The Key Broker will use the attestation report to determine whether the host meets the policy requirements for the key transfer, and to verify that the report is signed by a Verification Service known to the Broker. If the report is genuine and meets the policy requirements, the image decryption key is sealed using an asymmetric key from that host\u2019s TPM, and sent back to the Workload Service. The Workload Service then caches the key for 5 minutes (to avoid performance issues for multiple rapid launch requests; note that these keys are still wrapped using a sealing key unique to the hosts TPM, so multiple hosts would require multiple keys even for an identical image) and return the wrapped key to the Workload Agent on the host, which then uses the host TPM to unseal the image decryption key. The key is then used to create a new LUKS volume, and the image is decrypted into this volume. This functionality means that a physical host must pass policy requirements in order to gain access to the image key, and the image will be encrypted at rest both in image storage and on the compute host. Beginning with the Intel\u00ae SecL-DC version 2.1 release, the Key Broker now supports 3 rd -party key managers that are KMIP-compliant. The Key Broker has been updated to use the \u201clibkmip\u201d client.","title":"1.1.2.4  Workload Confidentiality for Virtual Machines and Containers"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1125-signed-flavors_1","text":"Added in the Intel\u00ae SecL-DC 1.6 release, Flavor signing is an improvement to the existing handling of expected attestation measurements, called \u201cFlavors.\u201d This feature adds the ability to digitally sign Flavors so that the integrity of the expected measurements themselves can be verified when attestations occur. This also means that Flavors can be more securely transferred between different Verification Service instances. Flavor signing is seamlessly added to the existing Flavor creation process (both importing from a sample host and \u201cmanually\u201d creating a Flavor using the POST method to the /v2/flavors resource). When a Flavor is created, the Verification Service will sign it using a signing certificate signed by the Certificate Management Service (this is created during Verification Service setup). Each time that the Verification Service evaluates a Flavor, it will first verify the signature on that Flavor to ensure the integrity of the Flavor contents before it is used to attest the integrity of any host.","title":"1.1.2.5  Signed Flavors"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1126-trusted-virtual-kubernetes-worker-nodes_1","text":"Added in the Intel\u00ae SecL-DC version 2.1 release, this feature provides a Chain of Trust solution extending to Kubernetes Worker Nodes deployed as Virtual Machines. This feature addresses Kubernetes deployments that use Virtual Machines as Worker Nodes, rather than using bare-metal servers. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes.","title":"1.1.2.6  Trusted Virtual Kubernetes Worker Nodes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#2-intel-security-libraries-components_1","text":"","title":"2  Intel\u00ae Security Libraries Components"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#21-certificate-management-service_1","text":"Starting with Intel\u00ae SecL-DC 1.6, most non-TPM-related certificates used by Intel\u00ae SecL-DC applications will be issued by the new Certificate Management Service. This includes acting as a root CA and issuing TLS certificates for all of the various web services.","title":"2.1  Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#22-authentication-and-authorization-service_1","text":"Starting with Intel\u00ae SecL-DC 1.6, authentication and authorization for all Intel\u00ae SecL applications will be centrally managed by the new Authentication and Authorization Service (AAS). Previously, each application would manage its own users and permissions independently; this change allows authentication and authorization management to be centralized.","title":"2.2  Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#23-verification-service_1","text":"The Verification Service component of Intel\u00ae Security Libraries performs the core Platform Integrity and Data Sovereignty functionality by acting as a remote attestation authority. Platform security technologies like Intel\u00ae TXT, Intel\u00ae BootGuard, and UEFI SecureBoot extend measurements of platform components (such as the system BIOS/UEFI, OS kernel, etc) to a Trusted Platform module as the server boots. Known-good measurements for each of these components can be directly imported from a sample server. These expected measurements can then be compared against actual measurements from registered servers, allowing the Verification Service to attest to the \"trustiness\" of the platform, meaning whether the platform booted into a \"known-good\" state.","title":"2.3  Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#24-workload-service_1","text":"The Workload Service acts as a management service for handling Workload Flavors (Flavors used for Virtual Machines and Containers). In the Intel\u00ae SecL-DC 1.6 release, the Workload Service uses Flavors to map decryption key IDs to image IDs. When a launch request for an encrypted workload image is intercepted by the Workload Agent, the Workload Service will handle mapping the image ID to the appropriate key ID and key request URL, and will initiate the key transfer request to the Key Broker.","title":"2.4  Workload Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#25-trust-agent_1","text":"The Trust Agent resides on physical servers and enables both remote attestation and the extended chain of trust capabilities. The Agent maintains ownership of the server's Trusted Platform Module, allowing secure attestation quotes to be sent to the Verification Service. Incorporating the Intel\u00ae SecL HostInfo and TpmProvider libraries, the Trust Agent serves to report on platform security capabilities and platform integrity measurements. The Trust Agent is supported for Windows Server 2016 Datacenter and Red Hat Enterprise Linux (RHEL) 8.1 and later.","title":"2.5  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#26-workload-agent_1","text":"The Workload Agent is the component responsible for handling all of the functions needed for Workload Confidentiality for virtual machines and Docker containers on a physical server. The Workload Agent uses libvirt hooks to identify VM lifecycle events (VM start, stop, hibernate, etc), and intercepts those events to perform needed functions like requesting decryption keys, creation and deletion of encrypted LUKS volumes, using the TPM to unseal decryption keys, etc. The WLA also includes the Docker SecureOverlay Driver that performs analogous functionality for Docker containers.","title":"2.6  Workload Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#27-integration-hub_1","text":"The Integration Hub acts as a middle-man between the Verification Service and one or more scheduler services (such as OpenStack* Nova), and \"pushes\" attestation information retrieved from the Verification Service to one or more scheduler services according to an assignment of hosts to specific tenants. In this way, Tenant A can receive attestation information for hosts that belong to Tenant A, but receive no information about hosts belonging to Tenant B. The Integration Hub serves to disassociate the process of retrieving attestations from actual scheduler queries, so that scheduler services can adhere to best practices and retain better performance at scale. The Integration Hub will regularly query the Intel\u00ae SecL Verification Service for SAML attestations for each host. The Integration Hub maintains only the most recent currently valid attestation for each host, and will refresh attestations when they would expire. The Integration Hub will verify the signature of the SAML attestation for each host assigned to a tenant, then parse the attestation status and asset tag information, and then will securely push the parsed key/value pairs to the plugin endpoints enabled. The Integration Hub features a plugin design for adding new scheduler endpoint types. Currently the Integration Hub supports OpenStack Nova and Kubernetes endpoint plugins. Other integration plugins may be added.","title":"2.7  Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#28-workload-policy-manager_1","text":"The Workload Policy Manager is a Linux command line utility used by an image owner to encrypt VM (qcow2) or container (Docker) images, and to create an Image Flavor used to provide the encryption key transfer URL during launch requests. The WPM utility will use an existing or request a new key from the Key Broker Service, use that key to encrypt the image, and output the Image Flavor in JSON format. The encrypted image can then be uploaded to the image store of choice (like OpenStack Glance), and the Image Flavor can be uploaded to the Workload Service. The ID of the image on the image storage system is then mapped to the Image Flavor in the WLS; when the image is used to launch a new instance, the WLS will find the Image Flavor associated with that image ID, and use the Image Flavor to determine the key transfer URL.","title":"2.8  Workload Policy Manager"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#29-key-broker-service_1","text":"The Key Broker Service is effectively a policy compliance engine. Its job is to manage key transfer requests for encrypted images, releasing keys only to servers that meet policy requirements. The Key Broker registers one or more SAML signing certificates from any Verification Services that it will trust. When a key transfer request is received, the request includes a trust attestation report signed by the Verification Service. If the signature matches a registered SAML key, the Broker will then look at the actual report to ensure the server requesting the key matches the image policy (currently only overall system trust is supported as a policy requirement). If the report indicates the policy requirements are met, the image decryption key is wrapped using a public key unique to the TPM of the host that was attested in the report, such that only the host that was attested can unseal the decryption key and gain access to the image.","title":"2.9  Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3-intel-security-libraries-installation_1","text":"","title":"3  Intel\u00ae Security Libraries Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#31-building-from-source_1","text":"Intel\u00ae Security Libraries is distributed as open source code, and must be compiled into installation binaries before installation. Instructions and sample scripts for building the Intel\u00ae SecL-DC components can be found here: https://01.org/intel-secl/documentation/build-installation-scripts After the components have been built, the installation binaries can be found in the directories created by the build scripts. <servicename>/out/<servicename>.bin In addition, the build script will produce some sample database creation scripts that can be used during installation to configure database requirements (instructions are given in the installation sections): create_db: authservice/out/create_db.sh install_pgdb: authservice/out/install_pgdb.sh","title":"3.1  Building from Source"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#32-hardware-considerations_1","text":"Intel\u00ae SecL-DC supports and uses a variety of Intel security features, but there are some key requirements to consider before beginning an installation. Most important among these is the Root of Trust configuration. This involves deciding what combination of TXT, Boot Guard, tboot, and UEFI Secure Boot to enable on platforms that will be attested using Intel\u00ae SecL. Key points: At least one \"Static Root of Trust\" mechanism must be used (TXT and/or BtG) For Legacy BIOS systems, tboot must be used For UEFI mode systems, UEFI SecureBoot must be used* Use the chart below for a guide to acceptable configuration options. . Note : A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode.","title":"3.2  Hardware Considerations"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#33-recommended-service-layout_1","text":"The Intel\u00ae SecL-DC services can be installed in a variety of layouts, partially depending on the use cases desired and the OS of the server(s) to be protected. In general, the Intel\u00ae SecL-DC applications can be divided into management services that are deployed on the network on the management plane, and host or node components that must be installed on each protected server. Management services can typically be deployed anywhere with network access to all of the protected servers. This could be a set of individual VMs per service; containers; or all installed on a single physical or virtual machine. Node components must be installed on each protected physical server. Typically this is needed for Linux deployments.","title":"3.3  Recommended Service Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#331-platform-integrity_1","text":"The most basic use case enabled by Intel\u00ae SecL-DC, Platform Integrity requires only the Verification Service and, to protect Windows or Linux hosts, the Trust Agent. This also enables the Application Integrity use case by default for Linux systems. The Integration Hub may be added to provide integration support for OpenStack or Kubernetes. The Hub is often installed on the same machine as the Verification Service, but optionally can be installed separately.","title":"3.3.1  Platform Integrity"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#332-workload-confidentiality_1","text":"Workload Confidentiality introduces a number of additional services and agents. For a POC environment, all of the management services can be installed on a single machine or VM. This includes: Certificate Management Service (CMS) Authorization and Authentication Service (AAS) Host Verification Service (HVS) Workload Service (WLS) Integration Hub (HUB) Key Broker Service (KBS) with backend key management Workload Policy Manager (WPM) In a production environment, it is strongly suggested that the WPM and KBS be deployed (with their own CMS and AAS) separately for each image owner. For a Cloud Service Provider, this would mean that each customer/tenant who will use the Workload Confidentiality feature would have their own dedicated AAS/CMS/KBS/WPM operated on their own networks, not controlled by the CSP. This is because the Key Broker and WPM are the tools used to define the policies that will allow images to launch, and these policies and their enforcement should remain entirely under the control of the image owner. The node components must be installed on each protected physical server: Trust Agent (TA) Workload Agent (WLA)","title":"3.3.2  Workload Confidentiality"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#34-installingconfiguring-the-database_1","text":"The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. Scripts (install_pgdb.sh , create_db.sh ) are provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation.","title":"3.4  Installing/Configuring the Database"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#341-using-the-provided-database-installation-script_1","text":"Install a sample Postgresql 11 database using the install_pgdb.sh script. This script will automatically install the Postgresql database and client packages required. Add the Postgresql 11 repository: https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm Create the iseclpgdb.env answer file: ISECL_PGDB_IP_INTERFACES = localhost ISECL_PGDB_PORT = 5432 ISECL_PGDB_SAVE_DB_INSTALL_LOG = true ISECL_PGDB_CERT_DNS = localhost ISECL_PGDB_CERT_IP = 127 .0.0.1 Note that the values above assume that the database will be accessed locally. If the database server will be external to the Intel\u00ae SecL services, change these values to the hostname or FQDN and IP address where the client will access the database server. Run the following command: dnf module disable postgresql -y Execute the installation script: ./install_pgdb.sh Note : The database installation only needs to be performed once if the same database server will be used for all services that require a database. Only the \"create_db\" step needs to be repeated if the database server will be shared.","title":"3.4.1  Using the Provided Database Installation Script"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#342-provisioning-the-database_1","text":"Each Intel\u00ae SecL service that uses a database (the Authentication and Authorization Service, the Verification Service, the Integration Hub, the Workload Service) requires its own schema and access. After installation, the database must be created initialized and tables created. Execute the create_db.sh script to configure the database. If a single shared database server will be used for each Intel\u00ae SecL service (for example, if all management plane services will be installed on a single VM), run the script multiple times, once for each service that requires a database. If separate database servers will be used (for example, if the management plane services will reside on separate systems and will use their own local database servers), execute the script on each server hosting a database. ./create_db.sh <database name> <database_username> <database_password> For example: ./create_db.sh isecl_hvs_db hvs_db_username hvs_db_password ./create_db.sh isecl_aas_db aas_db_username aas_db_password ./create_db.sh isecl_wls_db wls_db_username wls_db_password ./create_db.sh isecl_hub_db hub_db_username hub_db_password Note that the database name, username, and password details for each service must be used in the corresponding installation answer file for that service.","title":"3.4.2  Provisioning the Database"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#343-database-server-tls-certificate_1","text":"The database client for Intel\u00ae SecL services requires the database TLS certificate to authenticate communication with the database server. If the database server for a service is located on the same server that the service will run on, only the path to this certificate is needed. If the provided Postgres scripts are used, the certificate will be located in /usr/local/pgsql/data/server.crt If the database server will be run separately from the Intel\u00ae SecL service(s), the certificate will need to be copied from the database server to the service machine before installing the Intel\u00ae SecL services. The database client for Intel\u00ae SecL services will validate that the Subject Alternative Names in the database server\u2019s TLS certificate contain the hostname(s)/IP address(es) that the clients will use to access the database server. If configuring a database without using the provided scripts, ensure that these attributes are present in the database TLS certificate.","title":"3.4.3  Database Server TLS Certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#35-installing-the-certificate-management-service_1","text":"","title":"3.5  Installing the Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#351-required-for_1","text":"The CMS is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers)","title":"3.5.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#352-supported-operating-systems_1","text":"The Intel\u00ae Security Libraries Certificate Management Service supports Red Hat Enterprise Linux 8.2.","title":"3.5.2  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#353-recommended-hardware_1","text":"1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services","title":"3.5.3  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#354-installation_1","text":"To install the Intel\u00ae SecL-DC Certificate Management Service: Copy the Certificate Management Service installation binary to the /root /directory. Create the cms.env installation answer file for an unattended installation: AAS_TLS_SAN = <comma-separated list of IPs and hostnames for the AAS> AAS_API_URL = https://<Authentication and Authorization Service IP or Hostname>:8444/aas SAN_LIST = <Comma-separated list of IP addresses and hostnames for the CMS>,127.0.0.1,localhost The SAN list will be used to authenticate the Certificate Signing Request from the AAS to the CMS. Only a CSR originating from a host matching the SAN list will be honored. Later, in the AAS authservice.env installation answer file, this same SAN list will be provided for the AAS installation. These lists must match, and must be valid for IPs and/or hostnames used by the AAS system. If both the AAS and CMS will be installed on the same system, \"127.0.0.1,localhost\" may be used. The SAN list variables also accept the wildcards \u201c?\u201d (for single-character wildcards) and \"*\" (for multiple-character wildcards) to allow address ranges or multiple FQDNs. The AAS_API_URL represents the URL for the AAS that will exist after the AAS is installed. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Certificate Management Service. Execute the installer binary. ./cms-v3.3.1.bin When the installation completes, the Certificate Management Service is available. The services can be verified by running cms status from the command line. cms status After installation is complete, the CMS will output a bearer token to the console. This token will be used with the AAS during installation to authenticate certificate requests to the CMS. If this token expires or otherwise needs to be recreated, use the following command: ```shell cms setup cms_auth_token --force ``` In addition, the SHA384 digest of the CMS TLS certificate will be needed for installation of the remaining Intel\u00ae SecL services. The digest can be obtained using the following command: cms tlscertsha384","title":"3.5.4  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#36-installing-the-authentication-and-authorization-service_1","text":"","title":"3.6  Installing the Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#361-required-for_1","text":"The AAS is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers)","title":"3.6.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#362-prerequisites_1","text":"The following must be completed before installing the Authentication and Authorization Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service database must be available","title":"3.6.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#363-package-dependencies_1","text":"The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. A script ( install_pgdb.sh ) is provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation.","title":"3.6.3  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#364-supported-operating-systems_1","text":"The Intel\u00ae Security Libraries Authentication and Authorization Service supports Red Hat Enterprise Linux 8.2.","title":"3.6.4  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#365-recommended-hardware_1","text":"1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services","title":"3.6.5  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#366-installation_1","text":"To install the AAS, a bearer token from the CMS is required. This bearer token is output at the end of the CMS installation. However, if a new token is needed, simply use the following command from the CMS command line: cms setup cms_auth_token --force Create the authservice.env installation answer file: CMS_BASE_URL = https://<CMS IP or hostname>:8445/cms/v1/ CMS_TLS_CERT_SHA384 = <CMS TLS certificate sha384> AAS_DB_HOSTNAME = <IP or hostname of database server> AAS_DB_PORT = <database port number ; default is 5432 > AAS_DB_NAME = <database name> AAS_DB_USERNAME = <database username> AAS_DB_PASSWORD = <database password> AAS_DB_SSLCERTSRC = <path to database TLS certificate ; the default location is typically /usr/local/pgsql/data/server.crt> AAS_ADMIN_USERNAME = <username for AAS administrative user> AAS_ADMIN_PASSWORD = <password for AAS administrative user> SAN_LIST = <comma-separated list of IPs and hostnames for the AAS ; this should match the value for the AAS_TLS_SAN in the cms.env file from the CMS installation> BEARER_TOKEN = <bearer token from CMS installation> Execute the AAS installer: ./authservice-v3.3.1.bin Note: The AAS_ADMIN credentials specified in this answer file will have administrator rights for the AAS and can be used to create other users, create new roles, and assign roles to users.","title":"3.6.6  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#367-creating-users_1","text":"After installation is complete, a number of roles and user accounts must be generated. Most of these accounts will be service users, used by the various Intel\u00ae SecL services to work together. Another set of users will be used for installation permissions, and a final administrative user will be created to provide the initial authentication interface for the actual human user. The administrative user can be used to create additional users with appropriately restricted roles based on organizational needs. Creating these required users and roles is facilitated by a script that will accept credentials and some configuration settings from an answer file and automate the process. Create the populate-users.env file: ISECL_INSTALL_COMPONENTS = KBS,TA,WLS,WPM,AH,HVS,WLA,AAS AAS_API_URL = https://<AAS IP address or hostname>:8444/aas AAS_ADMIN_USERNAME = <AAS username> AAS_ADMIN_PASSWORD = <AAS password> HVS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Host Verification Service> IH_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Integration Hub> WLS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Workload Service> KBS_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Key Broker Service> TA_CERT_SAN_LIST = <comma-separated list of IPs and hostnames for the Trust Agent> HVS_SERVICE_USERNAME = <Username for the HVS service user> HVS_SERVICE_PASSWORD = <Password for the HVS service user> IH_SERVICE_USERNAME = <Username for the Hub service user> IH_SERVICE_PASSWORD = <Password for the Hub service user> WPM_SERVICE_USERNAME = <Username for the WPM service user> WPM_SERVICE_PASSWORD = <Password for the WPM service user> WLS_SERVICE_USERNAME = <Username for the WLS service user> WLS_SERVICE_PASSWORD = <Password for the WLS service user> WLA_SERVICE_USERNAME = <Username for the WLA service user> WLA_SERVICE_PASSWORD = <Password for the WLA service user> GLOBAL_ADMIN_USERNAME = <Username for the global Administrator user GLOBAL_ADMIN_PASSWORD = <Password for the global Administrator user INSTALL_ADMIN_USERNAME = <Username for the installation user INSTALL_ADMIN_PASSWORD = <Password for the global installation user Note : The ISECL_INSTALL_COMPONENTS variable is a comma-separated list of the components that will be used in your environment. Not all services are required for every use case. If a given service will not be used in your deployment, simply delete the unnecessary service abbreviation from the ISECL_INSTALL_COMPONENTS list, and leave the SAN and credential variables for that service blank. Note : The SAN list variables each support wildcards( \" \" and \"?\"). In particular, without wildcards the Trust Agent SAN list would need to explicitly list each hostname or IP address for all Trust Agents that will be installed, which is not generally feasible. Using wildcards, domain names and entire IP ranges can be included in the SAN list, which will allow any host matching those ranges to install the relevant service. The SAN list specified here must exactly match the SAN list for the applicable service in that service\u2019s env installation file. Execute the populate-users script: ./populate-users.sh Note: The script can be executed with the \u2013output_json argument to create the populate-user.json .This json output file will contain all of the users created by the script, along with usernames, passwords, and role assignments. This file can be used both as a record of the service and administrator accounts, and can be used as alternative inputs to recreate the same users with the same credentials in the future if needed. Be sure to protect this file if the \u2013output_json argument is used. The script will automatically generate the following users: Verification Service User Integration Hub Service User Workload Policy Manager Service User Workload Service User Name Workload Service User Global Admin User Installation User These user accounts will be used during installation of several of the Intel\u00ae SecL-DC applications. In general, whenever credentials are required by an installation answer file, the variable name should match the name of the corresponding variable used in the populate-users.env file. The Global Admin user account has all roles for all services. This is a default administrator account that can be used to perform any task, including creating any other users. In general this account is useful for POC installations, but in production it should be used only to create user accounts with more restrictive roles. The administrator credentials should be protected and not shared. The populate-users script will also output an installation token. This token has all privileges needed for installation of the Intel\u00ae SecL services, and uses the credentials provided with the INSTALLATION_ADMIN_USERNAME and password. The remaining Intel \u00ae SecL-DC services require this token (set as the BEARER_TOKEN variable in the installation env files) to grant the appropriate privileges for installation. By default this token will be valid for two hours; the populate-users script can be rerun with the same populate-users.env file to regenerate the token if more time is required, or the INSTALLATION_ADMIN_USERNAME and password can be used to generate an authentication token.","title":"3.6.7  Creating Users"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#37-installing-the-host-verification-service_1","text":"This section details how to install the Intel\u00ae SecL-DC services. For instructions on running these services as containers, see the following section.","title":"3.7  Installing the Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#371-required-for_1","text":"The Host Verification Service is REQUIRED for all use cases. Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity Workload Confidentiality (both VMs and Docker Containers)","title":"3.7.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#372-prerequisites_1","text":"The following must be completed before installing the Verification Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available The Verification Service database must be available","title":"3.7.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#373-package-dependencies_1","text":"The Intel\u00ae Security Libraries Verification Service requires the following packages and their dependencies: logback Postgres* client and server 11.6 (server component optional if an external Postgres database is used) unzip zip openssl wget net-tools python3-policycoreutils If they are not already installed, the Verification Service installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation.","title":"3.7.3  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#374-supported-operating-systems_1","text":"The Intel\u00ae Security Libraries Verification Service supports Red Hat Enterprise Linux 8.2.","title":"3.7.4  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#375-recommended-hardware_1","text":"4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers (Optional) One network interface for Asset Tag provisioning (only required for \u201cpull\u201d tag provisioning; required to provision Asset Tags to VMware ESXi servers).","title":"3.7.5  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#376-installation_1","text":"To install the Verification Service, follow these steps: Copy the Verification Service installation binary to the /root directory. Create the hvs.env installation answer file. A sample minimal hvs.env file is provided below. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Verification Service. # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas HVS_SERVICE_USERNAME = HVS_service HVS_SERVICE_PASSWORD = password # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = digest # TLS Configuration SAN_LIST = 127 .0.0.1,192.168.1.1,hvs.server.com #comma-separated list of IP addresses and hostnames for the HVS to be used in the Subject Alternative Names list in the TLS Certificate # Installation admin bearer token for CSR approval request to CMS BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Database HVS_DB_NAME = mw_as HVS_DB_USERNAME = runner HVS_DB_PASSWORD = test HVS_DB_SSLCERTSRC = /tmp/dbcert.pem # Not required if VS_DB_SSLCERT is given Execute the installer binary. shell ./hvs-v3.3.1.bin When the installation completes, the Verification Service is available. The services can be verified by running hvs status from the Verification Service command line. ```shell hvs status ## 3.8 Installing the Workload Service ### 3.8.1 Required For The WLS is REQUIRED for the following use cases. * Workload Confidentiality (both VMs and Docker Containers) ### 3.8.2 Prerequisites The following must be completed before installing the Workload Service: * The Certificate Management Service must be installed and available * The Authentication and Authorization Service must be installed and available * The Verification Service must be installed and available * The Workload Service database must be available ### 3.8.3 Supported Operating Systems The Intel\u00ae Security Libraries Workload Service supports Red Hat Enterprise Linux 8.2 ### 3.8.4 Recommended Hardware ### 3.8.5 Installation * Copy the Workload Service installation binary to the `/root` directory. * Create the `workload-service.env` installation answer file ```shell WLS_DB_USERNAME=<database username> WLS_DB_PASSWORD=<database password> WLS_DB_HOSTNAME=<IP or hostname of database server> WLS_DB_PORT=<Database port; 5432 by default> WLS_DB=<name of the WLS database> WLS_DB_SSLCERTSRC=<path to database TLS certificate; the default location is typically /usr/local/pgsql/data/server.crt > HVS_URL=https://<Ip address or hostname of the Host verification Service>:8443/hvs/v2/ WLS_SERVICE_USERNAME=<username for WLS service account> WLS_SERVICE_PASSWORD=<password for WLS service account> CMS_BASE_URL=https://<IP or hostname to CMS>:8445/cms/v1/ CMS_TLS_CERT_SHA384=<sha384 of CMS TLS certificate> AAS_API_URL=https://<IP or hostname to AAS>:8444/aas/ SAN_LIST=<comma-separated list of IPs and hostnames for the WLS> BEARER_TOKEN=<Installation token from populate-users script> ``` * Execute the WLS installer binary: ```shell ./wls-v3.3.1.bin ``` ## 3.9 Installing the Trust Agent for Linux ### 3.9.1 Required For The Trust Agent for Linux is REQUIRED for all use cases. * Platform Integrity with Data Sovereignty and Signed Flavors * Application Integrity * Workload Confidentiality (both VMs and Docker Containers) ### 3.9.2 Package Dependencies The Trust Agent requires the following packages and their dependencies: * Tboot (Optional, for TXT-based deployments **without** UEFI SecureBoot only) * openssl * tar * redhat-lsb If they are not already installed, the Trust Agent installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation. Tboot will not be installed automatically. Instructions for installing and configuring tboot are documented later in this section. ### 3.9.3 Supported Operating Systems The Intel\u00ae Security Libraries Trust Agent for Linux supports Red Hat Enterprise Linux 8.2. ### 3.9.4 Prerequisites The following must be completed before installing the Trust Agent: * Supported server hardware including an Intel\u00ae Xeon\u00ae processor with Intel Trusted Execution Technology activated in the system BIOS. * Trusted Platform Module (version 2.0) installed and activated in the system BIOS, with cleared ownership status. > ***Note:*** *For Linux systems, TPM 1.2 and TPM resource sharing to applications other than the Trust Agent are not supported at this time. Do not install trousers or another TSS stack application after installing the Trust Agent on Linux systems* * System must be booted to a tboot boot option OR use UEFI SecureBoot. > ***Note***: *A security bug related to UEFI Secure Boot and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode.* * (Provisioning step only) Intel\u00ae SecL Verification Service server installed and active. * (REQUIRED for servers configured with TXT and tboot only) If the server is installed using an LVM, the LVM name must be identical for all Trust Agent systems. The Grub bootloader line that calls the Linux kernel will contain the LVM name of the root volume, and this line with all arguments is part of what is measured in the TXT/Tboot boot process. This will cause the OS Flavor measurements to differ between two otherwise identical hosts if their LVM names are different. Simply using a uniform name for the LVM during OS installation will resolve this possible discrepancy. * (Optional, REQUIRED for Virtual Machine Confidentiality only): * QEMU/KVM must be installed * Libvirt must be installed * (Optional, REQUIRED for Docker Container Confidentiality only): Docker CE 19.03.13 must be installed > ***Note***: *The specific Docker-CE version 19.03.13 is required for Docker Container Confidentiality. Only this version is supported for this use case.* #### 3.9.4.1 Tboot Installation > ***Note***: *A solution to a security bug has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode.* Tboot is required to build a complete Chain of Trust for Intel\u00ae TXT systems that are not using UEFI Secure Boot. Tboot acts to initiate the Intel\u00ae TXT SINIT ACM (Authenticated Code Module), which populates several TPM measurements including measurement of the kernel, grub command line, and initrd. Without either tboot or UEFI Secure Boot, the Chain of Trust will be broken because the OS-related components will be neither measured nor signature-verified prior to execution. Because tboot acts to initiate the Intel\u00ae TXT SINIT ACM, tboot is only required for platforms using Intel\u00ae TXT, and is not required for platforms using another hardware Root of Trust technology like Intel\u00ae Boot Guard. Intel\u00ae SecL-DC requires tboot 1.9.7 or greater. For most platforms, the version of tboot available from the RedHat software repository will meet all requirements. Some newer platforms and platform firmware versions may require a later version of tboot, including later versions than are available on the RedHat software repositories. This is due to updates that can be made to the Intel\u00ae TXT SINIT ACM behavior, and the SINIT ACM is contained in the BIOS firmware. If a newer version of tboot is required than is available from the repository, the most current version can be found here: https://sourceforge.net/projects/tboot/files/tboot/ Tboot requires configuration of the grub boot loader after installation. To install and configure tboot: 1. Install tboot ```shell yum install tboot-1.9.10 ``` > **Note:** An issue in the latest version of tboot(version 1.9.12) has caused it to be unusable on RHEL 8.2 legacy mode machines. This will be fixed in an upcoming version of tboot. Its is recommeded to use tboot version 1.9.10 for the time being. 2. Make a backup of your current `grub.cfg` file The below examples assume RedHat has been installed on a platform using Legacy boot mode.The grub path will be slightly different for platforms using Legacy BIOS. ```shell cp /boot/grub2/grub.cfg /boot/grub2/grub.bak ``` 3. Generate a new `grub.cfg` with the tboot boot option ```shell grub2-mkconfig -o /boot/grub2/grub.cfg ``` 4. Update the default boot option Ensure that the `GRUB_DEFAULT` value is set to the tboot option. The tboot boot option can be found by looking in the `/boot/redhat/grub.cfg` file. For example (the precise menu entry may be different, but should say \"tboot\"): `menuentry **'Red Hat Enterprise Linux GNU/Linux, with tboot 1.9.7 and Linux 4.18.0-147.el8.x86_64**' --class red --class gnu- linux --class gnu --class os --class tboot {` ```shell vi /etc/default/grub GRUB_DEFAULT='Red Hat Enterprise Linux GNU/Linux, with tboot 1.9.7 and Linux 4.18.0-147.el8.x86_64' Reboot the system Because measurement happens at system boot, a reboot is needed to boot to the tboot boot option and populate measurements in the TPM. Verify a successful trusted boot with tboot Tboot provides the txt-stat command to show the tboot log. The first part of the output of this command can be used to verify a successful trusted launch. In the output below, note the \u201cTXT measured launch\u201d and \u201csecrets flag set\u201d at the bottom. Both of these should show \" TRUE \" if the tboot measured launch was successful. If either of these show \" FALSE \" the measured launch has failed. This usually simply indicates that the tboot boot option was not selected during boot. If the measured launch was successful, proceed to install the Trust Agent. Intel ( r ) TXT Configuration Registers: STS: 0x0001c091 senter_done: TRUE sexit_done: FALSE mem_config_lock: FALSE private_open: TRUE locality_1_open: TRUE locality_2_open: TRUE ESTS: 0x00 txt_reset: FALSE E2STS: 0x0000000000000006 secrets: TRUE ERRORCODE: 0x00000000 DIDVID: 0x00000001b0078086 vendor_id: 0x8086 device_id: 0xb007 revision_id: 0x1 FSBIF: 0xffffffffffffffff QPIIF: 0x000000009d003000 SINIT.BASE: 0x6fec0000 SINIT.SIZE: 262144B ( 0x40000 ) HEAP.BASE: 0x6ff00000 HEAP.SIZE: 1048576B ( 0x100000 ) DPR: 0x0000000070000051 lock: TRUE top: 0x70000000 size: 5MB ( 5242880B ) PUBLIC.KEY: 9c 78 f0 d8 53 de 85 4a 2f 47 76 1c 72 b8 6a 11 16 4a 66 a9 84 c1 aa d7 92 e3 14 4f b7 1c 2d 11 *********************************************************** TXT measured launch: TRUE secrets flag set: TRUE ***********************************************************","title":"3.7.6  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#395-installation_1","text":"Installation of the Trust Agent is split into two major steps: Installation, which covers the creation of system files and folders, and Provisioning, which involves the creation of keys and secrets and links the Trust Agent to a specific Verification Service. Both operations can be performed at the same time using an installation answer file. Without the answer file, the Trust Agent can be installed and left in an un-provisioned state regardless of whether a Verification Service is up and running, until such time as the datacenter administrator is ready to run the provisioning step and link the Trust Agent to a Verification Service. To install the Trust Agent for Linux: Copy the Trust Agent installation binary to the /root directory. (Optional; required to perform Provisioning and Installation at the same time.) Create the trustagent.env answer file in the /root directory (for full configuration options, see section 9.2). The minimum configuration options for installation are provided below. For Platform Attestation only, provide the following in trustagent.env shell HVS_URL=https://<Verification Service IP or Hostname>:8443/hvs/v2 PROVISION_ATTESTATION=y GRUB_FILE=<path to grub.cfg> CURRENT_IP=<Trust Agent IP address> CMS_TLS_CERT_SHA384=<CMS TLS digest> BEARER_TOKEN=<Installation token from populate-users script> AAS_API_URL=https://<AAS IP or Hostname>:8444/aas CMS_BASE_URL=https://<CMS IP or Hostname>:8445/cms/v1 SAN_LIST=<Comma-separated list of IP addresses and hostnames for the TAgent matching the SAN list specified in the populate-users script; may include wildcards> For Workload Confidentiality with VM Encryption, add the following ( in addition to the basic Platform Attestation sample): shell WLA_SERVICE_USERNAME=<Username for the WLA service user> WLA_SERVICE_PASSWORD=<Username for the WLA service user> WLS_API_URL=https://<WLS IP address or hostname>:5000/wls/ For Workload Confidentiality with Docker Container Encryption, add the following ( in addition to the basic Platform Attestation sample): shell WLA_SERVICE_USERNAME=<Username for the WLA service user> WLA_SERVICE_PASSWORD=<Username for the WLA service user> WLS_API_URL=https://<WLS IP address or hostname>:5000/wls/ WA_WITH_CONTAINER_SECURITY=yes NO_PROXY=<Registry_ip> HTTPS_PROXY=<proxy_url> INSECURE_SKIP_VERIFY=<TRUE/FALSE based on registry configured with http/https respectively> REGISTRY_SCHEME_TYPE=https Execute the Trust Agent installer and wait for the installation to complete. ./trustagent-v3.3.1.bin If the trustagent.env answer file was provided with the minimum required options, the Trust Agent will be installed and also Provisioned to the Verification Service specified in the answer file. If no answer file was provided, the Trust Agent will be installed, but will not be Provisioned. TPM-related functionality will not be available from the Trust Agent until the Provisioning step is completed. The Trust Agent will add a new grub menu entry for application measurement. This new entry will include tboot if the existing grub contains tboot as the default boot option. Note: If the Linux Trust Agent is installed without being Provisioned, the Trust Agent process will not actually run until the Provisioning step has been completed. Legacy BIOS systems using tboot ONLY) Update the grub boot loader: grub2-mkconfig -o /boot/grub2/grub.cfg After Provisioning is completed, the Linux Trust Agent must be rebooted so that the default SOFTWARE Flavor manifest can be measured and extended to the TPM. If the Workload Agent will also be installed on the system (see the next section), wait to reboot the server until after the Workload Agent has been installed, as this modifies the default SOFTWARE Flavor manifest.","title":"3.9.5  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#310-installing-the-workload-agent_1","text":"","title":"3.10  Installing the Workload Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3101-required-for_1","text":"Workload Confidentiality (both VMs and Docker Containers)","title":"3.10.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3102-supported-operating-systems_1","text":"The Intel\u00ae Security Libraries Workload Agent supports Red Hat Enterprise Linux 8.2","title":"3.10.2  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3103-prerequisites_1","text":"The following must be completed before installing the Workload Agent: Intel\u00ae SecL Trust Agent installed and active. cryptsetup (REQUIRED for Virtual Machine Confidentiality only): QEMU/KVM must be installed libvirt must be installed Libvirt must be configured to set the \"remember_owner\" property to \"0\". Edit the qemu.conf configuration file: vi /etc/libvirt/qemu.conf Set \"remember_owner\" to \"0\": remember_owner = 0 Restart the libvirtd service: systemctl restart libvirtd If this step is not performed before launching encrypted VMs, on VM restart you will see errors similar to the following: \"Error starting domain: internal error: child reported (status=125): Requested operation is not valid: Setting different SELinux label on /var/lib/nova/instances/15d7ec2f-27ad-41ed-9632-32a83c3d10ef/disk which is already in use\" (REQUIRED for Docker Container Confidentiality only): Docker CE 19.03.13 must be installed Note : The specific Docker-CE version 19.03.13 is required for Docker Container Confidentiality. Only this version is supported for this use case.","title":"3.10.3  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3104-installation_1","text":"Copy the Workload Agent installation binary to the /root / directory Verify that the trustagent.env answer file is present. This file was necessary for installing/provisioning the Trust Agent. Note that the additional content required for Workload Confidentiality with either VM Encryption or Docker Container Encryption must be included in the trustagent.env file (samples provided in the previous section) for use by the Workload Agent. Execute the Workload Agent installer binary. ./workload-agent-v3.3.1.bin (Legacy BIOS systems using tboot ONLY) Update the grub boot loader: grub2-mkconfig -o /boot/grub2/grub.cfg Reboot the server. The Workload Agent populates files that are needed for the default SOFTWARE Flavor, and a reboot is required for those measurements to happen.","title":"3.10.4  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#311-trust-agent-provisioning","text":"\"Provisioning\" the Trust Agent involves connecting to a Verification Service to download the Verification Service PrivacyCA certificate, create a new Attestation Identity Keypair in the TPM, and verify or create the TPM Endorsement Certificate and Endorsement Key. The Verification Service PrivacyCA root certificate is used to sign the EC, and the EC is used to generate the Attestation Identity Keypair. The AIK is used by the Verification Service to verify the integrity of quotes from the host\u2019s TPM. Provisioning can be performed separately from installation (meaning you can install the Trust Agent without Provisioning, and then Provision later). If the trustagent.env answer file is present and has the required Verification Service information during installation, the Agent will automatically run the Provisioning steps. Note: The trustagent.env answer file must contain user credentials for a user with sufficient privileges. The minimum role required for performing provisioning is the \"trustagent_provisioner\" role. Note: If the Linux Trust Agent is installed without being Provisioned, the Trust Agent process will not actually run until the Provisioning step has been completed. If the answer file is not present during installation, the Agent can be Provisioned later by adding the trustagent.env file and running the following command: tagent provision-attestation <trustagent.env or trustagent.ini file path>","title":"3.11  Trust Agent Provisioning"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#312-trust-agent-registration","text":"Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report. The Trust Agent can register the host with a Verification Service by running the following command (the trustagent.env or trustagent.ini answer file must be present in the current working directory): tagent create-host Hosts can also be registered using a REST API request to the Verification Service: POST <https://verification.service.com:8443/hvs/v2/hosts> { \"host_name\" : \"<hostname of host to be registered>\" \"connection_string\" : \"intel:https://<hostname or IP address>:1443\" , \"flavorgroup_names\" : [], \"description\" : \"<description>\" } Note: When a new host is registered, the Verification Service will automatically attempt to match the host to appropriate Flavors. If appropriate Flavors are not found, the host will still be registered, but will be in an Untrusted state until/unless appropriate Flavors are added to the Verification Service.","title":"3.12  Trust Agent Registration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#313-importing-the-host_unique-flavor","text":"RHEL and VMWare ESXi hosts have measured components that are unique to each host. This means that a special HOST_UNIQUE flavor part needs to be imported for each RHEL and ESXi host, in addition to any other OS or Platform Flavors. Note: Importing a Flavor requires user credentials for a user with sufficient privileges. The minimum role required for creating the HOST_UNIQUE Flavor part is the \u201chost_unique_flavor_creator\u201d role. This role can only create HOST_UNIQUE Flavor parts, and cannot create any other Flavors. On Red Hat Enterprise Linux hosts with the Trust Agent, this can be performed from the Trust Agent command line (this requires the trustagent.env answer file to be present in the current working directory): tagent create-host-unique-flavor This can also be performed using a REST API (required for VMWare ESXi hosts): POST https://verification.service.com:8443/hvs/v2/flavors { \"connection_string\" : \"<Connection string>\" , \"partial_flavor_types\" : [ \"HOST_UNIQUE\" ] }","title":"3.13  Importing the HOST_UNIQUE Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#314-installing-the-integration-hub","text":"Note: The Integration Hub is only required to integrate Intel\u00ae SecL with third-party scheduler services, such as OpenStack Nova or Kubernetes. The Hub is not required for usage models that do not require Intel\u00ae SecL security attributes to be pushed to an integration endpoint.","title":"3.14  Installing the Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3141-required-for","text":"The Hub is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Docker Containers) The Hub is OPTIONAL for the following use cases (used only if orchestration or other integration support is needed): Platform Integrity with Data Sovereignty and Signed Flavors Application Integrity","title":"3.14.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3142-deployment-architecture-considerations-for-the-hub","text":"A separate Hub instance is REQUIRED for each Cloud environment (also referred to as a Hub \"tenant\"). For example, if a single datacenter will have an OpenStack cluster and also two separate Kubernetes clusters, a total of three Hub instances must be installed, though additional instances of other Intel SecL services are not required (in the same example, only a single Verification Service is required). Each Hub will manage a single orchestrator environment. If multiple orchestrator environments will be managed, be sure to create separate database schema names for each separate Hub. Each Hub instance should be installed on a separate VM or physical server","title":"3.14.2  Deployment Architecture Considerations for the Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3143-prerequisites","text":"The Intel\u00ae Security Libraries Integration Hub can be run as a VM or as a bare-metal server. The Hub may be installed on the same server (physical or VM) as the Verification Service. The Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available The Integration Hub database must be available (REQUIRED for Kubernetes integration only) The Intel SecL Custom Resource Definitions must be installed and available (see the Integration section for details)","title":"3.14.3  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3144-package-dependencies","text":"The Intel\u00ae SecL Integration Hub requires a number of packages and their dependencies: If these are not already installed, the Integration Hub installer attempts to install these packages automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update your repository package lists before installation.","title":"3.14.4  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3145-supported-operating-systems","text":"The Intel Security Libraries Integration Hub supports Red Hat Enterprise Linux 8.2","title":"3.14.5  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3146-recommended-hardware","text":"1 vCPUs RAM: 2 GB 1 GB free space to install the Verification Service services. Additional free space is needed for the Integration Hub database and logs (database and log space requirements are dependent on the number of managed servers). One network interface with network access to the Verification Service. One network interface with network access to any integration endpoints (for example, OpenStack Nova).","title":"3.14.6  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3147-installing-the-integration-hub","text":"To install the Integration Hub, follow these steps: Copy the Integration Hub installation binary to the /root directory. Create the ihub.env installation answer file. See the sample file below. # Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME = <Integration Hub Service User username> IHUB_SERVICE_PASSWORD = <Integration Hub Service User password> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = <TLS hash> # TLS Configuration TLS_SAN_LIST = 127 .0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL = https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE = HVS # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_IP = <OpenStack Nova IP or hostname> OPENSTACK_AUTH_PORT = <OpenStack Keystone port ; 5000 by default> OPENSTACK_API_PORT = <OpenStack Nova API port ; 8778 by default> OPENSTACK_USERNAME = <OpenStack username> OPENSTACK_PASSWORD = <OpenStack password> # Kubernetes Integration Credentials - required for Kubernetes integration only TENANT = KUBERNETES KUBERNETES_URL = https://kubernetes:6443/ KUBERNETES_CRD = custom-isecl KUBERNETES_CERT_FILE = <path where Kubernetes api_server.crt is copied> KUBERNETES_TOKEN = <Token fetched from kubernetes secret of ISECL-Controller> # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Report Signing Certificate URL and service TLS hash for server verification # Required for Platform Integrity Attestation attributes. Not required for SGX attributes. REPORT_SIGNING_CERT_URL = https://isecl-cms:8445/cms/v1 REPORT_SIGNING_SERVICE_TLS_CERT_SHA384 = bb3a1\u2026 3. Execute the installer binary. ./ihub-v3.3.1.bin After installation, the Hub must be configured to integrate with a Cloud orchestration platform (for example, OpenStack or Kubernetes). See the Integration section for details.","title":"3.14.7  Installing the Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#315-installing-the-key-broker-service","text":"","title":"3.15  Installing the Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3151-required-for_1","text":"The KBS is REQUIRED for the following use cases: Workload Confidentiality (both VMs and Docker Containers)","title":"3.15.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3152-prerequisites","text":"The following must be completed before installing the Key Broker: The Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available (Recommended; Required if a 3^rd^-party Key Management Server will be used) A KMIP 2.0-compliant 3^rd^-party Key management Server must be available. The Key Broker will require the KMIP server\u2019s client certificate, client key and root ca certificate. The Key Broker uses the libkmip client to connect to a KMIP server The Key Broker has been validated using the pykmip 0.9.1 KMIP server as a 3^rd^-party Key Management Server. While any general KMIP 2.0-compliant Key Management Server should work, implementation differences among KMIP providers may prevent functionality with specific providers.","title":"3.15.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3153-package-dependencies","text":"","title":"3.15.3  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3154-supported-operating-systems","text":"The Intel\u00ae Security Libraries Key Broker Service supports Red Hat Enterprise Linux 8.2","title":"3.15.4  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3155-recommended-hardware","text":"","title":"3.15.5  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3156-installation","text":"Copy the Key Broker installation binary to the /root directory. Create the installation answer file kbs.env : SAN_LIST = #comma-separated list of IP addresses and hostnames for the KBS to be used in the Subject Alternative Names list in the TLS Certificat ENDPOINT_URL = https://<kbs IP or hostname>:<kbs_port>/v1 CMS_BASE_URL = https://<CMS IP or hostname>:8445/cms/v1/ CMS_TLS_CERT_SHA384 = <SHA384 hash of CMS TLS certificate> AAS_API_URL = https://<AAS IP or hostname>:8444/aas BEARER_TOKEN = <Installation token from populate-users script> #OPTIONAL , only when using 3 rd -Party KMIP Compliant KMS Server KEY_MANAGER=KMIP KMIP_SERVER_IP= KMIP_SERVER_PORT= KMIP_CLIENT_KEY_PATH= KMIP_ROOT_CERT_PATH= KMIP_CLIENT_CERT_PATH= Execute the KBS installer. ./kbs-v3.3.1.bin","title":"3.15.6  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#31561-configure-the-key-broker-to-use-a-kmip-compliant-key-management-server","text":"The Key Broker immediately after installation will be configured to use a filesystem key management solution if not configured for KMIP. This should be used only for testing and POC purposes; using a secure 3 rd -party Key management Server should be used for production deployments. To configure the Key Broker to point to a 3 rd -party KMIP-compliant Key Management Server: Ensure the KMIP server\u2019s client certificate, client key and root ca are accessible for reading by Key Broker Service Update the config.yml for the following variables under /etc/kbs/config.yml kmip : server-ip : <IP address of the KMIP server> server-port : <Port where KMIP Server is listening on> client-cert-path : <KMIP Client Certificate Path> client-key-path : <KMIP Client Key Path> root-cert-path : <KMIP Server Root Certificate Path> Restart the Key Broker for the settings to take effect kbs stop ; kbs start","title":"3.15.6.1  Configure the Key Broker to use a KMIP-compliant Key Management Server"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3157-importing-verification-service-certificates","text":"After installation, the Key Broker must import the SAML and PrivacyCA certificates from any Verification Services it will trust. This provides the Key Broker a way to ensure that only attestations that come from a \"known\" Verification Service. The SAML and PrivacyCA certificates needed can be found on the Verification Service.","title":"3.15.7  Importing Verification Service Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#31571-importing-a-saml-certificate","text":"Use OpenSSL to display the SAML certificate content: cat /etc/hvs/certs/trustedca/saml-cert.pem Use the SAML certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:<Key Broker Port>/kbs/v1/saml-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIID/DCCAmSgAwIBAgIBCDANBgkqhkiG9w0BAQwFADBQMQswCQYDVQQGEwJVUzEL MAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEXMBUGA1UE AxMOQ01TIFNpZ25pbmcgQ0EwHhcNMjAxMTE4MDQwMjAwWhcNMjExMTE4MDQwMjAw WjAfMR0wGwYDVQQDExRIVlMgU0FNTCBDZXJ0aWZpY2F0ZTCCAaIwDQYJKoZIhvcN AQEBBQADggGPADCCAYoCggGBALisc9JJeupLBk22pnARt9CP6CJQn1iEMbLvvkZ0 tCbuG9wX5LUoyPFGELDcHrK2E5eLqLUrxCgHa6zTkokgoh3Oj/PXG3JoqZsK2hVd VHyL82JnjLrB93SsNwlo7002V35RaAvWln+Z9fJtY9gOB7LS+UCchVYXduFYSG8m sXkGkG60VvQlpFYYTO773/DV/zj2cZmL2l3/6OLX+QeCG8UtRo7iqNloD+788sSd CQKx2m3PxRd195cTNGBarOMJwzPu8/w+bbk8E3wO/IdjO7Mh3K5yNRr1V99sFG5h RyjZwgfO7RYOp2B8hMZENeWvUGB1QiNwsKvC27HE4WkkCsF+HCcKDwEGUY1/NmRq pj6yaBajsKM326agPk8Roihgea4NdWQrfpa/W3ZmMLceggtwY4PJeonEuLiidKAk Tg13XRUQ1yq9mUFnY5pZCFvO1liu7P2xtr6xvAFdX/KsPaXZRnOwzSODkhmS6NNe lsj1JCUtR/rVJVmIA7dBcxPZEwIDAQABoxIwEDAOBgNVHQ8BAf8EBAMCBsAwDQYJ KoZIhvcNAQEMBQADggGBAB0dXcAmSnU4Sda6UfToUTO3PotwCS/e4Tm5RoKzYfqz R6UQF1dlcVhkS1mz3wl1EZbeOJU61QiSACfAG05SU2KtrZ0h7//nJT/0N0hwGzhL 9c0r10QYss3LqI9eUAddtqjyQf8baJtuFruBQjoFytqzp6XQ9gtPL5XcLyl9C4xy sWpKRfiB3Px5Agi18RiVM3/hBDGfVbcb/v8dWJM28MJs5ZWgrb/HdfMUQJFdYHOc AU+WpxGjaftTiD9Is5lTOb3ESKMkz7fEW6YXulTkij2P9m5pcoZIPPZbnXQWJzot emz5RgbYVBE4R6tZNJ1IyZhDiY4O1MjpCYhzaAoPVPD9lYIHLQcMHH56xx0Y24Fv wFIIU6C6OatLDLApRBMFeZa/xFgf2qNjm+1wu5N79EB9xukqzIw+lR+dXYAHgChW PrYK5F500/BiTmNtNC+EiwLs6RQU4ZBXki8U/uBFB7f5vnk8LxPm4NlP0GSCJhAr fpo2VjlPKVVUUUTQGxZV0Q == -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIENTCCAp2gAwIBAgIBAzANBgkqhkiG9w0BAQwFADBHMQswCQYDVQQGEwJVUzEL MAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEOMAwGA1UE AxMFQ01TQ0EwHhcNMjAxMTE4MDQwMDAwWhcNMjUxMTE4MDQwMDAwWjBQMQswCQYD VQQGEwJVUzELMAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRF TDEXMBUGA1UEAxMOQ01TIFNpZ25pbmcgQ0EwggGiMA0GCSqGSIb3DQEBAQUAA4IB jwAwggGKAoIBgQCyjonRwxZ8UbWkzAcQn6SnyOlQzzdOVW2+WNh61tMfRVioSykA otuG1hhgApULbyUmBsJSmNU4oQjnlblpsH+LOLLHHlM8tCA5oX9XGzlpQVp+Dr17 vK69lN0Ner2hqVxmJy2evN93rV+nsFrdx2O2/JcptkPKQUc+EcqDOPbMgIBWjRpT lVeyEIoWBBxAwtoUxpCMBXtSnxVB7+6Yc3apONj8wF5Ie7qBXXOTH3II3tAYNFiA O1ivNER8zNr2Aia14V/lQUlHzwB94TBMFLPzR4T2bXiGH2wfW4Z35ULdW8avcKSR r9KSQ4JtREp2xsJ9AYr89WPljiKvf6wJaTFT1BnR/cvBtpsKbrppbiJrYqbuRa8m 0vcZ278dM4sGMLUqa7AnMXWHqI6MjqulN2RHIkQ/J3ih0Q8GLDJaruiJnNOeGiDo mL0LxJFEy5OGH3AUioOGRHdF0suFneRv3emY6FSMSXuofLfn59I7ik630cfj3r7X 1xzuqUbZE70uqCUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF MAMBAf8wDQYJKoZIhvcNAQEMBQADggGBAJiIWLM16WqIyT/D59Q+xDptL/kP4BVs HemKCqIwJ9N1JzFH5W4chCv0u5R4Gcb4q7HOtbhjTm/W1u6EVWetLVQeNSOizqf5 NjNoA3eZH8MWn6q93rBuWtZebpDMNYYFgRvPU4d8lKfRV4JdcYlyLo0wbzzF9AOJ 0CIBNBcYJXZqZeqrnPBzMZe7RVvoTIu2VOYk+RIvao8jgCZOwEqe3RMBnaF2psIO OrnmSMtLDKoPSVyOYt4R/agSFtiOIHnddmR6djvkVNgkvg8B1WuElU/9W0Tlxn/A AblH+qq6FVQLzWOITkCu/YN4W222zR0EeMsaZ7NEkxHMrhj4giFB+AnjEL04XDjz G2Vcq4c3Ka4ZBZv3Q6nWgK6RfrqAJL+tGS8YX9Bt08J7q41wje63QhUjtmaL3gTu 4WqlKxedoBweEpD4x0CIcxtVA48NmFS9NQse6wAsq3GvKCcSsCBUgyKMnmDb5Y+g lynfJLtgmHDcO7+8I0ZU2zBu8k8GotnBrQ == -----END CERTIFICATE-----","title":"3.15.7.1  Importing a SAML certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#31572-importing-a-privacyca-certificate","text":"Use OpenSSL to display the PrivacyCA certificate content: openssl x509 -in /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem Use the PrivacyCA certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:<Key Broker Port>/kbs/v1/tpm-identity-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIIHaDCCBdCgAwIBAgIGAW72eWZ9MA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMT EG10d2lsc29uLXBjYS1haWswHhcNMTkxMjExMTkzOTQxWhcNMjkxMjEwMTkzOTQx WjAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlrMIIBojANBgkqhkiG9w0BAQEF AAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4YiHtueWBdW0sibtH1QRSbI KtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSUnn07xjWJRP1EcvSaufO1 MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwuattxTelpmgucDp98MqW/ uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337yx3VBK59Dwtsmfsrd5tMn IuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y3saXeNBDg9J363imOHIH haP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZloxJzcNgtimQw3RbyrB3C KijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwCQNnBP4UJXwAflO7COG7P mpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqvtTVtFX+oRWRsgaEdxKf7 LJx4aIjXwP2s6PIiOSalAgMBAAGjggOwMIIDrDCCAbMGA1UdDgSCAaoEggGmMIIB ojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4Yi HtueWBdW0sibtH1QRSbIKtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSU nn07xjWJRP1EcvSaufO1MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwu attxTelpmgucDp98MqW/uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337y x3VBK59Dwtsmfsrd5tMnIuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y 3saXeNBDg9J363imOHIHhaP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZl oxJzcNgtimQw3RbyrB3CKijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwC QNnBP4UJXwAflO7COG7Pmpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqv tTVtFX+oRWRsgaEdxKf7LJx4aIjXwP2s6PIiOSalAgMBAAEwDwYDVR0TAQH/BAUw AwEB/zCCAeAGA1UdIwSCAdcwggHTgIIBpjCCAaIwDQYJKoZIhvcNAQEBBQADggGP ADCCAYoCggGBAJlqga9mIsnGWxf0IBW8U6+GIh7bnlgXVtLIm7R9UEUmyCrZGxbJ q+iekIiwWl3BeylTeg2g9I+bFOHGUrbaisJUlJ59O8Y1iUT9RHL0mrnztTGq3sIA aRUHCNk+mk7Nc4le+waCs9JFrXlEc9Y09SksLmrbcU3paZoLnA6ffDKlv7lrJYh1 FcYedSUxNcp+1X9UAls92vjQx/fC4K+ZLN9+8sd1QSufQ8LbJn7K3ebTJyLlfScN GNlBHQ4tNOBVyOKuuDLDKVgO7eTjUQFPlTVNGN7Gl3jQQ4PSd+t4pjhyB4Wj/IsQ 4amfl2/0xmn4BXhBwZCU7+m1qQ6qHW1lQ24GZaMSc3DYLYpkMN0W8qwdwioo5RKO QUGOmznHTBu4Aqu+7v32zry2+SF80vGQ6cLsAkDZwT+FCV8AH5Tuwjhuz5qY/W01 dTrRYj7WBXOCXRnWn9T5ds1hnkdHNzyM2EMar7U1bRV/qEVkbIGhHcSn+yyceGiI 18D9rOjyIjkmpQIDAQABoR+kHTAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlr ggYBbvZ5Zn0wDQYJKoZIhvcNAQELBQADggGBAC3PEB8Av0PBJgrJMxzMbuf1FCdD AUrfYmP81Hs0/v70efviMEF2s3GAyLHD9v+1nNFCQrjcNCar18k45BlcodBEmxKA DZoioFykRtlha6ByVvuN6wD93KQbKsXPKhUp8X67fLuOcQgfc3BoDRlw/Ha1Ib6X fliE+rQzLCOgClK7ZdTwl9Ok0VbR7Mbal/xShIqr2WopjBtal9p4RsnIxilTHI+m qzbV8zvZXYfYtEb3MMMT5EnjIV8O498KKOjxohD2vqaxqItd58pOi6z/q5f4pLHc DvdsJecJEoWb2bxWQdBgthMjX6AUV/B5G/LTfaPwVbTLdEc+S6Nrobf/TFYV0pvG OzF3ltYag0fupuYJ991s/JhVwgJhCGq7YourDGkNIWAjt0Z2FWuQKnxWvmResgkS WTeXt+1HCFSo5WcAZWV8R9FYv7tzFxPY8aoLj82sgrOE4IwRqaA8KMbq3anF4RCk +D8k6etqMcNHFS8Fj6GlCd80mb4Q3sxuCiBvZw == -----END CERTIFICATE-----","title":"3.15.7.2  Importing a PrivacyCA Certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#316-installing-the-workload-policy-manager","text":"","title":"3.16  Installing the Workload Policy Manager"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3161-required-for_1","text":"The WPM is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Docker Containers)","title":"3.16.1  Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3162-package-dependencies","text":"(Required only if Docker Container encryption is needed) Docker-ce 19.03.13 must be installed. This is needed only if the option WPM_WITH_CONTAINER_SECURITY=yes is set in the wpm.env answer file.","title":"3.16.2  Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3163-supported-operating-systems","text":"The Intel\u00ae Security Libraries Workload Policy Manager supports Red Hat Enterprise Linux 8.2.","title":"3.16.3  Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3164-recommended-hardware","text":"2 vCPUs RAM: 8 GB 100 GB One network interface with network access to the Key Broker and Workload Service Additional memory and disk space may be required depending on the size of images to be encrypted","title":"3.16.4  Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#3165-installation","text":"Copy the WPM installer to the /root directory Create the wpm.env answer file: KMS_API_URL = https://<IP address or hostname of the KBS>:9443/v1/ WPM_SERVICE_USERNAME = <WPM_Service username from populate-users script> WPM_SERVICE_PASSWORD = <WPM Service password from populate-users script> CMS_TLS_CERT_SHA384 = <Sha384 hash of the CMS TLS certificate> CMS_BASE_URL = https://<IP address or hostname for CMS>:8445/cms/v1/ AAS_API_URL = https://<Hostname or IP address of the AAS>:8444/aas BEARER_TOKEN = <Installation token from populate-users script> For Docker Container Encryption only, add the following line to the wpm.env installation answer file: WPM_WITH_CONTAINER_SECURITY = yes Execute the WPM installer: ./wpm-v3.3.1.bin","title":"3.16.5  Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#4-authentication_1","text":"Beginning in the Intel\u00ae SecL-DC 1.6 release, authentication is centrally managed by the Authentication and Authorization Service (AAS). This service uses a Bearer Token authentication method, which replaces the previous HTTP BASIC authentication. This service also centralizes the creation of roles and users, allowing much easier management of users, passwords, and permissions across all Intel\u00ae SecL-DC services. To make an API request to an Intel\u00ae SecL-DC service, an authentication token is now required. API requests must now include an Authorization header with an appropriate token: Authorization: Bearer $TOKEN The token is issued by the AAS and will expire after a set amount of time. This token may be used with any Intel\u00ae SecL-DC service, and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for.","title":"4  Authentication"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#41-create-token_1","text":"To request a new token from the AAS: POST <https://<AAS IP or hostname>:8444/aas/token> { \"username\" : \"<username>\" , \"password\" : \"<password>\" } The response will be a token that can be used in the Authorization header for other requests. The length of time for which the token will be valid is configured on the AAS using the key AAS_JWT_TOKEN_DURATION_MINS (in the installation answer file during installation) or aas.jwt.token.duration.mins (configured on the AAS after installation). In both cases the value is the length of time in minutes that issued tokens will remain valid before expiring.","title":"4.1  Create Token"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#42-user-management_1","text":"Users in Intel\u00ae SecL-DC are no longer restrained to a specific service, as they are now centrally managed by the Authentication and Authorization Service. Any user may now be assigned roles for any service, allowing user accounts to be fully defined by the tasks needed.","title":"4.2  User Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#421-username-and-password-requirements_1","text":"Passwords have the following constraints: cannot be empty - i.e must at least have one character maximum length of 255 characters Usernames have the following requirements: Format: username[@host_name[domain]] [@host_name[domain]] is optional username shall be minimum of 2 and maximum of 255 characters username allowed characters are alphanumeric, ., -, _ - but cannot start with -. Domain name must meet requirements of a host name or fully qualified internet host name Examples admin, admin_wls, admin@wls, admin@wls.intel.com , wls-admin@intel.com","title":"4.2.1  Username and Password requirements"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#422-create-user_1","text":"POST https://<IP or hostname of AAS>:8444/aas/users Authorization: Bearer <token> { \"username\" : \"<username>\" , \"password\" : \"<password>\" }","title":"4.2.2  Create User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#423-search-user_1","text":"GET https://<IP or hostname of AAS>:8444/aas/users?<parameter>=<value> Authorization: Bearer <token>","title":"4.2.3  Search User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#424-change-user-password_1","text":"PATCH https://<IP or hostname of AAS>:8444/aas/users/changepassword Authorization: Bearer <token> { \"username\" : \"<username>\" , \"old_password\" : \"<old_password>\" , \"new_password\" : \"<new_password>\" , \"password_confirm\" : \"<new_password>\" }","title":"4.2.4  Change User Password"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#425-delete-user_1","text":"DELETE https://<IP or hostname of AAS>:8444/aas/users/<User ID> Authorization: Bearer <token>","title":"4.2.5  Delete User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#43-roles-and-permissions_1","text":"Permissions in Intel\u00ae SecL-DC are managed by Roles. Roles are a set of predefined permissions applicable to a specific service. Any number of Roles may be applied to a User. While new Roles can be created, each Intel\u00ae SecL service defines permissions that are applicable to specific predetermined Roles. This means that only pre-defined Roles will actually have any permissions. Role creation is intended to allow Intel\u00ae SecL-DC services to define their permissions while allowing role and user management to be centrally managed on the AAS. When a new service is installed, it will use the Role creation functions to define roles applicable for that service in the AAS.","title":"4.3  Roles and Permissions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#431-create-role_1","text":"POST https://<AAS IP or Hostname>:8444/aas/roles Authorization: Bearer <token> { \"service\" : \"<Service name>\" , \"name\" : \"<Role Name>\" , \"permissions\" : [ <array o f permissio ns > ] } service field contains a minimum of 1 and maximum of 20 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , name field contains a minimum of 1 and maximum of 40 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , service and name fields are mandatory context field is optional and can contain up to 512 characters. Allowed characters are alphanumeric plus -, _, @, ., ,,=,;,:,* permissions field is optional and allow up to a maximum of 512 characters. The Permissions array must a comma-separated list of permissions formatted as resource:action: Permissions required to execute specific API requests are listed with the API resource and method definitions in the API documentation.","title":"4.3.1  Create Role"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#432-search-roles_1","text":"GET https://<AAS IP or Hostname>:8444/aas/roles?<parameter>=<value> Authorization: Bearer <token> Search parameters supported: Service=<name of service> Name=<role name> Context=<context> contextContains=<partial \"context\" string> allContexts=<true or false> filter=false","title":"4.3.2  Search Roles"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#433-delete-role_1","text":"DELETE https://<AAS IP or Hostname>:8444/aas/roles/<role ID> Authorization: Bearer <token>","title":"4.3.3  Delete Role"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#434-assign-role-to-user_1","text":"POST https://<AAS IP or Hostname>:8444/aas/users/<user ID>/roles Authorization: Bearer <token> { \"role_ids\" : [ \"<comma-separated list of role IDs>\" ] }","title":"4.3.4  Assign Role to User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#435-list-roles-assigned-to-user_1","text":"GET https://<AAS IP or Hostname\\>:8444/aas/users/<user ID>/roles Authorization: Bearer <token>","title":"4.3.5  List Roles Assigned to User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#436-remove-role-from-user_1","text":"DELETE https://<AAS IP or Hostname>:8444/aas/users/<userID>/roles/<role ID> Authorization: Bearer <token>","title":"4.3.6  Remove Role from User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#437-role-definitions_1","text":"The following roles are created during installation (or by the CreateUsers script) and exist by default. Role Name Permissions Utility TA:Administrator TA:*:* Used by the Verification Service to access Trust Agent APIs, including retrieval of TPM quotes, provisioning Asset Tags and SOFTWARE Flavors, etc. HVS:ReportRetriever HVS: [\"reports:retrieve:*\", \"reports:search:*\", \"hosts:search:*\", \"hosts:retrieve:*\"] Used by the Integration Hub to retrieve attestation reports from the Verification Service KMS:Keymanager KBS: [\"keys:create:*\", \"keys:transfer:*\"] Used by the WPM to create and retrieve symmetric encryption keys to encrypt workload images WLS:FlavorsImageRetrieval WLS: image_flavors:retrieve:* Used by the Workload Agent during Workload Confidentiality flows to retrieve the image Flavor HVS: ReportCreator HVS: [\"reports:create:*\"] Used by the Workload Service to create new attestation reports on the Verification Service as part of Workload Confidentiality key retrievals. Administrator *:*:* Global administrator role used for the initial administrator account. This role has all permissions across all services, including permissions to create new roles and users. AAS: Administrator *:*:* Administrator role for the AAS only. Has all permissions for AAS resources, including the ability to create or delete users and roles. AAS: RoleManager AAS: [roles:create:*, roles:retrieve:*, roles:search:*, roles:delete:*] AAS role that allows all actions for Roles, but cannot create or delete Users or assign Roles to Users. AAS: UserManager AAS: [users:create:*, users:retrieve:*, users:store:*, users:search:*, users:delete:*] AAS role with all permissions for Users, but has no ability to create Roles or assign Roles to Users. AAS: UserRoleManager AAS: [user_roles:create:*, user_roles:retrieve:*, user_roles:search:*, user_roles:delete:*, AAS role with permissions to assign Roles to Users, but cannot create delete or modify Users or Roles. HVS: AttestatioNRegister HVS: [host_tls_policies:create:*, hosts:create:*, hosts:store:*, hosts:search:*, host_unique_flavors:create:*, flavors:search:*, tpm_passwords:retrieve:*, tpm_passwords:create:*, host_aiks:certify:* Role used for Trust Agent provisioning. Used to create the installation token provided during installation. HVS: Certifier HVS: host_signing_key_certificates:create:* Used for installation of the Workload Agent","title":"4.3.7  Role Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#5-connection-strings_1","text":"Connection Strings define a remote API resource endpoint that will be used to communicate with the registered host for retrieving TPM quotes and other host information. Connection Strings differ based on the type of host.","title":"5  Connection Strings"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#51-trust-agent-windows-and-linux","text":"The Trust Agent connection string connects directly to the Trust Agent on a given host. The Verification Service will use a service account with the needed Trust Agent permissions to connect to the Trust Agent. In previous Intel\u00ae SecL versions, each Trust Agent had its own unique user access controls. Starting in the 1.6 release, all authentication has been centralized with the new Authentication and Authorization Service, eliminating the need for credentials to be provided for connection strings connecting to Trust Agent resources. intel:https://<HostNameOrIp>:1443","title":"5.1  Trust Agent (Windows and Linux)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#52-vmware-esxi_1","text":"","title":"5.2  VMware ESXi"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#521-importing-vmware-tls-certificates_1","text":"Before connecting to vCenter to register hosts or clusters, the vCenter TLS certificate needs to be imported to the Verification Service. This must be done for each vCenter server that the Verification Service will connect to, for importing Flavors or registering hosts. Download the root CA certs from vCenter: ```shell wget --no-proxy \"*\" https:// /certs/download.zip --no-check-certificate This downloads all the root CA certificates for you into `download.zip` file. ```shell unzip download.zip All of the certificates will be stored under <pwd>/certs/ . Certs will be in PEM format. Upload the certificates to the HVS POST https://%3CIP%3E:8443/hvs/v2/ca-certificates { \"name\": \"<cert name>\", \"type\": \"root\", \"certificate\": \"MIIELTCCAxW...\" } Note: Please make sure that the certificate does not contain any other characters other than the base64 characters like that of \\n or -----BEGIN CERTIFICATE----- etc. After upload is successful, restart the HVS hvs restart","title":"5.2.1 Importing VMware TLS Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#522-registering-a-vmware-esxi-host_1","text":"The VMware ESXi connection string is actually directed to vCenter, not the actual ESXi host. Many ESXi hosts managed by the same vCenter server will use the same connection string. The username and password specified are vCenter credentials, and the vCenter \"Validate Session\" privilege is required for access. vmware:https://<vCenterHostNameOrIp>:443/sdk ; h = <hostname of ESXi host> ; u = <username> ; p = <password>","title":"5.2.2  Registering a VMware ESXi Host"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6-platform-integrity-attestation_1","text":"Platform attestation is the cornerstone use case for ISecL. Platform attestation involves taking measurements of system components during system boot, and then cryptographically verifying that the actual measurements taken matched a set of expected or approved values, ensuring that the measured components were in an acceptable or \" trusted \" state at the time of the last system boot. ISecL leverages the Trusted Compute Group specification for a trusted boot process, extending measurements of platform components to registers in a Trusted Platform Module, and securely generating quotes of those measurements from the TPM for remote comparison to expected values (attestation). This section includes basic REST API examples for these workflows. See the Javadoc for more detailed documentation on REST APIs supported by ISecL. Typical workflows in the datacenter might include: Creating a set of acceptable flavors for attestation with automatic flavor matching that represent the known-good measurements for acceptable BIOS and OS versions in the datacenter Registering hosts for attestation with automatic flavor matching Upgrading hosts in the datacenter to a new BIOS or OS version Removing hosts from the Verification Service Removing flavors Provisioning asset tags to hosts Invalidating asset tags Retrieving current attestation reports Retrieving current host state information Remediating an untrusted attestation","title":"6  Platform Integrity Attestation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61-host-registration_1","text":"Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report.","title":"6.1  Host Registration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#611-trust-agent_1","text":"","title":"6.1.1  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6111-registration-via-trust-agent-command-line_1","text":"The Trust Agent can register the host with a Verification Service by running the following command: tagent create-host <Verification Service base URL> <username> <password> Note : Because VMWare ESXi hosts do not use a Trust Agent, this method is not applicable for registration of ESXi hosts.","title":"6.1.1.1  Registration via Trust Agent Command Line"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#612-registration-via-verification-service-api_1","text":"Any Trust Agent or VMware ESXi host/cluster can be registered using a Verification Service API request. Registration can be performed with or without a set of existing Flavors. Rules for Flavor matching can be set by using the Flavor Group in the request; if no Flavor Group is specified, the mtwilson_automatic Flavor Group will be used. See the Flavor Management section for additional details on Flavors, Flavor Groups, and Flavor matching.","title":"6.1.2  Registration via Verification Service API"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6121-special-note-for-vmware-esxi-hosts-and-teh-vcenter-tls-certificate","text":"","title":"6.1.2.1  Special Note for VMware ESXi Hosts and teh vCenter TLS Certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6122-sample-call_1","text":"POST https://verification.service.com:8443/hvs/v2/hosts Authorization: Bearer <token> { \"host_name\" : \"<hostname of host to be registered>\" , \"connection_string\" : \"<connection string>\" , \"flavorgroup_name\" : \"\" , \"description\" : \"<description>\" } Requires the permission hosts:create","title":"6.1.2.2  Sample Call"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6123-sample-call-for-esxi-cluster-registration_1","text":"POST https://verification.service.com:8443/hvs/v2/hosts Authorization: Bearer <token> { \" esxi_clusters\" : [ { \"connection_string\" : \"<password>\" , \"cluster_name\" : \"<cluster name>\" } ] } Requires the permission esxi_clusters:create","title":"6.1.2.3  Sample Call for ESXi Cluster Registration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#62-flavor-creation-for-automatic-flavor-matching_1","text":"Flavor creation is the process of adding one or more sets of acceptable measurements to the Verification Service database. These measurements correspond to specific system components, and are used as the basis of comparison to generate trust attestations. Flavors can be created manually, or can be imported from an example host. Flavors are automatically matched to hosts based on the Flavorgroup used by the host and the Flavors, and the Flavor Match Policies of the Flavorgroup. The ISecL Verification Service creates a default Flavorgroups during installation called \" automatic \" This Flavorgroup is configured to be used as a pool of all acceptable Flavors in a given environment, and will automatically match the appropriate Flavor parts to the correct host. This Flavorgroup is used by default and is expected to be useful for the majority of deployments. If no Flavorgroup is specified when creating a Flavor, it will be placed in the \" automatic \" Flavorgroup. Flavors are also divided into Flavor parts, which correspond to the PLATFORM , OS , HOST_UNIQUE , SOFTWARE , and ASSET_TAG measurements. These can be created and maintained separately (so that users can manage acceptable OS and BIOS versions, rather than entire host configurations). By default, if not specified, the Verification Service will import Flavors as separate Flavor parts, as appropriate for the host type. By using individual Flavor parts, individual versions of OS or PLATFORM measurements can be managed and automatically mapped. Whenever a host changes states (Untrusted, Connected, etc.) the Verification Service will attempt to match appropriate Flavors to that host. If a Flavor is removed or added, all appropriate hosts will be updated to use the new Flavor, or to no longer use the deleted Flavor. Hosts that are currently using a BIOS where that BIOS versions\u2019 PLATFORM Flavor was deleted will now appear Untrusted, for example. This can be used to easily flag as Untrusted hosts that are using software that has been End-Of-Lifed, or perhaps an OS kernel with a known security vulnerability. Note: See the Flavor Management section for additional details on how flavors can be managed, and how the Flavor matching engine works. The sample workflow provided here is intended to be an introduction only.","title":"6.2  Flavor Creation for Automatic Flavor Matching"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#621-importing-a-flavor-from-a-sample-host_1","text":"POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<connection string>\" , \"partial_flavor_types\" : [ \"PLATFORM\" , \"OS\" , \"HOST_UNIQUE\" ], \"flavorgroup_names\" : [] } Requires the permission flavors:create Note : The HOST_UNIQUE Flavor parts, used by Red Hat Enterprise Linux and VMWare ESXi host types, MUST be created for each registered host of that type, and should in general be imported from that host. This means that importing the HOST_UNIQUE flavor should always be done for each host registered (except for Windows hosts, which do not have HOST_UNIQUE measurements) To import ONLY the HOST_UNIQUE Flavor part from a host: POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<connection string>\" , \"partial_flavor_types\" : [ \"HOST_UNIQUE\" ], fla vorgroup_ na mes\": [] } Requires the permission flavors:create","title":"6.2.1  Importing a Flavor from a Sample Host"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#622-creating-a-flavor-manually_1","text":"Flavors can be directly created (rather than importing from a sample host) if the required information is known. If no Flavorgroup is specified, the Flavor will be placed in the automatic group. Note that the label is a required field and must be unique. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"\" , \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"PLATFORM\" , \"label\" : \"Intel Corporation_SE5C610.86B.01.01.1008.031920151331_TPM2.0\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } }, \"hardware\" : { \"processor_info\" : \"\u2026\" , \"processor_flags\" : \"\u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } }, \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : ... } Requires the permission flavors:create","title":"6.2.2  Creating a Flavor Manually"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#63-creating-the-default-software-flavor-linux-only_1","text":"As part of the new Application Integrity feature added in Intel\u00ae SecL-DC version 1.5, a new default SOFTWARE Flavor part is provided so that the Linux Trust Agent itself can be measured and included in the attestation process. The default SOFTWARE Flavor includes a manifest for the static files and folders in the Trust Agent. The manifest is automatically deployed to each Linux Trust Agent during the provisioning step. Note : The Linux Trust Agent must be rebooted after the Provisioning step is completed (typically Provisioning happens during installation, based on whether all of the required variables are set in the trustagent.env file). Rebooting allows the default SOFTWARE Flavor manifest to be measured and extended to the TPM PCRs. If the reboot is not performed, the system will require a SOFTWARE Flavor, but the measurements will not exist, and the system will appear Untrusted. If an un-rebooted host is used to create the SOFTWARE Flavor, the Flavor will be created based on measurements that do not exist, and will fail. The SOFTWARE Flavor part should be created separately from the other Flavor parts. Only one default SOFTWARE Flavor needs to be created for each version of the Linux Trust Agent. If the SOFTWARE Flavor for the same Trust Agent version is imported multiple times, subsequent imports will fail as the Flavor already exists. To import the SOFTWARE Flavor part from a host: POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<connection string>\" , \"partial_flavor_types\" : [ \"SOFTWARE\" ], fla vorgroup_ na mes\": [] } Requires the permission flavors:create","title":"6.3  Creating the Default SOFTWARE Flavor (Linux Only)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#64-creating-and-provisioning-asset-tags_1","text":"Asset Tags represent a set of key/value pairs that can be associated with a host in hardware. This enables usages around restricting workflows to specific hosts based on tags, which could include location information, compliance tags, etc. ISecL creates Asset Tags by creating a certificate containing the list of key/value pairs to be tagged to the host, with the host\u2019s hardware UUID as the certificate subject. A hash of this certificate is then written to an NVRAM index in the host\u2019s TPM. This value is included in TPM quotes, and can be attested using an Asset Tag flavor that matches up the expected value and the actual key/value pairs.","title":"6.4  Creating and Provisioning Asset Tags"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#641-creating-asset-tag-certificates_1","text":"Asset Tag certificates can be created with a single REST API call, with any number of key/value pairs. Note that one certificate must be created for each host to be tagged, even if they will all be tagged with identical key/value pairs. POST https://verification.service.com:8443/hvs/v2/tag-certificates Authorization: Bearer <token> { \"hardware_uuid\" : \"<hardware UUID of host to be tagged>\" , \"selection_content\" : [ { \"name\" : \"<key>\" , \"value\" : \"<value>\" }, { \"name\" : \"<key>\" , \"value\" : \"<value>\" }, { \"name\" : \"<key>\" , \"value\" : \"<value>\" } ] }","title":"6.4.1  Creating Asset Tag Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#642-deploying-asset-tags_1","text":"","title":"6.4.2  Deploying Asset Tags"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6421-windows-and-red-hat-enterprise-linux","text":"Asset Tags can be provisioned to a Windows or RHEL host via a REST API request on the Verification Service that will in turn make a request to the Trust Agent on the host to be tagged. POST https://verification.service.com:8443/hvs/v2/rpc/deploy-tag-certificate Authorization: Bearer <token> { \"certificate_id\" : \"<certificate ID>\" }","title":"6.4.2.1  Windows and Red Hat Enterprise Linux"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6422-vmware_1","text":"Since VMWare ESXi hosts do not use a Trust Agent, the process for writing Asset Tags to a VMWare host is different from RHEL or Windows. A new interface has been added to ESXi via a new esxcli command starting in vSphere 6.5 Update 2 that allows the Asset Tag information to be written to the TPM via a command-line command. The older process is also described below. The high-level workflow for using Asset Tags with VMWare ESXi is: Create the Asset Tag Certificate for the host. Calculate the Certificate Hash value. Provision the Certificate Hash value to the host TPM and reboot Create the Asset Tag Flavor. Note : Asset Tag is currently not supported for VMWare hosts using TPM 2.0.","title":"6.4.2.2  VMWare"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#calculate-the-certificate-hash-value","text":"Only the hash value of the Asset Tag Certificate can be provisioned to the TPM, due to the low size of the NVRAM. Retrieve the Asset Tag Certificate. The Asset Tag Certificate can be retrieved either from the response when the Asset Tag certificate is created, or by using a GET API request to retrieve the certificate: GET https://verification.service.com:8443/hvs/v2/tag-certificates?subjectEqualTo=<HardwareUUID> Authorization: Bearer <token> Copy only the certificate value (this will be the certificate in encoded format) and write the data to a file on a Linux system. Remove any line breaks and save the file. Assuming the filename used is tag-cert use the following to generate the correct hash: cat tag-cert | base64 --decode | openssl dgst -sha1 | awk -F \" \" '{print $2}' This hash value will be what is actually written to the TPM NVRAM.","title":"Calculate the Certificate Hash Value"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#provision-the-certificate-hash-to-the-host-tpm","text":"Due to a new feature added in vSphere 6.5 Update 2, the process for provisioning Asset Tags on VMWare ESXi hosts has been significantly improved. Both the old and new process for provisioning Asset Tags is documented below. Intel recommends using vSphere 6.5 Update 2 or later due to the significant difference in the process.","title":"Provision the Certificate Hash to the Host TPM"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#vsphere-65-update-2-or-later_1","text":"Starting in ESXi 6.5u2, you can now use SSH to write Asset Tags directly with no need for TPM clears, reboots, PXE, or BIOS access. SSH to the ESXi host using root credentials. Then use the command: Use the following command esxcli hardware tpm tag set -d <hash> You can use the following command to verify that the tag was written: esxcli hardware tpm tag get Reboot the host. After rebooting, the TPM PCR 22 will have the measured value of the hash.","title":"vSphere 6.5 Update 2 or Later"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#vsphere-65-update-1-or-older_1","text":"There is no direct interface from VMWare vCenter or ESXi previous to vSphere 6.5 Update 2 that will write the Tag information to the host TPM. Writing Asset Tag information to a TPM requires TPM ownership; VMWare ESXi takes TPM ownership with a secret password at boot time. This means that the process for writing Asset Tags to a VMWare host requires: Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Booting to an OS that has the ability to issue TPM commands Typically the provisioning OS used is Ubuntu or RHEL, booted temporarily using PXE. Writing the Tag information The TPM index 0x40000010 must be defined, and the hash of the Asset Tag certificate must be written to that index. Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Boot back to VMWare ESXi. When the system is rebooted to ESXi, the Trusted Boot process will extend the value to PCR22, and this value can be used during attestation.","title":"vSphere 6.5 Update 1 or Older"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#creating-the-asset-tag-flavor-vmware-esxi-only","text":"While for RHEL and Windows hosts the Asset Tag Flavor is automatically created during the Tag Provisioning step, for VMWare ESXi hosts the Flavor must be created by importing it from the host after the Tag has been provisioned. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<VMWare vCenter connection string>\" , \"partial_flavor_types\" : [ \"ASSET_TAG\" ] } Once the Asset Tag Flavor is imported, the host can be attested including Asset Tags as normal.","title":"Creating the Asset Tag Flavor (VMWare ESXi Only)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#65-retrieving-current-attestation-reports_1","text":"GET https://verification.service.com:8443/hvs/v2/reports?latestPerHost=true Authorization: Bearer <token>","title":"6.5  Retrieving Current Attestation Reports"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#66-retrieving-current-host-state-information_1","text":"GET https://verification.service.com:8443/hvs/v2/host-status?latestPerHost=true Authorization: Bearer <token>","title":"6.6  Retrieving Current Host State Information"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#67-upgrading-hosts-in-the-datacenter-to-a-new-bios-or-os-version_1","text":"Software and firmware updates are a common occurrence in the datacenter. Automatic Flavor matching makes this process relatively simple: Create a new Flavor for the new version. This may be manually created or imported directly from a sample host that has already received the upgrade. Be sure to create new Flavors for each TPM version represented in your datacenter. POST https://verification.service.com:8443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\" : \"<connection string>\" , \"partial_flavor_types\" : [ \"PLATFORM\" , \"OS\" , \"HOST_UNIQUE\" ], fla vorgroup_ na mes\": [] } Update the hosts to the new software or firmware version as normal. On the next attestation attempt, the Verification Service will automatically match the updated hosts to the new Flavor. (Optional) If desired, delete the Flavor for the older version after the update is completed. This will cause any hosts that are still using the old version to attest as Untrusted. Which can easily flag hosts that missed the upgrade for remediation. DELETE https://verification.service.com:8443/hvs/v2/flavors/<flavorId> Authorization: Bearer <token> \u200b","title":"6.7  Upgrading Hosts in the Datacenter to a New BIOS or OS Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#68-removing-hosts-from-the-verification-service_1","text":"Hosts can be deleted at any time. Reports for that host will remain in the Verification Service database for audit purposes. DELETE https://verification.service.com:8443/hvs/v2/hosts/<hostId> Authorization: Bearer <token> The hostId can be retrieved either at the time the host is created, or by searching hosts using the host\u2019s hostname.","title":"6.8  Removing Hosts From the Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#69-removing-flavors_1","text":"Flavors can be deleted; this will cause any hosts that match the deleted Flavor to evaluate as Untrusted. This can be done if, for example, an old BIOS version needs to be retired and should no longer exist in the datacenter. By deleting the PLATFORM Flavor, hosts with the old BIOS version will attest as Untrusted, flagging them for easy remediation. DELETE https://verification.service.com:8443/hvs/v2/flavors/<flavorId>","title":"6.9  Removing Flavors"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#610-invalidating-asset-tags_1","text":"Asset Tags can be deleted in two ways. Deleting the ASSET_TAG Flavor part will retain the Asset Tag certificate in the database, but will cause the host using this Tag to no longer use the Asset Tag for attestation (the Tag result will be disregarded and no tags will be exposed in the attestation Reports). DELETE https://verification.service.com:8443/hvs/v2/flavors/<assetTagflavorId> Authorization: Bearer <token> Deleting the actual Asset Tag certificate will remove the certificate from the database, but will not actually affect attestation results (the authority for attestation results is the Flavor). DELETE https://verification.service.com:8443/hvs/v2/tag-certificates/<assetTagCertificateId> Authorization: Bearer <token>","title":"6.10 Invalidating Asset Tags"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#611-remediating-an-untrusted-attestation_1","text":"Hosts can become Untrusted for a wide variety of causes. The first clue to finding the root cause for an Untrusted attestation is the attestation Report itself \u2013 the Report will show Trust results for the PLATFORM , OS , HOST_UNIQUE , and ASSET_TAG Flavor parts individually, along with the OVERALL trust. If the Report shows that the PLATFORM Flavor part trust is \u201cfalse\u201d for example, it means that the PLATFORM measurements did not match any Flavors in the host\u2019s Flavorgroup. Untrusted attestation Reports will contain faults that describe the specific attestation rules that were not satisfied. This often shows enough information to describe the cause of the Untrusted status. A fault like RequiredButNotDefined means that a Flavor part is required by the Flavorgroup policy, but no Flavors for that Flavor part exist in the Flavorgroup (for example, generally Flavorgroups should always require a PLATFORM Flavor part; if no PLATFORM Flavors are in the Flavorgroup, hosts in the Flavorgroup will attest with this fault). Other faults include: \"PcrMatchesConstant\" - describes a rule that evaluates whether a TPM PCR has a specific value \"PcrEventLogIntegrity\" - the module event log is replayed during attestation to verify that the resulting measurement matches the actual value in the module PCR. If the replay does not match, it indicates the event log cannot itself be trusted. \"AikCertificateTrusted\" \u2013 This rule evaluates whether the TPM quote was signed by the TPM associated with this host. As part of host registration, the public half of the Attestation Identity Keypair is captured, and this public key is used to verify the signature on TPM quotes from that host. See the Appendix for a full list of the rules evaluated during Attestation. The Flavor matching engine will use the most-similar Flavor for the attestation Report in the case of an Untrusted result. The fault will explain in a general sense what rule the host attestation violated. To remediate, the rule will need to be satisfied. This could mean creating a new Flavor to match the actual observed values, or it could mean that the host has been tampered with and should have its BIOS flashed or OS reloaded.","title":"6.11  Remediating an Untrusted attestation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#612-attestation-reporting_1","text":"Attestation results are delivered in the form of Host Reports. A Report can delivered in several different formats, which can change the type of data returned. The preferred format for Host Reports is a SAML attestation. A SAML-formatted report includes a chain or signatures that provides auditability for the Report. The SAML attestation will include the base trust status of the host, as well as the overall trust for each individual Flavor used in the attestation. The Report will also contain host information, such as TPM version, Operating System name and version, BIOS version, etc. The SAML Report will not, however, contain individual measurements and comparisons of values. This format of the Report is ideal for securely communicating the trust status of a host and for audit history. Attestation Reports can also be retrieved in json or xml format. These formats will not include the signature chain provided in the SAML format, but will contain the actual measurement values and expected Flavor values used for comparison. These reports are typically used for remediation, because they will show specifically why a given Host attested as Untrusted. The format for a Report is determined by the Accept header in the request. Attestations are automatically generated in the Verification Service by a repeating scheduled background process. This process looks for Attestation Reports that are close to expiration, and triggers a new Attestation Report. By default, Attestation Reports are valid for 90 minutes, and the background refresh process will trigger a new attestation when a Report is found to be within 3 minutes of expiration. A user can either retrieve the most recent currently valid Attestation Report for a given host, or may trigger a new Attestation Report to be generated. Typically, it is best to retrieve an existing Report for performance reasons. Generating a new Attestation Report requires the generation of a new TPM quote from the TPM of the host being attested; TPM performance differs greatly between vendors, and a quote can take anywhere between 2-7 seconds to generate.","title":"6.12  Attestation Reporting"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6121-sample-call-generating-a-new-attestation-report_1","text":"POST https://verification.service.com:8443/hvs/v2/reports Authorization: Bearer <token> { \"host_name\" : \"host-1\" } Requires the permission reports:create","title":"6.12.1  Sample Call \u2013 Generating a New Attestation Report"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6122-sample-call-retrieving-an-existing-attestation-report_1","text":"GET https://verification.service.com:8443/hvs/v2/reports?hostName=HostName.server.com Authorization: Bearer <token> Below are the supported criteria options in order of precedence. If no host filter criteria is specified, then results are returned for all active hosts. id - unique UUID of the report entry in the database hostId - unique UUID of the host entry in the database hostName - name of the host hostHardwareId - hardware UUID of the host hostStatus - current state of the host, which supports the following options: CONNECTED - host is in connected state QUEUE - host is in queue to be processed CONNECTION_FAILURE - connection failure UNAUTHORIZED - unauthorized AIK_NOT_PROVISIONED - AIK certificate is not provisioned EC_NOT_PRESENT - endorsement certificate is not present MEASURED_LAUNCH_FAILURE - TXT measured launch failure TPM_OWNERSHIP_FAILURE - TPM ownership failureTPM_NOT_PRESENT - TPM is not present UNSUPPORTED_TPM - unsupported TPM version UNKNOWN - unknown host state Requires the permissions reports:search Other search criteria may also be used. By default, the most recent currently valid attestation is returned. However, different query parameters can be used to retrieve all attestations for a specific host over the last 30 days, for example.","title":"6.12.2  Sample Call \u2013 Retrieving an Existing Attestation Report"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#613-integration_1","text":"Intel\u00ae SecL can be integrated with scheduler services (or potentially other services) to provide additional security controls. For example, by integrating Intel\u00ae SecL with the OpenStack scheduler service, the OpenStack placement service can incorporate the Intel\u00ae SecL security attributes into VM scheduling.","title":"6.13  Integration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6131-the-integration-hub_1","text":"The Integration Hub acts as the integration point between the Verification Service and a third party service. The primary purpose of the Hub is to collect and maintain up-to-date attestation information, and to \u201cpush\u201d that information to the external service. The secondary purpose is to allow for multitenancy, the Verification Service does not allow for permissions to be applied for specific hosts, so a user with the \u201cattestation\u201d role can access all attestations for all hosts. By using separate Integration Hub instances for each Cloud environment (or \"tenant\"), the Hub will push attestations only for the associated hosts to a given tenant\u2019s integration endpoints. For example, Tenant A is using hosts 1-10 for an OpenStack environment. Tenant B is using hosts 11-15 for a Docker environment. Two Hub instances must be configured, one managing tenant A's OpenStack cluster and a second instance managing Tenant B's Docker environment. Each integration Hub will automatically retrieve the list of hosts used by its configured orchestration endpoint, retrieve the attestation reports only for those hosts, and push the attestation attribute information to each configured endpoint. Neither tenant will have access to the Verification Service, and will not be able to see attestation or other host details regarding infrastructure used by other tenants. Different integration endpoints can be added to the Integration Hub through a plugin architecture. By default, the Integration Hub includes plugins for OpenStack and Kubernetes (Kubernetes deployments require the additional installation of two Intel\u00ae SecL-DC Custom Resource Definitions on the Kube Control Plane).","title":"6.13.1  The Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6132-integration-with-openstack_1","text":"Starting in the Rocky release, OpenStack can now use \u201cTraits\u201d to provide qualitative data about Nova Compute hosts, and to establish Trait requirements for VM instances. The updated scheduler will place VMs requiring a given Trait on Nova Compute nodes that meet the Trait requirements. Intel SecL-DC uses the Integration Hub to continually push platform integrity and Asset Tag information to the OpenStack Traits resources. This means the OpenStack scheduler natively supports workload scheduling incorporating Intel SecL-DC security attributes, including attestation report Trust status and Asset Tags. The OpenStack Placement Service will automatically attempt to place images with Trait requirements on compute nodes that have those Traits. NOTE : This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices.","title":"6.13.2  Integration with OpenStack"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61321-prerequisites_1","text":"Verification Service must be installed and running. OpenStack* Rocky (or later) Nova, Glance, Horizon, and Keystone services must be installed and running The Integration Hub must be installed and running.","title":"6.13.2.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61322-setting-image-traits_1","text":"Image Traits define the policy for which Traits are required for that Image to be launched on a Nova Compute node. By setting these Traits to \u201crequired,\u201d the OpenStack scheduler will require these same Traits to be present on a Nova Compute node in order to launch instances of the image. To set the Image Traits for Intel SecL-DC, a specific naming convention is used. This naming convention will match the Traits that the Integration Hub will automatically push to OpenStack. Two types of Traits are currently supported \u2013 one Trait is used to require that the Compute Node be Trusted in the Attestation Report, and the other Trait is used to require specific Asset Tag key/value pairs. To require a Trusted Attestation Report: CUSTOM_ISECL_TRUSTED=required The naming convention for Asset Tags is more flexible, and any number of these Traits can be used simultaneously. Note : All of the Traits must be present on the Compute Node for the scheduler to allow instances to land, so be sure not to set mutually exclusive Asset Tag values. CUSTOM_ISECL_AT_TAG_<key>__<value>=required` For example, to define a Trait that will require an Asset Tag where State = CA use the following: CUSTOM_ISECL_AT_TAG__STATE_CA= required These Traits can be set using CLI commands for OpenStack Glance: openstack image set --property trait:CUSTOM_ISECL_AT_STATE__CA = required <image_name> openstack image set --property trait:CUSTOM_ISECL_TRUSTED = required <image_name> To remove a Trait so that it is no longer required for an Image: openstack image unset --property trait:CUSTOM_ISECL_AT_STATE__CA <image_name> openstack image unset --property trait:CUSTOM_ISECL_TRUSTED <image_name>","title":"6.13.2.2  Setting Image Traits"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61323-configuring-the-integration-hub-for-use-with-openstack_1","text":"The Integration Hub must be configured with the API URLs and credentials for the OpenStack instance it will integrate with. This can be done during installation using the \"OPENSTACK...\" variables shown in the ihub.env answer file sample (see the Installing the Integration Hub section).","title":"6.13.2.3  Configuring the Integration Hub for Use with OpenStack"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61327-scheduling-instances_1","text":"Once Trait requirements are set for Images and the Integration Hub is configured to push attributes to OpenStack, instances can be launched in OpenStack as normal. As long as the OpenStack Nova scheduler is used to schedule the workloads, only compliant Compute Nodes will be scheduled to run instances of controlled Images. NOTE : This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices.","title":"6.13.2.7  Scheduling Instances"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#6133-integration-with-kubernetes_1","text":"Through the use of Custom Resource Definitions for the Kubernetes Control Plane, Intel\u00ae Security Libraries can make Kubernetes aware of Intel\u00ae SecL security attributes and make them available for pod orchestration. In this way, a security-sensitive pod can be launched only on Trusted physical worker nodes, or on physical worker nodes that match specified Asset Tag values. NOTE : This control only applies to pods launched using the Kubernetes scheduler, and these scheduling controls will not affect manually-launched instances where a specific worker node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing Kubernetes interfaces and does not modify Kubernetes code, using only the standard Custom Resource Definition mechanism to add this functionality to the Kubernetes Control Plane. The datacenter owner or Kubernetes administrator is responsible for the security of the Kubernetes workload scheduling process in general, and Intel recommends following published Kubernetes security best practices.","title":"6.13.3  Integration with Kubernetes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61331-prerequisites_1","text":"Verification Service must be installed and running. Kubernetes Control Plane Node must be installed and running The supported Kubernetes versions are from 1.14.8 - 1.17.3 and the integration is validated with 1.14.8 and 1.17.3 Kubernetes Worker Nodes must be configured as physical hosts and attached to the Control Plane Node","title":"6.13.3.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61332-installing-the-intel-secl-custom-resource-definitions_1","text":"Intel\u00ae SecL uses Custom Resource Definitions to add the ability to base orchestration decisions on Intel\u00ae SecL security attributes to Kubernetes. These CRDs allow Kubernetes administrators to configure pods to require specific security attributes so that the Kubernetes Control Plane Node will schedule those pods only on Worker Nodes that match the specified attributes. Two CRDs are required for integration with Intel\u00ae SecL \u2013 an extension for the Control Plane nodes, and a scheduler extension. A single installer will deploy both of these CRDs. The extensions are deployed as a Kubernetes deployment in the isecl namespace. To deploy the Kubernetes integration CRDs for Intel\u00ae SecL: Copy the isecl-k8s-extensions installer to the Kubernetes Control Plane and execute the installer ./isecl-k8s-extensions-v3.3.1.bin Add a mount path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - mountPath : /opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ name : extendedsched readOnly : true Add a volume path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - hostPath : path : /opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ type : \"\" name : extendedsched Add policy-config-file path in the /etc/kubernetes/manifests/kube-scheduler.yaml file under command section: - command : - kube-scheduler - --policy-config-file=/opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/scheduler-policy.json - --bind-address=127.0.0.1 - --kubeconfig=/etc/kubernetes/scheduler.conf - --leader-elect=true Wait for the isecl-controller and isecl-scheduler pods to be into running state shell kubectl get pods -n isecl Create role bindings on the Kubernetes Control Plane: kubectl create clusterrolebinding isecl-clusterrole --clusterrole=system:node --user=system:serviceaccount:default:default kubectl create clusterrolebinding isecl-crd-clusterrole --clusterrole=isecl-controller --user=system:serviceaccount:default:default Copy the Integration Hub public key to the Kubernetes Control Plane: scp -r /etc/ihub/ihub_public_key.pem k8s.maseter.server:/opt/isecl-k8s-extensions/isecl-k8s-scheduler/config/ Run the command systemctl restart kubelet to restart all the control plane container services, including the base scheduler. The scheduler yaml is present under /opt/isecl-k8s-extensions/yamls/isecl-scheduler.yaml If the Controller and/or Scheduler deployments are deleted, the following steps need to be performed: a. Edit /etc/kubernetes/manifests/kube-scheduler.yaml and remove/comment the following content and restart kubelet --policy-config-file = /opt/isecl-k8s-extensions/isecl-k8sscheduler/config/scheduler-policy.json systemctl restart kubelet b. Redeploy scheduler and controller kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-scheduler.yaml c. Edit /etc/kubernetes/manifests/kube-scheduler.yaml and add/uncomment the following content and restart kubelet --policy-config-file = /opt/isecl-k8s-extensions/isecl-k8sscheduler/config/scheduler-policy.json systemctl restart kubelet d. Logs will be appended to older logs in /var/log/isecl-k8s-extensions Whenever the CRD's are deleted and restarted for updates, the CRD's using the yaml files present under /opt/isecl-k8s-extensions/yamls/ . Kubernetes Version 1.14-1.15 uses crd-1.14.yaml and 1.16-1.17 uses crd-1.17.yaml kubectl delete hostattributes.crd.isecl.intel.com kubectl apply -f /opt/isecl-k8s-extensions/yamls/crd-<version>.yaml (Optional) Verify that the Intel \u00ae SecL Custom Resource Definitions have been started: To verify the Intel SecL CRDs have been deployed: kubectl get pods -n isecl","title":"6.13.3.2  Installing the Intel\u00ae SecL Custom Resource Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61336-configuring-pods-to-require-intel-secl-attributes_1","text":"(Optional) Verify that the worker nodes have had their Intel\u00ae SecL security attributes populated: kubectl get nodes --show-labels The output should show the Trust status and any Asset Tags applied to all of the registered Worker Nodes. Add the following to any Pod creation files: spec : affinity : nodeAffinity : requiredDuringSchedulingIgnoredDuringExecution : nodeSelectorTerms : - matchExpressions : - key : isecl.trusted operator : In values : - \"true\" - key : isecl.TAG_Country operator : In values : - CA - US - key : isecl.TAG_Customer operator : In values : - Coke - Pepsi - key : isecl.TAG_State operator : In values : - CA The isecl.trusted key defines the requirement for a Trusted host. Only one of these keys should be used. The isecl.TAG_ keys indicate Asset Tags; if the workload should only launch on hosts with the COUNTRY=US Asset Tag, the pod should be launched with the matchExpression key isecl.TAG_COUNTRY with the value US . All of the matchExpression definitions must be true for a given worker node to launch the pod \u2013 in the example above, the host must be attested as Trusted with Asset Tags Country=US , Customer=Customer1 and State=CA . If the worker node has additional Asset Tags beyond the ones required, the pod will still be able to be launched on that node. However, if one of the specified Tags is missing or has a different value, that worker node will not be used for that pod.","title":"6.13.3.6  Configuring Pods to Require Intel\u00ae SecL Attributes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#61337-tainting-untrusted-worker-nodes_1","text":"Optionally, the Intel\u00ae SecL Kubernetes CRDs can be configured to flag worker nodes as tainted to prevent any pods from launching on them. This restriction is applied regardless of whether the pod has a specific trust policy \u2013 if a worker node is flagged as tainted no pods will be launched on that worker. This setting is disabled by default. To enable this setting: Edit the isecl-controller.yaml file under /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml and set TAINT_UNTRUSTED_NODES=true Run kubectl apply -f /opt/isecl-k8s-extensions/yamls/isecl-controller.yaml Worker nodes that attest as untrusted will be tainted with the NoExecute flag and unable to launch pods. If a worker was previously considered tainted and the untrusted state is resolved, the Intel\u00ae SecL CRDs will remove the tainted flag and the worker will be able to launch pods again.","title":"6.13.3.7  Tainting Untrusted Worker Nodes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7-workload-confidentiality_1","text":"Workload Confidentiality builds upon Platform Attestation to protect data in virtual machine and container images. At its core, this feature is about allowing an image owner to set policies that define the conditions under which their image will be allowed to run; if the policy conditions are met, the decryption key will be provided, and if the conditions are not met, the image will remain encrypted and inaccessible. This provides a level of enforcement beyond integration with orchestrators, and protects sensitive data when the image is at rest. Workload Encryption relies on Platform Attestation to define the security attributes of hosts. When a protected image is launched, the Workload Agent on the host launching the VM or container image will detect the attempt (using either Libvirt hooks for VMs, or as a function of the Docker Secure Overlay Driver in the case of containers) and use the Image ID to find the Image Flavor on the Workload Service. The Workload Service will retrieve the current trust report for the host launching the image, and use that report to make a key retrieval request to the key transfer URL retrieved from the image flavor. The key transfer URL refers to the URL to the image owner\u2019s Key Broker Service, along with the ID of the key needed. In a typical production deployment, a Cloud Service Provider would enable Intel\u00ae SecL-DC security controls by installing the Intel\u00ae SecL-DC applications (with the exception of the Key Broker and Workload Policy Manager), and configuring each workload host to be Trusted (as per the Platform Integrity Attestation use case). The owner of the workload image(s) to be protected (for example, the end customer of the CSP) must install a Key Broker Service (which must be available for network communication from the Workload Service hosted on the CSP), the Workload Policy Manager, and their own Authentication and Authorization Service and Certificate Management Service (these will manage authentication and certificates for the KBS and WPM). Any number of image owner customers with their own unique KBS/WPM/AAS/CMS deployments may protect images that can be run by a single CSP deployment. The image owner will use the WPM to encrypt any image(s) to be protected; the WPM will automatically create a new image encryption key using the KBS, and will output the encrypted image and an Image Flavor. The image owner can then upload the encrypted image to the CSP\u2019s image storage service, and then upload the Image Flavor to the CSP-hosted WLS. When a compute host at the CSP attempts to launch a protected image, the WLA on the host will detect the launch request, and will issue a key transfer request to the WLS. The WLS will use the image ID to retrieve the Image Flavor, which contains the key retrieval URL for that image. This URL is hosted on the KBS of the image owner (which is why the KBS must be available to network requests from the WLS). The WLS will access the HVS to retrieve the current Platform Integrity Attestation report for the host, and will use this report to make a key transfer request to the KBS at the key transfer URL. The KBS will receive the request, verify that the Platform Integrity Attestation report is signed using a known SAML signing key (verifying that the report comes from a known and trusted HVS), and will then verify that the report shows that the host is trusted. If these requirements are met, the KBS will use the host\u2019s Binding Key (the public half of an asymmetric keypair generated by the host\u2019s TPM and included in the attestation report) as a Key Encryption Key to seal the Image Encryption Key to the TPM of the host that was attested. When the host receives the response to the key request, it will unseal the Image Encryption Key using its TPM. Because the Key Encryption Key is unique to this host\u2019s TPM, only the actual host that was attested will be able to gain access to the image. With the Image Encryption Key, the host\u2019s WLA will create the appropriate encrypted volume(s) for the image and begin the launch as normal. The WLA does not retain the key on disk; if/when the host is rebooted or the WLA is restarted, restarting the workloads based on protected images will trigger new key requests based on new Platform Integrity Attestation reports. In this way, if a host is compromised in a method detectable by the Platform Integrity feature, protected images will be unable to launch on this server.","title":"7  Workload Confidentiality"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#71-virtual-machine-confidentiality_1","text":"","title":"7.1  Virtual Machine Confidentiality"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#711-prerequisites_1","text":"To enable Virtual Machine Confidentiality, the following Intel\u00ae SecL-DC components must be installed and available: Authentication and Authorization Service Certificate Management Service Key Broker Service Host Verification Service Workload Service Trust Agent + Workload Agent (on each virtualization host) Workload Policy Manager See the Installation subsection on Recommended Service Layout for recommendations on how/where to install each service. It is strongly recommended to use a VM orchestration solution (for example, OpenStack) with the Intel\u00ae SecL-DC Integration Hub to schedule encrypted workloads on compute hosts that have already been pre-checked for their Platform Integrity status. See the Platform Integrity Attestation subsection on Integration with OpenStack for an example. You will need at least one QCOW2-format virtual machine image (for quick testing purposes, a very small minimal premade image like CirrOS is recommended; a good place to look for testing images is the OpenStack Image Guide found here: https://docs.openstack.org/image-guide/obtain-images.html ). One or more hypervisor compute nodes running QEMU/KVM is required. Each of these nodes must have the Intel\u00ae SecL-DC Trust Agent and Workload Agent installed, and they must be registered with the Verification Service. Each of these servers should show as trusted see the Platform Integrity Attestation section for details. You should have Flavors that match the system configuration for these hosts, and attestation reports should show all Flavor parts as trusted=true Hosts that are not trusted (including servers where there is no trust status, like hosts with no Trust Agent) will fail to launch any encrypted workloads.","title":"7.1.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#712-workflow_1","text":"","title":"7.1.2  Workflow"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7121-encrypting-images_1","text":"wpm create-image-flavor -l <user-friendly unique label> -i <path to image file> -e <output path and filename for encrypted image> -o <output path for JSON image flavor> After generating the encrypted image with the WPM, the encrypted image can be uploaded to the Image Storage service of choice (for example, OpenStack Glance). Note that the ID of the image in this Image Storage service must be retained and used for the next steps.","title":"7.1.2.1  Encrypting Images"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7122-uploading-the-image-flavor_1","text":"POST https://<Workload Service IP or Hostname>:5000/wls/flavors Authorization: Bearer <token> {<Image Flavor content from WPM output>} Use the above API request to upload the Image Flavor to the WLS. The Image Flavor will tell other Intel\u00ae SecL-DC components the Key Transfer URL for this image.","title":"7.1.2.2  Uploading the Image Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7123-creating-the-image-flavor-to-image-id-association_1","text":"The WLS needs to know the ID of the image as it exists in the image storage service used by the CSP (for example, OpenStack Glance). Use the below API request to create an association between the Image Flavor created in the previous step and the image ID. POST https://<Workload Service IP or Hostname>:5000/wls/images Authorization: Bearer <token> { \"id\": \"<image ID on image storage>\", \"flavor_ids\": [\"<Image Flavor ID>\"] }","title":"7.1.2.3  Creating the Image Flavor to Image ID Association"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7124-launching-encrypted-vms_1","text":"Instances of the protected images can now be launched as normal. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the VM is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided.","title":"7.1.2.4  Launching Encrypted VMs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#72-docker-container-confidentiality","text":"","title":"7.2  Docker Container Confidentiality"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#721-docker-container-integrity","text":"Intel\u00ae recommends using Docker Notary to verify the integrity of Docker container images at launch. https://docs.docker.com/notary/getting_started/","title":"7.2.1  Docker Container Integrity"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#722-prerequisites","text":"To enable Docker Container Confidentiality, the following Intel\u00ae SecL-DC components must be installed and available: Authentication and Authorization Service Certificate Management Service Key Broker Service Host Verification Service Workload Service Trust Agent + Workload Agent (on each Docker host) Workload Policy Manager See the Installation subsection on Recommended Service Layout for recommendations on how/where to install each service. It is strongly recommended to use a container orchestration solution (for example, Kubernetes) with the Intel\u00ae SecL-DC Integration Hub to schedule encrypted Docker containers on compute hosts that have already been pre-checked for their Platform Integrity status. See the Platform Integrity Attestation subsection on Integration with Kubernetes for an example. You will need at least one Docker container image. For quick testing purposes, Intel recommends one or more of the following: https://github.com/jessfraz/dockerfiles/ Image names: Openvpn k8scan postfix One or more Docker container worker nodes running Docker 19.03 is required. Each of these nodes must have the Intel\u00ae SecL-DC Trust Agent and Workload Agent installed, and they must be registered with the Verification Service. Each of these servers should show as \u201ctrusted;\u201d see the Platform Integrity Attestation section for details. You should have Flavors that match the system configuration for these hosts, and attestation reports should show all Flavor parts as \u201ctrusted=true.\u201d Hosts that are not trusted (including servers where there is no trust status, like hosts with no Trust Agent) will fail to launch any encrypted workloads. Important Note: Docker version 19.03.13 is specifically required, and other versions are not supported. Installation of the Workload Agent for Docker Container Confidentiality will replace the existing Docker binaries (the client and daemon, in /usr/bin/dockerd and /usr/bin/docker) with a recompiled Docker engine that includes the Secure Overlay Driver. This is what allows the launch of encrypted containers to be intercepted and decrypted. The Docker runtime must not be upgraded or downgraded to any other version; doing so will cause encrypted Docker Containers to fail to launch. In the future, the Container Encryption feature will be modified to use OCI-standard container encryption without the need for recompilation or file replacement.","title":"7.2.2  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#723-workflow","text":"","title":"7.2.3  Workflow"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7231-encrypting-docker-container-images","text":"The first step is encryption of a Docker Container image. The WPM is a command line utility that will perform the actual image encryption and allow the resulting encrypted image to be uploaded to a Docker Registry. The commands needed are slightly different depending on whether Notary is being used to validate container integrity. If Notary is not being used: wpm create-container-image-flavor -i <container image name> -t <tag-name> -e -f <Dockerfile Path> -d <dirPath> -o <output path for JSON image flavor> If Notary is being used: wpm create-container-image-flavor -i <imageName> -t <TagName> -e -s -n https://<notaryIP>:<notaryPort>/ -f <Dockerfile Path> -d <dirPath> Also, if Notary is being used, set the following environment variable before uploading the image to the Registry: export DOCKER_CONTENT_TRUST = 1 After generating the encrypted image with the WPM, the encrypted image can be uploaded to a local Docker Registry.","title":"7.2.3.1  Encrypting Docker Container Images"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7232-uploading-the-image-flavor","text":"POST https://<Workload Service IP or Hostname>:5000/wls/flavors Authorization: Bearer <token> { <Image Flavor content from WPM output> } Use the above API request to upload the Image Flavor to the WLS. The Image Flavor will tell other Intel\u00ae SecL-DC components the Key Transfer URL for this image.","title":"7.2.3.2  Uploading the Image Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7233-creating-the-image-flavor-to-image-id-association","text":"For Docker images stored in a Docker Registry, the ID is typically an MD5 hash. This format must be converted for use with the Workload Service. To get the non-truncated ID of the image, use the Docker command: docker images --no-trunc Next, convert this to a UUID that can be used by Intel\u00ae SecL: wpm get-container-image-id <image-full-md5id> The output will be a UUID, which will be considered the ID of the image for the WLS. Use the below API request to create an association between the Image Flavor created in the previous step and the image ID. POST https://<Workload Service IP or Hostname>:5000/wls/images Authorization: Bearer <token> { \"id\" : \"<image ID on image storage>\" , \"flavor_ids\" : [ \"<Image Flavor ID>\" ] }","title":"7.2.3.3  Creating the Image Flavor to Image ID Association"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#7234-launching-encrypted-docker-containers","text":"Containers of the protected images can now be launched as normal using Kubernetes pods and deployments. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the Docker Container is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided.","title":"7.2.3.4  Launching Encrypted Docker Containers"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#8-trusted-virtual-kubernetes-worker-nodes_1","text":"While the existing Platform Integrity Attestation functions support bare-metal Kubernetes Worker Nodes, using Virtual Machines to host the Worker Nodes is a common deployment architecture. This feature aims to help extend the Chain of Trust to protect the integrity of Virtual Machines, including virtual Kubernetes Worker Nodes. This feature requires the foundational Platform integrity Attestation feature as a prerequisite for the bare-metal servers hosting the virtual Worker Nodes. Note : This feature requires a degree of separation between the VM and Kubernetes infrastructure. All physical, bare-metal servers should be virtualization hosts, and all Kubernetes Worker Nodes should be Virtual Machines running on those physical virtualization hosts. Kubernetes clusters should not use a mixture of both virtual and bare-metal Workers. The physical virtualization clusters should not include a mixture of hosts protected by Intel\u00ae SecL Platform integrity Attestation and hosts that are not protected. VM trust reports can only be generated for VM instances launched on hosts with Intel\u00ae SecL services enabled. Also important to note is that this feature alone will not prevent any VMs from launching . VMs will still be launched on Untrusted platforms unless additional steps are taken (for example, using OpenStack orchestration integration with Intel\u00ae SecL, or using the Workload Confidentiality feature to encrypt the Kubernetes Worker Node VM image). This feature generates VM attestation reports that can be used to audit compliance and extend the Chain of Trust, and relies on other datacenter policies and/or Intel\u00ae SecL features to enforce compliance. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes. Optionally, the Kubernetes Worker Node VM images can be encrypted and protected as per the Workload Confidentiality feature of Intel\u00ae SecL. This adds a layer of enforcement \u2013 rather than simply reporting whether the VM started on a Trusted platform (and is therefore Trusted), Workload Confidentiality ensures that the Worker Node VM image can only be decrypted on compliant platforms. In both cases (with VM image encryption and without), the VM Trust Reports are accessed through the Workload Service: GET https://<Workload Service IP or Hostname>:5000/wls/reports?instance_id=<instance ID> Authorization: Bearer <token> This query will return the latest VM trust report for the provided Instance ID (the Instance ID is the VM\u2019s ID as it is identified by Libvirt; in OpenStack this would correspond directly to the OpenStack Instance ID). As a best practice, Intel\u00ae recommends using an orchestration layer (such as OpenStack) integrated with Intel\u00ae SecL to launch VMs only on Trusted platforms. See the previous section, \u201cIntegration\u201d under the \u201cPlatform Integrity Attestation\u201d feature for details. As an additional layer of protection, the Kubernetes Worker Node VM images can be encrypted using the Workload Confidentiality feature. This adds cryptographic enforcement to the workload orchestration and ensures instances of the Worker Node images will only be launched on Trusted platforms.","title":"8  Trusted Virtual Kubernetes Worker Nodes"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#81-prerequisites_1","text":"All physical, bare-metal servers should be virtualization hosts. Virtualization hosts must be Linux platforms using Libvirt. All Kubernetes Worker Nodes should be Virtual Machines running on those physical virtualization hosts. Kubernetes clusters must not use a mixture of both virtual and bare-metal Workers. The physical virtualization clusters must not include a mixture of hosts protected by Intel\u00ae SecL Platform integrity Attestation and hosts that are not protected. VM trust reports can only be generated for VM instances launched on hosts with Intel\u00ae SecL services enabled. The Intel\u00ae SecL Platform integrity Attestation feature must be used to protect all physical virtualization hosts. These platforms must all be registered with the Verification Service, must have the Trust Agent installed and running, and must be Trusted. See the Platform integrity Attestation section for details. In addition to the services required by Platform Integrity Attestation, the Workload Agent must be installed on each physical virtualization host, and the Workload Service must be installed on the management plane. (Optional; recommended) Virtual Machines should be orchestrated using an Intel\u00ae SecL-supported orchestrator, such as OpenStack. This will help launch the VMs only on compliant platforms. (Optional) Virtual Machine Images may be encrypted using the Workload Confidentiality feature. This adds a layer of cryptographic enforcement to the orchestration of virtual worker VMs, ensuring that the VMs can only be launched on compliant platforms.","title":"8.1  Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#82-workflow_1","text":"There are no additional steps required to enable this feature; if the Workload Agent is running on the physical virtualization host, VM trust reports will automatically be generated at every VM Start. Intel\u00ae strongly recommends using an orchestration integration for the VM management layer (for example, the provided Integration Hub integration with OpenStack) to help ensure that the worker node VMs only launch on Trusted physical hosts. If no orchestration is used, the platform service provider should ensure that all physical hosts are always in a Trusted state and take action to ensure Untrusted platforms cannot launch VMs. The primary benefit of the Trusted Virtual Kubernetes Worker Node feature is auditability of the Chain of Trust. By retrieving the VM Trust Report from the Workload Service for a given Worker Node instance, auditors can verify that the VM launched on a Trusted platform. The VM trust report also includes the hardware UUID of the physical host. This UUID, along with the time that the VM instance was launched, can be used to pull the correlating physical host trust report from the Verification Service to provide proof of compliance. To retrieve a VM trust report from the Workload Service: GET https://<Workload Service IP or Hostname>:5000/wls/reports?instance_id=<instance ID> Authorization: Bearer <token> This will return the latest report for the specified instance ID.","title":"8.2  Workflow"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#83-sample-vm-trust-report_1","text":"A sample VM Trust Report from the Workload Service is below. The report is generated by the Workload Agent and signed using the host\u2019s TPM, then stored in the Workload Service. The report contains some key attributes: instance_id : This is the ID of the instance. In OpenStack, this would correlate directly to the Instance ID for the VM. image_id : This is the ID for the source image used to launch the instance. In OpenStack, this correlates directly to the Image ID for the VM. host_hardware_uuid : The hardware UUID of the physical host that started the VM. This attribute identifies which host performed the VM start and attested the VM. This UUID can be used to query the Verification Service to retrieve attestations of the host. By correlating the VM Trust Report with the Host Trust Report, we can verify that this instance was started on a Trusted platform. image_encrypted : True or False based on whether the source image was protected using the Workload Confidentiality feature. trusted : True or False, based on whether the VM instance was started on a Trusted platform. Because the report is generated at every vm start through Libvirt, a new report will be generated whenever the VM is turned on or migrated, reflecting the state of the VM and its host at every opportunity for the state to change. <Response xmlns= \"http://wls.server.com/wls/reports\" > <instance_manifest> <instance_info> <instance_id> bd06385a-5530-4644-a510-e384b8c3323a </instance_id> <host_hardware_uuid> 00964993-89c1-e711-906e-00163566263e </host_hardware_uuid> <image_id> 773e22da-f687-47ca-89e7-5df655c60b7b </image_id> </instance_info> <image_encrypted> true </image_encrypted> </instance_manifest> <policy_name> Intel VM Policy </policy_name> <results> <e> <rule> <rule_name> EncryptionMatches </rule_name> <markers> <e> IMAGE </e> </markers> <expected> <name> encryption_required </name> <value> true </value> </expected> </rule> <flavor_id> 3a3e1ccf-2618-4a0d-8426-fb7acb1ebabc </flavor_id> <trusted> true </trusted> </e> </results> <trusted> true </trusted> <data> eyJpbnN0YW5jZV9tYW5pZmVzdC\u2026data> <hash_alg> SHA-256 </hash_alg> <cert> -----BEGIN CERTIFICATE----- \u2026 -----END CERTIFICATE----- </cert> <signature> \u2026 </signature> </Response>","title":"8.3  Sample VM Trust Report"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9-flavor-management_1","text":"","title":"9  Flavor Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#91-flavor-format-definitions_1","text":"A Flavor is a standardized set of expectations that determines what platform measurements will be considered \u201ctrusted.\u201d Flavors are constructed in a specific format, containing a metadata section describing the Flavor, and then various other sections depending on the Flavor type or Flavor part.","title":"9.1  Flavor Format Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#911-meta_1","text":"The first part of a Flavor is the meta section: \"meta\" :{ \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } } This section defines the Flavor part and any versioning information. NOTE : Even when the BIOS or OS version remains the same, the actual measurements in the measured boot process will be different between TPM 1.2 and TPM 2.0, and so the TPM version is captured here as well. The attributes in the Meta section are used by the Flavor matching engine when matching Flavors to Hosts. Note that TPM 1.2 is supported only for VMware ESXi hosts.","title":"9.1.1  Meta"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#912-hardware_1","text":"The hardware section is unique to PLATFORM flavor parts: \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } } This part of the Flavor defines expected hardware attributes of the host, and contains processor and TPM-related attributes.","title":"9.1.2  Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#913-pcrs","text":"The last section of a Flavor is the \u201cPCRs\u201d section, which contains the actual expected measurements for any PCRs. This section will contain PCR measurements for each applicable algorithm supported by the TPM (SHA1 only for TPM 1.2, SHA256 and SHA1 sections for TPM 2.0). Some PCRs simply have a value and nothing else. Other PCRs, however, contain different event measurements. This indicates that separate individual platform or OS components are independently measured and extended to the same PCR. PCRs with event measurements will contain an Event array that lists, in the correct order, all of the events in the measurement event log that are extended to this PCR. When the Verification Service attests a host against a given Flavor, each measurement event is compared to the Flavor value, and all of the events are replayed to confirm that a replay of all of the measurement extensions do in fact result in the hash seen in the PCR value. In this way, the Verification Service can ensure that the measurement event log contents are secure, and the individual measurements can be attested so that the cause for an Untrusted attestation can easily be seen. The full PCRs section is not shown here due to length; see the sample Flavor sections for a full sample. \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, ...","title":"9.1.3 PCRs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#914-sample-platform-flavor_1","text":"The PLATFORM Flavor part encompasses measurements that are unique to a specific platform, including the server OEM, BIOS version, etc. A PLATFORM Flavor can be shared across all hosts of the same model that have the same BIOS version. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \" PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } }, \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } }, \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_0\" : { \"value\" : \"db83f0e8a1773c21164c17986037cdf8afc1bbdc1b815772c6da1befb1a7f8a3\" }, \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } }","title":"9.1.4  Sample PLATFORM Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#915-sample-os-flavor_1","text":"An OS Flavor encompasses all of the measurements unique to a given OS. This includes the OS kernel and other measurements. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"OS\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.3\" , \"vmm_name\" : \"\" , \"vmm_version\" : \"\" , \"tpm_version\" : \"2.0\" } }, \"pcrs\" : { \"SHA1\" : { \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"26e1d98742f79c950dc637f8c067b0b72a1b0e8ff75db4e609c7e17321acf3f4\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"c89ad1d1e9adaa7ecfee2abce763b92472685f7d1b9f3799bf49974b66ed9638\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"81b88e268e697ccf1790d41b9de748a8f395acfb47aa67c9845479d4e8456f77\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }, \"flavorgroup_name\" : \"automatic\" }","title":"9.1.5  Sample OS Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#916-sample-host_unique-flavor_1","text":"Host-Unique flavors define measurements for a specific host. This can be either a single large flavor that incorporates all of the host measurements into a single flavor document used only to attest a single host, or can be a small subset of measurements that are specific to a single host. For example, some VMWare module measurements will change from one host to the next, while most others will be shared assuming the same ESXi build is used. The full Flavor requirement for such a host would include Host-Unique flavors to cover the measurements that are unique to only this one host, and would still use a generic PLATFORM and OS flavor for the other measurements that would be identical for other similarly configured hosts. Note : The HOST_UNIQUE Flavors are unique to a specific host, and should always be imported directly from the specific host. Windows hosts do not require a HOST_UNIQUE flavor part. { \"flavors\" : [ { \"meta\" : { \"id\" : \"4d387cbd-f72b-4742-b4e5-c5b0ffed59e0\" , \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"HOST_UNIQUE\" , \"source\" : \"Purley11\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.4\" , \"tpm_version\" : \"2.0\" , \"hardware_uuid\" : \"00448C61-46F2-E711-906E-001560A04062\" } }, \"pcrs\" : { \"SHA256\" : { \"pcr_17\" : { \"value\" : \"f9ef8c53ddfc8096d36eda5506436c52b4bfa2bd451a89aaa102f03181722176\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"09f468dfc1d98a1fee86eb7297a56b0e097d57be66db4eae539061332da2e723\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"c1f7bfdae5f270d9f13aa9620b8977951d6b759f1131fe9f9289317f3a56efa1\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA1\" : { \"pcr_17\" : { \"value\" : \"48695f747a3d494710bd14d20cb0a93c78a485cc\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"b1f8db372e396bb128280821b7e0ac54a5ec2791\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"983ec7db975ed31e2c85ef8e375c038d6d307efb\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }","title":"9.1.6  Sample HOST_UNIQUE Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#917-sample-asset_tag-flavor_1","text":"Asset Tag flavor parts are unique to Asset Tag attestation. These flavors verify that the Asset Tag data in the host\u2019s TPM correctly matches the most recently created, currently valid Asset Tag certificate that has been deployed to that host. { \"meta\" : { \"id\" : \"b3e0c056-5b6c-4b6b-95c4-de5f1473cac0\" , \"description\" : { \"flavor_part\" : \"ASSET_TAG\" , \"hardware_uuid\" : \"<Hardware UUID of the server to be tagged>\" } }, \"external\" : { \"asset_tag\" : { \"tag_certificate\" : { \"encoded\" : \"<Tag certificate in base64 encoded format>\" , \"issuer\" : \"CN=assetTagService\" , \"serial_number\" : 1519153541461 , \"subject\" : \"<Hardware UUID of the server to be tagged>\" , \"not_before\" : \"2018-02-20T11:05:41-0800\" , \"not_after\" : \"2019-02-20T11:05:41-0800\" , \"fingerprint_sha384\" : \"46001d8472e56de423aac7c55f061404d27d50e497dfc21a861ef1965d7ac1e44887aee918fb5805385a3cbdf820899d\" , \"attribute\" : [ { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] } ] } } } }","title":"9.1.7  Sample ASSET_TAG Flavor"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#92-flavor-matching_1","text":"Flavors are matched to host by objects called Flavor Groups A Flavor Group represents a set of rules to satisfy for a set of flavors to be matched to a host for attestation. For example, a Flavor Group can require that a PLATFORM Flavor and an OS Flavor be used for attestation. Without this level of association, a host that matches measurements for only a PLATFORM flavor, for example, can be attested as Trusted, even though the OS Flavor would attest the host as Untrusted. Flavor matching can be automatic (the default), or can explicitly specify a host to which the Flavor Group must apply. Automatic flavor matching allows for more ease in datacenter lifecycle management with updates and patches that may cause the appropriate flavors to change over time. Automatic flavor matching will trigger a new matching action when a new flavor is added, when an existing flavor is deleted, or when a host is initially attested as Untrusted. The system will automatically attempt to find a new set of flavors that match the Flavor Group rules that will attest the host as Trusted. For example, if a host in your datacenter has recently had a BIOS update, the next attestation will cause the host to appear Untrusted (because the PLATFORM measurements will now differ). Using automatic flavor matching, the Verification Service will automatically search for a new PLATFORM flavor that matches the actual BIOS version and measurement seen on the host. If a new BIOS version is successfully found, the Verification Service will use the new version for attestation, and the host will appear Trusted. If no matching PLATFORM flavor is found, the host will appear Untrusted. When automatic flavor matching is used, think of the various flavors in the Verification Service as a collection of valid configurations, and an attested host matching any combination of those configurations (within the confines of the Flavor Group requirements for which flavor types must be present) will be attested as Trusted. Host-based flavor matching explicitly maps a specific host to a flavor. Host-based attestation requires that a host saves its entire configuration in a composite flavor document in the system, and then later validates against this flavor to detect any changes. In this case, if a host received a BIOS upgrade, the host will attest as Untrusted, and no attempt will be made to re-match a new flavor. An administrator will need to explicitly specify a new flavor to be used for that host.","title":"9.2  Flavor Matching"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#921-when-does-flavor-matching-happen_1","text":"Generally speaking, a new Flavor match operation is triggered whenever a host is registered, whenever a host is attested and would be untrusted, and whenever a Flavor is added to or removed from a Flavor group. When a new host is registered, the Verification Service will retrieve the Host Report and derive the platform information needed for Flavor matching (BIOS version, server OEM, OS type and version, TPM version, etc.). The Verification Service then searches through the Flavors in the same Flavor group that the host is in, and finds any Flavors that match the platform information. If a Flavor is deleted, the Verification Service finds any hosts that are currently associated with that Flavor, and attempts to match them to alternative Flavors. If a Flavor is added, the Verification Service looks for any hosts in the same Flavor group that are not currently matched to a Flavor of the appropriate Flavor part, and checks to see whether those hosts should be mapped to the new Flavor. If a new Report is generated for a host and would not result in a Trusted attestation, the Verification Service will first repeat the Flavor matching process to be sure that no matching Flavors exist in the host\u2019s Flavor group that would result in a Trusted attestation. If the Service still finds no matching Flavors, the host will appear as Untrusted.","title":"9.2.1  When Does Flavor Matching Happen?"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#922-flavor-matching-performance_1","text":"Flavor matching causes affected hosts to be moved into the QUEUE state while the host and Flavor are evaluated to determine whether the host and Flavor should be linked. Hosts can remain in the QUEUE state for varying amounts of time based on the extent of the Flavor match required. This means that the trust status of a host will not be actually updated to reflect a new Flavor until after the process finishes, which may take a few seconds or minutes depending on the number of registered hosts, Flavors in the same Flavorgroup, etc. If a new host is registered, only that host will be added to the queue, and other hosts will be unaffected. The Verification Service will look for only the HOST_UNIQUE flavor part applicable to that specific host, and then will look at all PLATFORM and OS Flavors in the same Flavorgroup has the host, using the Flavor metadata and host info to narrow the results. The Service will match the new host to the most similar Flavors, and then move the host to the CONNECTED state and generate a new trust report. When a new PLATFORM or OS Flavor is created, the Service will instead add all hosts in the same Flavorgroup as the new Flavors to the queue. Each host in the queue will then be re-evaluated against every PLATFORM and OS Flavor in the Flavorgroup to determine the closest match. This means that adding a new Flavor can cause more hosts to each spend more time in the QUEUE state, as compared to adding a new host. For this reason, as a best practice for initial population of Flavors and hosts for a new deployment, it is suggested that Flavors be created before registering hosts. This is not a concern after the initial population of Flavors and hosts.","title":"9.2.2  Flavor Matching Performance"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#923-flavor-groups_1","text":"Flavor Groups represent a collection of one or more Flavors that are possible matches for a collection of one or more hosts. Flavor Groups link to both Flavors and hosts \u2013 a host in Flavor Group \"ABC\" will only be matched to Flavors in Flavor Group \"ABC\"","title":"9.2.3  Flavor Groups"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#924-default-flavor-group_1","text":"By default the Verification Service includes a Flavor Group named automatic and another named unique During host registration, the automatic Flavor Group is used as a default selection if no other Flavor Group is specified.","title":"9.2.4  Default Flavor Group"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9241-automatic_1","text":"The automatic Flavor Group is used as the default Flavor Group for all hosts and all Flavor parts. If no other Flavor Groups are specified when creating Flavors or Hosts, all Hosts and Flavors will be added to this group. This is useful for datacenters that want to manage a single set of acceptable configurations for all hosts.","title":"9.2.4.1  automatic"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9242-unique_1","text":"The unique Flavor Group is used to contain HOST_UNIQUE Flavors. This Flavorgroup is used by the backend software and should not be managed manually.","title":"9.2.4.2  unique"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#925-flavor-match-policies_1","text":"Flavor Match Policies are used to define how the Flavor Match engine will match Flavors to hosts for attestation for a given Flavor Group. Each Flavor part can have defined Flavor Match Policies within a given Flavor Group. { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"all_of\" , \"required_if_defined\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"SOFTWARE\" : { \"all_of\" , \"required_if_defined\" } } The sample Policy above would require that a PLATFORM Flavor part be matched, but any PLATFORM Flavor part in the Flavor Group may be matched. The OS Flavor Part will only be required if there is an OS Flavor part in the Flavor Group; if there are no OS Flavor parts in the Group, the match will not be required. If more than one OS Flavor part exists in the Group, all of those OS parts will be required to match for a host to be Trusted.","title":"9.2.5  Flavor Match Policies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9251-default-flavor-match-policy_1","text":"The automatic Flavor Group, and any Flavor Group created without explicitly defining a Flavor Match Policy, will be created using the following Flavor Match Policy. This is the default behavior for Flavor Matching: { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"any_of\" , \"required\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"SOFTWARE\" : { \"all_of\" , \"required_if_defined\" } }","title":"9.2.5.1  Default Flavor Match Policy"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9252-any_of_1","text":"The ANY_OF Policy allows any Flavor of the specified Flavor part to be matched. If the Flavor Group contains OS Flavor 1 and OS Flavor 2, a host will be Trusted if it matches either OS Flavor 1 or OS Flavor 2.","title":"9.2.5.2  ANY_OF"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9253-all_of_1","text":"The ALL_OF Policy requires all Flavors of the specified Flavor Part in the Flavor Group to be matched. For example, if Flavor Group X contains PLATFORM Flavor Part 1 and PLATFORM Flavor Part 2, a host in Flavor Group X will need to match both PLATFORM Flavor 1 and PLATFORM Flavor 2 to attest as Trusted. If the host matches only one of the Flavors, or neither of them, the host will be attested as Untrusted.","title":"9.2.5.3  ALL_OF"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9254-latest_1","text":"The LATEST Policy requires that the most recently created Flavor of the specified Flavor part be used when matching to a host. For example: \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored.","title":"9.2.5.4  LATEST"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9255-required_1","text":"The REQUIRED Policy requires a Flavor of the specified part to be matched. For example: \"PLATFORM\" : { \"any_of\" , \"required\" } This policy means that a PLATFORM Flavor part must be used; if the Flavor Group contains no PLATFORM Flavor parts, hosts in this Flavor Group will always count as Untrusted.","title":"9.2.5.5  REQUIRED"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9256-required_if_defined_1","text":"The REQUIRED_IF_DEFINED Policy requires that a Flavor part be used if a Flavor of that part exists. If no Flavor part of this type exists in the Flavor Group, the Flavor part will not be required. \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored.","title":"9.2.5.6  REQUIRED_IF_DEFINED"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#926-flavor-match-event-triggers_1","text":"Several events will cause the background queue service to attempt to re-match Flavors and hosts: Host registration This event is the first time a host will be attempted to be matched to appropriate Flavors in the same Flavor Group, and affects only the host that was added (other hosts will not be re-matched to Flavors when you add a new host). Flavor creation When a new Flavor is added to a Flavor Group, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the new Flavor. Flavor deletion When a Flavor is deleted, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the deleted Flavor. Creation of a new Attestation Report When a new Attestation Report is generated, if the host would attest as Untrusted with the currently-matched Flavors, the host being attested will be re-matched as part of the Report generation process. This ensures that Reports are always generated using the best possible Flavor matches available in the database.","title":"9.2.6  Flavor Match Event Triggers"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#927-sample-flavorgroup-api-calls_1","text":"","title":"9.2.7  Sample Flavorgroup API Calls"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9271-create-a-new-flavorgroup_1","text":"POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavorgroups Authorization: Bearer <token> { \"flavorgroup_name\" : \"firstTest\" , \"flavor_match_policy_collection\" : { \"flavor_match_policies\" : [ { \"flavor_part\" : \" PLATFORM\" , \"match_policy\" : { \"match_type\" : \"ANY_OF\" , \"required\" : \"REQUIRED\" } } ] } } Response: { \"id\" : \"a0950923-596b-41f7-b9ad-09f525929ba1\" , \"flavorgroup_name\" : \"firstTest\" , \"flavor_match_policy_collection\" : { \"flavor_match_policies\" : [ { \"flavor_part\" : \" PLATFORM\" , \"match_policy\" : { \"match_type\" : \"ANY_OF\" , \"required\" : \"REQUIRED\" } } ] } }","title":"9.2.7.1  Create a New Flavorgroup"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#93-software-flavor-management_1","text":"","title":"9.3  SOFTWARE Flavor Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#931-what-is-a-software-flavor_1","text":"A SOFTWARE Flavor part defines the measurements expected for a specific application, or a specific set of files and folders on the physical host. SOFTWARE Flavors can be used to attest the boot-time integrity of any static files or folders on a physical server. A single server can have multiple SOFTWARE Flavors associated. Intel\u00ae SecL-DC provides a default SOFTWARE Flavor that is deployed to each Trust Agent server during the provisioning step. This default Flavor includes the static files and folders of the Trust Agent itself, so that the Trust Agent is measured during the server boot process, and its integrity is included in the attestation of the other server measurements. Using SOFTWARE Flavors consists of two parts \u2013 creating the actual SOFTWARE Flavor, and deploying the SOFTWARE Flavor manifest to the host.","title":"9.3.1  What is a SOFTWARE Flavor?"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#932-creating-a-software-flavor-part_1","text":"Creating a new SOFTWARE Flavor requires creating a manifest of the files and folders that need to be measured. There are three different types of entries for the manifest: Directories , Symlinks and Files .","title":"9.3.2  Creating a SOFTWARE Flavor part"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9321-directories_1","text":"A Directory defines measurement rules for measuring a directory. Effectively this involves listing the contents of the directory and hashing the results; in this way, a Directory measurement can verify that no files have been added or removed from the directory specified, but will not measure the integrity of individual files (ie, files can change within the directory, but cannot be renamed, added, or removed). Directory entries can use regular expressions to define explicit Include and Exclude filters. For example, Exclude=\\*.log would exclude all files ending with .log from the measurement, meaning files with the .log extension can be added or removed from the directory. <Dir Type= \"dir\" Include= \".*\" Exclude= \"\" Path= \"/opt/trustagent/hypertext/WEB-INF\" >","title":"9.3.2.1  Directories"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9322-symlinks_1","text":"A Symlink entry defines a symbolic link that will be measured. The actual symbolic link is hashed, not the file or folder the symlink points to. In this way, the measurement will detect the symbolic link being modified to point to a different location, but the actual file or folder pointed to can have its contents change. <Symlink Path= \"/opt/trustagent/bin/tpm_nvinfo\" >","title":"9.3.2.2  Symlinks"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#9323-files_1","text":"Individual files can be explicitly specified for measurement as well. Each file listed will be hashed and extended separately. This means that if any file explicitly listed this way changes its contents or is deleted or moved, the measurement will change, and the host will become Untrusted. <File Path= \"/opt/trustagent/bin/module_analysis_da.sh\" >","title":"9.3.2.3  Files"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#933-sample-software-flavor-creation-call_1","text":"Creating a new SOFTWARE Flavor requires specifying a sample host where the application, files or folders that will be measured are currently present. The measurements specified in the manifest will be captures when this call is executed, and the Verification Service will communicate with the Trust Agent and create a SOFTWARE Flavor based on the file measurements. The Connection String must point to the sample Trust Agent host. The Label defines the name of the new Flavor (ideally this should be the name of the application being measured for easier management). POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavor-from-app-manifest Authorization: Bearer <token> < ManifestRequest xmlns = \"lib:wml:manifests-req:1.0\" > < connectionString > intel:https://trustagent.server.com:1443;u=trustagentUsername;p=trustagentPassword </ connectionString > < Manifest xmlns = \"lib:wml:manifests:1.0\" DigestAlg = \"SHA384\" Label = \"Tomcat\" Uuid = \"\" > + < Dir Type = \"dir\" Include = \".*\" Exclude = \"\" Path = \"/opt/trustagent/hypertext/WEB-INF\" /> < Symlink Path = \"/opt/trustagent/bin/tpm_nvinfo\" /> < File Path = \"/opt/trustagent/bin/module_analysis_da.sh\" /> </ Manifest > </ ManifestRequest >","title":"9.3.3  Sample SOFTWARE Flavor Creation Call"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#934-deploying-a-software-flavor-manifest-to-a-host_1","text":"Once the SOFTWARE Flavor has been created, it can be deployed to any number of Trust Agent servers. This requires the Flavor ID (returned from Flavor creation) and the Host ID (returned from host registration). The Verification Service will send a request to the appropriate Trust Agent and create the manifest. Note : After the SOFTWARE Flavor manifest is deployed to a host, the host must be rebooted. This will allow the measurements specified in the Flavor to be taken and extended to the TPM. Until the host is rebooted, the host will now appear Untrusted, as it now requires measurements from a SOFTWARE Flavor that have not yet been extended to the TPM POST https://<Verification Service IP or Hostname>:8443/hvs/v2/rpc/deploy-software-manifest Authorization: Bearer <token> { \"flavor_id\" : \"a6544ff4-6dc7-4c74-82be-578592e7e3ba\" , \"host_id\" : \"a6544ff4-6dc7-4c74-82be-578592e7e3ba\" }","title":"9.3.4  Deploying a SOFTWARE Flavor Manifest to a Host"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#935-software-flavor-matching_1","text":"The default Flavor Match Policy for SOFTWARE Flavor parts is ALL_OF , REQUIRED_IF_DEFINED . This means that all Software Flavors defined in a Flavorgroup must match to all hosts in that Flavorgroup. If no SOFTWARE Flavors are in the Flavorgroup, then hosts can still be considered Trusted. Because the default uses the ALL_OF Policy, it\u2019s recommended to use Flavorgroups dedicated to specific software loadouts. For example, if a number of hosts will act as virtualization hosts and will have SOFTWARE Flavors for the hypervisor and VM management applications, those hosts should be placed in their own Flavorgroup as they will all run similar or identical application loadouts. If another group of servers in the datacenter will act as container hosts, these hosts might need SOFTWARE Flavors that include attestation of container runtimes and management applications, and will have a very different application loadout from the VM-based hosts. These should be placed in their own Flavorgroup, so that the VM hosts are attested using the hypervisor-related SOFTWARE Flavors, and the container hosts are attested using the container-related SOFTWARE Flavors. As with other Flavor parts, hosts will be matched to Flavors in the same Flavorgroup that the host is added to, and will not be matched to Flavors in different Flavorgroups. Flavor matching will happen on the same events as for other Flavor parts.","title":"9.3.5  SOFTWARE Flavor Matching"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#936-kernel-upgrades_1","text":"Because the Application Integrity functionality involves adding a measurement agent ( tbootXM ) to initrd , an additional process must be followed when updating the OS kernel to ensure the new initrd also contains the measurement agent. This is not required if Application Integrity will not be used. Update grub to have the boot menu-entry created for the new kernel version in grub.cfg grub2-mkconfig -o \\< path to grub file \\> 2. Reboot the host and boot into new kernel menu-entry. 3. Generate a new initrd with tbootXM. ( /opt/tbootxm/bin/generate\\_initrd.sh ) 4. Copy the generated initrd to the boot directory. ( cp /var/tbootxm/\\<generated initrd file name\\> /boot/ ) 5. Update the TCB protection menu-entry with the new kernel version. Source rustagent.env , or expor t GRUB_FILE=/boo t /e f i/EFI/redha t /grub.c f g Run the configure_host script: cd /opt/tbootxm/bin ./configure_host.sh Update the default boot menu-entry to have new kernel version. (edit /etc/default/grub ) Update the grub to reflect the updates. ( grub2-mkconfig -o \\<path to grub file\\> ) Reboot the host and boot into TCB protection menu-entry. After updating the system with the new initrd , the Software Flavor should attest as Trusted. Note that changing grub and initrd does result in a new OS Flavor measurements, so an updated OS Flavor should be imported after updating the kernel and regenerating initrd .","title":"9.3.6  Kernel Upgrades"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#10-scalability-and-sizing_1","text":"","title":"10  Scalability and Sizing"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#101-configuration-maximums_1","text":"","title":"10.1  Configuration Maximums"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1011-registered-hosts_1","text":"The Intel\u00ae SecL Verification Service can support a maximum of 2000 registered hosts with a single Verification Service instance with default settings.","title":"10.1.1  Registered Hosts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1012-hdd-space_1","text":"The HDD space recommendations below represent expected log and database growth using default settings. Altering the database or log rotation settings, or the SAML expiration setting, may change the amount of disk space required. For default settings, 100 GB of disk space is recommended.","title":"10.1.2  HDD Space"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#102-database-rotation-settings_1","text":"The Intel\u00ae SecL Verification Service database will automatically rotate the audit log table after one million records, and will retain up to ten total rotations. These settings are user-configurable if a longer retention period is needed. mtwilson.audit.log.num.rotations - defines the maximum number of rotations before the oldest rotation is deleted to make space for a new rotation. mtwilson.audit.log.max.row.count \u2013 defines the maximum number of rows in the audit log table before a rotation will occur.","title":"10.2  Database Rotation Settings"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#103-log-rotation_1","text":"The Intel\u00ae SecL services (the Verification Service, Trust Agent, and Integration Hub) use Logrotate to rotate logs automatically during a daily cron job. By default, logs are rotated once per month or when they exceed 1 GB in size, whichever comes first, and 12 total rotations will be retained.","title":"10.3  Log Rotation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11-intel-security-libraries-configuration-settings_1","text":"","title":"11  Intel Security Libraries Configuration Settings"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#111-verification-service_1","text":"","title":"11.1  Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1111-installation-answer-file-options_1","text":"# Authentication URL and service account credentials - mandatory AAS_API_URL = https://isecl-aas:8444/aas HVS_SERVICE_USERNAME = HVS_service HVS_SERVICE_PASSWORD = password # CMS URL and CMS webserivce TLS hash for server verification - mandatory CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = digest # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Skip setup - optional HVS_NOSETUP = false #default=false # Logging options - optional HVS_LOGLEVEL = info # options: critical|error|warning|info|debug|trace, default='info' HVS_LOG_MAX_LENGTH = 300 # default=300 HVS_ENABLE_CONSOLE_LOG = false # default=false # HRRS configuration - optional HRRS_REFRESH_PERIOD = 2m0s # default=2m0s HRRS_REFRESH_LOOK_AHEAD = 5m0s # default=5m0s # FVS configuration - optional FVS_NUMBER_OF_VERIFIERS = 20 # default=20 FVS_NUMBER_OF_DATA_FETCHERS = 20 # default=20 FVS_SKIP_FLAVOR_SIGNATURE_VERIFICATION = false # default=false # In case of trusted flavor storage, flavor signature verification can be skipped # using following flag - optional SKIP_FLAVOR_SIGNATURE_VERIFICATION = false # default=false # TLS certificate configuration - optional TLS_COMMON_NAME = \"HVS TLS Certificate\" # default=\"HVS TLS Certificate\" TLS_SAN_LIST = 127 .0.0.1,localhost # default=127.0.0.1,localhost # Server configuration - optional HVS_PORT = 8443 # default=8443 HVS_SERVER_READ_TIMEOUT = 30s # default=30s HVS_SERVER_READ_HEADER_TIMEOUT = 10s # default=10s HVS_SERVER_WRITE_TIMEOUT = 10s # default=10s HVS_SERVER_IDLE_TIMEOUT = 10s # default=10s HVS_SERVER_MAX_HEADER_BYTES = 1048576 # default=1048576 # Database - mandatory HVS_DB_USERNAME = runner HVS_DB_PASSWORD = test HVS_DB_SSLCERTSRC = /tmp/dbcert.pem # This doesn't need to be specified if HVS_DB_SSLCERT is given # Database - optional HVS_DB_HOSTNAME = localhost # default=localhost HVS_DB_NAME = hvs-pg-db # default=hvs-pg-db HVS_DB_PORT = 5432 # default=5432 HVS_DB_SSLMODE = verify-full # default=verify-full ;other options are like allow, prefer, require, verify-ca HVS_DB_SSLCERT = /etc/hvs/hvsdbcert.pem # default=/etc/hvs/hvsdbcert.pem # Webservice configuration - Optional HVS_PORT = 8443 HVS_SERVER_READ_TIMEOUT = 30s HVS_SERVER_READ_HEADER_TIMEOUT = 10s HVS_SERVER_WRITE_TIMEOUT = 10s HVS_SERVER_IDLE_TIMEOUT = 10s HVS_SERVER_MAX_HEADER_BYTES = 1048576 # Logging - Optional HVS_LOG_MAX_LENGTH = 300 HVS_ENABLE_CONSOLE_LOG = false # Flavor Signing Configuration - Optional FLAVOR_SIGNING_KEY_FILE = /etc/hvs/trusted-keys/flavor-signing.key FLAVOR_SIGNING_CERT_FILE = /etc/hvs/certs/trustedca/flavor-signing.pem FLAVOR_SIGNING_COMMON_NAME = HVS Flavor Signing Certificate # SAML Configuration - Optional SAML_KEY_FILE = /etc/hvs/trusted-keys/saml.key SAML_CERT_FILE = /etc/hvs/certs/trustedca/saml-cert.pem SAML_COMMON_NAME = HVS SAML Certificate # Endorsement CA Configuration - Optional ENDORSEMENT_CA_KEY_FILE = /etc/hvs/trusted-keys/endorsement-ca.key ENDORSEMENT_CA_CERT_FILE = /etc/hvs/certs/trustedca/EndorsementCA.pem ENDORSEMENT_CA_COMMON_NAME = HVS Endorsement Certificate ENDORSEMENT_CA_ISSUER = intel-secl ENDORSEMENT_CA_VALIDITY_YEARS = 5 # Privacy CA Configuration - Optional PRIVACY_CA_KEY_FILE = /etc/hvs/trusted-keys/privacy-ca.key PRIVACY_CA_CERT_FILE = /etc/hvs/certs/trustedca/privacy-ca-cert.pem PRIVACY_CA_COMMON_NAME = HVS Privacy Certificate PRIVACY_CA_ISSUER = intel-secl PRIVACY_CA_VALIDITY_YEARS = 5 # Asset Tag Configuration - Optional TAG_CA_KEY_FILE = /etc/hvs/trusted-keys/tag-ca.key TAG_CA_CERT_FILE = /etc/hvs/certs/trustedca/tag-ca-cert.pem TAG_CA_COMMON_NAME = HVS Tag Certificate TAG_CA_ISSUER = intel-secl TAG_CA_VALIDITY_YEARS = 5","title":"11.1.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1112-configuration-options_1","text":"The Verification Service configuration is stored in the file /etc/hvs/config.yml : tls: cert-file: /etc/hvs/tls-cert.pem key-file: /etc/hvs/tls.key common-name: Mt Wilson TLS Certificate san-list: 127 .0.0.1,localhost saml: common: cert-file: /etc/hvs/certs/trustedca/saml-cert.pem key-file: /etc/hvs/trusted-keys/saml.key common-name: mtwilson-saml issuer: AttestationService validity-days: 1 flavor-signing: cert-file: /etc/hvs/certs/trustedca/flavor-signing.pem key-file: /etc/hvs/trusted-keys/flavor-signing.key common-name: VS Flavor Signing Certificate privacy-ca: cert-file: /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem key-file: /etc/hvs/trusted-keys/privacy-ca.key common-name: HVS Privacy Certificate issuer: intel-secl validity-years: 5 endorsement-ca: cert-file: /etc/hvs/certs/endorsement/EndorsementCA.pem key-file: /etc/hvs/trusted-keys/endorsement-ca.key common-name: HVS Endorsement Certificate issuer: intel-secl validity-years: 5 tag-ca: cert-file: /etc/hvs/certs/trustedca/tag-ca-cert.pem key-file: /etc/hvs/trusted-keys/tag-ca.key common-name: HVS Tag Certificate issuer: intel-secl validity-years: 5 aik-certificate-validity-years: 5 server: port: 8898 read-timeout: 30s read-header-timeout: 10s write-timeout: 30s idle-timeout: 10s max-header-bytes: 1048576 log: max-length: 30000 enable-stdout: true level: TRACE db: vendor: postgres host: localhost port: \"5432\" name: hvs_db username: root password: password ssl-mode: allow ssl-cert: /etc/hvs/hvsdbsslcert.pem conn-retry-attempts: 5 conn-retry-time: 1 hrrs: refresh-period: 2m0s refresh-look-ahead: 5m0s fvs: number-of-verifiers: 20 number-of-data-fetchers: 20 skip-flavor-signature-verification: true","title":"11.1.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1113-command-line-options_1","text":"The Verification Service supports several command-line commands that can be executed only as the Root user: Syntax: \u200b hvs \\<command> [arguments] Available Commands: \u200b help|-h|--help \u200b hvs help|-h|--help \u200b Show help message \u200b start \u200b hvs start \u200b Start hvs \u200b stop \u200b hvs stop \u200b Stop hvs \u200b status \u200b hvs status \u200b Show the status of hvs \u200b uninstall \u200b hvs uninstall [--purge] \u200b Uninstall hvs \u200b --purge all configuration and data files will be removed if this flag is set \u200b version|-v|--version \u200b hvs version|-v|--version \u200b Show the version of current hvs build \u200b config-db-rotation \u200b hvs config-db-rotation \u200b Configure database table rotaition for audit log table, reference db_rotation.sql \u200b in documents \u200b erase-data \u200b hvs erase-data \u200b Reset all tables in database and create default flavor groups \u200b setup \u200b hvs setup \\< task > [--help] [--force] [-f \\<answer-file>] \u200b Run setup task \u200b --help show help message for setup task \u200b --force existing configuration will be overwritten if this flag is set \u200b -f|--file \\ the answer file with required arguments \u200b Available tasks for setup: \u200b all \u200b Runs all setup tasks \u200b server \u200b Setup http server on given port \u200b - Required environment variables: SERVER_PORT \u200b database \u200b Setup hvs database \u200b - Required environment variables: DB_USERNAME , DB_PASSWORD , DB_CONN_RETRY_ATTEMPTS , \u200b DB_VENDOR , DB_HOST , DB_PORT , \u200b DB_NAME , DB_SSL_MODE , DB_SSL_CERT , \u200b DB_SSL_CERT_SOURCE , DB_CONN_RETRY_ATTEMPTS \u200b create-default-flavorgroup \u200b Create default flavor groups in database \u200b - Required environment variables: DB_VENDOR , DB_HOST , DB_SSL_CERT , \u200b DB_CONN_RETRY_ATTEMPTS , DB_CONN_RETRY_TIME , DB_PORT , DB_NAME , DB_USERNAME , \u200b DB_PASSWORD , DB_SSL_MODE , DB_SSL_CERT_SOURCE \u200b create-dek \u200b Create data encryption key for HVS \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Required environment variables: CMS_BASE_URL , CMS_TLS_CERT_SHA384 \u200b download-cert-tls \u200b Download CA certificate from CMS for tls \u200b - Required environment variables: BEARER_TOKEN , CMS_BASE_URL \u200b - Optional environmental variables: TLS_CERT_FILE , TLS_KEY_FILE , TLS_COMMON_NAME , \u200b TLS_SAN_LIST , TLS_ISSUER , TLS_VALIDITY_DAYS , \u200b download-cert-saml \u200b Download CA certificate from CMS for saml \u200b - Required environment variables: CMS_BASE_URL , BEARER_TOKEN \u200b - Optional environmental variables: SAML_VALIDITY_DAYS , SAML_CERT_FILE , SAML_KEY_FILE , \u200b SAML_COMMON_NAME , SAML_SAN_LIST , SAML_ISSUER \u200b download-cert-flavor-signing \u200b Download CA certificate from CMS for flavor signing \u200b - Required environment variables: CMS_BASE_URL , BEARER_TOKEN \u200b - Optional environmental variables: FLAVOR_SIGNING_CERT_FILE , FLAVOR_SIGNING_KEY_FILE , \u200b FLAVOR_SIGNING_COMMON_NAME , \u200b FLAVOR_SIGNING_SAN_LIST , FLAVOR_SIGNING_ISSUER , \u200b FLAVOR_SIGNING_VALIDITY_DAYS \u200b create-endorsement-ca \u200b Generate self-signed endorsement certificate \u200b create-privacy-ca \u200b Generate self-signed privacy certificate \u200b create-tag-ca \u200b Generate self-signed tag certificate \u200b Environment variables used by Hvs setup: \u200b * Indicates the environment variable is optional. \u200b DB_VENDOR \u200b - Vendor of database, or use HVS_DB_VENDOR alternatively \u200b DB_PASSWORD \u200b - Database password, or use HVS_DB_PASSWORD alternatively \u200b DB_SSL_CERT \u200b - Database SSL certificate, or use HVS_DB_SSLCERT alternatively \u200b DB_SSL_CERT_SOURCE \u200b - Database SSL certificate to be copied from, or use HVS_DB_SSLCERTSRC alternatively \u200b DB_CONN_RETRY_TIME \u200b - Database connection retry time \u200b DB_HOST \u200b - Database host name, or use HVS_DB_HOSTNAME alternatively \u200b DB_PORT \u200b - Database port, or use HVS_DB_PORT alternatively \u200b DB_NAME \u200b - Database name, or use HVS_DB_NAME alternatively \u200b DB_USERNAME \u200b - Database username, or use HVS_DB_USERNAME alternatively \u200b DB_SSL_MODE \u200b - Database SSL mode, or use HVS_DB_SSL_MODE alternatively \u200b DB_CONN_RETRY_ATTEMPTS \u200b - Database connection retry attempts \u200b BEARER_TOKEN \u200b - Bearer token for accessing CMS api \u200b CMS_BASE_URL \u200b - CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ \u200b SERVER_PORT \u200b - The port on which to listen, or use HVS_PORT alternatively \u200b HVS_SERVICE_USERNAME \u200b - The service username for HVS configured in AAS \u200b HVS_SERVICE_PASSWORD \u200b - The service password for HVS configured in AAS \u200b CMS_TLS_CERT_SHA384 \u200b - SHA384 hash value of CMS TLS certificate \u200b TLS_ISSUER * \u200b - The issuer of signed certificate \u200b TLS_VALIDITY_DAYS * \u200b - The validity time in days of signed certificate \u200b TLS_CERT_FILE * \u200b - The file to which certificate is created \u200b TLS_KEY_FILE * \u200b - The file to which private key is created \u200b TLS_COMMON_NAME * \u200b - The common name of signed certificate \u200b TLS_SAN_LIST * \u200b - Comma separated list of hostnames to add to Certificate, including IP addresses and dns \u200b names \u200b SAML_VALIDITY_DAYS * \u200b - The validity time in days of signed certificate \u200b SAML_CERT_FILE * \u200b - The file to which certificate is created \u200b SAML_KEY_FILE * \u200b - The file to which private key is created \u200b SAML_COMMON_NAME * \u200b - The common name of signed certificate \u200b SAML_SAN_LIST * \u200b - Comma separated list of hostnames to add to Certificate, including IP addresses and dns \u200b names \u200b SAML_ISSUER * \u200b - The issuer of signed certificate \u200b FLAVOR_SIGNING_CERT_FILE * \u200b - The file to which certificate is created \u200b FLAVOR_SIGNING_KEY_FILE * \u200b - The file to which private key is created \u200b FLAVOR_SIGNING_COMMON_NAME * \u200b - The common name of signed certificate \u200b FLAVOR_SIGNING_SAN_LIST * \u200b - Comma separated list of hostnames to add to Certificate, including IP addresses and dns \u200b names \u200b FLAVOR_SIGNING_ISSUER * \u200b - The issuer of signed certificate \u200b FLAVOR_SIGNING_VALIDITY_DAYS * \u200b - The validity time in days of signed certificate","title":"11.1.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1114-directory-layout_1","text":"The Host Verification Service installs by default to the following folders: This directory contains the config.yml configuration file, the database connection ssl cerificate, and the webservice TLS certificate. /etc/hvs/ - This directory contains the config.yml configuration file, the database connection ssl cerificate, and the webservice TLS certificate. certs/ - This directory contains endorsement, trustedca, trustedjwt cerificates. endorsement/ - Contains EndorsementCA and EndorsementCA-external certificates trustedca/ - Contains flavor-signing, saml-cert, tag-ca-cert certificates privacy-ca/ - Contains privary ca certificate root/ - Contains root certificate trustedjwt/ - Contains EndorsementCA and EndorsementCA-external certificates trusted-keys/ - Contains all the necessary keys needed for hvs. Like endorsement-ca.key, flavor-signing.key, privacy-ca.key, saml.key and tag-ca.key /opt/hvs/ - Contains hvs service file bin/ - Contains the hvs executable. privacyca-aik-requests/ - Contains the hvs executable.","title":"11.1.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#112-trust-agent_1","text":"","title":"11.2  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1121-installation-answer-file-options_1","text":"Key Sample Value Description AAS_API_URL AAS_API_URL=https://{host}:{port}/aas/v1 API URL for Authentication Authorization Service (AAS). AUTOMATIC_PULL_MANIFEST AUTOMATIC_PULL_MANIFEST=Y Instructs the installer to automatically pull application-manifests from HVS similar to tagent setup get-configured-manifest AUTOMATIC_REGISTRATION AUTOMATIC_REGISTRATION=Y Instructs the installer to automatically register the host with HVS similar to running tagent setup create-host and tagent setup create-host-unique-flavor. BEARER_TOKEN BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsjdkMTdiNmUz... JWT from AAS that contains \"install\" permissions needed to access ISecL services during provisioning and registration CMS_BASE_URL CMS_BASE_URL=https://{host}:{port}/cms/v1 API URL for Certificate Management Service (CMS). CMS_TLS_CERT_SHA384 CMS_TLS_CERT_SHA384=bd8ebf5091289958b5765da4... SHA384 Hash sum for verifying the CMS TLS certificate. MTWILSON_API_URL MTWILSON_API_URL=https://{host}:{port}/hvs/v2 The url used during setup to request information from HVS. PROVISION_ATTESTATION PROVISION_ATTESTATION=Y When present, enables/disables whether tagent setup is called during installation. If trustagent.env is not present, the value defaults to no ('N'). SAN_LIST SAN_LIST=10.123.100.1,201.102.10.22,mya.example.com CSV list that sets the value for SAN list in the TA TLS certificate. Defaults to 127.0.0.1. TA_TLS_CERT_CN TA_TLS_CERT_CN=Acme Trust Agent 007 Sets the value for Common Name in the TA TLS certificate. Defaults to CN=trustagent. TPM_OWNER_SECRET TPM_OWNER_SECRET=625d6... 20 byte hex value to be used as the secret key when taking ownership of the TPM. Note: If this field is not specified, GTA will generate a random secret key. TPM_QUOTE_IPV4 TPM_QUOTE_IPV4=no When enabled (=y), uses the local system's ip address as a salt when processing a quote nonce. This field must align with the configuration of HVS. TA_SERVER_READ_TIMEOUT TA_SERVER_READ_TIMEOUT=30 Sets tagent server ReadTimeout. Defaults to 30 seconds. TA_SERVER_READ_HEADER_TIMEOUT TA_SERVER_READ_HEADER_TIMEOUT=10 Sets tagent server ReadHeaderTimeout. Defaults to 30 seconds. TA_SERVER_WRITE_TIMEOUT TA_SERVER_WRITE_TIMEOUT=10 Sets tagent server WriteTimeout. Defaults to 10 seconds. TA_SERVER_IDLE_TIMEOUT TA_SERVER_IDLE_TIMEOUT=10 Sets tagent server IdleTimeout. Defaults to 10 seconds. TA_SERVER_MAX_HEADER_BYTES TA_SERVER_MAX_HEADER_BYTES=1048576 Sets tagent server MaxHeaderBytes. Defaults to 1MB(1048576) TA_ENABLE_CONSOLE_LOG TA_ENABLE_CONSOLE_LOG=true When set true, tagent logs are redirected to stdout. Defaults to false TRUSTAGENT_LOG_LEVEL TRUSTAGENT_LOG_LEVEL=debug The logging level to be saved in config.yml during installation (\"trace\", \"debug\", \"info\"). TRUSTAGENT_PORT TRUSTAGENT_PORT=10433 The port on which the trust-agent service will listen.","title":"11.2.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1122-configuration-options_1","text":"The Trust Agent configuration settings are managed in /opt/trustagent/configuration/config.yml Setting Description tpmquoteipv4: true When enabled, the Trust Agent will perform an additional hash of the nonce using the bytes from the Trust Agent server IP when returning TPM quotes. This should always be set to True. logging: loglevel: info Defines the Trust Agent logging level logenablestdout: false If set to True, the Trust Agent will log to stdout. By default this is False and the logs are sent to /var/log/trustagent/trustagent.log logentrymaxlength: 300 Defines the maximum length of a single log entry webservice: port: 1443 Defines the port on which the Trust Agent API server will listen readtimeout: 30s readheadertimeout: 10s writetimeout: 10s idletimeout: 10s maxheaderbytes: 1048576 hvs: url: https://0.0.0.0:8443/hvs/v2 Defines the baseurl for the Verification Service tpm: ownersecretkey: 625d6d8...1be0b4e957 Defines the TPM ownership secret. This is randomly generated unless manually specified during installation in the trustagent.env file. Note that changing this value may require clearing the TPM ownership in the server BIOS. aiksecretkey: 59acd1367...edcbede60c Defines the AIK secret. Randomly generated. If this is changed, a new AIK will need to be provisioned. aas: baseurl: https://0.0.0.0:8444/aas/ Defines the base URL for the AAS cms: baseurl: https://0.0.0.0:8445/cms/v1 Defines the base URL for the CMS tlscertdigest: 330086b3...ae477c8502 Defines the SHA383 hash of the CMS TLS certificate tls: certsan: 10.1.2.3,server.domain.com,localhost Comma-separated list of hostnames and IP addresses for the Trust Agent. Used in the Agent TLS certificate. certcn: Trust Agent TLS Certificate Common Name for the Trust Agent TLS certificate","title":"11.2.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1123-command-line-options_1","text":"Syntax: \u200b tagent \\<command> [arguments] Available Commands help|-h|-help tagent help|-h|-help Show the help message. \u200b setup \u200b tagent setup [task] \u200b Run setup task. \u200b Available Tasks for 'setup': \u200b [all] [/path/to/trustagent.env] \u200b tagent setup [all] [/path/to/trustagent.env] \u200b - Runs all setup tasks to provision the trust agent. \u200b - If path to trustagent.env not provided, settings are sourced from the environment. \u200b - Required environment variables: AAS_API_URL , CMS_BASE_URL , \u200b CMS_TLS_CERT_SHA384 , BEARER_TOKEN , MTWILSON_API_URL \u200b - Optional environment variables: TA_ENABLE_CONSOLE_LOG , \u200b TA_SERVER_IDLE_TIMEOUT , TA_SERVER_MAX_HEADER_BYTES , \u200b TA_SERVER_READ_HEADER_TIMEOUT , TA_SERVER_WRITE_TIMEOUT , SAN_LIST , \u200b TA_TLS_CERT_CN , TPM_OWNER_SECRET , TPM_QUOTE_IPV4 , TRUSTAGENT_LOG_LEVEL , \u200b TRUSTAGENT_PORT , TA_SERVER_READ_TIMEOUT \u200b download-ca-cert \u200b tagent setup download-ca-cert \u200b - Fetches the latest CMS Root CA Certificates, overwriting existing files. \u200b - Required environment variables: CMS_BASE_URL , CMS_TLS_CERT_SHA384 \u200b download-cert \u200b tagent setup download-cert \u200b - Fetches a signed TLS Certificate from CMS, overwriting existing files. \u200b - Required environment variables: CMS_BASE_URL , BEARER_TOKEN , \u200b - Optional environment variables: SAN_LIST , TA_TLS_CERT_CN \u200b update-certificates \u200b tagent setup update-certificates \u200b - Runs 'download-ca-cert' and 'download-cert' \u200b - Required environment variables: CMS_BASE_URL , CMS_TLS_CERT_SHA384 , \u200b BEARER_TOKEN \u200b - Optional environment variables: SAN_LIST , TA_TLS_CERT_CN \u200b provision-attestation \u200b tagent setup provision-attestation \u200b - Runs setup tasks associated with HVS/TPM provisioning. \u200b - Required environment variables: BEARER_TOKEN , MTWILSON_API_URL \u200b - Optional environment variables: TPM_OWNER_SECRET , TPM_QUOTE_IPV4 \u200b create-host \u200b tagent setup create-host \u200b - Registers the trust agent with the verification service. \u200b - Required environment variables: BEARER_TOKEN , MTWILSON_API_URL \u200b - Optional environment variables: TPM_OWNER_SECRET , TPM_QUOTE_IPV4 \u200b create-host-unique-flavor \u200b tagent setup create-host-unique-flavor \u200b - Populates the verification service with the host unique flavor \u200b - Required environment variables: BEARER_TOKEN , MTWILSON_API_URL \u200b get-configured-manifest \u200b tagent setup get-configured-manifest \u200b - Uses environment variables to pull application-integrity manifests from the \u200b verification service. \u200b - Required Environment variables: BEARER_TOKEN , MTWILSON_API_URL , \u200b FLAVOR_UUIDS or FLAVOR_LABELS \u200b Environment variables used by tagent setup: \u200b * Indicates the environment variable is optional. \u200b AAS_API_URL \u200b - AAS API URL \u200b - Ex. AAS_API_URL=https://{host}:{port}/aas/v1 \u200b CMS_BASE_URL \u200b - CMS API URL \u200b - Ex. CMS_BASE_URL=https://{host}:{port}/cms/v1 \u200b CMS_TLS_CERT_SHA384 \u200b - to ensure that TA is communicating with the right CMS instance \u200b - Ex. CMS_TLS_CERT_SHA384=bd8ebf5091289958b5765da4... \u200b BEARER_TOKEN \u200b - for authenticating with CMS and VS \u200b - Ex. BEARER_TOKEN=eyJhbGciOiJSUzM4NCIsjdkMTdiNmUz... \u200b MTWILSON_API_URL \u200b - VS API URL \u200b - Ex. MTWILSON_API_URL=https://{host}:{port}/hvs/v2 \u200b TA_ENABLE_CONSOLE_LOG * \u200b - When set to 'true', trust agent logs are redirected to stdout. Defaults to false. \u200b - Ex. TA_ENABLE_CONSOLE_LOG=true \u200b TA_SERVER_IDLE_TIMEOUT * \u200b - Sets the trust agent service's idle timeout. Defaults to 10 seconds. \u200b - Ex. TA_SERVER_IDLE_TIMEOUT=10 \u200b TA_SERVER_MAX_HEADER_BYTES * \u200b - Sets trust agent service's maximum header bytes. Defaults to 1MB. \u200b - Ex. TA_SERVER_MAX_HEADER_BYTES=1048576 \u200b TA_SERVER_READ_TIMEOUT * \u200b - Sets trust agent service's read timeout. Defaults to 30 seconds. \u200b - Ex. TA_SERVER_READ_TIMEOUT=30 \u200b TA_SERVER_READ_HEADER_TIMEOUT * \u200b - Sets trust agent service's read header timeout. Defaults to 30 seconds. \u200b - Ex. TA_SERVER_READ_HEADER_TIMEOUT=10 \u200b TA_SERVER_WRITE_TIMEOUT * \u200b - Sets trust agent service's write timeout. Defaults to 10 seconds. \u200b - Ex. TA_SERVER_WRITE_TIMEOUT=10 \u200b SAN_LIST * \u200b - CSV list that sets the value for SAN list in the TA TLS certificate. \u200b Defaults to \"127.0.0.1,localhost\". \u200b - Ex. SAN_LIST=10.123.100.1,201.102.10.22,my.example.com \u200b TA_TLS_CERT_CN * \u200b - Sets the value for Common Name in the TA TLS certificate. \u200b Defaults to \"Trust Agent TLS Certificate\". \u200b - Ex. TA_TLS_CERT_CN=Acme Trust Agent 007 \u200b TPM_OWNER_SECRET * \u200b - When provided, setup uses the 40 character hex string for the TPM owner \u200b password. The TPM owner secret is generated when not provided. \u200b - Ex. TPM_OWNER_SECRET=625d6d8a18f98bf764760fa392b8c01be0b4e959 \u200b TPM_QUOTE_IPV4 * \u200b - When 'Y', used the local system's ip address a salt when processing TPM quotes. \u200b Defaults to 'N'. \u200b - Ex. TPM_QUOTE_IPV4=Y \u200b TRUSTAGENT_LOG_LEVEL * \u200b - Sets the verbosity level of logging (trace|debug|info|error). Defaults to 'info'. \u200b - Ex. TRUSTAGENT_LOG_LEVEL=debug \u200b TRUSTAGENT_PORT * \u200b - The port on which the trust agent service will listen. \u200b - Ex. TRUSTAGENT_PORT=10433 \u200b uninstall \u200b tagent uninstall \u200b Uninstall trust agent. \u200b version \u200b tagent version \u200b Print build version info. \u200b start \u200b tagent start \u200b Start the trust agent service. \u200b stop \u200b tagent stop \u200b Stop the trust agent service. \u200b status \u200b tagent status \u200b Get the status of the trust agent service. \u200b fetch-ekcert-with-issuer \u200b tagent fetch-ekcert-with-issuer \u200b Print Tpm Endorsement Certificate in Base64 encoded string along with issue.","title":"11.2.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1124-directory-layout_1","text":"","title":"11.2.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#windows","text":"","title":"Windows"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#linux","text":"The Linux Trust Agent installs by default to /opt/trustagent , with the following subfolders:","title":"Linux"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#bin","text":"Contains executables and scripts.","title":"Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#configuration","text":"Contains the config.yml configuration file, as well as certificates and keystores. This includes the AIK public key blob after provitioning.","title":"Configuration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#var","text":"Contains information gathered from the platform and SOFTWARE Flavor manifests. All files with the name manifest_*.xml will be parsed to define measurements during boot. Generally these should be automatically provisioned from the Verification Service when creating/deploying SOFTWARE Flavors.","title":"Var"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#113-integration-hub_1","text":"","title":"11.3  Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1131-installation-answer-file_1","text":"# Authentication URL and service account credentials AAS_API_URL = https://isecl-aas:8444/aas IHUB_SERVICE_USERNAME = <Integration Hub Service User username> IHUB_SERVICE_PASSWORD = <Integration Hub Service User password> # CMS URL and CMS webserivce TLS hash for server verification CMS_BASE_URL = https://isecl-cms:8445/cms/v1 CMS_TLS_CERT_SHA384 = <TLS hash> # TLS Configuration TLS_SAN_LIST = 127 .0.0.1,192.168.1.1,hub.server.com #comma-separated list of IP addresses and hostnames for the Hub to be used in the Subject Alternative Names list in the TLS Certificate # Verification Service URL ATTESTATION_SERVICE_URL = https://isecl-hvs:8443/hvs/v2 ATTESTATION_TYPE = HVS #Integration tenant type. Currently supported values are \"KUBENETES\" or \"OPENSTACK\" TENANT = <KUBERNETES or OPENSTACK> # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_AUTH_URL = <OpenStack Keystone URL ; typically http://openstack-ip:5000/> OPENSTACK_PLACEMENT_URL = <OpenStack Nova API URL ; typically http://openstack-ip:8778/> OPENSTACK_USERNAME = <OpenStack username> OPENSTACK_PASSWORD = <OpenStack password> # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL = https://kubernetes:6443/ KUBERNETES_CRD = custom-isecl KUBERNETES_CERT_FILE = /etc/ihub/apiserver.crt KUBERNETES_TOKEN = eyJhbGciOiJSUzI1NiIsImtpZCI6Ik...... # Installation admin bearer token for CSR approval request to CMS - mandatory BEARER_TOKEN = eyJhbGciOiJSUzM4NCIsImtpZCI6ImE\u2026 # Report Signing Certificate URL and service TLS hash for server verification # Required for Platform Integrity Attestation attributes. Not required for SGX #attributes. REPORT_SIGNING_CERT_URL = https://isecl-cms:8445/cms/v1 REPORT_SIGNING_SERVICE_TLS_CERT_SHA384 = bb3a1\u2026","title":"11.3.1  Installation Answer File"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1132-configuration-options_1","text":"ihub-service-username: ihub_service ihub-service-password: password aas: url: https://isecl-aas:8444/aas cms: url: https://isecl-cms:8445/cms/v1 report-signing: cert-url: https://isecl-cms:8445/cms/v1 service-tls-cert-sha384: bb3a1\u2026 attestation-service: url: https://isecl-hvs:8443/mtwilson/v2 endpoint: url: http://openstack:5000/v3 username: admin password: password signing-cert: common-name: \"IHUB Signing Certificate\" org: Intel org-unit: country: US province: CA locality: Folsom email: log: level: warning max-length: 300 enable-console: false poll-interval-minutes: 2 expiry-time-offset-hours: 2 attestation-type: hvs","title":"11.3.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1133-command-line-options_1","text":"Syntax: \u200b ihub \\<command> [arguments] Available Commands \u200b -h|--help \u200b ihub -h|--help \u200b Shows help message. \u200b -v|--version \u200b ihub -v|--version \u200b Reports the version of the current ihub build. \u200b setup \u200b ihub setup \\< task > [--help] [--force] [-f \\<answer-file>] \u200b --help \u200b show help message for setup task \u200b --force \u200b existing configuration will be overwritten if this flag is set \u200b -f|--file \\ the answer file with required arguments \u200b Available tasks for setup: \u200b all \u200b Runs all setup tasks \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Required env variables: CMS_BASE_URL , CMS_TLS_CERT_SHA384 \u200b download-cert-tls \u200b Download CA certificate from CMS for tls \u200b - Required env variables: CMS_BASE_URL , BEARER_TOKEN \u200b - Optional env variables: TLS_CERT_FILE , TLS_KEY_FILE , TLS_COMMON_NAME , \u200b TLS_SAN_LIST , TLS_ISSUER , TLS_VALIDITY_DAYS \u200b attestation-service-connection \u200b Establish Attestation service connection \u200b - Required env variables: ATTESTATION_TYPE , ATTESTATION_URL \u200b tenant-service-connection \u200b Establish Tenant service connection \u200b - Required env variables: TENANT \u200b - Required env variables for Kubernetes tenant: KUBERNETES_URL , KUBERNETES_TOKEN , \u200b KUBERNETES_CERT_FILE , \u200b - Required env variables for OpenStack tenant: OPENSTACK_API_PORT , OPENSTACK_USERNAME , \u200b OPENSTACK_PASSWORD , OPENSTACK_IP , OPENSTACK_AUTH_PORT \u200b create-signing-key \u200b Create signing key for IHUB \u200b download-saml-cert \u200b Download SAML certificate from Attestation service \u200b - Required env variables: ATTESTATION_TYPE , ATTESTATION_URL \u200b Environment variables used by IHUB setup: \u200b * Indicates the environment variable is optional. \u200b ATTESTATION_TYPE \u200b - Type of Attestation Service \u200b ATTESTATION_URL \u200b - Base URL for the Attestation Service \u200b CMS_BASE_URL \u200b - CMS BASE URL \u200b - Ex. CMS_BASE_URL=https://{{cms}}:{{cms_port}}/cms/v1/ \u200b CMS_TLS_CERT_SHA384 \u200b - SHA384 hash value of CMS TLS certificate \u200b BEARER_TOKEN \u200b - for authenticating with CMS api \u200b TENANT \u200b - Type of Tenant Service \u200b KUBERNETES_URL \u200b - URL for Kubernetes deployment \u200b KUBERNETES_TOKEN \u200b - Token for Kubernetes deployment \u200b KUBERNETES_CERT_FILE \u200b - Certificate path for Kubernetes deployment \u200b OPENSTACK_API_PORT \u200b - API Port for OpenStack deployment \u200b OPENSTACK_USERNAME \u200b - UserName for OpenStack deployment \u200b OPENSTACK_PASSWORD \u200b - Password for OpenStack deployment \u200b OPENSTACK_IP \u200b - IP for OpenStack deployment \u200b OPENSTACK_AUTH_PORT \u200b - Authorization Port for OpenStack deployment \u200b TLS_CERT_FILE * \u200b - The file to which certificate is saved \u200b TLS_KEY_FILE * \u200b - The file to which private key is saved \u200b TLS_COMMON_NAME * \u200b - The common name of signed certificate \u200b TLS_SAN_LIST * \u200b - Comma separated list of hostnames to add to Certificate, including IP addresses and DNS \u200b names \u200b TLS_ISSUER * \u200b - The issuer of signed certificate \u200b TLS_VALIDITY_DAYS * \u200b - The validity time in days of signed certificate \u200b start \u200b ihub start \u200b Starts the ihub. \u200b status \u200b ihub status \u200b Reports the status of the ihub. \u200b stop \u200b ihub stop \u200b Stops the ihub. \u200b uninstall \u200b ihub uninstall [--purge] \u200b Uninstalls the ihub. \u200b --purge \u200b if this option is applied, all configuration and data files will be removed if the flag is set. \u200b","title":"11.3.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1134-directory-layout_1","text":"","title":"11.3.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11341-logs","text":"","title":"11.3.4.1  Logs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#114-certificate-management-service_1","text":"","title":"11.4  Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1141-installation-answer-file-options_1","text":"Key Sample Value Description CMS_NOSETUP false Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. CMS_PORT 8445 Defines the HTTPS port the service will use. AAS_API_URL https://\\<Hostname or IP address of the AAS>:8444/aas/ URL to connect to the AAS, used during setup for authentication. AAS_TLS_SAN \\<Comma-separated list of IPs/hostnames for the AAS> SAN list populated in special JWT token, this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match. LOG_ROTATION_PERIOD hourly, daily, weekly, monthly, yearly log rotation period, for more details refer- https://linux.die.net/man/8/logrotate LOG_COMPRESS Compress Old versions of log files are compressed with gzip, for more details refer- https://linux.die.net/man/8/logrotate LOG_DELAYCOMPRESS delaycompress Postpone compression of the previous log file to the next rotation cycle, for more details refer- https://linux.die.net/man/8/logrotate LOG_COPYTRUNCATE Copytruncate Truncate the original log file in place after creating a copy,'create' creates new one, for more details refer- https://linux.die.net/man/8/logrotate LOG_SIZE 1K Log files are rotated when they grow bigger than size bytes, for more details refer- https://linux.die.net/man/8/logrotate LOG_OLD 12 Log files are rotated count times before being removed, for more details refer- https://linux.die.net/man/8/logrotate CMS_CA_CERT_VALIDITY 5 CMS Root Certificate Validity in years CMS_CA_ORGANIZATION INTEL CMS Certificate Organization CMS_CA_LOCALITY US CMS Certificate locality CMS_CA_PROVINCE CA CMS Certificate province CMS_CA_COUNTRY USA CMS Certificate country CMS_TLS_SAN_LIST Comma-separated list of IP addresses and hostnames to be added to the SAN list of CMS server CMS_SERVER_READ_TIMEOUT 30s MS server - ReadTimeout is the maximum duration for reading the entire request, including the body. CMS_SERVER_READ_HEADER_TIMEOUT 10s CMS server - ReadHeaderTimeout is the amount of time allowed to read request headers CMS_SERVER_WRITE_TIMEOUT 10s CMS server - WriteTimeout is the maximum duration before timing out writes of the response. CMS_SERVER_IDLE_TIMEOUT 10s CMS server - IdleTimeout is the maximum amount of time to wait for the next request when keep-alives are enabled. CMS_SERVER_MAX_HEADER_BYTES 1048576 CMS server - MaxHeaderBytes controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. AAS_JWT_CN AAS JWT Signing Certificate CN of AAS JWT certificate, this gets populated in special JWT token. AAS must send JWT certificate CSR with this CN. AAS_TLS_CN AAS TLS Certificate CN of AAS TLS certificate, this gets populated in special JWT token. AAS must send TLS certificate CSR with this CN. AAS_TLS_SAN SAN list populated in special JWT token, this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match.","title":"11.4.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1142-configuration-options_1","text":"The CMS configuration can be found in /etc/cms/config.yml port : 8445 loglevel : info authserviceurl : https://<AAS IP or hostname>:8444/aas/ cacertvalidity : 5 organization : INTEL locality : SC province : CA country : US keyalgorithm : rsa keyalgorithmlength : 3072 rootcacertdigest : <sha384> tlscertdigest : <sha384> tokendurationmins : 20 aasjwtcn : \"\" aastlscn : \"\" aastlssan : \"\" authdefender : maxattempts : 5 intervalmins : 5 lockoutdurationmins : 15","title":"11.4.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1143-command-line-options_1","text":"Syntax: \u200b cms \\<command> [arguments] Available Commands: \u200b -h|--help \u200b cms -h|--help \u200b Shows help message. \u200b start \u200b cms start \u200b Start cms \u200b stop \u200b cms stop \u200b Stop cms \u200b status \u200b cms status \u200b Show the status of cms \u200b uninstall \u200b cms uninstall [--purge] \u200b Uninstall cms \u200b --purge option needs to be applied to remove configuration and data files \u200b -v|--version \u200b cms -v|--version \u200b Show the version of cms \u200b tlscertsha384 \u200b cms tlscertsha384 \u200b Show the SHA384 digest of the certificate used for TLS \u200b setup \u200b cms setup \\< task > [--arguments= ] [--force] \u200b Runs a specific setup task. \u200b Available Tasks for setup: \u200b all \u200b Runs all setup tasks \u200b - Required env variables: get required env variables from all the setup tasks \u200b - Optional env variables: get optional env variables from all the setup tasks \u200b root_ca \u200b Create its own self signed Root CA keypair in /etc/cms/root-ca for quality of life \u200b - Option [--force] overwrites any existing files, and always generate new \u200b Root CA keypair \u200b - Optional env variables specific to setup task are: \u200b - CMS_CA_CERT_VALIDITY=<cert life span in years> - Certificate Management \u200b Service Root Certificate Validitys \u200b - CMS_CA_ORGANIZATION=<cert org> - Certificate Management Service Root \u200b Certificate Organization \u200b - CMS_CA_LOCALITY=<cert locality> - Certificate Management Service Root \u200b Certificate Locality \u200b - CMS_CA_PROVINCE=<cert province> - Certificate Management Service Root \u200b Certificate Province \u200b - CMS_CA_COUNTRY=<cert country> - Certificate Management Service Root \u200b Certificate Country \u200b intermediate_ca \u200b Creates a root_ca signed intermediate CA keypair(signing, tls-server and tls-client) \u200b in /etc/cms/intermediate-ca/ for quality of life \u200b - Option [--force] overwrites any existing files, and always generate new root_ca signed \u200b Intermediate CA keypair \u200b - Available argument specific to setup task is: \u200b type - available options are: TLS, TLS-Client, Signing \u200b tls \u200b Create an intermediate_ca signed TLS keypair in /etc/cms for quality of life \u200b - Option [--force] overwrites any existing files, and always generate root_ca signed \u200b TLS keypair \u200b - Available argument and optional env variable specific to setup task is: \u200b host_names - alternatively, set environment variable SAN_LIST \u200b server \u200b Setup http server on given port \u200b - Available arguments and optional env variables specific to task are: \u200b port - alternatively, set environment variable CMS_PORT \u200b aas-url - alternatively, set environment variable AAS_API_URL \u200b - Optional env variables specific to setup task are: \u200b - CMS_SERVER_READ_TIMEOUT =<read timeout in seconds> - Certificate \u200b Management Service Read Timeout \u200b - CMS_SERVER_READ_HEADER_TIMEOUT =<read header timeout in seconds> - \u200b Certificate Management Service Read Header Timeout \u200b - CMS_SERVER_WRITE_TIMEOUT =<write timeout in seconds> - Certificate \u200b Management Service Write Timeout \u200b - CMS_SERVER_IDLE_TIMEOUT =<idle timeout in seconds> - Certificate \u200b Management Service Idle Timeout \u200b - CMS_SERVER_MAX_HEADER_BYTES =<max header bytes> - Certificate Management \u200b Service Max Header Bytes \u200b - LOG_ENTRY_MAXLENGTH =<log max length> - Maximum length of each entry in a \u200b log \u200b - CMS_ENABLE_CONSOLE_LOG =<bool> - Certificate Management Service Enable \u200b standard output \u200b cms_auth_token \u200b Create its own self signed JWT keypair in /etc/cms/jwt for quality of life \u200b - Option [--force] overwrites any existing files, and always generate new JWT keypair \u200b and token \u200b - Optional env variables specific to setup task are: \u200b - AAS_JWT_CN=<jwt common-name> - Authentication and Authorization JWT \u200b Common Name \u200b - AAS_TLS_CN=<tls common-name> - Authentication and Authorization TLS \u200b Common Name \u200b - AAS_TLS_SAN=<tls SAN> - Authentication and Authorization TLS SAN list","title":"11.4.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1144-directory-layout_1","text":"The Certificate Management Service installs by default to /opt/cms with the following folders.","title":"11.4.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11441-bin_1","text":"This folder contains executable scripts.","title":"11.4.4.1  Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11442-cacerts_1","text":"This folder contains the CMS root CA certificate.","title":"11.4.4.2 Cacerts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#115-authentication-and-authorization-service_1","text":"","title":"11.5  Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1151-installation-answer-file-options_1","text":"Key Sample Value Description CMS_BASE_URL https://<cms IP or hostname>/cms/v1/ Required; Provides the URL for the CMS. AAS_NOSETUP false Optional. Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. AAS_DB_HOSTNAME localhost Required. Hostname or IP address of the AAS database AAS_DB_PORT 5432 Required. Database port number AAS_DB_NAME pgdb Required. Database name AAS_DB_USERNAME dbuser Required. Database username AAS_DB_PASSWORD dbpassword Required. Database password AAS_DB_SSLMODE verify-ca Defines the SSL mode for the connection to the database. If not specified, the database connection will not use certificate verification. If specified, certificate verification will be required for database connections. AAS_DB_SSLCERTSRC /usr/local/pgsql/data/server.crt Optional, required if the \u201cAAS_DB_SSLMODE is set to verify-ca Defines the location of the database SSL certificate. AAS_DB_SSLCERT \\<path_to_cert_file_on_system> Optional. The AAS_DB_SSLCERTSRC variable defines the source location of the database SSL certificate; this variable determines the local location. If the former option is used without specifying this option, the service will copy the SSL certificate to the default configuration directory. AAS_ADMIN_USERNAME admin@aas Required. Defines a new AAS administrative user. This user will be able to create new users, new roles, and new role-user mappings. This user will have the AAS:Administrator role. AAS_ADMIN_PASSWORD aasAdminPass Required. Password for the new AAS admin user. AAS_JWT_CERT_SUBJECT \"AAS JWT Signing Certificate\" Optional. Defines the subject of the JWT signing certificate. AAS_JWT_TOKEN_DURATION_MINS 5 Optional. Defines the amount of time in minutes that an issued token will be valid. SAN_LIST 127.0.0.1,localhost,10.x.x.x Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. BEARER_TOKEN \\<token> Required. Token from the CMS generated during CMS setup that allows the AAS to perform initial setup tasks. LOG_LEVEL Critical, error, warning, info, debug, trace Optional. Defaults to INFO. Changes the log level used.","title":"11.5.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1152-configuration-options_1","text":"","title":"11.5.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1153-command-line-options_1","text":"Syntax: \u200b authservice \\<command> [arguments] Available Commands \u200b -h|--help \u200b authservice -h|--help \u200b Show this help message \u200b setup \u200b authservice setup \\< task > \u200b Run setup task \u200b Available Tasks for setup: \u200b all \u200b Runs all setup tasks \u200b - Required env variables: get required env variables from all the setup tasks \u200b - Optional env variables: get optional env variables from all the setup tasks \u200b database \u200b Setup authservice database \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Available arguments and Required Env variables specific to setup task are: \u200b - db-host alternatively, set environment variable AAS_DB_HOSTNAME \u200b - db-port alternatively, set environment variable AAS_DB_PORT \u200b - db-user alternatively, set environment variable AAS_DB_USERNAME \u200b - db-pass alternatively, set environment variable AAS_DB_PASSWORD \u200b - db-name alternatively, set environment variable AAS_DB_NAME \u200b - Available arguments and Optional env variables specific to setup task are: \u200b - db-sslmode \\<disable|allow|prefer|require|verify-ca|verify-full> \u200b alternatively, set environment variable AAS_DB_SSLMODE \u200b - db-sslcert path to where the certificate file of database. Only applicable \u200b for db-sslmode=\\<verify-ca|verify-full. If left empty, the cert will be \u200b copied to /etc/authservice/tdcertdb.pem alternatively, \u200b set environment variable AAS_DB_SSLCERT \u200b - db-sslcertsrc \\<path to where the database ssl/tls certificate file> \u200b mandatory if db-sslcert does not already exist \u200b alternatively, set environment variable AAS_DB_SSLCERTSRC \u200b admin \u200b Setup task to register authservice user with default admin roles to database \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Available arguments and Required Env variables specific to setup task are: \u200b \u200b - user - alternatively set environment variable AAS_ADMIN_USERNAME \u200b \u200b - pass - alternatively set environment variable AAS_ADMIN_PASSWORD \u200b \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required env variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b download_cert TLS \u200b Generates Key pair and CSR, gets it signed from CMS \u200b - Option [--force] overwrites any existing files, and always downloads newly signed \u200b TLS cert \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Required env variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - BEARER_TOKEN=<token> for authenticating with CMS \u200b - SAN_LIST=<san> - list of hosts which needs access to service \u200b - Optional env variables specific to setup task are: \u200b - KEY_PATH=<key_path> - Path of file where TLS key needs to be stored \u200b - CERT_PATH=<cert_path> - Path of file/directory where TLS certificate needs \u200b to be stored \u200b jwt \u200b Create jwt signing key and jwt certificate signed by CMS \u200b - Option [--force] overwrites any existing files, and always downloads newly signed \u200b JWT cert \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Available arguments and Required Env variables specific to setup task are: \u200b \u200b - cms-url - alternatively set environment variable CMS_BASE_URL \u200b \u200b - token - alternatively set environment variable BEARER_TOKEN \u200b - Available arguments and Optional env variables specific to setup task are: \u200b \u200b - subj - alternatively set environment variable AAS_JWT_CERT_CN \u200b \u200b - keyid - alternatively set environment variable AAS_JWT_INCLUDE_KEYID \u200b \u200b - valid-mins - alternatively set environment variable \u200b AAS_JWT_TOKEN_DURATION_MINS \u200b server \u200b Setup http server on given port \u200b - Required environment variables if AAS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that AAS is \u200b talking to the right CMS instance \u200b - Available arguments and Optional env variables specific to setup task are: \u200b \u200b - port - alternatively set environment variable AAS_PORT \u200b \u200b - AAS_SERVER_READ_TIMEOUT=<read timeout in seconds> \u200b \u200b - AAS_SERVER_READ_HEADER_TIMEOUT=<read header timeout in seconds> \u200b \u200b - AAS_SERVER_WRITE_TIMEOUT=<write timeout in seconds> \u200b \u200b - AAS_SERVER_IDLE_TIMEOUT=<idle timeout in seconds> \u200b \u200b - AAS_SERVER_MAX_HEADER_BYTES=<max header bytes> \u200b \u200b - AAS_LOG_MAX_LENGTH=<log max length> \u200b \u200b - AAS_ENABLE_CONSOLE_LOG=<bool> \u200b start \u200b authservice start \u200b Start authservice \u200b status \u200b authservice status \u200b Show the status of authservice \u200b stop \u200b authservice stop \u200b Stop authservice \u200b tlscertsha384 \u200b authservice tlscertsha384 \u200b Show the SHA384 digest of the certificate used for TLS \u200b uninstall \u200b authservice uninstall \u200b Uninstall authservice \u200b --purge option needs to be applied to remove configuration and data files \u200b -v|--version \u200b authservice -v|--version \u200b Shows the version of authservice.","title":"11.5.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1154-directory-layout_1","text":"The Verification Service installs by default to /opt/authservice with the following folders.","title":"11.5.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11541-bin_1","text":"Contains executable scripts and binaries.","title":"11.5.4.1 Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11542-dbscripts_1","text":"Contains database scripts.","title":"11.5.4.2  dbscripts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#116-workload-service_1","text":"","title":"11.6  Workload Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1161-installation-answer-file-options_1","text":"Key Sample Value Description WLS_LOGLEVEL INFO (Optional) Alternatives include WARN and DEBUG. Sets the log level for the service. WLS_NOSETUP false (Optional) Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. Defaults to \u201cfalse\u201d if unset. WLS_PORT 5000 (Optional) Defines the HTTPS port used by the service Defaults to 5000 if unset. WLS_DB_HOSTNAME localhost (Required) Database hostname WLS_DB wlsdb (Required) Database name WLS_DB_PORT 5432 (Required) Database port number WLS_DB_USERNAME wlsdbuser (Required) Database username WLS_DB_PASSWORD wlsdbuserpass (Required) Database password HVS_URL https://\\<HVS IP address or hostname>:8443/hvs/v2/ (Required) Base URL for the HVS AAS_API_URL https://\\<AAS IP address or hostname>:8444/aas Base URL for the AAS WLS_CERT_SAN_LIST 127.0.0.1,localhost,10.x.x.x Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. CMS_BASE_URL Base URL for the CMS BEARER_TOKEN \\<token> (Required) Token from the CMS generated during CMS setup that allows the AAS to perform initial setup tasks. WLS_TLS_CERT_CN 'WLS TLS Certificate (Optional) Set the Common name for TLS cert to be downloaded from CMS. Default is 'WLS TLS Certificate'. WLS_CERT_ORG 'INTEL' (Optional) Set the Organization in Subject of CSR. Default is 'INTEL'. WLS_CERT_COUNTRY 'US' (Optional) Set the Country in Subject of CSR. Default is 'US'. WLS_CERT_PROVINCE 'SF' (Optional) Set the Province in Subject of CSR. Default is 'SF'. WLS_CERT_LOCALITY 'SC' (Optional) Set the Locality in Subject of CSR. Default is 'SC'. KEY_CACHE_SECONDS 300 (Optional) Set the time till which the key will be cached. Default is '300 seconds'. WLS_LOGLEVEL Info, debug, error, warn (Optional) Set the log level. KEY_PATH (Optional) Redefines the path to the keystore folder CERT_PATH (Optional) Redefines the path to the certificates folder","title":"11.6.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1162-configuration-options_1","text":"The Workload Service configuration can be found in /etc/workload-service/config.yml : port : 5000 cmstlscertdigest : <sha384> postgres : dbname : wlsdb user : <database username> password : <database password> hostname : <database IP or hostname> port : 5432 sslmode : false hvs_api_url : https://<HVS IP or hostname>:8443/hvs/v2/ cms_base_url : https://<CMS IP or hostname>:8445:/cms/v1/ aas_api_url : https://<AAS IP or hostname>:8444/aas/ subject : tlscertcommonname : WLS TLS Certificate organization : INTEL country : US province : SF locality : SC wls : user : <username of service account used by WLS to access other services>> password : <password> loglevel : info key_cache_seconds : 300","title":"11.6.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1163-command-line-options_1","text":"The Workload Service supports several command-line commands that can be executed only as the Root user: Syntax: \u200b workload-service \\<command> [argument] Available Commands: \u200b Help \u200b -help|--help Show this help message \u200b -v|--version Print version/build information \u200b start Start workload-service \u200b stop Stop workload-service \u200b status Determine if workload-service is running \u200b uninstall [--purge] Uninstall workload-service. --purge option needs to be \u200b applied to remove configuration and data files \u200b setup Run workload-service setup tasks \u200b start \u200b workload-service start \u200b Start workload-service \u200b stop \u200b workload-service stop \u200b Stop workload-service \u200b status \u200b workload-service status \u200b Determine if workload-service is running \u200b uninstall \u200b workload-service uninstall \u200b Uninstall workload-service \u200b [--purge] option needs to be applied to remove configuration and data files \u200b setup \u200b Setup workload-service for use \u200b workload-service setup \\< task > [--force] \u200b Available tasks for setup: \u200b all \u200b Runs all setup tasks \u200b - Required env variables: get required env variables from all the setup tasks \u200b - Optional env variables: get optional env variables from all the setup tasks \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Fetches the latest CMS Root CA Certificates, overwriting existing files. \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - AAS_API_URL=<url> - AAS API url \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required environment variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b download_cert TLS \u200b Generates Key pair and CSR, gets it signed from CMS \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required env variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - BEARER_TOKEN=<token> for authenticating with CMS \u200b - SAN_LIST=<CSV List> - List of FQDNs to be added to the SAN field in TLS cert \u200b to override \u200b - Optional env variables specific to setup task are: \u200b - KEY_PATH=<key_path> - Path of file where TLS key needs to be stored \u200b - CERT_PATH=<cert_path> - Path of file/directory where TLS certificate needs \u200b to be stored \u200b - WLS_TLS_CERT_CN=<COMMON NAME> to override default specified in config \u200b database \u200b Setup workload-service database \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required env variables specific to setup task are: \u200b - WLS_DB_HOSTNAME=<db host name> - database host name \u200b - WLS_DB_PORT=<db port> - database port number \u200b - WLS_DB=<db name> - database schema name \u200b - WLS_DB_USERNAME=<db user name> - database user name \u200b - WLS_DB_PASSWORD=<db password> - database password \u200b - Optional env variables specific to setup task are: \u200b - WLS_DB_SSLMODE=<db sslmode> - database SSL Connection Mode \u200b \\ \u200b - WLS_DB_SSLCERT=<ssl certificate path> - database SSL Certificate \u200b target path. \u200b Only applicable for WLS_DB_SSLMODE= . If left empty, \u200b the cert will be copied to /etc/workload-service/wlsdbsslcert.pem \u200b - WLS_DB_SSLCERTSRC=<ssl certificate source path> - database SSL Certificate \u200b source path. Mandatory if WLS_DB_SSLCERT does not already exist \u200b server \u200b Setup http server on given port \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - Required env variables specific to setup task are: \u200b - WLS_PORT=<port> - database port number \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b hvsconnection \u200b Setup task for setting up the connection to the Host Verification Service (HVS) \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required env variables specific to setup task are: \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b download_saml_ca_cert \u200b Setup to download SAML CA certificates from HVS \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WLS_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WLS is \u200b talking to the right CMS instance \u200b - AAS_API_URL=<url> - AAS API url \u200b - WLS_SERVICE_USERNAME=<service username> - WLS service username \u200b - WLS_SERVICE_PASSWORD=<service password> - WLS service password \u200b - Required env variables specific to setup task are: \u200b - HVS_URL=<url> - HVS API Endpoint URL \u200b - BEARER_TOKEN=<token> for authenticating with HVS","title":"11.6.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1164-directory-layout_1","text":"The Workload Service installs by default to /opt/wls with the following folders.","title":"11.6.4 Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#117-key-broker-service_1","text":"","title":"11.7  Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1171-installation-answer-file-options_1","text":"Variable Name Default Value Notes USERNAME KBS admin username PASSWORD KBS admin password CMS_BASE_URL Required for generating TLS certificate CMS_TLS_CERT_SHA384 SHA384 digest of CMS TLS certificate AAS_API_URL AAS baseurl BEARER_TOKEN JWT token for installation user KMS_HOME /opt/kms Application home directory KBS_SERVICE_USERNAME kms Non-root user to run KMS JETTY_PORT 80 The server will listen for HTTP connections on this port JETTY_SECURE_PORT 443 The server will listen for HTTPS connections on this port KMS_LOG_LEVEL INFO Sets the root log level in logback.xml KMS_NOSETUP false Skips setup during installation if set to true ENDPOINT_URL http://localhost Endpoint to be used in key transfer url KEY_MANAGER_PROVIDER DirectoryKeyManager Key manager to be used for key management KBS_SERVICE_PASSWORD This password protects the configuration file and the password vault. It must be set before installing and before starting the KBS KMS_TLS_CERT_IP IP addresses to be included in SAN list KMS_TLS_CERT_DNS DNS addresses to be included in SAN list BARBICAN_PROJECT_ID OpenStack Barbican project id BARBICAN_ENDPOINT_URL OpenStack Barbican endpoint url BARBICAN_KEYSTONE_PUBLIC_ENDPOINT OpenStack Keystone endpoint url BARBICAN_TENANTNAME OpenStack Barbican tenant name BARBICAN_USERNAME OpenStack Barbican admin username BARBICAN_PASSWORD OpenStack Barbican admin password","title":"11.7.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1172-configuration-options_1","text":"","title":"11.7.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1173-command-line-options_1","text":"The Key Broker Service supports several command-line commands that can be executed only as the Root user: Syntax: \u200b kms \\<command> \u200b Available Commands \u200b start \u200b kms start \u200b Starts the service \u200b stop \u200b kms stop \u200b Stops the service \u200b status \u200b kms status \u200b Reports the status of service \u200b restart \u200b kms restart \u200b Restarts the status of service \u200b uninstall \u200b kms uninstall \u200b Removes the service \u200b version \u200b kms version \u200b Displays the version of the service \u200b setup \u200b kms setup [--force|--noexec] [task1 task2...] \u200b Available setup tasks: \u200b kms setup password-vault \u200b kms setup jetty-tls-keystore \u200b kms setup shiro-ssl-port \u200b kms setup notary-key \u200b kms setup envelope-key \u200b kms setup storage-key \u200b kms setup saml-certificates \u200b kms setup tpm-identity-certificates","title":"11.7.3 Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1174-directory-layout_1","text":"The Verification Service installs by default to /opt/kms with the following folders.","title":"11.7.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11741-bin","text":"Contains scripts and executable binaries","title":"11.7.4.1  Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11742-configuration","text":"Contains configuration files","title":"11.7.4.2  Configuration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11743-env","text":"Contains environment details","title":"11.7.4.3  Env"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11744-features","text":"","title":"11.7.4.4  Features"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11745-java","text":"Contains Java artifacts","title":"11.7.4.5  Java"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11746-logs","text":"Contains logs. Primary log file is kms.log","title":"11.7.4.6  Logs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11747-repository","text":"Contains the keys subdirectory, which is used for storing image encryption keys.","title":"11.7.4.7  Repository"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11748-script","text":"Contains additional scripts","title":"11.7.4.8  Script"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#118-workload-agent_1","text":"","title":"11.8  Workload Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1181-installation-answer-file-options_1","text":"","title":"11.8.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1182-configuration-options_1","text":"","title":"11.8.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1183-command-line-options_1","text":"Syntax: \u200b wlagent \\<command> Available Commands: \u200b help|-help|--help \u200b wlagent help|-help|--help \u200b Show help message \u200b setup \u200b wlagent setup \\< task > \u200b Run setup task \u200b Available Tasks for setup \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Environment variable CMS_BASE_URL=<url> for CMS API url \u200b - Environment variable CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to \u200b ensure that WLS is talking to the right CMS in \u200b SigningKey \u200b Generate a TPM signing key \u200b - Option [--force] overwrites any existing files, and always creates a new Signing key \u200b BindingKey \u200b Generate a TPM binding key \u200b - Option [--force] overwrites any existing files, and always creates a new Binding key \u200b RegisterSigningKey \u200b Register a signing key with the host verification service \u200b - Option [--force] Always registers the Signing key with Verification service \u200b - Environment variable MTWILSON_API_URL=<url> for registering the key with \u200b Verification service \u200b - Environment variable BEARER_TOKEN=<token> for authenticating with \u200b Verification service \u200b RegisterBindingKey \u200b Register a binding key with the host verification service \u200b - Option [--force] Always registers the Binding key with Verification service \u200b - Environment variable MTWILSON_API_URL=<url> for registering the key with \u200b Verification service \u200b - Environment variable BEARER_TOKEN=<token> for authenticating with \u200b Verification service \u200b - Environment variable TRUSTAGENT_USERNAME=<TA user> for changing binding \u200b key file ownership to TA application user \u200b start \u200b wlagent start \u200b Start wlagent \u200b stop \u200b wlagent stop \u200b Stop wlagent \u200b status \u200b wlagent status \u200b Reports the status of wlagent service \u200b uninstall \u200b wlagent uninstall [--purge] \u200b Uninstall wlagent \u200b [--purge] Uninstalls workload agent and deletes the existing configuration directory \u200b -v|--version \u200b wlagent -v|--version \u200b Print version/build information \u200b fetch-key-url \\ \u200b wlagent fetch-key-url \\ \u200b Fetch a key from the keyUrl","title":"11.8.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1184-directory-layout_1","text":"The Workload Agent installs by default to /opt/workload-agent with the following folders.","title":"11.8.4  Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#11841-bin_1","text":"Contains scripts and executable binaries.","title":"11.8.4.1  Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#119-workload-policy-manager_1","text":"","title":"11.9  Workload Policy Manager"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1191-installation-answer-file-options_1","text":"Key Sample Value Description KMS_API_URL https://\\<IP address or hostname of the KBS>:9443/v1/ Required. Defines the baseurl for the Key Broker Service. The WPM uses this URL to request new encryption keys when encrypting images. KMS_TLS_SHA384 Required. SHA384 hash of the Key Broker TLS certificate CMS_TLS_CERT_SHA384 Required. SHA384 hash of the CMS TLS certificate CMS_BASE_URL https://\\<IP address or hostname for CMS>:8445/cms/v1/ Required. Defines the base URL for the CMS owned by the image owner. Note that this CMS may be different from the CMS used for other components. AAS_API_URL https://\\<IP address or hostname for AAS>:8444/aas Required. Defines the baseurl for the AAS owned by the image owner. Note that this AAS may be different from the AAS used for other components. BEARER_TOKEN \\<token> Required; token from CMS with permissions used for installation. WPM_WITH_CONTAINER_SECURITY \u201cyes\u201d or \u201cno\u201d Optional, defaults to \u201cno.\u201d Defines whether the WPM will support Docker Container encryption. If this is set to Yes, the appropriate prerequisites for Docker Container encryption will be installed. If this is set to \u201cno,\u201d the WPM will not be able to encrypt Docker Container images, and will only be usable to encrypt Virtual Machine images. WPM_LOG_LEVEL INFO (default), DEBUG Optional; defines the log level for the WPM. Defaults to INFO. WPM_PASSWORD Defines the credentials for the WPM to use to access the KBS WPM_USERNAME Defines the credentials for the WPM to use to access the KBS","title":"11.9.1  Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1192-configuration-options_1","text":"","title":"11.9.2  Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1193-command-line-options_1","text":"The Workload Policy Manager supports several command-line commands that can be executed only as the Root user: Syntax: \u200b wpm \\<command> [arguments] Available Commands \u200b -h|--help \u200b wpm -h|--help \u200b Displays help text \u200b -v|--version \u200b wpm -v|--version \u200b Print version/build information \u200b create-image-flavor \u200b Create VM image flavors and encrypt the image \u200b wpm create-image-flavor [-l label] [-i in] [-o out] [-e encout] [-k key] \u200b -l, --label image flavor label \u200b -i, --in input image file path \u200b -o, --out (optional) output image flavor file path \u200b if not specified, will print to the console \u200b -e, --encout (optional) output encrypted image file path \u200b if not specified, encryption is skipped \u200b -k, --key (optional) existing key ID \u200b if not specified, a new key is generated \u200b create-container-image-flavor \u200b Create container image flavors and encrypt the container image \u200b wpm create-container-image-flavor [-i img-name] [-t tag] [-f dockerFile] [-d build-dir] [-k keyId] [-e] [-s] [-n notaryServer] [-o out-file] \u200b -i, --img-name container image name \u200b -t, --tag (optional)container image tag name \u200b -f, --docker-file (optional) container file path to build the container image \u200b -d, --build-dir (optional) build directory to build the container image \u200b -k, --key-id (optional) existing key ID if not specified, a new key is \u200b generated \u200b -e, --encryption-required (optional) boolean parameter specifies if container \u200b image needs to be encrypted \u200b -s, --integrity-enforced (optional) boolean parameter specifies if container \u200b image should be signed \u200b -n, --notary-server (optional) specify notary server url \u200b -o, --out-file (optional) specify output file path \u200b get-container-image-id \u200b wpm get-container-image-id [\\ ] \u200b Fetch the container image ID given the sha256 digest of the image \u200b unwrap-key \u200b wpm unwrap-key [-i |--in] \\ \u200b Unwraps the image encryption key fetched from KMS \u200b fetch-key \u200b wpm fetch-key \u200b Fetch key from KMS \u200b create-software-flavor \u200b wpm create-software-flavor \u200b Not currently supported; intended for future functionality. \u200b uninstall \u200b wpm uninstall \u200b Uninstall wpm. \u200b --purge option needs to be applied to remove configuration and data files \u200b setup \u200b wpm setup \\< task > [--force] \u200b Run workload-policy-manager setup tasks \u200b Available tasks for setup: \u200b all \u200b Runs all setup tasks \u200b - Required env variables: get required env variables from all the setup tasks \u200b - Optional env variables: get optional env variables from all the setup tasks \u200b download_ca_cert \u200b Download CMS root CA certificate \u200b - Option [--force] overwrites any existing files, and always downloads new root \u200b CA cert \u200b - Required environment variables if WPM_NOSETUP=true or variables not set \u200b in config.yml : \u200b - KMS_API_URL=<url> - KMS API url \u200b - AAS_API_URL=<url> - AAS API url \u200b - WPM_SERVICE_USERNAME=<service username> - WPM service username \u200b - WPM_SERVICE_PASSWORD=<service password> - WPM service password \u200b - Required environment variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WPM is \u200b talking to the right CMS instance \u200b download_cert flavor-signing \u200b Generates Key pair and CSR, gets it signed from CMS \u200b - Option [--force] overwrites any existing files, and always downloads newly signed \u200b WPM Flavor Signing cert \u200b - Required environment variables if WPM_NOSETUP=true or variables not set \u200b in config.yml : \u200b - CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that WPM is \u200b talking to the right CMS instance \u200b - KMS_API_URL=<url> - KMS API url \u200b - AAS_API_URL=<url> - AAS API url \u200b - WPM_SERVICE_USERNAME=<service username> - WPM service username \u200b - WPM_SERVICE_PASSWORD=<service password> - WPM service password \u200b - Required environment variables specific to setup task are: \u200b - CMS_BASE_URL=<url> for CMS API url \u200b - BEARER_TOKEN=<token> for authenticating with CMS \u200b - Optional env variables specific to setup task are: \u200b - KEY_PATH=<key_path> - Path of file where Flavor-Signing key needs to be stored \u200b - CERT_PATH=<cert_path> - Path of file/directory where Flavor-Signing certificate \u200b needs to be stored \u200b - WPM_FLAVOR_SIGN_CERT_CN=<COMMON NAME> to override default specified in config \u200b createenvelopekey \u200b Creates the key pair required to securely transfer key from KMS \u200b - Option [--force] overwrites existing envelope key pairs","title":"11.9.3  Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#12-certificate-and-key-management_1","text":"","title":"12  Certificate and Key Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#121-authentication-and-authorization-service","text":"The AAS uses a JWT signing certificate to generate JWT tokens. By default this certificate is issued by the CMS signing CA. Generally, this should not be changed. The JWT signing certificate and its private key can be found here: /etc/authservice/certs/tokensign/jwtsigncert.pem /etc/authservice/certs/tokensign/jwt.key","title":"12.1  Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#122-host-verification-service","text":"","title":"12.2  Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1221-saml","text":"The SAML Certificate is used to sign SAML attestation reports, and is itself signed by the intermediate signing CA from the CMS. This certificate is unique to the Verification Service. /etc/hvs/certs/trustedca/saml-crt.pem /etc/hvs/trusted-keys/saml.key Note that, if this certificate is replaced, all existing attestations in the HVS will immediately appear as invalid/untrusted due to a SAML signature mismatch. If the Integration Hub is being used, the new SAML certificate will need to be imported to the Hub. If the Key Broker Service is being used, the new SAML certificate will need to be imported to the KBS. To replace this certificate with a new SAML certificate using the CMS self-signed certificate chain, use the following command: hvs setup download-cert-saml","title":"12.2.1  SAML"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1222-asset-tag","text":"The Asset tag Certificate is used to sign all Asset Tag Certificates. This certificate is unique to the Verification Service. /etc/hvs/certs/trustedca/tag-ca-cert.pem /etc/hvs/trusted-keys/tag-ca.key If the Asset tag signing certificate is replaced, all existing Asset Tags will be considered invalid, and will need to be recreated. It is recommended to delete any existing Asset Tag certificates and Flavors, and then recreate and deploy new Tags.","title":"12.2.2  Asset Tag"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1223-privacy-ca","text":"The Privacy CA certificate is used as part of the certificate chain for creating the Attestation Identity Key (AIK) during Trust Agent provisioning. The Privacy CA must be a self-signed certificate. This certificate is unique to the Verification Service. The Privacy CA certificate is used by Trust Agent nodes during Trust Agent provisioning; if the Privacy CA certificate is changed, all Trust Agent nodes will need to be re-provisioned. /etc/hvs/certs/trustedca/privacy-ca/privacy-ca-cert.pem /etc/hvs/trusted-keys/privacy-ca.key If the Privacy CA certificate is replaced, all Trust Agent hosts will need to be re-provisioned with a new AIK: tagent setup provision-attestation Any Trust Agent hosts not reprovisioned will result in untrusted attestations, as the validation of the AIK used to sign the hosts' TPM quotes will no longer match the endorsement chain of the HVS.","title":"12.2.3  Privacy CA"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1224-endorsement-ca","text":"The Endorsement CA is a self-signed certificate used during Trust Agent provisioning. /etc/hvs/certs/endorsement/EndorsementCA.pem` /etc/hvs/trusted-keys/endorsement-ca.key /etc/hvs/certs/endorsement/EndorsementCA-external.pem` If the Endorsement CA certificate is replaced, all Trust Agent hosts will need to be re-provisioned with a new Endorsement Certificate: tagent setup provision-attestation Any Trust Agent hosts not reprovisioned will result in untrusted attestations, as the validation of the AIK used to sign the hosts' TPM quotes will no longer match the endorsement chain of the HVS.","title":"12.2.4  Endorsement CA"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#123-regenerating-tls-certificates","text":"TLS certificates for each service are issued by the Certificate Management Service during installation. If the CMS root certificate is changed, or to regenerate the TLS certificate for a given service, use the following commands (note: environment variables will need to be set; typically these are the same variables set in the service installation .env file): download_ca_cert` Set up required environment variables. These are some of the same variables that would be used in the .env installation file to install the service. Note that a new/valid bearer token will be needed; this can be generated using the populate-users.sh script with the AAS, or by using the installation admin user credentials to get a token from the AAS API. CMS_BASE_URL=<CMS API URL>` BEARER_TOKEN=<token> Use setup to re-download a new TLS certificate. <servicename> download-cert-tls --force This generates a new key pair and CSR, gets it signed by the CMS.","title":"12.3  Regenerating TLS Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#124-replacing-self-signed-certificates","text":"The CMS offers automatic generation of certificates based on a self-signed root CA. Certificates using this root CA may need to be replaced with certificates signed by a recognized CA. This effectively involves replacing the certificates deployed during installation with new certificates that use a hierarchy outside of the CMS. To replace any non-TLS certificate, simply replace the existing certificate file with the new certificate and its private key. Each certificate must include any intermediate certificate chain, excluding the root. The root CA certificate must also be replaced so that the new hierarchy is used for validation.","title":"12.4 Replacing Self-Signed Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#tls-certificates","text":"To replace the TLS certificates in ISecL services, generate new TLS certificates for each service. Each TLS certificate requires that a list of resolvable DNS hostnames and/or IP addresses be included as Subject Alternative Names in the new certificate. Copy the new TLS certificates to the appropriate directories, overwriting the existing TLS certificates deployed by the CMS during installation: /etc/<servicename>/tls-cert.pem /etc/<servicename>/tls.key Copy the new root CA to each service, overwriting the CMS-created root CA: /etc/<servicename>/certs/trustedca/root/ Restart each service so that the changes take effect.","title":"TLS Certificates"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#13-uninstallation_1","text":"This section describes steps used for uninstalling Intel SecL-DC services. This section does not apply for containerized deployments. To uninstall a containerized deployment, simply shut down the container and delete the persistence volumes.","title":"13  Uninstallation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#131-host-verification-service_1","text":"To uninstall the Verification Service, run the following command: hvs uninstall The hvs uninstall command will not delete any database content. To completely uninstall and delete all database content and user data, run the following: hvs erase-data hvs uninstall Note: The uninstall command must be issued last, because the uninstall process removes the scripts that execute the other commands, along with all database connectivity info.","title":"13.1 Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#132-trust-agent_1","text":"To uninstall the Trust Agent, run the following command: tagent uninstall Backs up the configuration directory and removes all Trust Agent files, except for configuration files which are saved and restored. Removes following directories: /usr/local/bin/tagent TRUSTAGENT_HOME : `/opt/trustagent /opt/tbootxm /var/log/trustagent/measurement.* Note: TPM ownership can be preserved by retaining the TPM owner secret. If the Operating System will also be cleared, Linux systems will also require the /usr/local/var/lib/tpm/system.data file to be preserved. This file must be preserved from after ownership is taken, and then replaced after the OS reload before the Trust Agent attempts to reassert ownership. If the ownership secret and/or system.data file are not preserved, reinstallation will require clearing TPM ownership.","title":"13.2  Trust Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#133-integration-hub_1","text":"To uninstall the Integration Hub, run the following command: ihub uninstall Removes the following directories: /usr/local/bin/ihub /usr/bin/ihub /opt/ihub /etc/logrotate.d/ihub ihub uninstall --purge Removes the following directories (in addition to directories removed without the \u2013purge option): Drops the database Drops the user Removes integration hub tenant configuration path","title":"13.3  Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#134-kubernetes-crds","text":"Uninstalling the Intel\u00ae SecL Custom Resource Definitions To unisntall the Intel\u00ae SecL CRDs, run the following commands on the Kubernetes Control Plane where the CRDs were installed: kubectl delete deploy -n isecl --all rm -rf /opt/isecl-k8s-extensions rm -rf /var/log/isecl-k8s-extensions","title":"13.4 Kubernetes CRDs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14-appendix","text":"","title":"14  Appendix"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#141-pcr-definitions_1","text":"","title":"14.1  PCR Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1411-microsoft-windows-server-2016-datacenter","text":"","title":"14.1.1  Microsoft Windows Server 2016 Datacenter"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14111-tpm-20_1","text":"PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor All PCR 12 Data events and highly volatile events This PCR measures some of the modules which has boot counters in it. It changes on every boot and resume (Microsoft Windows ONLY; do not use for attestation as the values change on reboot) Microsoft Windows Server PCR 13 Boot Module Details This PCR remains static except major changes such as kernel module update, different device driver for different OEM servers, etc. (Microsoft Windows ONLY) Microsoft Windows Server PCR 14 Boot Authorities Used to record the Public keys of authorities that sign OS components. Expected not to change often. (Microsoft Windows ONLY) Microsoft Windows Server","title":"14.1.1.1  TPM 2.0"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1412-red-had-enterprise-linux","text":"","title":"14.1.2  Red Had Enterprise Linux"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14121-tpm-20","text":"PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image Initial Boot Block (Intel\u00ae BootGuard only) This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. (Intel\u00ae BootGuard only): Extends measurements based on the Intel\u00ae BootGuard profile configuration and production vs non-production ACM flags; ACM signature; BootGuard key manifest hash; Boot Policy Manifest Signature All PCR 7 Intel\u00ae BootGuard configuration and profiles Describes the success of the IBB measurement event. All (Intel\u00ae BootGuard only) PCR 17 ACM BIOS AC registration information Digest of Processor S-CRTM Digest of Policycontrol Digest of all matching elements used by the policy Digest of STM Digest of Capability field of OsSinitData Digest of MLE For TA hosts, this PCR includes measurements of the OS, InitRD, and UUID. This changes with every install due to InitRD and UUID change. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] Digest of public key modulus used to verify SINIT signature Digest of Processor S-CRTM Digest of Capability field of OSSinitData table Digest of PolicyControl field of used policy Digest of LCP VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Linux hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux","title":"14.1.2.1  TPM 2.0"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#1413-vmware-esxi","text":"","title":"14.1.3  VMWare ESXi"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14131-tpm-12","text":"PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Citrix Xen hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts and is blank for all other host types. VMware ESXi PCR 22 Asset Tag This PCR contains the measurement of the SHA1 of the Asset Tag Certificate provisioned to the TPM, if any. VMware ESXi","title":"14.1.3.1  TPM 1.2"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#14132-tpm-20","text":"VMWare supports TPM 2.0 with Intel TXT starting in vSphere 6.7 Update 1. Earlier versions will support TPM 1.2 only. PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as part of the PLATFORM flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi this PCR contains individual measurements of all of the non-Kernel modules \u2013 this includes all of the VIBs installed on the ESXi host. This is part of the OS flavor. Note that two ESXi hosts with the same version of ESXi installed may require different OS flavors if different VIBs are installed. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts for some host-specific measurements, and is part of the host-unique flavor. VMware ESXi PCR 22 Asset Tag Asset Tag is not currently supported for TPM 2.0 with ESXi. VMware ESXi","title":"14.1.3.2  TPM 2.0"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Datacenter%20Foundational%20Security/#a1-attestation-rules_1","text":"Platform TPM Flavor Type Rules to be verified Comments RHEL 2.0 HARDWARE PcrMatchesConstant rule for PCR 0 PcrEventLogIncludes rule for PCR 17 (LCP_DETAILS_HASH, BIOSAC_REG_DATA, OSSINITDATA_CAP_HASH, STM_HASH, MLE_HASH, NV_INFO_HASH, tb_policy, CPU_SCRTM_STAT, HASH_START, LCP_CONTROL_HASH) PcrEventLogIntegrity rule for PCR 17 Evaluation of PcrEventLogIncludes would not include initrd and vmlinuz modules. They would be handled in host_specific flavor. Evaluation of PcrEventLogIntegrity rule would also include OS modules (initrd & vmlinuz) OS PcrEventLogIntegrity rule for PCR 17 ASSET_TAG AssetTagMatches rule HOST_SPECIFIC PcrEventLogIncludes rule for PCR 17 (initrd & vmlinuz) VMware ESXi 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 PcrMatchesConstant rule for PCR 17 OS PcrMatchesConstant rule for PCR 18 PcrMatchesConstant rule for PCR 20 PcrEventLogEqualsExcluding rule for PCR 19 (excludes dynamic modules based on component name) PcrEventLogIntegrity rule for PCR 19 ASSET_TAG PcrMatchesConstant rule for PCR 22 VMware ESXi 2.0 NOT SUPPORTED Windows 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule Windows 2.0 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule AssetTagMatches rule needs to be updated to verify the key-value pairs after verifying the tag certificate.","title":"A.1  Attestation Rules"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/","text":"Intel\u00ae Security Libraries - Datacenter SGX Attestation Infrastructure and Secure Key Caching Product Guide January 2020 Revision 3.3.1 Notice: This document contains information on products in the design phase of development. The information here is subject to change without notice. Do not finalize a design with this information. Intel technologies\u2019 features and benefits depend on system configuration and may require enabled hardware, software, or service activation. Learn more at intel.com, or from the OEM or retailer. No computer system can be absolutely secure. Intel does not assume any liability for lost or stolen data or systems or any damages resulting from such losses. You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Intel products described herein. You agree to grant Intel a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications. Current characterized errata are available on request. This document contains information on products, services and/or processes in development. All information provided here is subject to change without notice. Contact your Intel representative to obtain the latest Intel product specifications and roadmaps. Intel disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. Warning: Altering PC clock or memory frequency and/or voltage may (i) reduce system stability and use life of the system, memory and processor; (ii) cause the processor and other system components to fail; (iii) cause reductions in system performance; (iv) cause additional heat or other damage; and (v) affect system data integrity. Intel assumes no responsibility that the memory, included if used with altered clock frequencies and/or voltages, will be fit for any particular purpose. Check with memory manufacturer for warranty and additional details. Tests document performance of components on a particular test, in specific systems. Differences in hardware, software, or configuration will affect actual performance. Consult other sources of information to evaluate performance as you consider your purchase. For more complete information about performance and benchmark results, visit http://www.intel.com/performance . Cost reduction scenarios described are intended as examples of how a given Intel- based product, in the specified circumstances and configurations, may affect future costs and provide cost savings. Circumstances will vary. Intel does not guarantee any costs or cost reduction. Results have been estimated or simulated using internal Intel analysis or architecture simulation or modeling, and provided to you for informational purposes. Any differences in your system hardware, software or configuration may affect your actual performance. Intel does not control or audit third-party benchmark data or the web sites referenced in this document. You should visit the referenced web site and confirm whether referenced data are accurate. Intel is a sponsor and member of the Benchmark XPRT Development Community, and was the major developer of the XPRT family of benchmarks. Principled Technologies is the publisher of the XPRT family of benchmarks. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases. Copies of documents which have an order number and are referenced in this document may be obtained by calling 1-800-548-4725 or by visiting w ww.intel.com/design/literature.htm. Intel, the Intel logo, Intel TXT, and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries. *Other names and brands may be claimed as the property of others. Copyright \u00a9 2020, Intel Corporation. All Rights Reserved. Revision History [[ TOC ]] 1 Introduction 1.1 Overview The SGX Attestation infrastructure and Secure Key Caching (SKC) are part of the Intel Security Libraries for datacenter (ISecL-DC). Intel Security Libraries for Datacenter is a collection of software applications and development libraries intended to help turn Intel platform security features into real-world security use cases. The SGX Attestation infrastructure provides an end to end support for registering SGX hosts and provisioning them with SGX material (PCK certificates) and SGX collateral (security patches information - TCB Information - and Certificate Revocation Lists - CRLs). The SGX Attestation infrastructure also provides support for generating SGX quotes for SGX enclaves hosted by workloads and verifying them by a remote attesting application. The remote attesting application can also use the SGX Attestation infrastructure to enforce enclave policies (like requiring a specific enclave signer). Optionally, the SGX Attestation Infrastructure allows to integrate with Cloud Orchestrators like Openstack and Kubernetes. SKC leverages the SGX Attestation Infrastructure to support the Secure Key Caching (SKC) use case.SKC provides the key protection at rest and in-use use case using the Intel Software Guard Extensions technology (SGX). SGX implements the Trusted Execution Environment (TEE) paradigm. Using the SKC Client -- a set of libraries -- applications can retrieve keys from the ISecL-DC Key Broker Service (KBS) and load them to an SGX-protected memory (called SGX enclave) in the application memory space. KBS performs the SGX enclave attestation to ensure that the application will store the keys in a genuine SGX enclave. Application keys are wrapped with an enclave public key by KBS prior to transferring to the application enclave. Consequently, application keys are protected from infrastructure admins, malicious applications and compromised HW/BIOS/OS/VMM. SKC does not require the refactoring of the application because it supports a standard PKCS#11 interface. Trusted Execution Environment A Trusted Execution Environment (TEE) provides a computer secure area where code and data can be loaded with the assurance that their confidentiality and integrity are protected. TEEs have various applications in areas where the confidentiality of the data and the integrity of the code are of the highest importance. One examples of a TEE usage is the protection of sensitive secrets like cryptographic keys and authentication strings. These secrets can be preserved within a TEE, ensuring that they never get exposed to software that is outside of the TEE. Operations involving these secrets can be performed within the TEE, removing the need to ever extract the secrets outside of the TEE. Another example is the processing of data with privacy concerns. This is often the case in financial, healthcare and artificial intelligence (AI) applications. Putting sensitive operations inside a TEE allows organizations to support business processes without compromising the privacy expectations of their customers. Intel Software Guard Extensions Intel Software Guard Extensions (SGX) is an Intel platform security feature that implements the TEE paradigm. A portion of RAM called EPC (Enclave Page Cache) is used by applications to load secure isolated areas called SGX enclaves. Code and data inside SGX enclaves are encrypted and only decrypted inside the Intel CPU. From the host application perspective, an SGX enclave looks like a dynamic library. Any part of the application that is not contained in an SGX enclave is considered untrusted while the SGX enclave is considered trusted. Communications between the untrusted part and the trusted part (the SGX enclave) of an application uses a special calls called ECALLS and call from the enclave to the untrusted part of the application use OCALLS. A signed claim called SGX quote can be generated for an enclave. The SGX quote may contain a measurement of the code and the data of the enclave. An SGX quote allows to prove to a remote verifier (relying party) that an application includes the expected SGX enclave. SGX ECDSA Attestation SGX ECDSA attestation is the process that allows an application (relying party) to verify that a remote piece of code and data that it's interacting with is contained in a genuine Intel SGX enclave. The remote enclave can generate a signed claim called an SGX quote. A valid SGX quote signature generated on an SGX enabled platform can be chained up to a trusted Intel signing key. The SGX quote contains the measurement of the enclave (MREnclave), the enclave developer's signature (MRSigner), the security patch level of the platform (Trusted Computing Base or TCB) and any user data that the enclave wants to include in the quote. Typically, the user data in an SGX quote contains the hash of the public key part of a public/private key pair generated inside the enclave. The public key is transferred along with the SGX quote to the relying party. The latter generates a Symmetric Wrapping Key (SWK) and wraps it with the public key of the enclave. The wrapped SWK is provisioned into the SGX enclave, which can unwrap it since it has the corresponding private key. The relying party can then provision secrets into the SGX enclave after wrapping them with the SWK. For an enclave to generate an SGX quote, a PCK certificate for the host platform must be obtained from Intel SGX Provisioning Certification Service (PCS). PCK Certificates Provisioning To generate an SGX quote for an enclave, a PCK certificate must be obtained from SGX Provisioning Certification Service (PCS). Requiring a workload to retrieve the PCK certificate from Intel PCS at the time of the SGX quote generation can be detrimental to the workload. Network connectivity issues can prevent the connection to Intel PCS. To remove the dependency on network connectivity, the PCK certificates of the data center platforms are fetched before running any workload. This is achieved by extracting SGX related information from the platform using the PCK ID Retrieval tool and pushing it to a Caching Service running in the same data center. The Caching Service then retrieves the PCK certificates of all the platforms that pushed SGX information to it from Intel PCS. Network connectivity issues are not a problem since the Caching Service can retry if needed. When an SGX workload needs its PCK certificate, it can just get it from the Caching Service. Key Protection Cryptographic keys are high value assets that must be protected against disclosure and corruption. Key disclosure or corruption expose the key owner to data confidentiality breaches, impersonation and denial of service. The industry has good solutions to protect keys at rest. A popular solution is to store keys in a central secure Key Management System (KMS), and applications retrieve them at runtime. However, this solution does not protect keys once they are in RAM and used to perform cryptographic operations. Keys in RAM can be disclosed because of software vulnerabilities like Heartbleed or because of memory snapshots. Therefore, keys are not protected in use. This concern can be addressed by having the application send the payload that needs cryptographic processing to the KMS where the processing happens instead. By doing this, the key is never exposed in RAM. However, this solution incurs an overhead caused by the network round trip to the KMS. Another solution is to store keys in Hardware Security Modules (HSMs) HSM A Hardware Security Module or HSM is a separate hardware part that can be attached to a server. HSMs provide APIs to create and load keys. HSMs also support APIs to perform cryptographic operations using keys stored inside them. The typical flow for using an HSM is to create or load a key in the HSM in a secure environment then take the HSM to the server where the workload runs and attach it to this server. The application then performs cryptographic operations using the key inside the HSM. This ensures that the key is never exposed in RAM. Therefore, HSMs protect keys both at rest and in-use. The drawback with HSMs is that they can be a costly hardware add-on to the server, and they require physical access to the server to get attached to it (via the USB port for example). Most HSMs support the PKCS#11 cryptographic programming interface. PKCS#11 PKCS#11 is the standard cryptographic programming interface supported by HSMs. The PKCS#11 interface is defined using a C-style definition, but many languages support bindings exist. Although applications can directly use the PKCS#11 programming interface, most applications use other cryptographic interfaces like openssl. Fortunately, openssl supports a PKCS#11 engine mechanism that converts openssl calls to PKCS#11calls. This allows applications written against the openssl cryptographic interface to use an HSM supporting the PKCS#11 interface without code change. Popular applications that use openssl but can still use an HSM to protect the key include Nginx and Apache. Features SGX Attestation Infrastructure The SGX Attestation Infrastructure allows to fetch PCK certificates and SGX collateral from Intel SGX Provisioning Certification Service (PCS). It makes the PCK certificates available to workloads that use the SKC Client, which allows them to generate SGX quotes. The SGX Attestation Infrastructure also includes components that perform the verification of SGX quotes. SGX Support in Orchestrators The SGX Attestation Infrastructure can optionally push the SGX information on compute nodes to cloud orchestrators so that SGX workloads (like SKC) can be scheduled on compute nodes that support SGX. Currently, the Kubernetes orchestrator is supported. Key Protection SKC leverages the SGX Attestation Infrastructure to protect keys in an SGX enclave at rest and in use. Applications use the SKC Client -- a set of libraries -- to retrieves keys at runtime from KBS. KBS performs an SGX enclave attestation. If the attestation is successful, KBS generates a Symmetric Wrapping Key (SWK), wraps it with the enclave public key and provisions it into the enclave, which can unwrap it since it has the corresponding private key. Application can then be provisioned into the SGX enclave after being wrapped with the SWK. Application keys are therefore never exposed to any software outside of the enclave. SGX Attestation Infrastructure and SKC Components The components documented in this section are used by the SGX Attestation Infrastructure and therefore by SKC, which leverages the SGX Attestation Infrastructure. Components that are exclusively used by SKC have (SKC Only) in the corresponding sub-section title. Certificate Management Service All the certificates used by SKC services and by the SGX Agent are issued by the Certificate Management Service (CMS). CMS has a root CA certificate and all the SKC services and the SGX Agent certificates chain up to the CMS root CA. CMS is an infrastructure service and is shared with other Intel\u00ae SecL-DC components. Authentication and Authorization Service The authentication and authorization for all SKC services and the SGX Agent are centrally managed by the Authentication and Authorization Service (AAS). AAS is an infrastructure service and is shared with other Intel\u00ae SecL-DC components. SGX Caching Service The SGX Caching Service (SCS) allows to retrieve the PCK certificates of the data center server platforms from Intel SGX Provisioning Certification Service (PCS). SCS retrieves also platform models collateral. The collateral consists of the security patches (TCBInfo) that have been issued for Intel platform models. Finally, SCS retrieves the Certificate Revocation Lists (CRLs). Since the Caching Service stores all the TCBInfo of all the platform models in the datacenter, the SGX Quote Verification Service (SQVS) uses it to determine the TCB status of the platforms in the data center. The SKC Client retrieves its PCK certificate from the Caching Service when it generates an SGX quote. SCS can be deployed in both Cloud Service Provider (CSP) and tenant environments. In the CSP environment, SCS is used to fetch PCK certificates for compute nodes in the data center. In the tenant environment, it's used to cache SGX collateral information used in verifying SGX quotes. SGX Host Verification Service The SGX Host Verification Service (SHVS) collects the SGX information of all the compute nodes in a data center using the SGX Agent. The SGX information consists of SGX discovery information (SGX supported, SGX enabled, FLC enabled and EPC memory size) and SGX platform hardware and software information (Manifest file/encPPID, CPU SVN, ISV SVN, QEID, QEIdentity, PCEID). SHVS pushes the SGX platform hardware and software information to the SGX Caching Service (SCS), which uses it to get the PCK certificates of the platform from Intel SGX Provisioning Certification Service (PCS). SHVS also uses SCS to determine if the platform is up to date on hardware and security patches (TCB). SGX Agent The SGX Agent resides on physical servers and reports on platform SGX-related information to the SGX Host Verification Service (SHVS). The SGX Agent supports 2 modes: orchestrator (default) and registration-only. In the registration-only mode, the compute nodes SGX information does not get pushed to orchestrators like Kubernetes. In both modes, the SGX attestation flow is supported. Integration Hub The Integration Hub (IHUB) allows to support SGX in Kubernetes and Open stack. IHUB pulls the list of hosts details from Kubernetes and then using the host information it pulls the SGX Data from SGX Host Verification Service and pushes it to Kubernetes. IHUB performs these steps on a regular basis so that the most recent SGX information about nodes is reflected in Kubernetes and Openstack. This integration allows Kubernetes and Openstack to schedule VMs and containers that need to run SGX workloads on compute nodes that support SGX. The SGX data that IHUB pushes to Kubernetes consists of SGX enabled/disabled, SGX supported/not supported, FLC enabled/not enabled, EPC memory size, TCB status up to date/not up to date and platform-data expiry time. Key Broker Service (SKC Only) The Key Broker Service (KBS) is typically deployed in the tenant environment, not the Cloud Service Provider (CSP) environment. KBS is effectively a policy compliance engine. Its job is to manage key transfer requests from SKC Clients, releasing keys only to those that meet policy requirements. A user admin can create and register keys in KBS. He can also create key policies and assign them to keys. A key policy specifies the conditions that the SKC Client must fulfill for keys that have the policy assigned to them to be released. Most of the information about an SKC Client is contained in the SGX quote that it sends to KBS. The SGX quote also contains a hash of the enclave's public key. KBS gets the public key along the quote so the hash in the quote allows to verify that the public key is genuine. If the SGX quote verification (attestation) is successful, KBS generates a Symmetric Wrapping Key (SWK), wraps it with the enclave public key and provisions it into the enclave, which can unwrap it since it has the corresponding private key. Application can then be provisioned into the SGX enclave after being wrapped with the SWK. Application keys are therefore never exposed to any software outside of the enclave. KBS is shared with other Intel\u00ae SecL-DC components. SGX Quote Verification Service The SGX Quote Verification Service (SQVS) is typically deployed in the tenant environment, not the Cloud Service Provider (CSP) environment. SQVS performs the verification of SGX quotes on behalf of KBS. SQVS determines if the SGX quote signature is valid. It also determines if the SGX quote has been generated on a platform that is up to date on security patches (TCB). For the latter, SQVS uses the SGX Caching Service, which caches the SGX collateral information about Intel platform models. SQVS also parses the SGX quote and extracts the entities and returns them to KBS, which can then make additional policy decisions based on the values of the theses entities. The Workload SGX Dependencies This is a set of dependencies needed by SGX workloads. The SKC Client (SKC Only) The SKC Client refers to a suite of libraries that applications that require key protection must link with. It's comprised of the SKC Library, which is an Intel\u00ae SecL-DC component and the Intel Crypto Toolkit. the SKC Client uses the workload SGX dependencies component. The SKC Library supports the PKCS#11 interface and is therefore considered as a PKCS#11 module from the host application perspective. The SKC Library uses Intel Crypto Toolkit to protect keys in an SGX enclave. When a key is requested by the host application, the SKC Library sends a request to the Key Broker Service (KBS) along with an SGX quote that is generated by the Crypto Toolkit. KBS releases the key after verifying the quote and evaluating the attributes contained in the quote. The key policy can also specify conditions that can't be verified with the SGX quote alone. The SKC Client is typically deployed inside a tenant VM or container. It can also be used on bare metal. In all these deployments, the underlying platform is typically owned by a Cloud Service Provider (CSP) and is considered untrusted. Definitions, Acronyms, and Abbreviation SKC -- Secure Key Caching SGX -- Software Guard Extension TEE -- Trusted Execution Environment HSM -- Hardware Security Module KBS -- Key Broker Service CSP -- Cloud Service Provider TEE -- Trusted Execution Environment PCS -- Provisioning Certification Service CRLs -- Certificate Revocation Lists AAS -- Authentication and Authorization Service SWK -- Symmetric Wrapping Key CRDs -- Custom Resource Definitions Architecture Overview As indicated in the Features section, SKC provides 3 features essentially: SGX Attestation Support: this is the feature that CSPs provide to tenants who need to run SGX workloads that require attestation. SGX Support in Orchestrators: this feature allows to discover SGX support in physical servers and related information: SGX supported. SGX enabled. Size of RAM reserved for SGX. It's called Enclave Page Cache (EPC). Flexible Launch Control enabled. Key Protection: this is the feature used by tenants using a CSP to run workloads with key protection requirements. The high-level architectures of these features are presented in the next sub-sections. SGX Attestation Support and SGX Support in Orchestrators The diagram below shows the infrastructure that CSPs need to deploy to support SGX attestation and optionally, integration with orchestrators (currently only Kubernetes is supported). The SGX Agent supports 2 modes: orchestrator (default) and registration-only. In the registration-only mode, the compute nodes SGX information does not get pushed to orchestrators like Kubernetes. In both modes, the SGX attestation flow is supported. In the orchestrator mode, the SGX Agent is registered to the SGX Host Verification Service (SHVS) at installation time. At runtime, SHVS pulls the SGX platform information from the SGX Agent, which gets the SGX information from the platform directly. SHVS then pushes the information to the SGX Caching Service (SCS), which uses it to get the PCK Certificate and other SGX collateral from the Intel SGX Provisioning Certification Service (PCS) and caches them locally. When a workload on the platform needs to generate an SGX Quote, it retrieves the PCK Certificate of the platform from SCS. In the orchestrator mode, the platform information is made available to Kubernetes via the SGX Hub (IHUB), which pulls it from SHVS and pushes it to the Kubernetes Master using Custom Resource Definitions (CRDs). In the registration-only mode, the SGX Agent pushes the SGX information directly to the SGX Caching Service and SHVS is not involved in the flow. PCK certificates are obtained and made available to workloads the same way as in the in the orchestrator mode. The SGX Quote Verification Service (SQVS) allows attesting applications to verify SGX quotes and extract the SGX quote attributes to verify compliance with a user-defined SGX enclave policy. SQVS uses the SGX Caching Service to retrieve SGX collateral needed to verify SGX quotes from the Intel SGX Provisioning Certification Service (PCS). SQVS typically runs in the the attesting application owner network environment. Typically, a separate instance of the SGX Caching Service is set setup in the attesting application owner network environment. The SGX Agent and the SGX services integrate with the Authentication and Authorization Service (AAS) and the Certificate Management Service (CMS). AAS and CMS are not represented on the diagram for clarity. Key Protection Key Protection leverages the SGX Attestation support and optionally, the SGX support in orchestrators. Key Protection is implemented by the SKC Client -- a set of libraries - which must be linked with a tenant workload, like Nginx, deployed in a CSP environment and the Key Broker Service (KBS) deployed in the tenant's enterprise environment. The SKC Client retrieves the keys needed by the workload from KBS after proving that the key can be protected in an SGX enclave as shown in the diagram below. Step 6 is optional (keys can be stored in KBS). Keys policies in step 2 are called Key Transfer Policies and are created by an Admin and assigned to Application keys. Intel\u00ae Security Libraries Installation Building from Source Intel\u00ae Security Libraries is distributed as open source code and must be compiled into installation binaries before installation. Instructions and sample scripts for building the Intel\u00ae SecL-DC components can be found here (Section 1 to 7) https://github.com/intel-secl/docs/blob/v3.3.1/develop/quick-start-guides/Quick%20Start%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching.md After the components have been built, the installation binaries can be found in the binaries directory created by the build scripts. For components written in GO (Authentication and Authorization Service, Certificate Management Service, SGXAgent, Integration HUB, Key Broker Service, SGX Caching Service, SGX Quote Verfication Service, SGX Host Verification Service): \\<servicename>/out/\\<servicename>.bin In addition, the build script will produce some sample database scripts that can be used during installation to setup postgres and create database. Install_pgdb: intel-secl/deployments/installer/install_pgdb.sh Install_pgscsdb: sgx-caching-service/out/install_pgscsdb.sh Install_pgshvsdb: sgx-hvs/out/install_pgshvsdb.sh Hardware Considerations Supported Hardware Intel\u00ae Xeon\u00ae SP products those support SGX BIOS Requirements Intel\u00ae SGX-TEM BIOS requirements are outlined in the latest Intel\u00ae SGX Platforms BIOS Writer's Guide Intel\u00ae SGX should be enabled in BIOS menu (Intel\u00ae SGX is Disabled by default on Ice Lake). Intel\u00ae SGX BIOS requirements include exposing Flexible Launch Control menu. OS Requirements (Intel\u00ae SGX does not supported on 32-bit OS): Linux*:\\ \u2022 RHEL 8.2 Recommended Service Layout The Intel\u00ae SecL-DC services can be installed in a variety of layouts, partially depending on the use cases desired and the OS of the server(s) to be protected. In general, the Intel\u00ae SecL-DC applications can be divided into management services that are deployed on the network on the management plane, and host or node components that must be installed on each protected server. Management services can typically be deployed anywhere with network access to all the protected servers. This could be a set of individual VMs per service; containers; or all installed on a single physical or virtual machine. Node components must be installed on each protected physical server. Typically, this is needed for Linux deployments. For a POC environment, all the management services can be installed on a single machine or VM. This Includes: Certificate Management Service (CMS) Authentication and Authorization Service (AAS) SGX Caching Service (SCS) SGX Host Verification Service (SHVS) Integration HUB (IHUB) Key Broker Service (KBS) with backend key management SGX Quote Verification Service (SQVS) SGX Agent & SKC Library needs to be installed on SGX Enabled Machine. The node components (SGX Agent) must be installed on each protected physical server: Using the provided Database Installation Script Install a sample Postgresql 11 database using the script provided in corresponding component. This script will automatically install the Postgresql database and client packages required. Create the iseclpgdb.env answer file: ISECL_PGDB_IP_INTERFACES=localhost ISECL_PGDB_PORT=5432 ISECL_PGDB_SAVE_DB_INSTALL_LOG=true ISECL_PGDB_CERT_DNS=localhost ISECL_PGDB_CERT_IP=127.0.0.1 ISECL_PGDB_DBNAME=aasdb ISECL_PGDB_USERNAME=aasdbuser ISECL_PGDB_USERPASSWORD=aasdbpassword Note that the values above assume that the database will be accessed locally. If the database server will be external to the Intel\u00ae SecL services, change these values to the hostname or FQDN and IP address where the client will access the database server. Provisioning the Database Each Intel\u00ae SecL service that uses a database (the Authentication and Authorization Service, the SGX host Verification Service, the SGX caching Service,) requires its own schema and access. The database must be created and initialized. Execute the install_pg(app name).sh script to configure the database. If a single shared database server will be used for each Intel\u00ae SecL service (for example, if all management plane services will be installed on a single VM), run the script multiple times, once for each service that requires a database. If separate database servers will be used (for example, if the management plane services will reside on separate systems and will use their own local database servers), execute the script on each server hosting a database. The database install scripts use default configuration AAS: install_pgdb.sh SCS: install_pgscsdb.sh SHVS: install_pgshvsdb.sh Note the dbusername and password will be taken from respective component environment files. Database Server TLS Certificate The database client for Intel\u00ae SecL services requires the database TLS certificate to authenticate communication with the database server. If the database server for a service is located on the same server that the service will run on, only the path to this certificate is needed. If the provided Postgres scripts are used, the certificate will be in /usr/local/pgsql/data/server.crt. If the database server will be run separately from the Intel\u00ae SecL service(s), the certificate will need to be copied from the database server to the service machine before installing the Intel\u00ae SecL services. The database client for Intel\u00ae SecL services will validate that the Subject Alternative Names in the database server's TLS certificate contain the hostname(s)/IP address(es) that the clients will use to access the database server. If configuring a database without using the provided scripts, ensure that these attributes are present in the database TLS certificate. Installing the Certificate Management Service Required For The CMS is REQUIRED for all use cases. Supported Operating System The Intel\u00ae Security Libraries Certificate Management Service supports Red Hat Enterprise Linux 8.2. Recommended Hardware 1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services Installation To install the Intel\u00ae SecL-DC Certificate Management Service: Copy the Certificate Management Service installation binary to the /root/ directory. Create the cms.env installation answer file for an unattended installation: AAS_TLS_SAN=\\< Comma-Separated list of IPs and hostnames for the AAS> AAS_API_URL=https://\\< Authentication and Authorization Service IP or Hostname>:8444/aas SAN_LIST=\\< Comma-Separated list of IP addresses and hostnames for the CMS> The SAN list will be used to authenticate the Certificate Signing Request from the AAS to the CMS. Only a CSR originating from a host matching the SAN list will be honored. Later, in the AAS authservice.env installation answer file, this same SAN list will be provided for the AAS installation. These lists must match and must be valid for IPs and/or hostnames used by the AAS system. The SAN list variables also accept the wildcards \"?\" (for single-character wildcards) and \"*\" (for multiple-character wildcards) to allow address ranges or multiple FQDNs. The AAS_API_URL represents the URL for the AAS that will exist after the AAS is installed. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Certificate Management Service. Execute the installer binary. ./cms-v3.3.1.bin When the installation completes, the Certificate Management Service is available. The services can be verified by running cms status from the command line. # cms status After installation is complete, the CMS will output a bearer token to the console. This token will be used with the AAS during installation to authenticate certificate requests to the CMS. If this token expires or otherwise needs to be recreated, use the following command: cms setup cms_auth_token --force In addition, the SHA384 digest of the CMS TLS certificate will be needed for installation of the remaining Intel\u00ae SecL services. The digest can be obtained using the following command: cms tlscertsha384 Installing the Authentication and Authorization Service Required For The AAS is REQUIRED for all use cases. Prerequisites The following must be completed before installing the Authentication and Authorization Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service database must be available Package Dependencies The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. A script (install_pgdb.sh) is provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation. Supported Operating Systems The Intel\u00ae Security Libraries Authentication and Authorization Service supports Red Hat Enterprise Linux 8.2. Recommended Hardware 1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services Installation Before AAS is installed, Database needs to be created. Use the following commands to install postgres and create AAS DB dnf -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm dnf module disable postgresql -y copy install_pgdb.sh and create_db.sh to /root/ directory ./install_pgdb.sh ./create_db.sh aasdb To install the AAS, a bearer token from the CMS is required. This bearer token is output at the end of the CMS installation. However, if a new token is needed, simply use the following command from the CMS command line: cms setup cms_auth_token --force Create the authservice.env installation answer file in /root/ directory as below: CMS_BASE_URL=https://< CMS IP or hostname>:8445/cms/v1/ CMS_TLS_CERT_SHA384=<CMS TLS certificate sha384> AAS_DB_SSLMODE=verify-full AAS_DB_HOSTNAME=<IP or hostname of database server> AAS_DB_PORT=<database port number; default is 5432> AAS_DB_NAME=<database name> AAS_DB_USERNAME=<database username> AAS_DB_PASSWORD=<database password> AAS_DB_SSLCERTSRC=<path to database TLS certificate; the default location is typically /usr/local/pgsql/data/server.crt> AAS_ADMIN_USERNAME=<username for AAS administrative user> AAS_ADMIN_PASSWORD=<password for AAS administrative user> AAS_JWT_TOKEN_DURATION_MINS=2880 SAN_LIST=<comma-separated list of IPs and hostnames for the AAS; this should match the value for the AAS_TLS_SAN in the cms.env file from the CMS installation> BEARER_TOKEN=<bearer token from CMS installation> Execute the AAS installer: ./authservice-v3.3.1.bin Note: the AAS_ADMIN credentials specified in this answer file will have administrator rights for the AAS and can be used to create other users, create new roles, and assign roles to users. Creating Users Before deployment is initiated, user account and roles must be generated for each component. Most of these accounts will be service users, used by the various Intel\u00ae SecL SKC services to work together. Creating these required users and roles is facilitated by the scripts in the corresponding components (Refer to dist/linux directory of each component) and needs to be executed before installation of each component. SCS: scs_aas_curl.sh SHVS: shvs_aas_curl.sh SQVS: sqvs_aas_curl.sh For Key Broker Service and Integration Hub User/Roles creation, Please refer to the appendix section for sample scripts The output of these scripts is a bearer-token which needs to be updated in the BEARER_TOKEN env variable in the corresponding component\u2019s env file. Installing the Caching Service Required For The SCS is REQUIRED for the following use cases. Prerequisites (CSP & Enterprise) The following must be completed before installing the SGX Caching Service The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available User needs to subscribe to Intel\\'s Provisioning Certificate Service to obtain an API Key The SGX Caching Service database must be available Package Dependencies The Intel\u00ae SecL-DC SGX Caching Service (SCS) requires a Postgresql 11 database. A script (install_pgscsdb.sh) is provided with the SCS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the SCS installation. Supported Operating System The Intel\u00ae Security Libraries SGX Caching Service supports Red Hat Enterprise Linux 8.2. Recommended Hardware 4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers. Internet connection is needed for connecting to Intel PCS Server. Installation Before SCS is installed, Database needs to be created. Use the following commands to install postgres and create SCS DB copy install_pgscsdb.sh to /root/ directory Open ~/iseclpgdb.env and update the ISECL_PGDB_DBNAME with SCS db name, ISECL_PGDB_USERNAME with SCS db username and ISECL_PGDB_USERPASSWORD with SCS db password ./install_pgscsdb.sh Copy the SCS installation binary to the /root/ directory. Create the scs.env installation answer file in /root/ directory as below: SCS_DB_USERNAME= SCS_DB_PASSWORD= SCS_DB_HOSTNAME= SCS_DB_PORT= SCS_DB_NAME= SCS_DB_SSLCERTSRC= INTEL_PROVISIONING_SERVER= INTEL_PROVISIONING_SERVER_API_KEY= SCS_REFRESH_HOURS= SCS_ADMIN_USERNAME= SCS_ADMIN_PASSWORD= CMS_BASE_URL=https:// :8445/cms/v1/ CMS_TLS_CERT_SHA384= AAS_API_URL=https:// :8444/aas RETRY_COUNT=3 WAIT_TIME=1 SAN_LIST= BEARER_TOKEN= BEARER_TOKEN above can be obtained from running scs_aas_curl.sh script below Execute scs_aas_curl.sh script to create SGX Caching Service user account and roles cd sgx-caching-service/dist/linux/ ./scs_aas_curl.sh Update the BEARER_TOKEN value in /root/scs.env file Execute the SCS installer binary: ./scs-v3.3.1.bin Installing the SGX Host Verification Service Required For The SGX Host Verification Service is REQUIRED in the default orchestrator SGX Agent mode. Prerequisites The following must be completed before installing the SGX Host Verification Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available The SGX Host Verification Service database must be available Package Dependencies The Intel\u00ae Security Libraries SGX Host Verification Service requires the following packages and their dependencies: Postgres* client and server 11.6 (server component optional if an external Postgres database is used) Golang packages If they are not already installed, the SGX Host Verification Service installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation. Supported Operating Systems The Intel\u00ae Security Libraries SGX Host Verification Service supports Red Hat Enterprise Linux 8.2. Recommended Hardware 4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers Installation Before SHVS is installed, Database needs to be created. Use the following commands to install postgres and create SHVS DB copy install_pgshvsdb.sh to /root/ directory Open ~/iseclpgdb.env and update the ISECL_PGDB_DBNAME with SHVS db name, ISECL_PGDB_USERNAME with SHVS db username and ISECL_PGDB_USERPASSWORD with SHVS db password ./install_pgshvsdb.sh To install the SGX Host Verification Service, follow these steps: Copy the SGX Host Verification Service installation binary to the /root/ directory. Create the shvs.env installation answer file in /root/ directory as below. A sample minimal shvs.env file is provided below. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the SGX Host Verification Service. SHVS_DB_HOSTNAME=<hostname or IP address to database server> SHVS_DB_USERNAME=<Database administrative username> SHVS_DB_PORT=<Database port, default is 5432> SHVS_DB_PASSWORD=<Database password> SHVS_DB_NAME=<Database schema> SHVS_ADMIN_USERNAME=<SGX Host Verification Service username> SHVS_ADMIN_PASSWORD=<SGX HostVerification Service password> CMS_TLS_CERT_SHA384=<Certificate Management Service TLS digest> SHVS_DB_SSLCERTSRC=/usr/local/pgsql/data/server.crt SHVS_SCHEDULER_TIMER=10 SHVS_HOST_PLATFORM_EXPIRY_TIME=4 SHVS_AUTO_REFRESH_TIMER=120 BEARER_TOKEN=<Installation token from AAS> AAS_API_URL=https://<Authentication and Authorization Service IP or Hostname>:8444/aas CMS_BASE_URL=https://<Certificate Management Service IP or Hostname>:8445/cms/v1/ SCS_BASE_URL=https://<SGX Caching Service IP or Hostname>:9000/scs/sgx/ SAN_LIST=<Comma-separated list of IP addresses and hostnames for the SHVS> BEARER_TOKEN above can be obtained from running shvs_aas_curl.sh script below Execute shvs_aas_curl.sh script to create SGX Host Verification Service user account and roles cd sgx-hvs/dist/linux/ ./shvs_aas_curl.sh Update the BEARER_TOKEN value in /root/shvs.env file Execute the installer binary. ./shvs-v3.3.1.bin When the installation completes, the SGX Host Verification Service is available. The service can be verified by running shvs status from the SGX Host Verification Service command line. # shvs status Installing the SGX Agent Required for The SGX Agent is REQUIRED for all use cases. The SGX Agent supports 2 modes: orchestrator (default) and registration-only. In the registration-only mode, the compute nodes SGX information does not get pushed to orchestrators like Kubernetes. In both modes, the SGX attestation flow is supported. In the orchestrator mode, SGX Agent is registered with SGX Host Verification Service (SHVS), which then pulls all SGX platform data. SHVS, in turn, pushes the data to the SGX Caching Service (SCS). In the registration-only mode, the SGX Agent pushes the SGX platform data directly to SCS and SHVS is not involved in the flow. Prerequisites The following must be completed before installing the SGX Agent: Certificate Management Service, Authentication and Authorization Service,SGX Caching Service and SGX Host Verification Service must be installed and available. Package Dependencies The Intel\u00ae Security Libraries SGX Agent Service requires the following packages and their dependencies: Golang packages Supported Operating Systems Red Hat Enterprise Linux 8.2. Recommended Hardware Intel\u00ae Xeon\u00ae SP (Ice Lake-SP) Installation Copy sgx_agent.tar sgx_agent.sha2 and agent_untar.sh to a directory on SGX Compute node ./agent_untar.sh Update the following in agent.conf - IP address for all the services - Certificate Management Service TLS digest value (CMS running on CSP system) ./deploy_sgx_agent.sh Installing the SQVS Required for SGX ECDSA Attestation / SGX Quote Verification by KBS Prerequisites The following must be completed before installing the SQVS: Certificate Management Service, Authentication and Authorization Service and SGX Caching Service must be installed and available. Package Dependencies The Intel\u00ae Security Libraries Quote Verification Service requires the following packages and their dependencies: Golang packages Supported Operating Systems Red Hat Enterprise Linux 8.2. Recommended Hardware 4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers Installation To install the SQVS Service, follow these steps: Copy the SQVS installation binary to the ~/root directory Create the sqvs.env installation answer file in /root/ directory as below A sample minimal sqvs.env file is provided below. For all configuration options and their descriptions, refer to the Configuration section on the SGX Quote Verification Service. SGX_TRUSTED_ROOT_CA_PATH=< Path where trusted root ca cert for PCS is stored, by default /tmp/trusted_rootca.pem > SCS_BASE_URL=https://< SCS IP or Hostname >:9000/scs/sgx/certification/v1 SQVS_USERNAME=< SGX Quote Verification Service username > SQVS_PASSWORD=< SGX Quote Verification Service password > CMS_TLS_CERT_SHA384=< Certificate Management Service TLS digest > BEARER_TOKEN=< Installation token > AAS_API_URL=https://< Authentication and Authorization Service IP or Hostname >:8444/aas CMS_BASE_URL=https://< Certificate Management Service IP or Hostname >:8445/cms/v1/ SAN_LIST=< *Comma-separated list of IP addresses and hostnames for the SQVS* > SQVS_NOSETUP=false SQVS_PORT=12000 SQVS_LOGLEVEL=info SQVS_INCLUDE_TOKEN=true BEARER_TOKEN above can be obtained from running sqvs_aas_curl.sh script below Execute sqvs_aas_curl.sh script to create SGX Verification Service user account and roles cd sgx-verification-service/dist/linux/ ./sqvs_aas_curl.sh Update the BEARER_TOKEN value in /root/sqvs.env file Execute the sqvs installer binary. sqvs-v3.3.1.bin When the installation completes, the SGX Quote Verification Service is available. The service can be verified by sqvs status from the sqvs command line. # sqvs status Setup K8S Cluster & Deploy Isecl-k8s-extensions Setup master and worker node for k8s. Worker node should be setup on SGX host machine. Master node can be any VM machine. Please note whatever hostname has been used on worker node while registering SGX_Agent with SHVS, use same node-name in join command. Once the master/worker setup is done, follow below steps: Untar packages and load docker images Copy tar output isecl-k8s-extensions-*.tar.gz from build VM binaries folder to /opt/ directory on the Master Node and extract the contents. cd /opt/ tar -xvzf isecl-k8s-extensions-*.tar.gz Load the docker images cd isecl-k8s-extensions docker load -i docker-isecl-controller-v*.tar docker load -i docker-isecl-scheduler-v*.tar Deploy isecl-controller Create hostattributes.crd.isecl.intel.com crd kubectl apply -f yamls/crd-1.17.yaml Check whether the crd is created kubectl get crds Deploy isecl-controller kubectl apply -f yamls/isecl-controller.yaml Check whether the isecl-controller is up and running kubectl get deploy -n isecl Create clusterrolebinding for ihub to get access to cluster nodes kubectl create clusterrolebinding isecl-clusterrole --clusterrole=system:node --user=system:serviceaccount:isecl:isecl Fetch token required for ihub installation and follow below steps to update ihub.env, kubectl get secrets -n isecl kubectl describe secret default-token-<name> -n isecl For IHUB installation, make sure to update below configuration in /root/binaries/env/ihub.env before installing ihub on CSP VM: Copy /etc/kubernetes/pki/apiserver.crt from master node to /root on CSP VM. Update KUBERNETES_CERT_FILE. Get k8s token in master, using above commands and update KUBERNETES_TOKEN Update the value of CRD name KUBERNETES_CRD=custom-isecl-sgx Deploy isecl-scheduler The isecl-scheduler default configuration is provided for common cluster support in isecl-scheduler.yaml. Variables HVS_IHUB_PUBLIC_KEY_PATH and SGX_IHUB_PUBLIC_KEY_PATH are by default set to default paths. Please use and set only required variables based on the use case. For example, if only sgx based attestation is required then remove/comment HVS_IHUB_PUBLIC_KEY_PATH variables. Install cfssl and cfssljson on Kubernetes Control Plane #Download cfssl to /usr/local/bin/ wget -O /usr/local/bin/cfssl http://pkg.cfssl.org/R1.2/cfssl_linux-amd64 chmod +x /usr/local/bin/cfssl #Download cfssljson to /usr/local/bin wget -O /usr/local/bin/cfssljson http://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 chmod +x /usr/local/bin/cfssljson Create tls key pair for isecl-scheduler service, which is signed by k8s apiserver.crt cd /opt/isecl-k8s-extensions/ chmod +x create_k8s_extsched_cert.sh ./create_k8s_extsched_cert.sh -n \"K8S Extended Scheduler\" -s \"<K8_MASTER_IP>\",\"<K8_MASTER_HOST>\" -c /etc/kubernetes/pki/ca.crt -k /etc/kubernetes/pki/ca.key After iHub deployment, copy /etc/ihub/ihub_public_key.pem from ihub to /opt/isecl-k8s-extensions/ directory on k8 master vm. Also, copy tls key pair generated in previous step to secrets directory. mkdir secrets cp /opt/isecl-k8s-extensions/server.key secrets/ cp /opt/isecl-k8s-extensions/server.crt secrets/ mv /opt/isecl-k8s-extensions/ihub_public_key.pem /opt/isecl-k8s-extensions/sgx_ihub_public_key.pem cp /opt/isecl-k8s-extensions/sgx_ihub_public_key.pem secrets/ Note: Prefix the attestation type for ihub_public_key.pem before copying to secrets folder. Create kubernetes secrets scheduler-secret for isecl-scheduler kubectl create secret generic scheduler-certs --namespace isecl --from-file=secrets Deploy isecl-scheduler kubectl apply -f yamls/isecl-scheduler.yaml Check whether the isecl-scheduler is up and running kubectl get deploy -n isecl Configure kube-scheduler to establish communication with isecl-scheduler Add scheduler-policy.json under kube-scheduler section, mountPath under container section and hostPath under volumes section in /etc/kubernetes/manifests/kube-scheduler.yaml as mentioned below spec: containers: - command: - kube-scheduler - --policy-config-file=/opt/isecl-k8s-extensions/scheduler-policy.json containers: volumeMounts: - mountPath: /opt/isecl-k8s-extensions/ name: extendedsched readOnly: true volumes: - hostPath: path: /opt/isecl-k8s-extensions/ type: name: extendedsched Note: Make sure to use proper indentation and don't delete existing mountPath and hostPath sections in kube-scheduler.yaml. Restart Kubelet which restart all the k8s services including kube base schedular systemctl restart kubelet Check if CRD Data is populated kubectl get -o json hostattributes.crd.isecl.intel.com Installing the Integration Hub Note: The Integration Hub is only required to integrate Intel\u00ae SecL with third-party scheduler services, such as Kubernetes. The Integration Hub is not required for usage models that do not require Intel\u00ae SecL security attributes to be pushed to an integration endpoint. Required For The Integration Hub is REQUIRED the default orchestrator SGX Agent mode. Prerequisites The Intel\u00ae Security Libraries Integration Hub can be run on a VM or on a bare-metal server. The Integration Hub may be installed on the same server (physical or VM) as the SGX Host Verification Service. SGX Caching Service must be installed and available. The SGX Host Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available Package Dependencies The Intel\u00ae SecL Integration Hub requires a number of packages and their dependencies: Golang packages If these are not already installed, the Integration Hub installer attempts to install these packages automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update your repository package lists before installation. Supported Operating Systems The Intel Security Libraries Integration Hub supports Red Hat Enterprise Linux 8.2. Recommended Hardware 1 vCPUs RAM: 2 GB 1 GB free space to install the Integration Hub (database and log space requirements are dependent on the number of managed servers). One network interface with network access to the SGX Host Verification Service. One network interface with network access to any integration endpoints (for example, OpenStack Nova). Installing the Integration Hub To install the SGX Integration Hub, follow these steps: Copy the Integration Hub installation binary to the /root/ directory. Create the ihub.env installation answer file in /root/ directory as below IHUB_SERVICE_USERNAME=< IHUB service user username > IHUB_SERVICE_PASSWORD=< IHUB service user password > ATTESTATION_SERVICE_URL=< https://< SHVS IP or Hostname >:13000/sgx-hvs/v1 ATTESTATION_TYPE=SGX CMS_TLS_CERT_SHA384=< CMS TLS digest > BEARER_TOKEN=< Installation token from AAS > AAS_API_URL=https://< AAS IP or Hostname >:8444/aas CMS_BASE_URL=https://< CMS IP or Hostname >:8445/cms/v1 POLL_INTERVAL_MINUTES=2 TLS_SAN_LIST=< comma separated list of IPs and hostnames for the IHUB > TENANT=< tenant-type e.g. KUBERNETES or OPENSTACK > # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL=< https://< Kubernetes IP >:6443/> KUBERNETES_CRD=custom-isecl-sgx KUBERNETES_TOKEN=< K8S token > KUBERNETES_CERT_FILE =< Path of Kubernetes master node certificate > # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_AUTH_URL=<OpenStack Keystone URL; typically http://openstack-ip:5000/> OPENSTACK_PLACEMENT_URL=<OpenStack Nova Placement API URL; typically http://openstack-ip:8778/> OPENSTACK_USERNAME=< OpenStack username > OPENSTACK_PASSWORD=< OpenStack password > Create Integrated Hub Service user account and Roles. A sample script is provided in the appendix section for reference Update the BEARER_TOKEN value in the ihub.env file Execute the installer binary. ./ihub-v3.3.1.bin Copy IHUB public key to the master node and restart kubelet. scp -r /etc/ihub/ihub_public_key.pem <master-node IP>:/opt/isecl-k8s-extensions/ systemctl restart kubelet Run this command to validate if the data has been pushed to CRD: kubectl get -o json hostattributes.crd.isecl.intel.com Run this command to validate that the labels have been populated: kubectl get nodes --show-labels. Sample labels: EPC-Memory=2.0GB,FLC-Enabled=true,SGX-Enabled=true,SGX-Supported=true,SgxTrustExpiry=2020-11-09T08.07.43Z,TCBUpToDate=true Create sample yml file for nginx workload and add SGX labels to it such as: apiVersion: v1 kind: Pod metadata: name: nginx labels: name: nginx spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: SGX-Enabled operator: In values: - \"true\" - key: EPC-Memory operator: In values: - \"2.0GB\" containers: - name: nginx image: nginx ports: - containerPort: 80 Validate if pod can be launched on the node. Run following commands: kubectl apply -f pod.yml kubectl get pods kubectl describe pods nginx Pod should be in running state and launched on the host as per values in pod.yml. Validate running below commands on sgx host: docker ps Integration with OpenStack OpenStack can now use \u201cTraits\u201d to provide qualitative data about Nova Compute hosts to establish Trait requirements. The Integration Hub continually push SGX data to the OpenStack Traits resources. This means OpenStack scheduler natively supports workload scheduling incorporating SGX Host information, including SGX enabled/disabled, SGX supported/not supported, FLC enabled/not enabled, EPC memory size, TCB status upto date/not. The OpenStack Placement Service will automatically attempt to place images with Trait requirements on compute nodes that have those Traits. NOTE: This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices. Setting Image Traits Image Traits define the policy for which Traits are required for that instance to be launched on a Nova Compute node.By setting these Traits to \u201crequired\u201d the OpenStack scheduler will require the same Traits to be present on a Nova Compute node in order to launch instances. To set the Image Traits for Intel SecL-DC,a specific naming convention is used. This naming convention will match the Traits that the Integration Hub will automatically push to OpenStack. Two types of Traits are currently supported \u2013 one Trait is used to require that the Compute Node must be SGX supported and the other Trait is used to require specific SGXkey/value pairs. Required Image trait for SGX Enabled Host: CUSTOM_ISECL_SGX_ENABLED_TRUE=required These Traits can be set using CLI commands for OpenStack Glance: openstack image set --property trait:CUSTOM_ISECL_SGX_ENABLED_TRUE=required <image name> To veiw the Traits that has been set: openstack image show List the set of resources mapped to the Openstack openstack resource provider list To view the traits enabled for the SGX Host: openstack resource provider trait list <uuid of the host which the openstack resoruce provider lists> Create the instances openstack server create --flavor tiny --image <image name> --net vmnet <vm instance name> Instances should be created and the status should be \"Active\". Instance should be launched successfully. openstack server list To remove a Trait that is not required for an Image: openstack image unset --property trait:CUSTOM_ISECL_SGX_ENABLED_TRUE openstack image unset --property trait:CUSTOM_ISECL_SGX_ENABLED_FALSE Scheduling Instances Once Trait requirements are set for Images and the Integration Hub is configured to push attributes to OpenStack, instances can be launched in OpenStack as normal. As long as the OpenStack Nova scheduler is used to schedule the workloads, only compliant Compute Nodes will be scheduled to run instances of controlled Images. NOTE: This control only applies to instances launched using the OpenStack scheduler and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general and Intel recommends following published OpenStack security best practices. Installing the Key Broker Service Required for The KBS is REQUIRED for - Storing Application Keys and Verifying the SGX Quote Prerequisites The following must be completed before installing the Key Broker: The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available Package Dependencies N/A Supported Operating Systems supports Red Hat Enterprise Linux 8.2. Recommended Hardware NA Installation Copy the Key Broker installation binary to the /root/ directory. Create the installation answer file kbs.env /root/ directory as below: KBS_SERVICE_USERNAME=< KBS service user username > KBS_SERVICE_PASSWORD=< KBS service user password > SERVER_PORT=9443 AAS_API_URL=https:// :8444/aas CMS_BASE_URL=https:// :8445/cms/v1/ SQVS_URL=https:// :12000/svs/v1 KEY_MANAGER=Directory ENDPOINT_URL= https://kbshostname:9443/v1 TLS_COMMON_NAME=\"KBS TLS Certificate\" SKC_CHALLENGE_TYPE=\"SGX\" CMS_TLS_CERT_SHA384= TLS_SAN_LIST= BEARER_TOKEN= BEARER_TOKEN above can be obtained form Step 3 below Create Key Broker Service user account and Roles. A sample script is provided in the appendix section for reference Execute the KBS installer. ./kbs-3.3.0.bin Installing the SKC Library Required For The SKC_Library enables secure transfer of application keys from KBS after performing SGX attestation. It stores the keys in the SGX enclave and performs crypto operations ensuring the keys are never exposed in use, at rest and in transit outside of enclave. Package Dependencies The Intel\u00ae Security Libraries SKC Library requires the following packages and their dependencies Openssl Curl Supported Operation System The Intel\u00ae Security Libraries SKC Library supports Red Hat Enterprise Linux 8.2. Recommended Hardware Icelake Server with SGX enabled in BIOS RAM: 8 GB 100 GB One network interface with network access to the Key Broker Installation Copy skc_library.tar skc_library.sha2 and skclib_untar.sh to a directory in SGX Compute node ./skclib_untar.sh Update the IP address for the services mentioned in skc_library.conf (SCS IP Should be set to CSP SCS IP) ./deploy_skc_library.sh Authentication Authentication is centrally managed by the Authentication and Authorization Service (AAS). This service uses a Bearer Token authentication method. This service also centralizes the creation of roles and users, allowing much easier management of users, passwords, and permissions across all Intel\u00ae SecL-DC services. To make an API request to an Intel\u00ae SecL-DC service, an authentication token is required. API requests must now include an Authorization header with a valid token The token is issued by AAS and expires after a set amount of time. This token may be used with any Intel\u00ae SecL-DC service and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for. The SKC solution involves AAS deployments for 2 different domains: the CSP domain and the tenant domain. There is no trust relationship between the 2 deployments. In SKC, the accounts of the SGX Services are created at install time. However, CSP admin users must obtain AAS tokens to invoke admin APIs in the SGX Host Verification Service (SHVS), the SGX Hub, the SGX Caching Service (SCS) and AAS. Similarly, the tenant admin needs AAS tokens to invoke Create, Read, Update and Delete (CRUD) APIs in KBS and admin APIs in AAS. The following sections present how to use AAS APIs to create tokens and manage users. Create Token To request a new token from the AAS: POST https://\\<AAS IP or hostname>:8444/aas/token { \\\"username\\\" : \\\"\\<username>\\\", \\\"password\\\" : \\\"\\<password>\\\" } The response will be a token that can be used in the Authorization header for other requests. The length of time for which the token will be valid is configured on the AAS using the key ~AAS_JWT_TOKEN_DURATION_MINS~ (in the installation answer file during installation) or aas.jwt.token.duration.mins (configured on the AAS after installation). In both cases the value is the length of time in minutes that issued tokens will remain valid before expiring. User Management Users in Intel\u00ae SecL-DC are centrally managed by the Authentication and Authorization Service (AAS). Any user may be assigned roles for any service, allowing user accounts to be fully defined by the tasks needed Username and Password Requirement Passwords have the following constraints: cannot be empty - ie must at least have one character maximum length of 255 characters Usernames have the following requirements: Format: username[\\@host_name[domain]] [\\@host_name[domain]] is optional username shall be minimum of 2 and maximum of 255 characters username allowed characters are alphanumeric, ., -, _ - but cannot start with -. Domain name must meet requirements of a host name or fully qualified internet host name (Update it relevant to SKC) Create User POST https://\\<IP or hostname of AAS>:8444/aas/users Authorization: Bearer \\<token> { \\\"username\\\" : \\\"\\<username>\\\", \\\"password\\\" : \\\"\\<password>\\\" } Search User GET https://\\<IP or hostname of AAS>:8444/aas/users?\\<parameter>=\\<value> Authorization: Bearer \\<token> Change User Password PATCH https://\\<IP or hostname of AAS>:8444/aas/users/changepassword { \\\"username\\\": \\\"\\<username>\\\", \\\"old_password\\\": \\\"\\<old_password>\\\", \\\"new_password\\\": \\\"\\<new_password>\\\", \\\"password_confirm\\\": \\\"\\<new_password>\\\" } Delete User DELETE https://\\<IP or hostname of AAS>:8444/aas/users/\\<User ID> Authorization: Bearer \\<token> Roles and Permission Permissions in Intel\u00ae SecL-DC are managed by Roles. Roles are a set of predefined permissions applicable to a specific service. Any number of Roles may be applied to a User. While new Roles can be created, each Intel\u00ae SecL service defines permissions that are applicable to specific predetermined Roles. This means that only pre-defined Roles will actually have any permissions. Role creation is intended to allow Intel\u00ae SecL-DC services to define their permissions while allowing role and user management to be centrally managed on the AAS. When a new service is installed, it will use the Role creation functions to define roles applicable for that service in the AAS. Create Roles POST https://\\<AAS IP or Hostname>:8444/aas/roles Authorization: Bearer \\<token> { \\\"service\\\": \\\"\\<Service name>\\\", \\\"name\\\": \\\"\\<Role Name>\\\". \"permissions\": [\\<array of permissions>] } Service field contains a minimum of 1 and maximum of 20 characters. Allowed characters are alphanumeric plus the special charecters -, _, @, ., , Name field contains a minimum of 1 and maximum of 40 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , Service and Name fields are mandatory Context field is optional and can contain up to 512 characters. Allowed characters are alphanumeric plus -, _, @, ., ,,=,;,:,* Permissions field is optional and allow up to a maximum of 512 characters. The Permissions array must a comma-separated list of permissions formatted as resource:action: Permissions required to execute specific API requests are listed with the API resource and method definitions in the API documentation. Search Roles GET https://\\<AAS IP or Hostname>:8444/aas/roles?\\<parameter>=\\<value> Authorization: Bearer \\<token> Search parameters supported: Service=\\<name of service> Name=\\<role name> Context=\\<context> contextContains=\\<partial \"context\" string> allContexts=\\<true or false> filter=false Delete Role DELETE https://\\<AAS IP or Hostname>:8444/aas/roles/\\<role ID> Authorization: Bearer \\<token> Assign Role to User POST https://\\<AAS IP or Hostname>:8444/aas/users/\\<user ID>/roles Authorization: Bearer \\<token> { \\\"role_ids\\\": [\\\"\\<comma-separated list of role IDs>\\\"] } List Roles Assigned to User GET https://\\<AAS IP or Hostname>:8444/aas/users/\\<user ID>/roles Authorization: Bearer \\<token> Remove Role from User DELETE https://\\<AAS IP or Hostname>:8444/aas/users/\\<user ID>/roles/\\<role ID> Authorization: Bearer \\<token> Role Definitions Following are the set of roles which are required during installation and runtime. Role Name Permissions Utility < SGX_AGENT:HostDataReader: > Used by the SHVS to retrieve platform data from SGX_Agent < CMS:CertApprover:CN=SGX_AGENT TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the SGX-AGENT to get TLS certificate from CMS < SHVS:HostRegistration: > Used by the SGX_Agent to register host to the SHVS < SHVS:HostsListReader: > Used by the IHUB to retrieve the list of hosts from SHVS < SHVS:HostDataReader: > Used by the IHUB to retrieve platform-data from SHVS < CMS:CertApprover:CN=SHVS TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the SHVS to retrieve TLS Certificate from CMS < CMS:CertApprover:CN=Integration HUB TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the IHUB to retrieve TLS Certificate from CMS < SCS:HostDataUpdater: > Used by the SHVS to push the platform-info to SCS < SCS:HostDataReader: > Used by the SHVS to retrieve the TCB status info from SCS < SCS:CacheManager: > Used by the SCS admin to refresh the platform info < CMS:CertApprover:CN=SCS TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the SCS to retrieve TLS Certificate from CMS < KBS:KeyTransfer:permissions=nginx,USA > Used by the SKC Library user for Key Transfer < CMS:CertApprover:CN=skcuser;CERTTYPE=TLS-Client> Used by the SKC Library user to retrieve TLS-Client Certificate from CMS < CMS:CertApprover:CN=KBS TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the KBS to retrieve TLS Certificate from CMS AAS: Administrator : :* Administrator role for the AAS only. Has all permissions for AAS resources, including the ability to create or delete users and roles AAS: RoleManager AAS: [roles:create: , roles:retrieve: , roles:search: , roles:delete: ] AAS role that allows all actions for Roles but cannot create or delete Users or assign Roles to Users. AAS: UserManager AAS: [users:create: , users:retrieve: , users:store: , users:search: , users:delete:*] AAS role with all permissions for Users but has no ability to create Roles or assign Roles to Users. AAS: UserRoleManager AAS: [user_roles:create: , user_roles:retrieve: , user_roles:search: , user_roles:delete: ] AAS role with permissions to assign Roles to Users but cannot create delete or modify Users or Roles. < SHVS:HostListManager:> Used by the SHVS admin to delete the hosts. < SQVS:QuoteVerifier: > Used by the KBS service user for quote verification Connection Strings Connection Strings define a remote API resource endpoint that will be used to communicate with the registered host for retrieving SGX information and another platform information. Connection Strings differ based on the type of host. SGX Agent The SGX Agent connection string connects directly to the SGX Agent on a given host. The SGX Host Verification Service will use a service account with the needed SGX Agent permissions to connect to the SGX Agent. Authentication has been centralized with the new Authentication and Authorization Service. SGX Features Provisioning Host Registration Host Registration creates a host record with connectivity details and other host information in the SGX host Verification Service database. This host record will be used by the SGX Host Verification Service to retrieve SGX information and platform values from the SGX Agent. SGX Agent Host Registration with SGX Agent The SGX Agent registers the host with an SGX Host Verification Service at the time of installation. Retrieving Current Host State Information Admin can get the host state information by calling this rest API. GET https://\\<hostname>:13000/sgx-hvs/v1/host-status Intel Security Libraries Configuration Settings SGX Host Verification Service Installation Answer File Options Key Sample Value Description CMS_BASE_URL https://< IP address or hostname for CMS >:8445/cms/v1/ Base URL of the CMS AAS_API_URL https://< IP address or hostname for AAS >:8444/aas Base URL of the AAS SCS_BASE_URL https://< IP or hostname of SCS >:9000/scs/sgx/ Base URL of SCS SHVS_DB_PORT 5432 Defines the port number for communication with the database server. By default, with a local database server installation, this port will be set to 5432. SHVS_DB_NAME pgshvsdb Defines the schema name of the database. If a remote database connection will be used, this schema must be created in the remote database before installing the SGX Host Verification Service SHVS_DB_USERNAME aasdbuser Username for accessing the database. If a remote database connection will be used, this user/password must be created and granted all permissions for the database schema before installing the SGX Host Verification Service. SHVS_DB_PASSWORD aasdbpassword Password for accessing the database. If a remote database connection will be used, this user/password must be created and granted all permissions for the database schema before installing the SGX Host Verification Service. SHVS_DB_HOSTNAME localhost Defines the database server IP address or hostname. This should be the loopback address for local database server installations but should be the IP address or hostname of the database server if a remote database will be used. SAN_LIST 127.0.0.1,localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service SHVS_ADMIN_USERNAME shvsuser@shvs Username for a new user to be created during installation. SHVS_ADMIN_PASSWORD shvspassword Password for the user to be created during installation. CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest> SHA384 hash of the CMS TLS certificate BEARER_TOKEN Installation token from AAS SHVS_PORT 13000 SGX Host Verification Service HTTP Port SHVS_SCHEDULER_TIMER 60 SHVS Scheduler timeout SHVS_HOST_PLATFORM_EXPIRY_TIME 4 SHVS Host Info Expiry time SHVS_AUTO_REFRESH_TIMER 120 SHVS Auto-refresh timeout Configuration Options The SGX Host Verification Service configuration in path /etc/shvs/config.yml. Command-Line Options The SGX Host Verification Service supports several command-line commands that can be executed only as the Root user: Syntax: shvs \\<command> Help shvs help Displays the list of available CLI commands. Start shvs start Starts the SGX Host Verification service Stop shvs stop Stops the SGX Host Verification service Status shvs status Reports whether the service is currently running. Uninstall shvs uninstall [--purge] Removes the service. Use --purge option to remove configuration directory(/etc/shvs/) Version shvs version Shows the version of the service. Directory Layout The SGX Host Verification Service installs by default to /opt/shvs with the following folders. Bin This folder contains executable scripts. 9.1.4.2 Dbscripts Contains database scripts. Other folders which are created during installation are: Configuration This folder /etc/shvs contains certificates, keys, and configuration files. Logs This folder contains log files: /var/log/shvs/ SGX Agent Installation Answer File Options Key Sample Value Description AAS_API_URL https://< AAS IP or Hostname>:8444/aas API URL for Authentication Authorization Service (AAS). CMS_BASE_URL https://< CMS IP or hostname>:8445/cms/v1/ API URL for Certificate Management Service (CMS). SHVS_BASE_URL https://< SHVS IP or hostname>:13000/sgx-hvs/v1/ The url used during setup to request information from SHVS. SGX_AGENT_USERNAME sgx_agent Name of the SGX_AGENT USER SGX_AGENT_PASSWORD password Password of SGX_AGENT user. BEARER_TOKEN JWT from AAS that contains \"install\" permissions needed to access ISecL services during provisioning and registration CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest> SHA384 Hash for verifying the CMS TLS certificate. SGX_PORT 11001 The port on which the SGX Agent service will listen. SGX_AGENT_MODE Orchestration SGX Agent will operate to work in conjuction with orchstrators like Kubernetes SGX_AGENT_NOSETUP false Skips setup during installation if set to true SAN_LIST 127.0.0.1, localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service Configuration Options - This is same as above. Command-Line Options sgx_agent \\<command> Available Commands help Show the help message. Version sgx_agent version Reports the version of the service. uninstall sgx_agent uninstall --purge start Start the SGX Agent service. sgx_agent start stop Stop the SGX Agent service. sgx_agent stop status Get the status of the SGX Agent Service. sgx_agent status Directory Layout Linux The Linux SGX Agent installs by default to /opt/sgx_agent, with the following subfolders: Bin Contains executables and scripts. Configuration Contains the config.yml configuration file. Integration Hub Installation Answer File Key sample Value Description AAS_API_URL https://< Authentication and Authorization Service IP or Hostname>:8444/aas Base URL for the AAS CMS_BASE_URL https://< Certificate Management Service IP or Hostname>:8445/cms/v1 Base URL for the CMS ATTESTATION_SERVICE_URL https://< SGX Host Verification Service IP or hostname>:13000/sgx-hvs/v1/ Base URL of SHVS ATTESTATION_TYPE SGX For SKC, Attestation Type is always SGX IHUB_SERVICE_USERNAME ihubuser@ihub Database username IHUB_SERVICE_PASSWORD ihubpassword Database password CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest> SHA384 digest of the CMS TLS certificate BEARER_TOKEN Installation token TENANT KUBERNETES Tenant Orchaestrator KUBERNETES_URL https://< Kubernetes Master Node IP or Hostname> :6443 Kubernetes Master node URL KUBERNETES_CRD custom-isecl-sgx CRD Name to be used TLS_SAN_LIST 127.0.0.1, localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. KUBERNETES_TOKEN Token from Kubernetes Master Node KUBERNETES_CERT_FILE /root/apiserver.crt Kubernetes server certificate path POLL_INTERVAL_MINUTES 2 IHUB Polling Interval in Minutes Configuration Options The Integration Hub configuration can be found in /etc/ihub/config.yml. Command-Line Options The Integrtion HUB supports several command-line commands that can be executed only as the Root user: Syntax: ihub \\<command> Available Commands Help ihub help Displays the list of available CLI commands Start ihub start Start the service Stop ihub stop stops the service Status ihub status Reports whether the service is currently running. Uninstall ihub uninstall [--purge] Removes the service. Use --purge option to remove configuration directory(/etc/ihub/) Version ihub version Reports the version of the service. Directory Layout Logs The Integration HUB installs by default to /opt/ihub with the following folders. Bin This folder contains executable scripts. Other folders which are created during installation are: Configuration This folder /etc/ihub/ contains certificates, keys, and configuration files. Logs This folder contains log files: /var/log/ihub/ Certificate Management Service Installation Answer File Options Key Sample Value Description CMS_PORT 8445 Default Port where Certificate Management Service Runs CMS_NOSETUP false Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. AAS_API_URL https://< AAS Hostname or IP address>:8444/aas/ URL to connect to the AAS, used during setup for authentication. AAS_TLS_SAN < Comma-separated list of IPs/hostnames for the AAS> SAN list populated in special JWT token; this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match. Configuration Options The CMS configuration can be found in /etc/cms/config.yml. Command-Line Options Help cms help Displays the list of available CLI commands. Start cms start Starts the services. Stop cms stop Stops the service. Status cms status Reports whether the service is currently running. Uninstall cms uninstall [--purge] Uninstalls the service, including the deletion of all files and folders. Version cms version Reports the version of the service. Tlscertsha384 cms tlscertsha384 Shows the SHA384 digest of the TLS certificate. setup [task] Runs a specific setup task. Available Tasks for setup: cms setup server [--port=\\<port>] Setup http server on \\<port> Environment variable CMS_PORT=\\<port> can be set alternatively cms setup root_ca [--force] Create its own self signed Root CA keypair in /etc/cms for quality of life Option [--force] overwrites any existing files, and always generate new Root CA keypair cms setup tls [--force] [--host_names=\\<host_names>] Create its own root_ca signed TLS keypair in /etc/cms for quality of life Option [--force] overwrites any existing files, and always generate root_ca signed TLS keypair Argument \\<host_names> is a list of host names used by local machine, seperated by comma Environment variable CMS_HOST_NAMES=\\<host_names> can be set alternatively cms setup cms_auth_token [--force] Create its own self signed JWT keypair in /etc/cms/jwt for quality of life Option [--force] overwrites any existing files, and always generate new JWT keypair and token Directory Layout The Certificate Management Service installs by default to /opt/cms with the following folders. Bin This folder contains executable scripts. Cacerts This folder contains the CMS root CA certificate. Authentication and Authorization Service Installation Answer File Options Key Sample Value Description CMS_BASE_URL https://< cms IP or hostname>/cms/v1/ Provides the URL for the CMS. AAS_NOSETUP false Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. AAS_DB_HOSTNAME localhost Hostname or IP address of the AAS database AAS_DB_PORT 5432 Database port number AAS_DB_NAME pgdb Database name AAS_DB_USERNAME aasdbuser Database username AAS_DB_PASSWORD aasdbpassd Database password AAS_DB_SSLMODE verify-full AAS_DB_SSLCERTSRC /usr/local/pgsql/data/server.crt Required if the \u201cAAS_DB_SSLMODE\u201d is set to \u201cverify-ca.\u201d Defines the location of the database SSL certificate. AAS_DB_SSLCERT < path_to_cert_file_on_system > The AAS_DB_SSLCERTSRC variable defines the source location of the database SSL certificate; this variable determines the local location. If the former option is used without specifying this option, the service will copy the SSL certificate to the default configuration directory. AAS_ADMIN_USERNAME admin@aas Defines a new AAS administrative user. This user will be able to create new users, new roles, and new role-user mappings. This user will have the AAS:Administrator role. AAS_ADMIN_PASSWORD aasAdminPass Password for the new AAS admin user AAS_JWT_CERT_SUBJECT \"AAS JWT Signing Certificate\" Defines the subject of the JWT signing certificate. AAS_JWT_TOKEN_DURATION 5 Defines the amount of time in minutes that an issued token will be valid. SAN_LIST 127.0.0.1,localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. BEARER_TOKEN Installation Token from AAS. Configuration Options The AAS configuration can be found in /etc/authservice/config.yml. Help Displays the list of available CLI commands. setup \\<task> Executes a specific setup task. Can be used to change the current configuration. Available Tasks for setup: authservice setup all Runs all setup tasks authservice setup database [-force] [-arguments=\\<argument_value>] Available arguments are: db-host alternatively, set environment variable AAS_DB_HOSTNAME db-port alternatively, set environment variable AAS_DB_PORT db-user alternatively, set environment variable AAS_DB_USERNAME db-pass alternatively, set environment variable AAS_DB_PASSWORD db-name alternatively, set environment variable AAS_DB_NAME db-sslmode \\<disable|allow|prefer|require|verify-ca|verify-full> alternatively, set environment variable AAS_DB_SSLMODE db-sslcert path to where the certificate file of database. Only applicable for db-sslmode=\\<verify-ca|verify-full. If left empty, the cert will be copied to /etc/authservice/tdcertdb.pem alternatively, set environment variable AAS_DB_SSLCERT db-sslcertsrc \\<path to where the database ssl/tls certificate file> mandatory if db-sslcert does not already exist alternatively, set environment variable AAS_DB_SSLCERTSRC Run this command with environment variable AAS_DB_REPORT_MAX_ROWS and AAS_DB_REPORT_NUM_ROTATIONS can update db rotation arguments authservice setup server [--port=\\<port>] Setup http server on \\<port> Environment variable AAS_PORT=\\<port> can be set alternatively authservice setup tls [--force] [--host_names=\\<host_names>] Use the key and certificate provided in /etc/threat-detection if files exist Otherwise create its own self-signed TLS keypair in /etc/authservice for quality of life Option [--force] overwrites any existing files, and always generate self-signed keypair Argument \\<host_names> is a list of host names used by local machine, seperated by comma Environment variable AAS_TLS_HOST_NAMES=\\<host_names> can be set alternatively authservice setup admin [--user=\\<username>] [-pass=\\<password>] Environment variable AAS_ADMIN_USERNAME=\\<username> can be set alternatively Environment variable AAS_ADMIN_PASSWORD=\\<password> can be set alternatively authservice setup jwt Create jwt signing key and jwt certificate signed by CMS Environment variable CMS_BASE_URL=\\<url> for CMS API url Environment variable AAS_JWT_CERT_CN=\\<CERTIFICATE SUBJECT> AAS JWT Certificate Subject Environment variable AAS_JWT_INCLUDE_KEYID=\\<KEY ID> AAS include key id in JWT Token Environment variable AAS_JWT_TOKEN_DURATION_MINS=\\<DURATION> JWT Token validation minutes Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS Start authservice start Starts the service. Status authservice status Displays the current status of the service. Stop authservice stop Stops the service. Uninstall authservice uninstall [--purge] Removes the service. Use the \"--purge\" flag to also delete all data. Version authservice version Shows the version of the service. Directory Layout The Authendication and Authorization Service installs by default to /opt/authservice with the following folders. Bin Contains executable scripts and binaries. Dbscripts Contains database scripts. Key Broker Service Installation Answer File Options Variable Name Default Value Notes CMS_BASE_URL https://< CMS IP or hostname >:8445/cms/v1/ Required for generating TLS certificate AAS_API_URL https://< AAS IP or hostname >:8444/aas AAS service url SQVS_URL https://< SQVS IP or hostname >:12000/svs/v1/ Required to get the SGX Quote verified CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest > SHA384 digest of CMS TLS certificate BEARER_TOKEN JWT token for installation user KBS_SERVICE_USERNAME admin@kms KBS Service Username KBS_SERVICE_PASSWORD kmsAdminPass KBS Service User Password ENDPOINT_URL https://kbshostname:9443/v1 KBS Endpoint URL TLS_COMMON_NAME KBS TLS Certificate KBS TLS Certificate common-name SERVER_PORT 9443 KBS Secure Port SKC_CHALLENGE_TYPE SGX Challenge Type TLS_SAN_LIST < KBS IP/Hostname > IP addresses/hostnames to be included in SAN list. KEY_MANAGER Directory Key Manager Backend to store keys Configuration Options Command-Line Options The Key Broker Service supports several command-line commands that can be executed only as the Root user: Syntax: kbs \\<command> Start kbs start Starts the service Status kbs status Displays the current status of the service. Stop kbs stop Stops the service Uninstall kbs uninstall [--purge] Removes the service Version kbs version Displays the version of the service Directory Layout The Key Broker Service installs by default to /opt/kbs with the following folders. Bin Contains executable scripts and binaries. SGX Caching Service Installation Answer File Options Key Sample Value Description CMS_BASE_URL https://< CMS IP or hostname >:8445/cms/v1/ CMS URL for Certificate Management Service AAS_API_URL https://< AAS IP or hostname >:8444/aas API URL for Authentication Authorization Service SCS_ADMIN_USERNAME scsuser@scs SCS Service username SCS_ADMIN_PASSWORD scspassword SCS Service password BEARER_TOKEN Installation Token from AAS CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest > SHA384 Hash sum for verifying the CMS TLS certificate. INTEL_PROVISIONING_SERVER https://sbx.api.trustedservices.intel.com/sgx/certification/v3 Intel pcs server url INTEL_PROVISIONING_SERVER_API_KEY < Add your API subscription key > Intel PCS Server API subscription key SCS_REFRESH_HOURS 1 hour Time after which the SGX collaterals in SCS db get refreshed from Intel PCS server RETRY_COUNT 3 Number Of times to connect to PCS if PCS service is not accessible WAIT_TIME 1 Number Of Seconds between retries to connect to PCS SCS_DB_HOSTNAME localhost SCS Databse hostname SCS_DB_PORT 5432 SCS Database port SCS_DB_NAME pgscsdb SCS Database name SCS_DB_USERNAME aasdbuser SCS Database username SCS_DB_PASSWORD aasdbpassword SCS Database password SCS_DB_SSLCERTSRC /usr/local/pgsql/data/server.crt SAN_LIST 127.0.0.1,localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. Configuration Options The SGX Caching Service configuration can be found in /etc/scs/config.yml. Command-Line Options Help Displays the list of available CLI commands. start scs start Starts the SGX Caching Service stop scs stop Stops the SGX Caching Service status scs status Reports whether the SGX Caching Service is currently running uninstall scs uninstall [--purge] uninstall the SGX Caching Service. --purge option needs to be applied to remove configuration files version scs version Reports the version of the scs Directory Layout The SGX Caching Service installs by default to /opt/scs with the following folders. Bin Contains SGX Caching Service executable binary. Dbscripts Contains database scripts SGX Quote Verification Installation Answer File Options Key Sample Value Description CMS_BASE_URL https://< CMS IP address or hostname >:8445/cms/v1/ Defines the base URL for the CMS owned by the image owner. Note that this CMS may be different from the CMS used for other components. AAS_API_URL https://< AAS IP address or hostname >:8444/aas Defines the baseurl for the AAS owned by the image owner. Note that this AAS may be different from the AAS used for other components. SCS_BASE_URL https://< SCS IP address or hostname >:9000/scs/sgx/certification/v1/ The SCS url is needed. SGX_TRUSTED_ROOT_CA_PATH /tmp/trusted_rootca.pem The path to SGX root ca used to verify quote CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest > SHA384 hash of the CMS TLS certificate BEARER_TOKEN Token from CMS with permissions used for installation. SQVS_LOG_LEVEL INFO (default), DEBUG Defines the log level for the SQVS. Defaults to INFO. SQVS_PASSWORD sqvsuser@sqvs Defines the credentials for the SQVS user SQVS_USERNAME sqvspassword Defines the credentials for the SQVS User SQVS_PORT 12000 SQVS Secure Port SQVS_NOSETUP false Skips setup during installation if set to true SAN_LIST 127.0.0.1,localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. SQVS_INCLUDE_TOKEN true If true, SQVS will authenticate KBS before Quote Verifiation Configuration Options The SGX Quote Verification Service configuration can be found in /etc/sqvs/config.yml. Command-Line Options The SGX Quote Verifiction Service supports several command-line commands: Syntax: sqvs \\<command> Help Displays the list of available CLI commands. start sqvs start Starts the SGX Quote Verification Service stop sqvs stop Stops the SGX Quote Verification Service status sqvs status Reports whether the SGX Quote Verification Service is currently running. uninstall sqvs uninstall [--purge] uninstalls the SGX Quote Verification Service. --purge option needs to be applied to remove configuration files version sqvs version Reports the version of the sqvs Uninstallation This section describes steps used for uninstalling Intel SecL-DC services. Certificate Management Service To uninstall the Certificate Management Service, run the following command: cms uninstall --purge Removes following directories: /opt/cms /run/cms /var/log/cms /etc/cms Authentication and Authorization Service To uninstall the Authentication and Authorization Service, run the following command: authservice uninstall --purge Removes following directories: /opt/authservice /run/authservice /var/log/authservice /etc/authservice SGX Host Verification Service To uninstall the SGX Host Verification Service, run the following command: shvs uninstall --purge Removes following directories: /opt/shvs /run/shvs /var/log/shvs /etc/shvs SGX_Agent To uninstall the SGX Agent, run the following command: sgx_agent uninstall --purge Removes following directories: /opt/sgx_agent /run/sgx_agent /var/log/sgx_agent /etc/sgx_agent Integration Hub To uninstall the Integration Hub, run the following command: ihub uninstall --purge Removes the following directories: /opt/ihub /run/ihub /var/log/ihub /etc/ihub SGX Caching Service To uninstall the SGX Caching Service , run the following command: scs uninstall --purge Removes the following directories: /opt/scs /run/scs /var/log/scs /etc/scs SGX Quote Verification Service To uninstall the SGX Quote Verification Service, run the following command: sqvs uninstall --purge Removes the following directories: /opt/sqvs /run/sqvs /var/log/sqvs /etc/sqvs Key Broker Service kbs uninstall --purge To uninstall the Key Broker Service , run the following command: Removes the following directories: /opt/kbs /run/kbs /var/log/kbs /etc/kbs SKC Library To uninstall the SKC Library, run the following command: ./opt/skc/devops/scripts/uninstall.sh Removes the following directories: /opt/skc isecl-k8s-extensions Cluster admin can uninstall the isecl-k8s-extensions by running following commands: kubectl delete svc isecl-scheduler-svc -n isecl kubectl delete deployment isecl-controller isecl-scheduler -n isecl kubectl delete crds hostattributes.crd.isecl.intel.com rm -rf /opt/isecl-k8s-extensions rm -rf /var/log/isecl-k8s-extensions Appendix Sample Shell script to create KBS user, KBS Roles and mapping KBS user to KBS roles and generating a KBS Token from AAS Sample Script to create Key Broker Service User account and roles #!/bin/bash echo \"Setting up Key Broker Service Related roles and user in AAS Database\" source ~/kbs.env 2> /dev/null aas_hostname=${AAS_API_URL:-\"https://<aas.server.com>:8444/aas\"} CURL_OPTS=\"-s -k\" CONTENT_TYPE=\"Content-Type: application/json\" ACCEPT=\"Accept: application/jwt\" red=`tput setaf 1` green=`tput setaf 2` reset=`tput sgr0` mkdir -p /tmp/kbs tmpdir=$(mktemp -d -p /tmp/kbs) dnf install -yq jq Bearer_token=`curl $CURL_OPTS -X POST $aas_hostname/token -d '{\"username\": \"admin@aas\", \"password\": \"aasAdminPass\" }'` # This routine checks if kbs user exists and returns user id # it creates a new user if one does not exist create_kbs_user() { cat > $tmpdir/user.json << EOF { \"username\":\"$KBS_SERVICE_USERNAME\", \"password\":\"$KBS_SERVICE_PASSWORD\" } EOF #check if kbs user already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/user_response.json -w \"%{http_code}\" $aas_hostname/users?name=$KBS_SERVICE_USERNAME > $tmpdir/user-response.status len=$(jq '. | length' < $tmpdir/user_response.json) if [ $len -ne 0 ]; then user_id=$(jq -r '.[0] .user_id' < $tmpdir/user_response.json) else curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/user.json -o $tmpdir/user_response.json -w \"%{http_code}\" $aas_hostname/users > $tmpdir/user_response.status local status=$(cat $tmpdir/user_response.status) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/user_response.json ]; then user_id=$(jq -r '.user_id' < $tmpdir/user_response.json) if [ -n \"$user_id\" ]; then echo \"${green} Created kbs user, id: $user_id ${reset}\" fi fi fi } # This routine checks if kbs CertApprover/Administrator/QuoteVerifier roles exist and returns those role ids # it creates above roles if not present in AAS db create_roles() { cat > $tmpdir/certroles.json << EOF { \"service\": \"CMS\", \"name\": \"CertApprover\", \"context\": \"CN=$TLS_COMMON_NAME;SAN=$TLS_SAN_LIST;CERTTYPE=TLS\" } EOF cat > $tmpdir/quoteverifyroles.json << EOF { \"service\": \"SQVS\", \"name\": \"QuoteVerifier\", \"context\": \"\" } EOF #check if CertApprover role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_response.json -w \"%{http_code}\" $aas_hostname/roles?name=CertApprover > $tmpdir/role_response.status cms_role_id=$(jq --arg SAN $TLS_SAN_LIST -r '.[] | select ( .context | ( contains(\"KBS\") and contains($SAN)))' < $tmpdir/role_response.json | jq -r '.role_id') if [ -z $cms_role_id ]; then curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/certroles.json -o $tmpdir/role_response.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_response-status.json local status=$(cat $tmpdir/role_response-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_response.json ]; then cms_role_id=$(jq -r '.role_id' < $tmpdir/role_response.json) fi fi # get admin role id admin_role_id=`curl $CURL_OPTS $aas_hostname/roles?name=Administrator -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" | jq -r '.[0].role_id'` #check if QuoteVerifier role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles?name=QuoteVerifier > $tmpdir/role_resp.status len=$(jq '. | length' < $tmpdir/role_resp.json) if [ $len -ne 0 ]; then sqvs_role_id=$(jq -r '.[0] .role_id' < $tmpdir/role_resp.json) else curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/quoteverifyroles.json -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_resp-status.json local status=$(cat $tmpdir/role_resp-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_resp.json ]; then sqvs_role_id=$(jq -r '.role_id' < $tmpdir/role_resp.json) fi fi ROLE_ID_TO_MAP=`echo \\\"$cms_role_id\\\",\\\"$admin_role_id\\\",\\\"$sqvs_role_id\\\"` } #Maps kbs user to CertApprover/Administrator/QuoteVerifier Roles mapUser_to_role() { cat >$tmpdir/mapRoles.json <<EOF { \"role_ids\": [$ROLE_ID_TO_MAP] } EOF curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/mapRoles.json -o $tmpdir/mapRoles_response.json -w \"%{http_code}\" $aas_hostname/users/$user_id/roles > $tmpdir/mapRoles_response-status.json local status=$(cat $tmpdir/mapRoles_response-status.json) if [ $status -ne 201 ]; then return 1 fi } KBS_SETUP_API=\"create_kbs_user create_roles mapUser_to_role\" status= for api in $KBS_SETUP_API do eval $api status=$? if [ $status -ne 0 ]; then break; fi done if [ $status -ne 0 ]; then echo \"${red} Key Broking Service user/roles creation failed.: $api ${reset}\" exit 1 else echo \"${green} Key Broking Service user/roles creation succeded ${reset}\" fi #Get Token for Key Broking Service user and configure it in kbs config. curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"$ACCEPT\" --data @$tmpdir/user.json -o $tmpdir/kbs_token-resp.json -w \"%{http_code}\" $aas_hostname/token > $tmpdir/get_kbs_token-response.status status=$(cat $tmpdir/get_kbs_token-response.status) if [ $status -ne 200 ]; then echo \"${red} Couldn't get bearer token for kbs user ${reset}\" else export BEARER_TOKEN=`cat $tmpdir/kbs_token-resp.json` echo \"************************************************************************************************************************************************\" echo $BEARER_TOKEN echo \"************************************************************************************************************************************************\" echo \"${green} copy the above token and paste it against BEARER_TOKEN in kbs.env ${reset}\" fi # cleanup rm -rf $tmpdir The printed token needs to be added in BEARER_TOKEN section in kbs.env Sample Script to Create Integrated Hub User account and Roles #!/bin/bash echo \"Setting up Integration Hub Service Related roles and user in AAS Database\" source ~/ihub.env 2> /dev/null aas_hostname=${AAS_API_URL:-\"https://<aas.server.com>:8444/aas\"} CN=\"Integration Hub TLS Certificate\" CURL_OPTS=\"-s -k\" CONTENT_TYPE=\"Content-Type: application/json\" ACCEPT=\"Accept: application/jwt\" red=`tput setaf 1` green=`tput setaf 2` reset=`tput sgr0` mkdir -p /tmp/ihub tmpdir=$(mktemp -d -p /tmp/ihub) dnf install -yq jq Bearer_token=`curl $CURL_OPTS -X POST $aas_hostname/token -d '{\"username\": \"admin@aas\", \"password\": \"aasAdminPass\" }'` # This routine checks if ihub user exists and returns user id # it creates a new user if one does not exist create_ihub_user() { cat > $tmpdir/user.json << EOF { \"username\":\"$IHUB_SERVICE_USERNAME\", \"password\":\"$IHUB_SERVICE_PASSWORD\" } EOF #check if ihub user already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/user_response.json -w \"%{http_code}\" $aas_hostname/users?name=$IHUB_SERVICE_USERNAME > $tmpdir/user-response.status len=$(jq '. | length' < $tmpdir/user_response.json) if [ $len -ne 0 ]; then user_id=$(jq -r '.[0] .user_id' < $tmpdir/user_response.json) else curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/user.json -o $tmpdir/user_response.json -w \"%{http_code}\" $aas_hostname/users > $tmpdir/user_response.status local status=$(cat $tmpdir/user_response.status) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/user_response.json ]; then user_id=$(jq -r '.user_id' < $tmpdir/user_response.json) if [ -n \"$user_id\" ]; then echo \"${green} Created ihub user, id: $user_id ${reset}\" fi fi fi } # This routine checks if ihub CertApprover/HostsListReader/HostDataReader roles exist and returns those role ids # it creates above roles if not present in AAS db create_roles() { cat > $tmpdir/certroles.json << EOF { \"service\": \"CMS\", \"name\": \"CertApprover\", \"context\": \"CN=$CN;SAN=$TLS_SAN_LIST;CERTTYPE=TLS\" } EOF cat > $tmpdir/hostlistreadroles.json << EOF { \"service\": \"SHVS\", \"name\": \"HostsListReader\", \"context\": \"\" } EOF cat > $tmpdir/hostdatareadroles.json << EOF { \"service\": \"SHVS\", \"name\": \"HostDataReader\", \"context\": \"\" } EOF #check if CertApprover role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_response.json -w \"%{http_code}\" $aas_hostname/roles?name=CertApprover > $tmpdir/role_response.status cms_role_id=$(jq --arg SAN $TLS_SAN_LIST -r '.[] | select ( .context | ( contains(\"Integration Hub\") and contains($SAN)))' < $tmpdir/role_response.json | jq -r '.role_id') if [ -z $cms_role_id ]; then curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/certroles.json -o $tmpdir/role_response.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_response-status.json local status=$(cat $tmpdir/role_response-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_response.json ]; then cms_role_id=$(jq -r '.role_id' < $tmpdir/role_response.json) fi fi #check if HostsListReader role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles?name=HostsListReader > $tmpdir/role_resp.status len=$(jq '. | length' < $tmpdir/role_resp.json) if [ $len -ne 0 ]; then ihub_role_id1=$(jq -r '.[0] .role_id' < $tmpdir/role_resp.json) else curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/hostlistreadroles.json -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_resp-status.json local status=$(cat $tmpdir/role_resp-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_resp.json ]; then ihub_role_id1=$(jq -r '.role_id' < $tmpdir/role_resp.json) fi fi #check if HostDataReader role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles?name=HostDataReader > $tmpdir/role_resp.status ihub_role_id2=$(jq -r '.[] | select ( .service | contains(\"SHVS\"))' < $tmpdir/role_resp.json | jq -r '.role_id') if [ -z $ihub_role_id2 ]; then curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/hostdatareadroles.json -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_resp-status.json local status=$(cat $tmpdir/role_resp-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_resp.json ]; then ihub_role_id2=$(jq -r '.role_id' < $tmpdir/role_resp.json) fi fi ROLE_ID_TO_MAP=`echo \\\"$cms_role_id\\\",\\\"$ihub_role_id1\\\",\\\"$ihub_role_id2\\\"` } #Maps ihub user to CertApprover/HostsListReader/HostDataReader Roles mapUser_to_role() { cat >$tmpdir/mapRoles.json <<EOF { \"role_ids\": [$ROLE_ID_TO_MAP] } EOF curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/mapRoles.json -o $tmpdir/mapRoles_response.json -w \"%{http_code}\" $aas_hostname/users/$user_id/roles > $tmpdir/mapRoles_response-status.json local status=$(cat $tmpdir/mapRoles_response-status.json) if [ $status -ne 201 ]; then return 1 fi } IHUB_SETUP_API=\"create_ihub_user create_roles mapUser_to_role\" status= for api in $IHUB_SETUP_API do eval $api status=$? if [ $status -ne 0 ]; then break; fi done if [ $status -ne 0 ]; then echo \"${red} Integration Hub Service user/roles creation failed.: $api ${reset}\" exit 1 else echo \"${green} Integration Hub Service user/roles creation succeded ${reset}\" fi #Get Token for Integration Hub Service user and configure it in ihub config. curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"$ACCEPT\" --data @$tmpdir/user.json -o $tmpdir/ihub_token-resp.json -w \"%{http_code}\" $aas_hostname/token > $tmpdir/get_ihub_token-response.status status=$(cat $tmpdir/get_ihub_token-response.status) if [ $status -ne 200 ]; then echo \"${red} Couldn't get bearer token for ihub user ${reset}\" else export BEARER_TOKEN=`cat $tmpdir/ihub_token-resp.json` echo \"************************************************************************************************************************************************\" echo $BEARER_TOKEN echo \"************************************************************************************************************************************************\" echo \"${green} copy the above token and paste it against BEARER_TOKEN in ihub.env ${reset}\" fi # cleanup rm -rf $tmpdir The printed token needs to be added in BEARER_TOKEN section in ihub.env Creating RSA Keys in Key Broker Service Configuration Update to create Keys in KBS On the Enterprise VM, where Key broker service is running cd /root/binaries/kbs_script Update KBS and AAS IP addresses in run.sh Update CACERT_PATH variable with trustedca certificate inside directory /etc/kbs/certs/trustedca/<id.pem>. Create RSA Key Execute the command ./run.sh reg copy the generated cert file to SGX compute node where skc_library is deployed. Also note down the the key id generated Configuration for NGINX testing Note: Below mentioned OpenSSL and NGINX configuration updates are provided as patches (nginx.patch and openssl.patch) as part of skc_library deployment script. OpenSSL Configuration Update openssl configuration file /etc/pki/tls/openssl.cnf with below changes: [openssl_def] engines = engine_section [engine_section] pkcs11 = pkcs11_section [pkcs11_section] engine_id = pkcs11 dynamic_path =/usr/lib64/engines-1.1/pkcs11.so MODULE_PATH =/opt/skc/lib/libpkcs11-api.so init = 0 Nginx Configuration Update nginx configuration file /etc/nginx/nginx.conf with below changes: ssl_engine pkcs11; Update the location of certificate with the location where it was copied into the SGX compute node. ssl_certificate \"add absolute path of crt file\"; Update the KeyID with the KeyID received when RSA key was generated in KBS ssl_certificate_key \"engine:pkcs11:pkcs11:token=KMS;id=164b41ae-be61-4c7c-a027-4a2ab1e5e4c4;object=RSAKEY;type=private;pin-value=1234\"; SKC Configuration Create keys.txt in /tmp folder. This provides key preloading functionality in skc_library. Any number of keys can be added in keys.txt. Each PKCS11 URL should contain different Key IDs which need to be transferred from KBS along with respective object tag for each key id specified Last PKCS11 url entry in keys.txt should match with the one in nginx.conf The keyID should match the keyID of RSA key created in KBS. Other contents should match with nginx.conf. File location should match on pkcs11-apimodule.ini; pkcs11:token=KMS;id=164b41ae-be61-4c7c-a027-4a2ab1e5e4c4;object=RSAKEY;type=private;pin-value=1234; Sample /opt/skc/etc/pkcs11-apimodule.ini file [core] preload_keys=/tmp/keys.txt keyagent_conf=/opt/skc/etc/key-agent.ini mode=SGX debug=true [SW] module=/usr/lib64/pkcs11/libsofthsm2.so [SGX] module=/opt/intel/cryptoapitoolkit/lib/libp11sgx.so KBS key-transfer flow validation On SGX compute node, Execute below commands for KBS key-transfer: pkill nginx Remove any existing pkcs11 token rm -rf /opt/intel/cryptoapitoolkit/tokens/* Initiate Key tranfer from KBS systemctl restart nginx Changing group ownership and permissions of pkcs11 token groupadd intel usermod -G intel nginx chown -R root:intel /opt/intel/cryptoapitoolkit/tokens/ chmod -R 770 /opt/intel/cryptoapitoolkit/tokens/ Establish tls session with the nginx using the key transferred inside the enclave wget https://localhost:2443 --no-check-certificate","title":"Intel\u00ae Security Libraries - Datacenter SGX Attestation Infrastructure and Secure Key Caching"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#intel-security-libraries-datacenter-sgx-attestation-infrastructure-and-secure-key-caching","text":"","title":"Intel\u00ae Security Libraries - Datacenter SGX Attestation Infrastructure and Secure Key Caching"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#product-guide","text":"","title":"Product Guide"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#january-2020","text":"","title":"January 2020"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#revision-331","text":"Notice: This document contains information on products in the design phase of development. The information here is subject to change without notice. Do not finalize a design with this information. Intel technologies\u2019 features and benefits depend on system configuration and may require enabled hardware, software, or service activation. Learn more at intel.com, or from the OEM or retailer. No computer system can be absolutely secure. Intel does not assume any liability for lost or stolen data or systems or any damages resulting from such losses. You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Intel products described herein. You agree to grant Intel a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications. Current characterized errata are available on request. This document contains information on products, services and/or processes in development. All information provided here is subject to change without notice. Contact your Intel representative to obtain the latest Intel product specifications and roadmaps. Intel disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. Warning: Altering PC clock or memory frequency and/or voltage may (i) reduce system stability and use life of the system, memory and processor; (ii) cause the processor and other system components to fail; (iii) cause reductions in system performance; (iv) cause additional heat or other damage; and (v) affect system data integrity. Intel assumes no responsibility that the memory, included if used with altered clock frequencies and/or voltages, will be fit for any particular purpose. Check with memory manufacturer for warranty and additional details. Tests document performance of components on a particular test, in specific systems. Differences in hardware, software, or configuration will affect actual performance. Consult other sources of information to evaluate performance as you consider your purchase. For more complete information about performance and benchmark results, visit http://www.intel.com/performance . Cost reduction scenarios described are intended as examples of how a given Intel- based product, in the specified circumstances and configurations, may affect future costs and provide cost savings. Circumstances will vary. Intel does not guarantee any costs or cost reduction. Results have been estimated or simulated using internal Intel analysis or architecture simulation or modeling, and provided to you for informational purposes. Any differences in your system hardware, software or configuration may affect your actual performance. Intel does not control or audit third-party benchmark data or the web sites referenced in this document. You should visit the referenced web site and confirm whether referenced data are accurate. Intel is a sponsor and member of the Benchmark XPRT Development Community, and was the major developer of the XPRT family of benchmarks. Principled Technologies is the publisher of the XPRT family of benchmarks. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases. Copies of documents which have an order number and are referenced in this document may be obtained by calling 1-800-548-4725 or by visiting w ww.intel.com/design/literature.htm. Intel, the Intel logo, Intel TXT, and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries. *Other names and brands may be claimed as the property of others. Copyright \u00a9 2020, Intel Corporation. All Rights Reserved. Revision History [[ TOC ]]","title":"Revision 3.3.1"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#1-introduction","text":"","title":"1 Introduction"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#11-overview","text":"The SGX Attestation infrastructure and Secure Key Caching (SKC) are part of the Intel Security Libraries for datacenter (ISecL-DC). Intel Security Libraries for Datacenter is a collection of software applications and development libraries intended to help turn Intel platform security features into real-world security use cases. The SGX Attestation infrastructure provides an end to end support for registering SGX hosts and provisioning them with SGX material (PCK certificates) and SGX collateral (security patches information - TCB Information - and Certificate Revocation Lists - CRLs). The SGX Attestation infrastructure also provides support for generating SGX quotes for SGX enclaves hosted by workloads and verifying them by a remote attesting application. The remote attesting application can also use the SGX Attestation infrastructure to enforce enclave policies (like requiring a specific enclave signer). Optionally, the SGX Attestation Infrastructure allows to integrate with Cloud Orchestrators like Openstack and Kubernetes. SKC leverages the SGX Attestation Infrastructure to support the Secure Key Caching (SKC) use case.SKC provides the key protection at rest and in-use use case using the Intel Software Guard Extensions technology (SGX). SGX implements the Trusted Execution Environment (TEE) paradigm. Using the SKC Client -- a set of libraries -- applications can retrieve keys from the ISecL-DC Key Broker Service (KBS) and load them to an SGX-protected memory (called SGX enclave) in the application memory space. KBS performs the SGX enclave attestation to ensure that the application will store the keys in a genuine SGX enclave. Application keys are wrapped with an enclave public key by KBS prior to transferring to the application enclave. Consequently, application keys are protected from infrastructure admins, malicious applications and compromised HW/BIOS/OS/VMM. SKC does not require the refactoring of the application because it supports a standard PKCS#11 interface.","title":"1.1 Overview"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#trusted-execution-environment","text":"A Trusted Execution Environment (TEE) provides a computer secure area where code and data can be loaded with the assurance that their confidentiality and integrity are protected. TEEs have various applications in areas where the confidentiality of the data and the integrity of the code are of the highest importance. One examples of a TEE usage is the protection of sensitive secrets like cryptographic keys and authentication strings. These secrets can be preserved within a TEE, ensuring that they never get exposed to software that is outside of the TEE. Operations involving these secrets can be performed within the TEE, removing the need to ever extract the secrets outside of the TEE. Another example is the processing of data with privacy concerns. This is often the case in financial, healthcare and artificial intelligence (AI) applications. Putting sensitive operations inside a TEE allows organizations to support business processes without compromising the privacy expectations of their customers.","title":"Trusted Execution Environment"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#intel-software-guard-extensions","text":"Intel Software Guard Extensions (SGX) is an Intel platform security feature that implements the TEE paradigm. A portion of RAM called EPC (Enclave Page Cache) is used by applications to load secure isolated areas called SGX enclaves. Code and data inside SGX enclaves are encrypted and only decrypted inside the Intel CPU. From the host application perspective, an SGX enclave looks like a dynamic library. Any part of the application that is not contained in an SGX enclave is considered untrusted while the SGX enclave is considered trusted. Communications between the untrusted part and the trusted part (the SGX enclave) of an application uses a special calls called ECALLS and call from the enclave to the untrusted part of the application use OCALLS. A signed claim called SGX quote can be generated for an enclave. The SGX quote may contain a measurement of the code and the data of the enclave. An SGX quote allows to prove to a remote verifier (relying party) that an application includes the expected SGX enclave.","title":"Intel Software Guard Extensions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-ecdsa-attestation","text":"SGX ECDSA attestation is the process that allows an application (relying party) to verify that a remote piece of code and data that it's interacting with is contained in a genuine Intel SGX enclave. The remote enclave can generate a signed claim called an SGX quote. A valid SGX quote signature generated on an SGX enabled platform can be chained up to a trusted Intel signing key. The SGX quote contains the measurement of the enclave (MREnclave), the enclave developer's signature (MRSigner), the security patch level of the platform (Trusted Computing Base or TCB) and any user data that the enclave wants to include in the quote. Typically, the user data in an SGX quote contains the hash of the public key part of a public/private key pair generated inside the enclave. The public key is transferred along with the SGX quote to the relying party. The latter generates a Symmetric Wrapping Key (SWK) and wraps it with the public key of the enclave. The wrapped SWK is provisioned into the SGX enclave, which can unwrap it since it has the corresponding private key. The relying party can then provision secrets into the SGX enclave after wrapping them with the SWK. For an enclave to generate an SGX quote, a PCK certificate for the host platform must be obtained from Intel SGX Provisioning Certification Service (PCS).","title":"SGX ECDSA Attestation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#pck-certificates-provisioning","text":"To generate an SGX quote for an enclave, a PCK certificate must be obtained from SGX Provisioning Certification Service (PCS). Requiring a workload to retrieve the PCK certificate from Intel PCS at the time of the SGX quote generation can be detrimental to the workload. Network connectivity issues can prevent the connection to Intel PCS. To remove the dependency on network connectivity, the PCK certificates of the data center platforms are fetched before running any workload. This is achieved by extracting SGX related information from the platform using the PCK ID Retrieval tool and pushing it to a Caching Service running in the same data center. The Caching Service then retrieves the PCK certificates of all the platforms that pushed SGX information to it from Intel PCS. Network connectivity issues are not a problem since the Caching Service can retry if needed. When an SGX workload needs its PCK certificate, it can just get it from the Caching Service.","title":"PCK Certificates Provisioning"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#key-protection","text":"Cryptographic keys are high value assets that must be protected against disclosure and corruption. Key disclosure or corruption expose the key owner to data confidentiality breaches, impersonation and denial of service. The industry has good solutions to protect keys at rest. A popular solution is to store keys in a central secure Key Management System (KMS), and applications retrieve them at runtime. However, this solution does not protect keys once they are in RAM and used to perform cryptographic operations. Keys in RAM can be disclosed because of software vulnerabilities like Heartbleed or because of memory snapshots. Therefore, keys are not protected in use. This concern can be addressed by having the application send the payload that needs cryptographic processing to the KMS where the processing happens instead. By doing this, the key is never exposed in RAM. However, this solution incurs an overhead caused by the network round trip to the KMS. Another solution is to store keys in Hardware Security Modules (HSMs)","title":"Key Protection"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#hsm","text":"A Hardware Security Module or HSM is a separate hardware part that can be attached to a server. HSMs provide APIs to create and load keys. HSMs also support APIs to perform cryptographic operations using keys stored inside them. The typical flow for using an HSM is to create or load a key in the HSM in a secure environment then take the HSM to the server where the workload runs and attach it to this server. The application then performs cryptographic operations using the key inside the HSM. This ensures that the key is never exposed in RAM. Therefore, HSMs protect keys both at rest and in-use. The drawback with HSMs is that they can be a costly hardware add-on to the server, and they require physical access to the server to get attached to it (via the USB port for example). Most HSMs support the PKCS#11 cryptographic programming interface.","title":"HSM"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#pkcs11","text":"PKCS#11 is the standard cryptographic programming interface supported by HSMs. The PKCS#11 interface is defined using a C-style definition, but many languages support bindings exist. Although applications can directly use the PKCS#11 programming interface, most applications use other cryptographic interfaces like openssl. Fortunately, openssl supports a PKCS#11 engine mechanism that converts openssl calls to PKCS#11calls. This allows applications written against the openssl cryptographic interface to use an HSM supporting the PKCS#11 interface without code change. Popular applications that use openssl but can still use an HSM to protect the key include Nginx and Apache.","title":"PKCS#11"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#features","text":"","title":"Features"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-attestation-infrastructure","text":"The SGX Attestation Infrastructure allows to fetch PCK certificates and SGX collateral from Intel SGX Provisioning Certification Service (PCS). It makes the PCK certificates available to workloads that use the SKC Client, which allows them to generate SGX quotes. The SGX Attestation Infrastructure also includes components that perform the verification of SGX quotes.","title":"SGX Attestation Infrastructure"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-support-in-orchestrators","text":"The SGX Attestation Infrastructure can optionally push the SGX information on compute nodes to cloud orchestrators so that SGX workloads (like SKC) can be scheduled on compute nodes that support SGX. Currently, the Kubernetes orchestrator is supported.","title":"SGX Support in Orchestrators"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#key-protection_1","text":"SKC leverages the SGX Attestation Infrastructure to protect keys in an SGX enclave at rest and in use. Applications use the SKC Client -- a set of libraries -- to retrieves keys at runtime from KBS. KBS performs an SGX enclave attestation. If the attestation is successful, KBS generates a Symmetric Wrapping Key (SWK), wraps it with the enclave public key and provisions it into the enclave, which can unwrap it since it has the corresponding private key. Application can then be provisioned into the SGX enclave after being wrapped with the SWK. Application keys are therefore never exposed to any software outside of the enclave.","title":"Key Protection"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-attestation-infrastructure-and-skc-components","text":"The components documented in this section are used by the SGX Attestation Infrastructure and therefore by SKC, which leverages the SGX Attestation Infrastructure. Components that are exclusively used by SKC have (SKC Only) in the corresponding sub-section title.","title":"SGX Attestation Infrastructure and SKC Components"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#certificate-management-service","text":"All the certificates used by SKC services and by the SGX Agent are issued by the Certificate Management Service (CMS). CMS has a root CA certificate and all the SKC services and the SGX Agent certificates chain up to the CMS root CA. CMS is an infrastructure service and is shared with other Intel\u00ae SecL-DC components.","title":"Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authentication-and-authorization-service","text":"The authentication and authorization for all SKC services and the SGX Agent are centrally managed by the Authentication and Authorization Service (AAS). AAS is an infrastructure service and is shared with other Intel\u00ae SecL-DC components.","title":"Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-caching-service","text":"The SGX Caching Service (SCS) allows to retrieve the PCK certificates of the data center server platforms from Intel SGX Provisioning Certification Service (PCS). SCS retrieves also platform models collateral. The collateral consists of the security patches (TCBInfo) that have been issued for Intel platform models. Finally, SCS retrieves the Certificate Revocation Lists (CRLs). Since the Caching Service stores all the TCBInfo of all the platform models in the datacenter, the SGX Quote Verification Service (SQVS) uses it to determine the TCB status of the platforms in the data center. The SKC Client retrieves its PCK certificate from the Caching Service when it generates an SGX quote. SCS can be deployed in both Cloud Service Provider (CSP) and tenant environments. In the CSP environment, SCS is used to fetch PCK certificates for compute nodes in the data center. In the tenant environment, it's used to cache SGX collateral information used in verifying SGX quotes.","title":"SGX Caching Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-host-verification-service","text":"The SGX Host Verification Service (SHVS) collects the SGX information of all the compute nodes in a data center using the SGX Agent. The SGX information consists of SGX discovery information (SGX supported, SGX enabled, FLC enabled and EPC memory size) and SGX platform hardware and software information (Manifest file/encPPID, CPU SVN, ISV SVN, QEID, QEIdentity, PCEID). SHVS pushes the SGX platform hardware and software information to the SGX Caching Service (SCS), which uses it to get the PCK certificates of the platform from Intel SGX Provisioning Certification Service (PCS). SHVS also uses SCS to determine if the platform is up to date on hardware and security patches (TCB).","title":"SGX Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-agent","text":"The SGX Agent resides on physical servers and reports on platform SGX-related information to the SGX Host Verification Service (SHVS). The SGX Agent supports 2 modes: orchestrator (default) and registration-only. In the registration-only mode, the compute nodes SGX information does not get pushed to orchestrators like Kubernetes. In both modes, the SGX attestation flow is supported.","title":"SGX Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#integration-hub","text":"The Integration Hub (IHUB) allows to support SGX in Kubernetes and Open stack. IHUB pulls the list of hosts details from Kubernetes and then using the host information it pulls the SGX Data from SGX Host Verification Service and pushes it to Kubernetes. IHUB performs these steps on a regular basis so that the most recent SGX information about nodes is reflected in Kubernetes and Openstack. This integration allows Kubernetes and Openstack to schedule VMs and containers that need to run SGX workloads on compute nodes that support SGX. The SGX data that IHUB pushes to Kubernetes consists of SGX enabled/disabled, SGX supported/not supported, FLC enabled/not enabled, EPC memory size, TCB status up to date/not up to date and platform-data expiry time.","title":"Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#key-broker-service-skc-only","text":"The Key Broker Service (KBS) is typically deployed in the tenant environment, not the Cloud Service Provider (CSP) environment. KBS is effectively a policy compliance engine. Its job is to manage key transfer requests from SKC Clients, releasing keys only to those that meet policy requirements. A user admin can create and register keys in KBS. He can also create key policies and assign them to keys. A key policy specifies the conditions that the SKC Client must fulfill for keys that have the policy assigned to them to be released. Most of the information about an SKC Client is contained in the SGX quote that it sends to KBS. The SGX quote also contains a hash of the enclave's public key. KBS gets the public key along the quote so the hash in the quote allows to verify that the public key is genuine. If the SGX quote verification (attestation) is successful, KBS generates a Symmetric Wrapping Key (SWK), wraps it with the enclave public key and provisions it into the enclave, which can unwrap it since it has the corresponding private key. Application can then be provisioned into the SGX enclave after being wrapped with the SWK. Application keys are therefore never exposed to any software outside of the enclave. KBS is shared with other Intel\u00ae SecL-DC components.","title":"Key Broker Service (SKC Only)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-quote-verification-service","text":"The SGX Quote Verification Service (SQVS) is typically deployed in the tenant environment, not the Cloud Service Provider (CSP) environment. SQVS performs the verification of SGX quotes on behalf of KBS. SQVS determines if the SGX quote signature is valid. It also determines if the SGX quote has been generated on a platform that is up to date on security patches (TCB). For the latter, SQVS uses the SGX Caching Service, which caches the SGX collateral information about Intel platform models. SQVS also parses the SGX quote and extracts the entities and returns them to KBS, which can then make additional policy decisions based on the values of the theses entities.","title":"SGX Quote Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#the-workload-sgx-dependencies","text":"This is a set of dependencies needed by SGX workloads.","title":"The Workload SGX Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#the-skc-client-skc-only","text":"The SKC Client refers to a suite of libraries that applications that require key protection must link with. It's comprised of the SKC Library, which is an Intel\u00ae SecL-DC component and the Intel Crypto Toolkit. the SKC Client uses the workload SGX dependencies component. The SKC Library supports the PKCS#11 interface and is therefore considered as a PKCS#11 module from the host application perspective. The SKC Library uses Intel Crypto Toolkit to protect keys in an SGX enclave. When a key is requested by the host application, the SKC Library sends a request to the Key Broker Service (KBS) along with an SGX quote that is generated by the Crypto Toolkit. KBS releases the key after verifying the quote and evaluating the attributes contained in the quote. The key policy can also specify conditions that can't be verified with the SGX quote alone. The SKC Client is typically deployed inside a tenant VM or container. It can also be used on bare metal. In all these deployments, the underlying platform is typically owned by a Cloud Service Provider (CSP) and is considered untrusted.","title":"The SKC Client (SKC Only)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#definitions-acronyms-and-abbreviation","text":"SKC -- Secure Key Caching SGX -- Software Guard Extension TEE -- Trusted Execution Environment HSM -- Hardware Security Module KBS -- Key Broker Service CSP -- Cloud Service Provider TEE -- Trusted Execution Environment PCS -- Provisioning Certification Service CRLs -- Certificate Revocation Lists AAS -- Authentication and Authorization Service SWK -- Symmetric Wrapping Key CRDs -- Custom Resource Definitions","title":"Definitions, Acronyms, and Abbreviation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#architecture-overview","text":"As indicated in the Features section, SKC provides 3 features essentially: SGX Attestation Support: this is the feature that CSPs provide to tenants who need to run SGX workloads that require attestation. SGX Support in Orchestrators: this feature allows to discover SGX support in physical servers and related information: SGX supported. SGX enabled. Size of RAM reserved for SGX. It's called Enclave Page Cache (EPC). Flexible Launch Control enabled. Key Protection: this is the feature used by tenants using a CSP to run workloads with key protection requirements. The high-level architectures of these features are presented in the next sub-sections.","title":"Architecture Overview"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-attestation-support-and-sgx-support-in-orchestrators","text":"The diagram below shows the infrastructure that CSPs need to deploy to support SGX attestation and optionally, integration with orchestrators (currently only Kubernetes is supported). The SGX Agent supports 2 modes: orchestrator (default) and registration-only. In the registration-only mode, the compute nodes SGX information does not get pushed to orchestrators like Kubernetes. In both modes, the SGX attestation flow is supported. In the orchestrator mode, the SGX Agent is registered to the SGX Host Verification Service (SHVS) at installation time. At runtime, SHVS pulls the SGX platform information from the SGX Agent, which gets the SGX information from the platform directly. SHVS then pushes the information to the SGX Caching Service (SCS), which uses it to get the PCK Certificate and other SGX collateral from the Intel SGX Provisioning Certification Service (PCS) and caches them locally. When a workload on the platform needs to generate an SGX Quote, it retrieves the PCK Certificate of the platform from SCS. In the orchestrator mode, the platform information is made available to Kubernetes via the SGX Hub (IHUB), which pulls it from SHVS and pushes it to the Kubernetes Master using Custom Resource Definitions (CRDs). In the registration-only mode, the SGX Agent pushes the SGX information directly to the SGX Caching Service and SHVS is not involved in the flow. PCK certificates are obtained and made available to workloads the same way as in the in the orchestrator mode. The SGX Quote Verification Service (SQVS) allows attesting applications to verify SGX quotes and extract the SGX quote attributes to verify compliance with a user-defined SGX enclave policy. SQVS uses the SGX Caching Service to retrieve SGX collateral needed to verify SGX quotes from the Intel SGX Provisioning Certification Service (PCS). SQVS typically runs in the the attesting application owner network environment. Typically, a separate instance of the SGX Caching Service is set setup in the attesting application owner network environment. The SGX Agent and the SGX services integrate with the Authentication and Authorization Service (AAS) and the Certificate Management Service (CMS). AAS and CMS are not represented on the diagram for clarity.","title":"SGX Attestation Support and SGX Support in Orchestrators"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#key-protection_2","text":"Key Protection leverages the SGX Attestation support and optionally, the SGX support in orchestrators. Key Protection is implemented by the SKC Client -- a set of libraries - which must be linked with a tenant workload, like Nginx, deployed in a CSP environment and the Key Broker Service (KBS) deployed in the tenant's enterprise environment. The SKC Client retrieves the keys needed by the workload from KBS after proving that the key can be protected in an SGX enclave as shown in the diagram below. Step 6 is optional (keys can be stored in KBS). Keys policies in step 2 are called Key Transfer Policies and are created by an Admin and assigned to Application keys.","title":"Key Protection"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#intel-security-libraries-installation","text":"","title":"Intel\u00ae Security Libraries Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#building-from-source","text":"Intel\u00ae Security Libraries is distributed as open source code and must be compiled into installation binaries before installation. Instructions and sample scripts for building the Intel\u00ae SecL-DC components can be found here (Section 1 to 7) https://github.com/intel-secl/docs/blob/v3.3.1/develop/quick-start-guides/Quick%20Start%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching.md After the components have been built, the installation binaries can be found in the binaries directory created by the build scripts. For components written in GO (Authentication and Authorization Service, Certificate Management Service, SGXAgent, Integration HUB, Key Broker Service, SGX Caching Service, SGX Quote Verfication Service, SGX Host Verification Service): \\<servicename>/out/\\<servicename>.bin In addition, the build script will produce some sample database scripts that can be used during installation to setup postgres and create database. Install_pgdb: intel-secl/deployments/installer/install_pgdb.sh Install_pgscsdb: sgx-caching-service/out/install_pgscsdb.sh Install_pgshvsdb: sgx-hvs/out/install_pgshvsdb.sh","title":"Building from Source"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#hardware-considerations","text":"","title":"Hardware Considerations"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-hardware","text":"Intel\u00ae Xeon\u00ae SP products those support SGX","title":"Supported Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#bios-requirements","text":"Intel\u00ae SGX-TEM BIOS requirements are outlined in the latest Intel\u00ae SGX Platforms BIOS Writer's Guide Intel\u00ae SGX should be enabled in BIOS menu (Intel\u00ae SGX is Disabled by default on Ice Lake). Intel\u00ae SGX BIOS requirements include exposing Flexible Launch Control menu.","title":"BIOS Requirements"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#os-requirements-intel-sgx-does-not-supported-on-32-bit-os","text":"Linux*:\\ \u2022 RHEL 8.2","title":"OS Requirements (Intel\u00ae SGX does not supported on 32-bit OS):"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-service-layout","text":"The Intel\u00ae SecL-DC services can be installed in a variety of layouts, partially depending on the use cases desired and the OS of the server(s) to be protected. In general, the Intel\u00ae SecL-DC applications can be divided into management services that are deployed on the network on the management plane, and host or node components that must be installed on each protected server. Management services can typically be deployed anywhere with network access to all the protected servers. This could be a set of individual VMs per service; containers; or all installed on a single physical or virtual machine. Node components must be installed on each protected physical server. Typically, this is needed for Linux deployments. For a POC environment, all the management services can be installed on a single machine or VM. This Includes: Certificate Management Service (CMS) Authentication and Authorization Service (AAS) SGX Caching Service (SCS) SGX Host Verification Service (SHVS) Integration HUB (IHUB) Key Broker Service (KBS) with backend key management SGX Quote Verification Service (SQVS) SGX Agent & SKC Library needs to be installed on SGX Enabled Machine. The node components (SGX Agent) must be installed on each protected physical server:","title":"Recommended Service Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#using-the-provided-database-installation-script","text":"Install a sample Postgresql 11 database using the script provided in corresponding component. This script will automatically install the Postgresql database and client packages required. Create the iseclpgdb.env answer file: ISECL_PGDB_IP_INTERFACES=localhost ISECL_PGDB_PORT=5432 ISECL_PGDB_SAVE_DB_INSTALL_LOG=true ISECL_PGDB_CERT_DNS=localhost ISECL_PGDB_CERT_IP=127.0.0.1 ISECL_PGDB_DBNAME=aasdb ISECL_PGDB_USERNAME=aasdbuser ISECL_PGDB_USERPASSWORD=aasdbpassword Note that the values above assume that the database will be accessed locally. If the database server will be external to the Intel\u00ae SecL services, change these values to the hostname or FQDN and IP address where the client will access the database server.","title":"Using the provided Database Installation Script"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#provisioning-the-database","text":"Each Intel\u00ae SecL service that uses a database (the Authentication and Authorization Service, the SGX host Verification Service, the SGX caching Service,) requires its own schema and access. The database must be created and initialized. Execute the install_pg(app name).sh script to configure the database. If a single shared database server will be used for each Intel\u00ae SecL service (for example, if all management plane services will be installed on a single VM), run the script multiple times, once for each service that requires a database. If separate database servers will be used (for example, if the management plane services will reside on separate systems and will use their own local database servers), execute the script on each server hosting a database. The database install scripts use default configuration AAS: install_pgdb.sh SCS: install_pgscsdb.sh SHVS: install_pgshvsdb.sh Note the dbusername and password will be taken from respective component environment files.","title":"Provisioning the Database"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#database-server-tls-certificate","text":"The database client for Intel\u00ae SecL services requires the database TLS certificate to authenticate communication with the database server. If the database server for a service is located on the same server that the service will run on, only the path to this certificate is needed. If the provided Postgres scripts are used, the certificate will be in /usr/local/pgsql/data/server.crt. If the database server will be run separately from the Intel\u00ae SecL service(s), the certificate will need to be copied from the database server to the service machine before installing the Intel\u00ae SecL services. The database client for Intel\u00ae SecL services will validate that the Subject Alternative Names in the database server's TLS certificate contain the hostname(s)/IP address(es) that the clients will use to access the database server. If configuring a database without using the provided scripts, ensure that these attributes are present in the database TLS certificate.","title":"Database Server TLS Certificate"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-certificate-management-service","text":"","title":"Installing the Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for","text":"The CMS is REQUIRED for all use cases.","title":"Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operating-system","text":"The Intel\u00ae Security Libraries Certificate Management Service supports Red Hat Enterprise Linux 8.2.","title":"Supported Operating System"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-hardware","text":"1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services","title":"Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation","text":"To install the Intel\u00ae SecL-DC Certificate Management Service: Copy the Certificate Management Service installation binary to the /root/ directory. Create the cms.env installation answer file for an unattended installation: AAS_TLS_SAN=\\< Comma-Separated list of IPs and hostnames for the AAS> AAS_API_URL=https://\\< Authentication and Authorization Service IP or Hostname>:8444/aas SAN_LIST=\\< Comma-Separated list of IP addresses and hostnames for the CMS> The SAN list will be used to authenticate the Certificate Signing Request from the AAS to the CMS. Only a CSR originating from a host matching the SAN list will be honored. Later, in the AAS authservice.env installation answer file, this same SAN list will be provided for the AAS installation. These lists must match and must be valid for IPs and/or hostnames used by the AAS system. The SAN list variables also accept the wildcards \"?\" (for single-character wildcards) and \"*\" (for multiple-character wildcards) to allow address ranges or multiple FQDNs. The AAS_API_URL represents the URL for the AAS that will exist after the AAS is installed. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the Certificate Management Service. Execute the installer binary. ./cms-v3.3.1.bin When the installation completes, the Certificate Management Service is available. The services can be verified by running cms status from the command line. # cms status After installation is complete, the CMS will output a bearer token to the console. This token will be used with the AAS during installation to authenticate certificate requests to the CMS. If this token expires or otherwise needs to be recreated, use the following command: cms setup cms_auth_token --force In addition, the SHA384 digest of the CMS TLS certificate will be needed for installation of the remaining Intel\u00ae SecL services. The digest can be obtained using the following command: cms tlscertsha384","title":"Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-authentication-and-authorization-service","text":"","title":"Installing the Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for_1","text":"The AAS is REQUIRED for all use cases.","title":"Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#prerequisites","text":"The following must be completed before installing the Authentication and Authorization Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service database must be available","title":"Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#package-dependencies","text":"The Intel\u00ae SecL-DC Authentication and Authorization Service (AAS) requires a Postgresql 11 database. A script (install_pgdb.sh) is provided with the AAS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the AAS installation.","title":"Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operating-systems","text":"The Intel\u00ae Security Libraries Authentication and Authorization Service supports Red Hat Enterprise Linux 8.2.","title":"Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-hardware_1","text":"1 vCPUs RAM: 2 GB 10 GB One network interface with network access to all Intel\u00ae SecL-DC services","title":"Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation_1","text":"Before AAS is installed, Database needs to be created. Use the following commands to install postgres and create AAS DB dnf -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm dnf module disable postgresql -y copy install_pgdb.sh and create_db.sh to /root/ directory ./install_pgdb.sh ./create_db.sh aasdb To install the AAS, a bearer token from the CMS is required. This bearer token is output at the end of the CMS installation. However, if a new token is needed, simply use the following command from the CMS command line: cms setup cms_auth_token --force Create the authservice.env installation answer file in /root/ directory as below: CMS_BASE_URL=https://< CMS IP or hostname>:8445/cms/v1/ CMS_TLS_CERT_SHA384=<CMS TLS certificate sha384> AAS_DB_SSLMODE=verify-full AAS_DB_HOSTNAME=<IP or hostname of database server> AAS_DB_PORT=<database port number; default is 5432> AAS_DB_NAME=<database name> AAS_DB_USERNAME=<database username> AAS_DB_PASSWORD=<database password> AAS_DB_SSLCERTSRC=<path to database TLS certificate; the default location is typically /usr/local/pgsql/data/server.crt> AAS_ADMIN_USERNAME=<username for AAS administrative user> AAS_ADMIN_PASSWORD=<password for AAS administrative user> AAS_JWT_TOKEN_DURATION_MINS=2880 SAN_LIST=<comma-separated list of IPs and hostnames for the AAS; this should match the value for the AAS_TLS_SAN in the cms.env file from the CMS installation> BEARER_TOKEN=<bearer token from CMS installation> Execute the AAS installer: ./authservice-v3.3.1.bin Note: the AAS_ADMIN credentials specified in this answer file will have administrator rights for the AAS and can be used to create other users, create new roles, and assign roles to users.","title":"Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#creating-users","text":"Before deployment is initiated, user account and roles must be generated for each component. Most of these accounts will be service users, used by the various Intel\u00ae SecL SKC services to work together. Creating these required users and roles is facilitated by the scripts in the corresponding components (Refer to dist/linux directory of each component) and needs to be executed before installation of each component. SCS: scs_aas_curl.sh SHVS: shvs_aas_curl.sh SQVS: sqvs_aas_curl.sh For Key Broker Service and Integration Hub User/Roles creation, Please refer to the appendix section for sample scripts The output of these scripts is a bearer-token which needs to be updated in the BEARER_TOKEN env variable in the corresponding component\u2019s env file.","title":"Creating Users"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-caching-service","text":"","title":"Installing the Caching Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for_2","text":"The SCS is REQUIRED for the following use cases.","title":"Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#prerequisites-csp-enterprise","text":"The following must be completed before installing the SGX Caching Service The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available User needs to subscribe to Intel\\'s Provisioning Certificate Service to obtain an API Key The SGX Caching Service database must be available","title":"Prerequisites (CSP &amp; Enterprise)"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#package-dependencies_1","text":"The Intel\u00ae SecL-DC SGX Caching Service (SCS) requires a Postgresql 11 database. A script (install_pgscsdb.sh) is provided with the SCS that will automatically add the Postgresql repositories and install/configure a sample database. If this script will not be used, a Postgresql 11 database must be installed by the user before executing the SCS installation.","title":"Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operating-system_1","text":"The Intel\u00ae Security Libraries SGX Caching Service supports Red Hat Enterprise Linux 8.2.","title":"Supported Operating System"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-hardware_2","text":"4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers. Internet connection is needed for connecting to Intel PCS Server.","title":"Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation_2","text":"Before SCS is installed, Database needs to be created. Use the following commands to install postgres and create SCS DB copy install_pgscsdb.sh to /root/ directory Open ~/iseclpgdb.env and update the ISECL_PGDB_DBNAME with SCS db name, ISECL_PGDB_USERNAME with SCS db username and ISECL_PGDB_USERPASSWORD with SCS db password ./install_pgscsdb.sh Copy the SCS installation binary to the /root/ directory. Create the scs.env installation answer file in /root/ directory as below: SCS_DB_USERNAME= SCS_DB_PASSWORD= SCS_DB_HOSTNAME= SCS_DB_PORT= SCS_DB_NAME= SCS_DB_SSLCERTSRC= INTEL_PROVISIONING_SERVER= INTEL_PROVISIONING_SERVER_API_KEY= SCS_REFRESH_HOURS= SCS_ADMIN_USERNAME= SCS_ADMIN_PASSWORD= CMS_BASE_URL=https:// :8445/cms/v1/ CMS_TLS_CERT_SHA384= AAS_API_URL=https:// :8444/aas RETRY_COUNT=3 WAIT_TIME=1 SAN_LIST= BEARER_TOKEN= BEARER_TOKEN above can be obtained from running scs_aas_curl.sh script below Execute scs_aas_curl.sh script to create SGX Caching Service user account and roles cd sgx-caching-service/dist/linux/ ./scs_aas_curl.sh Update the BEARER_TOKEN value in /root/scs.env file Execute the SCS installer binary: ./scs-v3.3.1.bin","title":"Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-sgx-host-verification-service","text":"","title":"Installing the SGX Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for_3","text":"The SGX Host Verification Service is REQUIRED in the default orchestrator SGX Agent mode.","title":"Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#prerequisites_1","text":"The following must be completed before installing the SGX Host Verification Service: The Certificate Management Service must be installed and available The Authentication and Authorization Service must be installed and available The SGX Host Verification Service database must be available","title":"Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#package-dependencies_2","text":"The Intel\u00ae Security Libraries SGX Host Verification Service requires the following packages and their dependencies: Postgres* client and server 11.6 (server component optional if an external Postgres database is used) Golang packages If they are not already installed, the SGX Host Verification Service installer attempts to install these automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update the repository package lists before installation.","title":"Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operating-systems_1","text":"The Intel\u00ae Security Libraries SGX Host Verification Service supports Red Hat Enterprise Linux 8.2.","title":"Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-hardware_3","text":"4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers","title":"Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation_3","text":"Before SHVS is installed, Database needs to be created. Use the following commands to install postgres and create SHVS DB copy install_pgshvsdb.sh to /root/ directory Open ~/iseclpgdb.env and update the ISECL_PGDB_DBNAME with SHVS db name, ISECL_PGDB_USERNAME with SHVS db username and ISECL_PGDB_USERPASSWORD with SHVS db password ./install_pgshvsdb.sh To install the SGX Host Verification Service, follow these steps: Copy the SGX Host Verification Service installation binary to the /root/ directory. Create the shvs.env installation answer file in /root/ directory as below. A sample minimal shvs.env file is provided below. For all configuration options and their descriptions, refer to the Intel\u00ae SecL Configuration section on the SGX Host Verification Service. SHVS_DB_HOSTNAME=<hostname or IP address to database server> SHVS_DB_USERNAME=<Database administrative username> SHVS_DB_PORT=<Database port, default is 5432> SHVS_DB_PASSWORD=<Database password> SHVS_DB_NAME=<Database schema> SHVS_ADMIN_USERNAME=<SGX Host Verification Service username> SHVS_ADMIN_PASSWORD=<SGX HostVerification Service password> CMS_TLS_CERT_SHA384=<Certificate Management Service TLS digest> SHVS_DB_SSLCERTSRC=/usr/local/pgsql/data/server.crt SHVS_SCHEDULER_TIMER=10 SHVS_HOST_PLATFORM_EXPIRY_TIME=4 SHVS_AUTO_REFRESH_TIMER=120 BEARER_TOKEN=<Installation token from AAS> AAS_API_URL=https://<Authentication and Authorization Service IP or Hostname>:8444/aas CMS_BASE_URL=https://<Certificate Management Service IP or Hostname>:8445/cms/v1/ SCS_BASE_URL=https://<SGX Caching Service IP or Hostname>:9000/scs/sgx/ SAN_LIST=<Comma-separated list of IP addresses and hostnames for the SHVS> BEARER_TOKEN above can be obtained from running shvs_aas_curl.sh script below Execute shvs_aas_curl.sh script to create SGX Host Verification Service user account and roles cd sgx-hvs/dist/linux/ ./shvs_aas_curl.sh Update the BEARER_TOKEN value in /root/shvs.env file Execute the installer binary. ./shvs-v3.3.1.bin When the installation completes, the SGX Host Verification Service is available. The service can be verified by running shvs status from the SGX Host Verification Service command line. # shvs status","title":"Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-sgx-agent","text":"","title":"Installing the SGX Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for_4","text":"The SGX Agent is REQUIRED for all use cases. The SGX Agent supports 2 modes: orchestrator (default) and registration-only. In the registration-only mode, the compute nodes SGX information does not get pushed to orchestrators like Kubernetes. In both modes, the SGX attestation flow is supported. In the orchestrator mode, SGX Agent is registered with SGX Host Verification Service (SHVS), which then pulls all SGX platform data. SHVS, in turn, pushes the data to the SGX Caching Service (SCS). In the registration-only mode, the SGX Agent pushes the SGX platform data directly to SCS and SHVS is not involved in the flow.","title":"Required for"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#prerequisites_2","text":"The following must be completed before installing the SGX Agent: Certificate Management Service, Authentication and Authorization Service,SGX Caching Service and SGX Host Verification Service must be installed and available.","title":"Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#package-dependencies_3","text":"The Intel\u00ae Security Libraries SGX Agent Service requires the following packages and their dependencies: Golang packages","title":"Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operating-systems_2","text":"Red Hat Enterprise Linux 8.2. Recommended Hardware Intel\u00ae Xeon\u00ae SP (Ice Lake-SP)","title":"Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation_4","text":"Copy sgx_agent.tar sgx_agent.sha2 and agent_untar.sh to a directory on SGX Compute node ./agent_untar.sh Update the following in agent.conf - IP address for all the services - Certificate Management Service TLS digest value (CMS running on CSP system) ./deploy_sgx_agent.sh","title":"Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-sqvs","text":"","title":"Installing the SQVS"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for_5","text":"SGX ECDSA Attestation / SGX Quote Verification by KBS","title":"Required for"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#prerequisites_3","text":"The following must be completed before installing the SQVS: Certificate Management Service, Authentication and Authorization Service and SGX Caching Service must be installed and available.","title":"Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#package-dependencies_4","text":"The Intel\u00ae Security Libraries Quote Verification Service requires the following packages and their dependencies: Golang packages","title":"Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operating-systems_3","text":"Red Hat Enterprise Linux 8.2.","title":"Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-hardware_4","text":"4 vCPUs RAM: 8 GB 100 GB One network interface with network access to all managed servers","title":"Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation_5","text":"To install the SQVS Service, follow these steps: Copy the SQVS installation binary to the ~/root directory Create the sqvs.env installation answer file in /root/ directory as below A sample minimal sqvs.env file is provided below. For all configuration options and their descriptions, refer to the Configuration section on the SGX Quote Verification Service. SGX_TRUSTED_ROOT_CA_PATH=< Path where trusted root ca cert for PCS is stored, by default /tmp/trusted_rootca.pem > SCS_BASE_URL=https://< SCS IP or Hostname >:9000/scs/sgx/certification/v1 SQVS_USERNAME=< SGX Quote Verification Service username > SQVS_PASSWORD=< SGX Quote Verification Service password > CMS_TLS_CERT_SHA384=< Certificate Management Service TLS digest > BEARER_TOKEN=< Installation token > AAS_API_URL=https://< Authentication and Authorization Service IP or Hostname >:8444/aas CMS_BASE_URL=https://< Certificate Management Service IP or Hostname >:8445/cms/v1/ SAN_LIST=< *Comma-separated list of IP addresses and hostnames for the SQVS* > SQVS_NOSETUP=false SQVS_PORT=12000 SQVS_LOGLEVEL=info SQVS_INCLUDE_TOKEN=true BEARER_TOKEN above can be obtained from running sqvs_aas_curl.sh script below Execute sqvs_aas_curl.sh script to create SGX Verification Service user account and roles cd sgx-verification-service/dist/linux/ ./sqvs_aas_curl.sh Update the BEARER_TOKEN value in /root/sqvs.env file Execute the sqvs installer binary. sqvs-v3.3.1.bin When the installation completes, the SGX Quote Verification Service is available. The service can be verified by sqvs status from the sqvs command line. # sqvs status","title":"Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#setup-k8s-cluster-deploy-isecl-k8s-extensions","text":"Setup master and worker node for k8s. Worker node should be setup on SGX host machine. Master node can be any VM machine. Please note whatever hostname has been used on worker node while registering SGX_Agent with SHVS, use same node-name in join command. Once the master/worker setup is done, follow below steps:","title":"Setup K8S Cluster &amp; Deploy Isecl-k8s-extensions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#untar-packages-and-load-docker-images","text":"Copy tar output isecl-k8s-extensions-*.tar.gz from build VM binaries folder to /opt/ directory on the Master Node and extract the contents. cd /opt/ tar -xvzf isecl-k8s-extensions-*.tar.gz Load the docker images cd isecl-k8s-extensions docker load -i docker-isecl-controller-v*.tar docker load -i docker-isecl-scheduler-v*.tar","title":"Untar packages and load docker images"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#deploy-isecl-controller","text":"Create hostattributes.crd.isecl.intel.com crd kubectl apply -f yamls/crd-1.17.yaml Check whether the crd is created kubectl get crds Deploy isecl-controller kubectl apply -f yamls/isecl-controller.yaml Check whether the isecl-controller is up and running kubectl get deploy -n isecl Create clusterrolebinding for ihub to get access to cluster nodes kubectl create clusterrolebinding isecl-clusterrole --clusterrole=system:node --user=system:serviceaccount:isecl:isecl Fetch token required for ihub installation and follow below steps to update ihub.env, kubectl get secrets -n isecl kubectl describe secret default-token-<name> -n isecl For IHUB installation, make sure to update below configuration in /root/binaries/env/ihub.env before installing ihub on CSP VM: Copy /etc/kubernetes/pki/apiserver.crt from master node to /root on CSP VM. Update KUBERNETES_CERT_FILE. Get k8s token in master, using above commands and update KUBERNETES_TOKEN Update the value of CRD name KUBERNETES_CRD=custom-isecl-sgx","title":"Deploy isecl-controller"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#deploy-isecl-scheduler","text":"The isecl-scheduler default configuration is provided for common cluster support in isecl-scheduler.yaml. Variables HVS_IHUB_PUBLIC_KEY_PATH and SGX_IHUB_PUBLIC_KEY_PATH are by default set to default paths. Please use and set only required variables based on the use case. For example, if only sgx based attestation is required then remove/comment HVS_IHUB_PUBLIC_KEY_PATH variables. Install cfssl and cfssljson on Kubernetes Control Plane #Download cfssl to /usr/local/bin/ wget -O /usr/local/bin/cfssl http://pkg.cfssl.org/R1.2/cfssl_linux-amd64 chmod +x /usr/local/bin/cfssl #Download cfssljson to /usr/local/bin wget -O /usr/local/bin/cfssljson http://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 chmod +x /usr/local/bin/cfssljson Create tls key pair for isecl-scheduler service, which is signed by k8s apiserver.crt cd /opt/isecl-k8s-extensions/ chmod +x create_k8s_extsched_cert.sh ./create_k8s_extsched_cert.sh -n \"K8S Extended Scheduler\" -s \"<K8_MASTER_IP>\",\"<K8_MASTER_HOST>\" -c /etc/kubernetes/pki/ca.crt -k /etc/kubernetes/pki/ca.key After iHub deployment, copy /etc/ihub/ihub_public_key.pem from ihub to /opt/isecl-k8s-extensions/ directory on k8 master vm. Also, copy tls key pair generated in previous step to secrets directory. mkdir secrets cp /opt/isecl-k8s-extensions/server.key secrets/ cp /opt/isecl-k8s-extensions/server.crt secrets/ mv /opt/isecl-k8s-extensions/ihub_public_key.pem /opt/isecl-k8s-extensions/sgx_ihub_public_key.pem cp /opt/isecl-k8s-extensions/sgx_ihub_public_key.pem secrets/ Note: Prefix the attestation type for ihub_public_key.pem before copying to secrets folder. Create kubernetes secrets scheduler-secret for isecl-scheduler kubectl create secret generic scheduler-certs --namespace isecl --from-file=secrets Deploy isecl-scheduler kubectl apply -f yamls/isecl-scheduler.yaml Check whether the isecl-scheduler is up and running kubectl get deploy -n isecl","title":"Deploy isecl-scheduler"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configure-kube-scheduler-to-establish-communication-with-isecl-scheduler","text":"Add scheduler-policy.json under kube-scheduler section, mountPath under container section and hostPath under volumes section in /etc/kubernetes/manifests/kube-scheduler.yaml as mentioned below spec: containers: - command: - kube-scheduler - --policy-config-file=/opt/isecl-k8s-extensions/scheduler-policy.json containers: volumeMounts: - mountPath: /opt/isecl-k8s-extensions/ name: extendedsched readOnly: true volumes: - hostPath: path: /opt/isecl-k8s-extensions/ type: name: extendedsched Note: Make sure to use proper indentation and don't delete existing mountPath and hostPath sections in kube-scheduler.yaml. Restart Kubelet which restart all the k8s services including kube base schedular systemctl restart kubelet Check if CRD Data is populated kubectl get -o json hostattributes.crd.isecl.intel.com","title":"Configure kube-scheduler to establish communication with isecl-scheduler"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-integration-hub","text":"Note: The Integration Hub is only required to integrate Intel\u00ae SecL with third-party scheduler services, such as Kubernetes. The Integration Hub is not required for usage models that do not require Intel\u00ae SecL security attributes to be pushed to an integration endpoint.","title":"Installing the Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for_6","text":"The Integration Hub is REQUIRED the default orchestrator SGX Agent mode.","title":"Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#prerequisites_4","text":"The Intel\u00ae Security Libraries Integration Hub can be run on a VM or on a bare-metal server. The Integration Hub may be installed on the same server (physical or VM) as the SGX Host Verification Service. SGX Caching Service must be installed and available. The SGX Host Verification Service must be installed and available The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available","title":"Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#package-dependencies_5","text":"The Intel\u00ae SecL Integration Hub requires a number of packages and their dependencies: Golang packages If these are not already installed, the Integration Hub installer attempts to install these packages automatically using the package manager. Automatic installation requires access to package repositories (the RHEL subscription repositories, the EPEL repository, or a suitable mirror), which may require an Internet connection. If the packages are to be installed from the package repository, be sure to update your repository package lists before installation.","title":"Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operating-systems_4","text":"The Intel Security Libraries Integration Hub supports Red Hat Enterprise Linux 8.2.","title":"Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-hardware_5","text":"1 vCPUs RAM: 2 GB 1 GB free space to install the Integration Hub (database and log space requirements are dependent on the number of managed servers). One network interface with network access to the SGX Host Verification Service. One network interface with network access to any integration endpoints (for example, OpenStack Nova).","title":"Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-integration-hub_1","text":"To install the SGX Integration Hub, follow these steps: Copy the Integration Hub installation binary to the /root/ directory. Create the ihub.env installation answer file in /root/ directory as below IHUB_SERVICE_USERNAME=< IHUB service user username > IHUB_SERVICE_PASSWORD=< IHUB service user password > ATTESTATION_SERVICE_URL=< https://< SHVS IP or Hostname >:13000/sgx-hvs/v1 ATTESTATION_TYPE=SGX CMS_TLS_CERT_SHA384=< CMS TLS digest > BEARER_TOKEN=< Installation token from AAS > AAS_API_URL=https://< AAS IP or Hostname >:8444/aas CMS_BASE_URL=https://< CMS IP or Hostname >:8445/cms/v1 POLL_INTERVAL_MINUTES=2 TLS_SAN_LIST=< comma separated list of IPs and hostnames for the IHUB > TENANT=< tenant-type e.g. KUBERNETES or OPENSTACK > # Kubernetes Integration Credentials - required for Kubernetes integration only KUBERNETES_URL=< https://< Kubernetes IP >:6443/> KUBERNETES_CRD=custom-isecl-sgx KUBERNETES_TOKEN=< K8S token > KUBERNETES_CERT_FILE =< Path of Kubernetes master node certificate > # OpenStack Integration Credentials - required for OpenStack integration only OPENSTACK_AUTH_URL=<OpenStack Keystone URL; typically http://openstack-ip:5000/> OPENSTACK_PLACEMENT_URL=<OpenStack Nova Placement API URL; typically http://openstack-ip:8778/> OPENSTACK_USERNAME=< OpenStack username > OPENSTACK_PASSWORD=< OpenStack password > Create Integrated Hub Service user account and Roles. A sample script is provided in the appendix section for reference Update the BEARER_TOKEN value in the ihub.env file Execute the installer binary. ./ihub-v3.3.1.bin Copy IHUB public key to the master node and restart kubelet. scp -r /etc/ihub/ihub_public_key.pem <master-node IP>:/opt/isecl-k8s-extensions/ systemctl restart kubelet Run this command to validate if the data has been pushed to CRD: kubectl get -o json hostattributes.crd.isecl.intel.com Run this command to validate that the labels have been populated: kubectl get nodes --show-labels. Sample labels: EPC-Memory=2.0GB,FLC-Enabled=true,SGX-Enabled=true,SGX-Supported=true,SgxTrustExpiry=2020-11-09T08.07.43Z,TCBUpToDate=true Create sample yml file for nginx workload and add SGX labels to it such as: apiVersion: v1 kind: Pod metadata: name: nginx labels: name: nginx spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: SGX-Enabled operator: In values: - \"true\" - key: EPC-Memory operator: In values: - \"2.0GB\" containers: - name: nginx image: nginx ports: - containerPort: 80 Validate if pod can be launched on the node. Run following commands: kubectl apply -f pod.yml kubectl get pods kubectl describe pods nginx Pod should be in running state and launched on the host as per values in pod.yml. Validate running below commands on sgx host: docker ps","title":"Installing the Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#integration-with-openstack","text":"OpenStack can now use \u201cTraits\u201d to provide qualitative data about Nova Compute hosts to establish Trait requirements. The Integration Hub continually push SGX data to the OpenStack Traits resources. This means OpenStack scheduler natively supports workload scheduling incorporating SGX Host information, including SGX enabled/disabled, SGX supported/not supported, FLC enabled/not enabled, EPC memory size, TCB status upto date/not. The OpenStack Placement Service will automatically attempt to place images with Trait requirements on compute nodes that have those Traits. NOTE: This control only applies to instances launched using the OpenStack scheduler, and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general, and Intel recommends following published OpenStack security best practices. Setting Image Traits Image Traits define the policy for which Traits are required for that instance to be launched on a Nova Compute node.By setting these Traits to \u201crequired\u201d the OpenStack scheduler will require the same Traits to be present on a Nova Compute node in order to launch instances. To set the Image Traits for Intel SecL-DC,a specific naming convention is used. This naming convention will match the Traits that the Integration Hub will automatically push to OpenStack. Two types of Traits are currently supported \u2013 one Trait is used to require that the Compute Node must be SGX supported and the other Trait is used to require specific SGXkey/value pairs. Required Image trait for SGX Enabled Host: CUSTOM_ISECL_SGX_ENABLED_TRUE=required These Traits can be set using CLI commands for OpenStack Glance: openstack image set --property trait:CUSTOM_ISECL_SGX_ENABLED_TRUE=required <image name> To veiw the Traits that has been set: openstack image show List the set of resources mapped to the Openstack openstack resource provider list To view the traits enabled for the SGX Host: openstack resource provider trait list <uuid of the host which the openstack resoruce provider lists> Create the instances openstack server create --flavor tiny --image <image name> --net vmnet <vm instance name> Instances should be created and the status should be \"Active\". Instance should be launched successfully. openstack server list To remove a Trait that is not required for an Image: openstack image unset --property trait:CUSTOM_ISECL_SGX_ENABLED_TRUE openstack image unset --property trait:CUSTOM_ISECL_SGX_ENABLED_FALSE Scheduling Instances Once Trait requirements are set for Images and the Integration Hub is configured to push attributes to OpenStack, instances can be launched in OpenStack as normal. As long as the OpenStack Nova scheduler is used to schedule the workloads, only compliant Compute Nodes will be scheduled to run instances of controlled Images. NOTE: This control only applies to instances launched using the OpenStack scheduler and the Traits functions will not affect manually-launched instances where a specific Compute Node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing OpenStack interfaces and does not modify OpenStack code. The datacenter owner or OpenStack administrator is responsible for the security of the OpenStack workload scheduling process in general and Intel recommends following published OpenStack security best practices.","title":"Integration with OpenStack"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-key-broker-service","text":"","title":"Installing the Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for_7","text":"The KBS is REQUIRED for - Storing Application Keys and Verifying the SGX Quote","title":"Required for"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#prerequisites_5","text":"The following must be completed before installing the Key Broker: The Authentication and Authorization Service must be installed and available The Certificate Management Service must be installed and available","title":"Prerequisites"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#package-dependencies_6","text":"N/A","title":"Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operating-systems_5","text":"supports Red Hat Enterprise Linux 8.2.","title":"Supported Operating Systems"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-hardware_6","text":"NA","title":"Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation_6","text":"Copy the Key Broker installation binary to the /root/ directory. Create the installation answer file kbs.env /root/ directory as below: KBS_SERVICE_USERNAME=< KBS service user username > KBS_SERVICE_PASSWORD=< KBS service user password > SERVER_PORT=9443 AAS_API_URL=https:// :8444/aas CMS_BASE_URL=https:// :8445/cms/v1/ SQVS_URL=https:// :12000/svs/v1 KEY_MANAGER=Directory ENDPOINT_URL= https://kbshostname:9443/v1 TLS_COMMON_NAME=\"KBS TLS Certificate\" SKC_CHALLENGE_TYPE=\"SGX\" CMS_TLS_CERT_SHA384= TLS_SAN_LIST= BEARER_TOKEN= BEARER_TOKEN above can be obtained form Step 3 below Create Key Broker Service user account and Roles. A sample script is provided in the appendix section for reference Execute the KBS installer. ./kbs-3.3.0.bin","title":"Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installing-the-skc-library","text":"","title":"Installing the SKC Library"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#required-for_8","text":"The SKC_Library enables secure transfer of application keys from KBS after performing SGX attestation. It stores the keys in the SGX enclave and performs crypto operations ensuring the keys are never exposed in use, at rest and in transit outside of enclave.","title":"Required For"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#package-dependencies_7","text":"The Intel\u00ae Security Libraries SKC Library requires the following packages and their dependencies Openssl Curl","title":"Package Dependencies"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#supported-operation-system","text":"The Intel\u00ae Security Libraries SKC Library supports Red Hat Enterprise Linux 8.2.","title":"Supported Operation System"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#recommended-hardware_7","text":"Icelake Server with SGX enabled in BIOS RAM: 8 GB 100 GB One network interface with network access to the Key Broker","title":"Recommended Hardware"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation_7","text":"Copy skc_library.tar skc_library.sha2 and skclib_untar.sh to a directory in SGX Compute node ./skclib_untar.sh Update the IP address for the services mentioned in skc_library.conf (SCS IP Should be set to CSP SCS IP) ./deploy_skc_library.sh","title":"Installation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authentication","text":"Authentication is centrally managed by the Authentication and Authorization Service (AAS). This service uses a Bearer Token authentication method. This service also centralizes the creation of roles and users, allowing much easier management of users, passwords, and permissions across all Intel\u00ae SecL-DC services. To make an API request to an Intel\u00ae SecL-DC service, an authentication token is required. API requests must now include an Authorization header with a valid token The token is issued by AAS and expires after a set amount of time. This token may be used with any Intel\u00ae SecL-DC service and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for. The SKC solution involves AAS deployments for 2 different domains: the CSP domain and the tenant domain. There is no trust relationship between the 2 deployments. In SKC, the accounts of the SGX Services are created at install time. However, CSP admin users must obtain AAS tokens to invoke admin APIs in the SGX Host Verification Service (SHVS), the SGX Hub, the SGX Caching Service (SCS) and AAS. Similarly, the tenant admin needs AAS tokens to invoke Create, Read, Update and Delete (CRUD) APIs in KBS and admin APIs in AAS. The following sections present how to use AAS APIs to create tokens and manage users.","title":"Authentication"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#create-token","text":"To request a new token from the AAS: POST https://\\<AAS IP or hostname>:8444/aas/token { \\\"username\\\" : \\\"\\<username>\\\", \\\"password\\\" : \\\"\\<password>\\\" } The response will be a token that can be used in the Authorization header for other requests. The length of time for which the token will be valid is configured on the AAS using the key ~AAS_JWT_TOKEN_DURATION_MINS~ (in the installation answer file during installation) or aas.jwt.token.duration.mins (configured on the AAS after installation). In both cases the value is the length of time in minutes that issued tokens will remain valid before expiring.","title":"Create Token"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#user-management","text":"Users in Intel\u00ae SecL-DC are centrally managed by the Authentication and Authorization Service (AAS). Any user may be assigned roles for any service, allowing user accounts to be fully defined by the tasks needed","title":"User Management"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#username-and-password-requirement","text":"Passwords have the following constraints: cannot be empty - ie must at least have one character maximum length of 255 characters Usernames have the following requirements: Format: username[\\@host_name[domain]] [\\@host_name[domain]] is optional username shall be minimum of 2 and maximum of 255 characters username allowed characters are alphanumeric, ., -, _ - but cannot start with -. Domain name must meet requirements of a host name or fully qualified internet host name (Update it relevant to SKC)","title":"Username and Password Requirement"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#create-user","text":"POST https://\\<IP or hostname of AAS>:8444/aas/users Authorization: Bearer \\<token> { \\\"username\\\" : \\\"\\<username>\\\", \\\"password\\\" : \\\"\\<password>\\\" }","title":"Create User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#search-user","text":"GET https://\\<IP or hostname of AAS>:8444/aas/users?\\<parameter>=\\<value> Authorization: Bearer \\<token>","title":"Search User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#change-user-password","text":"PATCH https://\\<IP or hostname of AAS>:8444/aas/users/changepassword { \\\"username\\\": \\\"\\<username>\\\", \\\"old_password\\\": \\\"\\<old_password>\\\", \\\"new_password\\\": \\\"\\<new_password>\\\", \\\"password_confirm\\\": \\\"\\<new_password>\\\" }","title":"Change User Password"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#delete-user","text":"DELETE https://\\<IP or hostname of AAS>:8444/aas/users/\\<User ID> Authorization: Bearer \\<token>","title":"Delete User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#roles-and-permission","text":"Permissions in Intel\u00ae SecL-DC are managed by Roles. Roles are a set of predefined permissions applicable to a specific service. Any number of Roles may be applied to a User. While new Roles can be created, each Intel\u00ae SecL service defines permissions that are applicable to specific predetermined Roles. This means that only pre-defined Roles will actually have any permissions. Role creation is intended to allow Intel\u00ae SecL-DC services to define their permissions while allowing role and user management to be centrally managed on the AAS. When a new service is installed, it will use the Role creation functions to define roles applicable for that service in the AAS.","title":"Roles and Permission"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#create-roles","text":"POST https://\\<AAS IP or Hostname>:8444/aas/roles Authorization: Bearer \\<token> { \\\"service\\\": \\\"\\<Service name>\\\", \\\"name\\\": \\\"\\<Role Name>\\\". \"permissions\": [\\<array of permissions>] } Service field contains a minimum of 1 and maximum of 20 characters. Allowed characters are alphanumeric plus the special charecters -, _, @, ., , Name field contains a minimum of 1 and maximum of 40 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , Service and Name fields are mandatory Context field is optional and can contain up to 512 characters. Allowed characters are alphanumeric plus -, _, @, ., ,,=,;,:,* Permissions field is optional and allow up to a maximum of 512 characters. The Permissions array must a comma-separated list of permissions formatted as resource:action: Permissions required to execute specific API requests are listed with the API resource and method definitions in the API documentation.","title":"Create Roles"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#search-roles","text":"GET https://\\<AAS IP or Hostname>:8444/aas/roles?\\<parameter>=\\<value> Authorization: Bearer \\<token> Search parameters supported: Service=\\<name of service> Name=\\<role name> Context=\\<context> contextContains=\\<partial \"context\" string> allContexts=\\<true or false> filter=false","title":"Search Roles"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#delete-role","text":"DELETE https://\\<AAS IP or Hostname>:8444/aas/roles/\\<role ID> Authorization: Bearer \\<token>","title":"Delete Role"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#assign-role-to-user","text":"POST https://\\<AAS IP or Hostname>:8444/aas/users/\\<user ID>/roles Authorization: Bearer \\<token> { \\\"role_ids\\\": [\\\"\\<comma-separated list of role IDs>\\\"] }","title":"Assign Role to User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#list-roles-assigned-to-user","text":"GET https://\\<AAS IP or Hostname>:8444/aas/users/\\<user ID>/roles Authorization: Bearer \\<token>","title":"List Roles Assigned to User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#remove-role-from-user","text":"DELETE https://\\<AAS IP or Hostname>:8444/aas/users/\\<user ID>/roles/\\<role ID> Authorization: Bearer \\<token>","title":"Remove Role from User"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#role-definitions","text":"Following are the set of roles which are required during installation and runtime. Role Name Permissions Utility < SGX_AGENT:HostDataReader: > Used by the SHVS to retrieve platform data from SGX_Agent < CMS:CertApprover:CN=SGX_AGENT TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the SGX-AGENT to get TLS certificate from CMS < SHVS:HostRegistration: > Used by the SGX_Agent to register host to the SHVS < SHVS:HostsListReader: > Used by the IHUB to retrieve the list of hosts from SHVS < SHVS:HostDataReader: > Used by the IHUB to retrieve platform-data from SHVS < CMS:CertApprover:CN=SHVS TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the SHVS to retrieve TLS Certificate from CMS < CMS:CertApprover:CN=Integration HUB TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the IHUB to retrieve TLS Certificate from CMS < SCS:HostDataUpdater: > Used by the SHVS to push the platform-info to SCS < SCS:HostDataReader: > Used by the SHVS to retrieve the TCB status info from SCS < SCS:CacheManager: > Used by the SCS admin to refresh the platform info < CMS:CertApprover:CN=SCS TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the SCS to retrieve TLS Certificate from CMS < KBS:KeyTransfer:permissions=nginx,USA > Used by the SKC Library user for Key Transfer < CMS:CertApprover:CN=skcuser;CERTTYPE=TLS-Client> Used by the SKC Library user to retrieve TLS-Client Certificate from CMS < CMS:CertApprover:CN=KBS TLS Certificate;SAN= ;CERTTYPE=TLS> Used by the KBS to retrieve TLS Certificate from CMS AAS: Administrator : :* Administrator role for the AAS only. Has all permissions for AAS resources, including the ability to create or delete users and roles AAS: RoleManager AAS: [roles:create: , roles:retrieve: , roles:search: , roles:delete: ] AAS role that allows all actions for Roles but cannot create or delete Users or assign Roles to Users. AAS: UserManager AAS: [users:create: , users:retrieve: , users:store: , users:search: , users:delete:*] AAS role with all permissions for Users but has no ability to create Roles or assign Roles to Users. AAS: UserRoleManager AAS: [user_roles:create: , user_roles:retrieve: , user_roles:search: , user_roles:delete: ] AAS role with permissions to assign Roles to Users but cannot create delete or modify Users or Roles. < SHVS:HostListManager:> Used by the SHVS admin to delete the hosts. < SQVS:QuoteVerifier: > Used by the KBS service user for quote verification","title":"Role Definitions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#connection-strings","text":"Connection Strings define a remote API resource endpoint that will be used to communicate with the registered host for retrieving SGX information and another platform information. Connection Strings differ based on the type of host.","title":"Connection Strings"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-agent_1","text":"The SGX Agent connection string connects directly to the SGX Agent on a given host. The SGX Host Verification Service will use a service account with the needed SGX Agent permissions to connect to the SGX Agent. Authentication has been centralized with the new Authentication and Authorization Service.","title":"SGX Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-features-provisioning","text":"","title":"SGX Features Provisioning"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#host-registration","text":"Host Registration creates a host record with connectivity details and other host information in the SGX host Verification Service database. This host record will be used by the SGX Host Verification Service to retrieve SGX information and platform values from the SGX Agent.","title":"Host Registration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-agent_2","text":"","title":"SGX Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#host-registration-with-sgx-agent","text":"The SGX Agent registers the host with an SGX Host Verification Service at the time of installation.","title":"Host Registration with SGX Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#retrieving-current-host-state-information","text":"Admin can get the host state information by calling this rest API. GET https://\\<hostname>:13000/sgx-hvs/v1/host-status","title":"Retrieving Current Host State Information"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#intel-security-libraries-configuration-settings","text":"","title":"Intel Security Libraries Configuration Settings"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-host-verification-service_1","text":"","title":"SGX Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation-answer-file-options","text":"Key Sample Value Description CMS_BASE_URL https://< IP address or hostname for CMS >:8445/cms/v1/ Base URL of the CMS AAS_API_URL https://< IP address or hostname for AAS >:8444/aas Base URL of the AAS SCS_BASE_URL https://< IP or hostname of SCS >:9000/scs/sgx/ Base URL of SCS SHVS_DB_PORT 5432 Defines the port number for communication with the database server. By default, with a local database server installation, this port will be set to 5432. SHVS_DB_NAME pgshvsdb Defines the schema name of the database. If a remote database connection will be used, this schema must be created in the remote database before installing the SGX Host Verification Service SHVS_DB_USERNAME aasdbuser Username for accessing the database. If a remote database connection will be used, this user/password must be created and granted all permissions for the database schema before installing the SGX Host Verification Service. SHVS_DB_PASSWORD aasdbpassword Password for accessing the database. If a remote database connection will be used, this user/password must be created and granted all permissions for the database schema before installing the SGX Host Verification Service. SHVS_DB_HOSTNAME localhost Defines the database server IP address or hostname. This should be the loopback address for local database server installations but should be the IP address or hostname of the database server if a remote database will be used. SAN_LIST 127.0.0.1,localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service SHVS_ADMIN_USERNAME shvsuser@shvs Username for a new user to be created during installation. SHVS_ADMIN_PASSWORD shvspassword Password for the user to be created during installation. CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest> SHA384 hash of the CMS TLS certificate BEARER_TOKEN Installation token from AAS SHVS_PORT 13000 SGX Host Verification Service HTTP Port SHVS_SCHEDULER_TIMER 60 SHVS Scheduler timeout SHVS_HOST_PLATFORM_EXPIRY_TIME 4 SHVS Host Info Expiry time SHVS_AUTO_REFRESH_TIMER 120 SHVS Auto-refresh timeout","title":"Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-options","text":"The SGX Host Verification Service configuration in path /etc/shvs/config.yml.","title":"Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#command-line-options","text":"The SGX Host Verification Service supports several command-line commands that can be executed only as the Root user: Syntax: shvs \\<command>","title":"Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#help","text":"shvs help Displays the list of available CLI commands.","title":"Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#start","text":"shvs start Starts the SGX Host Verification service","title":"Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#stop","text":"shvs stop Stops the SGX Host Verification service","title":"Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#status","text":"shvs status Reports whether the service is currently running.","title":"Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstall","text":"shvs uninstall [--purge] Removes the service. Use --purge option to remove configuration directory(/etc/shvs/)","title":"Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#version","text":"shvs version Shows the version of the service.","title":"Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#directory-layout","text":"The SGX Host Verification Service installs by default to /opt/shvs with the following folders.","title":"Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#bin","text":"This folder contains executable scripts. 9.1.4.2 Dbscripts Contains database scripts. Other folders which are created during installation are:","title":"Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration","text":"This folder /etc/shvs contains certificates, keys, and configuration files.","title":"Configuration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#logs","text":"This folder contains log files: /var/log/shvs/","title":"Logs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-agent_3","text":"","title":"SGX Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation-answer-file-options_1","text":"Key Sample Value Description AAS_API_URL https://< AAS IP or Hostname>:8444/aas API URL for Authentication Authorization Service (AAS). CMS_BASE_URL https://< CMS IP or hostname>:8445/cms/v1/ API URL for Certificate Management Service (CMS). SHVS_BASE_URL https://< SHVS IP or hostname>:13000/sgx-hvs/v1/ The url used during setup to request information from SHVS. SGX_AGENT_USERNAME sgx_agent Name of the SGX_AGENT USER SGX_AGENT_PASSWORD password Password of SGX_AGENT user. BEARER_TOKEN JWT from AAS that contains \"install\" permissions needed to access ISecL services during provisioning and registration CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest> SHA384 Hash for verifying the CMS TLS certificate. SGX_PORT 11001 The port on which the SGX Agent service will listen. SGX_AGENT_MODE Orchestration SGX Agent will operate to work in conjuction with orchstrators like Kubernetes SGX_AGENT_NOSETUP false Skips setup during installation if set to true SAN_LIST 127.0.0.1, localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service","title":"Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-options-this-is-same-as-above","text":"","title":"Configuration Options - This is same as above."},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#command-line-options_1","text":"sgx_agent \\<command>","title":"Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#available-commands","text":"","title":"Available Commands"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#help_1","text":"Show the help message.","title":"help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#version_1","text":"sgx_agent version Reports the version of the service.","title":"Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstall_1","text":"sgx_agent uninstall --purge","title":"uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#start_1","text":"Start the SGX Agent service. sgx_agent start","title":"start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#stop_1","text":"Stop the SGX Agent service. sgx_agent stop","title":"stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#status_1","text":"Get the status of the SGX Agent Service. sgx_agent status","title":"status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#directory-layout_1","text":"","title":"Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#linux","text":"The Linux SGX Agent installs by default to /opt/sgx_agent, with the following subfolders:","title":"Linux"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#bin_1","text":"Contains executables and scripts.","title":"Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration_1","text":"Contains the config.yml configuration file.","title":"Configuration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#integration-hub_1","text":"","title":"Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation-answer-file","text":"Key sample Value Description AAS_API_URL https://< Authentication and Authorization Service IP or Hostname>:8444/aas Base URL for the AAS CMS_BASE_URL https://< Certificate Management Service IP or Hostname>:8445/cms/v1 Base URL for the CMS ATTESTATION_SERVICE_URL https://< SGX Host Verification Service IP or hostname>:13000/sgx-hvs/v1/ Base URL of SHVS ATTESTATION_TYPE SGX For SKC, Attestation Type is always SGX IHUB_SERVICE_USERNAME ihubuser@ihub Database username IHUB_SERVICE_PASSWORD ihubpassword Database password CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest> SHA384 digest of the CMS TLS certificate BEARER_TOKEN Installation token TENANT KUBERNETES Tenant Orchaestrator KUBERNETES_URL https://< Kubernetes Master Node IP or Hostname> :6443 Kubernetes Master node URL KUBERNETES_CRD custom-isecl-sgx CRD Name to be used TLS_SAN_LIST 127.0.0.1, localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. KUBERNETES_TOKEN Token from Kubernetes Master Node KUBERNETES_CERT_FILE /root/apiserver.crt Kubernetes server certificate path POLL_INTERVAL_MINUTES 2 IHUB Polling Interval in Minutes","title":"Installation Answer File"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-options_1","text":"The Integration Hub configuration can be found in /etc/ihub/config.yml.","title":"Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#command-line-options_2","text":"The Integrtion HUB supports several command-line commands that can be executed only as the Root user: Syntax: ihub \\<command>","title":"Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#available-commands_1","text":"","title":"Available Commands"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#help_2","text":"ihub help Displays the list of available CLI commands","title":"Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#start_2","text":"ihub start Start the service","title":"Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#stop_2","text":"ihub stop stops the service","title":"Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#status_2","text":"ihub status Reports whether the service is currently running.","title":"Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstall_2","text":"ihub uninstall [--purge] Removes the service. Use --purge option to remove configuration directory(/etc/ihub/)","title":"Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#version_2","text":"ihub version Reports the version of the service.","title":"Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#directory-layout_2","text":"","title":"Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#logs_1","text":"The Integration HUB installs by default to /opt/ihub with the following folders.","title":"Logs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#bin_2","text":"This folder contains executable scripts. Other folders which are created during installation are:","title":"Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration_2","text":"This folder /etc/ihub/ contains certificates, keys, and configuration files.","title":"Configuration"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#logs_2","text":"This folder contains log files: /var/log/ihub/","title":"Logs"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#certificate-management-service_1","text":"","title":"Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation-answer-file-options_2","text":"Key Sample Value Description CMS_PORT 8445 Default Port where Certificate Management Service Runs CMS_NOSETUP false Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. AAS_API_URL https://< AAS Hostname or IP address>:8444/aas/ URL to connect to the AAS, used during setup for authentication. AAS_TLS_SAN < Comma-separated list of IPs/hostnames for the AAS> SAN list populated in special JWT token; this token is used by AAS to get TLS certificate signed from CMS. SAN list in this token and CSR generated by AAS must match.","title":"Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-options_2","text":"The CMS configuration can be found in /etc/cms/config.yml.","title":"Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#command-line-options_3","text":"","title":"Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#help_3","text":"cms help Displays the list of available CLI commands.","title":"Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#start_3","text":"cms start Starts the services.","title":"Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#stop_3","text":"cms stop Stops the service.","title":"Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#status_3","text":"cms status Reports whether the service is currently running.","title":"Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstall_3","text":"cms uninstall [--purge] Uninstalls the service, including the deletion of all files and folders.","title":"Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#version_3","text":"cms version Reports the version of the service.","title":"Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#tlscertsha384","text":"cms tlscertsha384 Shows the SHA384 digest of the TLS certificate.","title":"Tlscertsha384"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#setup-task","text":"Runs a specific setup task. Available Tasks for setup:","title":"setup [task]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#cms-setup-server-portport","text":"Setup http server on \\<port> Environment variable CMS_PORT=\\<port> can be set alternatively","title":"cms setup server [--port=\\&lt;port>]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#cms-setup-root_ca-force","text":"Create its own self signed Root CA keypair in /etc/cms for quality of life Option [--force] overwrites any existing files, and always generate new Root CA keypair","title":"cms setup root_ca [--force]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#cms-setup-tls-force-host_nameshost_names","text":"Create its own root_ca signed TLS keypair in /etc/cms for quality of life Option [--force] overwrites any existing files, and always generate root_ca signed TLS keypair Argument \\<host_names> is a list of host names used by local machine, seperated by comma Environment variable CMS_HOST_NAMES=\\<host_names> can be set alternatively","title":"cms setup tls [--force] [--host_names=\\&lt;host_names>]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#cms-setup-cms_auth_token-force","text":"Create its own self signed JWT keypair in /etc/cms/jwt for quality of life Option [--force] overwrites any existing files, and always generate new JWT keypair and token","title":"cms setup cms_auth_token [--force]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#directory-layout_3","text":"The Certificate Management Service installs by default to /opt/cms with the following folders.","title":"Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#bin_3","text":"This folder contains executable scripts.","title":"Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#cacerts","text":"This folder contains the CMS root CA certificate.","title":"Cacerts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authentication-and-authorization-service_1","text":"","title":"Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation-answer-file-options_3","text":"Key Sample Value Description CMS_BASE_URL https://< cms IP or hostname>/cms/v1/ Provides the URL for the CMS. AAS_NOSETUP false Determines whether \u201csetup\u201d will be executed after installation. Typically this is set to \u201cfalse\u201d to install and perform setup in one action. The \u201ctrue\u201d option is intended for building the service as a container, where the installation would be part of the image build, and setup would be performed when the container starts for the first time to generate any persistent data. AAS_DB_HOSTNAME localhost Hostname or IP address of the AAS database AAS_DB_PORT 5432 Database port number AAS_DB_NAME pgdb Database name AAS_DB_USERNAME aasdbuser Database username AAS_DB_PASSWORD aasdbpassd Database password AAS_DB_SSLMODE verify-full AAS_DB_SSLCERTSRC /usr/local/pgsql/data/server.crt Required if the \u201cAAS_DB_SSLMODE\u201d is set to \u201cverify-ca.\u201d Defines the location of the database SSL certificate. AAS_DB_SSLCERT < path_to_cert_file_on_system > The AAS_DB_SSLCERTSRC variable defines the source location of the database SSL certificate; this variable determines the local location. If the former option is used without specifying this option, the service will copy the SSL certificate to the default configuration directory. AAS_ADMIN_USERNAME admin@aas Defines a new AAS administrative user. This user will be able to create new users, new roles, and new role-user mappings. This user will have the AAS:Administrator role. AAS_ADMIN_PASSWORD aasAdminPass Password for the new AAS admin user AAS_JWT_CERT_SUBJECT \"AAS JWT Signing Certificate\" Defines the subject of the JWT signing certificate. AAS_JWT_TOKEN_DURATION 5 Defines the amount of time in minutes that an issued token will be valid. SAN_LIST 127.0.0.1,localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. BEARER_TOKEN Installation Token from AAS.","title":"Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-options_3","text":"The AAS configuration can be found in /etc/authservice/config.yml.","title":"Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#help_4","text":"Displays the list of available CLI commands.","title":"Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#setup-task_1","text":"Executes a specific setup task. Can be used to change the current configuration. Available Tasks for setup:","title":"setup \\&lt;task>"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authservice-setup-all","text":"Runs all setup tasks","title":"authservice setup all"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authservice-setup-database-force-argumentsargument_value","text":"Available arguments are: db-host alternatively, set environment variable AAS_DB_HOSTNAME db-port alternatively, set environment variable AAS_DB_PORT db-user alternatively, set environment variable AAS_DB_USERNAME db-pass alternatively, set environment variable AAS_DB_PASSWORD db-name alternatively, set environment variable AAS_DB_NAME db-sslmode \\<disable|allow|prefer|require|verify-ca|verify-full> alternatively, set environment variable AAS_DB_SSLMODE db-sslcert path to where the certificate file of database. Only applicable for db-sslmode=\\<verify-ca|verify-full. If left empty, the cert will be copied to /etc/authservice/tdcertdb.pem alternatively, set environment variable AAS_DB_SSLCERT db-sslcertsrc \\<path to where the database ssl/tls certificate file> mandatory if db-sslcert does not already exist alternatively, set environment variable AAS_DB_SSLCERTSRC Run this command with environment variable AAS_DB_REPORT_MAX_ROWS and AAS_DB_REPORT_NUM_ROTATIONS can update db rotation arguments","title":"authservice setup database [-force] [-arguments=\\&lt;argument_value>]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authservice-setup-server-portport","text":"Setup http server on \\<port> Environment variable AAS_PORT=\\<port> can be set alternatively authservice setup tls [--force] [--host_names=\\<host_names>] Use the key and certificate provided in /etc/threat-detection if files exist Otherwise create its own self-signed TLS keypair in /etc/authservice for quality of life Option [--force] overwrites any existing files, and always generate self-signed keypair Argument \\<host_names> is a list of host names used by local machine, seperated by comma Environment variable AAS_TLS_HOST_NAMES=\\<host_names> can be set alternatively","title":"authservice setup server [--port=\\&lt;port>]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authservice-setup-admin-userusername-passpassword","text":"Environment variable AAS_ADMIN_USERNAME=\\<username> can be set alternatively Environment variable AAS_ADMIN_PASSWORD=\\<password> can be set alternatively","title":"authservice setup admin [--user=\\&lt;username>] [-pass=\\&lt;password>]"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authservice-setup-jwt","text":"Create jwt signing key and jwt certificate signed by CMS Environment variable CMS_BASE_URL=\\<url> for CMS API url Environment variable AAS_JWT_CERT_CN=\\<CERTIFICATE SUBJECT> AAS JWT Certificate Subject Environment variable AAS_JWT_INCLUDE_KEYID=\\<KEY ID> AAS include key id in JWT Token Environment variable AAS_JWT_TOKEN_DURATION_MINS=\\<DURATION> JWT Token validation minutes Environment variable BEARER_TOKEN=\\<token> for authenticating with CMS","title":"authservice setup jwt"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#start_4","text":"authservice start Starts the service.","title":"Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#status_4","text":"authservice status Displays the current status of the service.","title":"Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#stop_4","text":"authservice stop Stops the service.","title":"Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstall_4","text":"authservice uninstall [--purge] Removes the service. Use the \"--purge\" flag to also delete all data.","title":"Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#version_4","text":"authservice version Shows the version of the service.","title":"Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#directory-layout_4","text":"The Authendication and Authorization Service installs by default to /opt/authservice with the following folders.","title":"Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#bin_4","text":"Contains executable scripts and binaries.","title":"Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#dbscripts","text":"Contains database scripts.","title":"Dbscripts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#key-broker-service","text":"","title":"Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation-answer-file-options_4","text":"Variable Name Default Value Notes CMS_BASE_URL https://< CMS IP or hostname >:8445/cms/v1/ Required for generating TLS certificate AAS_API_URL https://< AAS IP or hostname >:8444/aas AAS service url SQVS_URL https://< SQVS IP or hostname >:12000/svs/v1/ Required to get the SGX Quote verified CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest > SHA384 digest of CMS TLS certificate BEARER_TOKEN JWT token for installation user KBS_SERVICE_USERNAME admin@kms KBS Service Username KBS_SERVICE_PASSWORD kmsAdminPass KBS Service User Password ENDPOINT_URL https://kbshostname:9443/v1 KBS Endpoint URL TLS_COMMON_NAME KBS TLS Certificate KBS TLS Certificate common-name SERVER_PORT 9443 KBS Secure Port SKC_CHALLENGE_TYPE SGX Challenge Type TLS_SAN_LIST < KBS IP/Hostname > IP addresses/hostnames to be included in SAN list. KEY_MANAGER Directory Key Manager Backend to store keys","title":"Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-options_4","text":"","title":"Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#command-line-options_4","text":"The Key Broker Service supports several command-line commands that can be executed only as the Root user: Syntax: kbs \\<command>","title":"Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#start_5","text":"kbs start Starts the service","title":"Start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#status_5","text":"kbs status Displays the current status of the service.","title":"Status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#stop_5","text":"kbs stop Stops the service","title":"Stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstall_5","text":"kbs uninstall [--purge] Removes the service","title":"Uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#version_5","text":"kbs version Displays the version of the service","title":"Version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#directory-layout_5","text":"The Key Broker Service installs by default to /opt/kbs with the following folders.","title":"Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#bin_5","text":"Contains executable scripts and binaries.","title":"Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-caching-service_1","text":"","title":"SGX Caching Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation-answer-file-options_5","text":"Key Sample Value Description CMS_BASE_URL https://< CMS IP or hostname >:8445/cms/v1/ CMS URL for Certificate Management Service AAS_API_URL https://< AAS IP or hostname >:8444/aas API URL for Authentication Authorization Service SCS_ADMIN_USERNAME scsuser@scs SCS Service username SCS_ADMIN_PASSWORD scspassword SCS Service password BEARER_TOKEN Installation Token from AAS CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest > SHA384 Hash sum for verifying the CMS TLS certificate. INTEL_PROVISIONING_SERVER https://sbx.api.trustedservices.intel.com/sgx/certification/v3 Intel pcs server url INTEL_PROVISIONING_SERVER_API_KEY < Add your API subscription key > Intel PCS Server API subscription key SCS_REFRESH_HOURS 1 hour Time after which the SGX collaterals in SCS db get refreshed from Intel PCS server RETRY_COUNT 3 Number Of times to connect to PCS if PCS service is not accessible WAIT_TIME 1 Number Of Seconds between retries to connect to PCS SCS_DB_HOSTNAME localhost SCS Databse hostname SCS_DB_PORT 5432 SCS Database port SCS_DB_NAME pgscsdb SCS Database name SCS_DB_USERNAME aasdbuser SCS Database username SCS_DB_PASSWORD aasdbpassword SCS Database password SCS_DB_SSLCERTSRC /usr/local/pgsql/data/server.crt SAN_LIST 127.0.0.1,localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service.","title":"Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-options_5","text":"The SGX Caching Service configuration can be found in /etc/scs/config.yml.","title":"Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#command-line-options_5","text":"","title":"Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#help_5","text":"Displays the list of available CLI commands.","title":"Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#start_6","text":"scs start Starts the SGX Caching Service","title":"start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#stop_6","text":"scs stop Stops the SGX Caching Service","title":"stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#status_6","text":"scs status Reports whether the SGX Caching Service is currently running","title":"status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstall_6","text":"scs uninstall [--purge] uninstall the SGX Caching Service. --purge option needs to be applied to remove configuration files","title":"uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#version_6","text":"scs version Reports the version of the scs","title":"version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#directory-layout_6","text":"The SGX Caching Service installs by default to /opt/scs with the following folders.","title":"Directory Layout"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#bin_6","text":"Contains SGX Caching Service executable binary.","title":"Bin"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#dbscripts_1","text":"Contains database scripts","title":"Dbscripts"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-quote-verification","text":"","title":"SGX Quote Verification"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#installation-answer-file-options_6","text":"Key Sample Value Description CMS_BASE_URL https://< CMS IP address or hostname >:8445/cms/v1/ Defines the base URL for the CMS owned by the image owner. Note that this CMS may be different from the CMS used for other components. AAS_API_URL https://< AAS IP address or hostname >:8444/aas Defines the baseurl for the AAS owned by the image owner. Note that this AAS may be different from the AAS used for other components. SCS_BASE_URL https://< SCS IP address or hostname >:9000/scs/sgx/certification/v1/ The SCS url is needed. SGX_TRUSTED_ROOT_CA_PATH /tmp/trusted_rootca.pem The path to SGX root ca used to verify quote CMS_TLS_CERT_SHA384 < Certificate Management Service TLS digest > SHA384 hash of the CMS TLS certificate BEARER_TOKEN Token from CMS with permissions used for installation. SQVS_LOG_LEVEL INFO (default), DEBUG Defines the log level for the SQVS. Defaults to INFO. SQVS_PASSWORD sqvsuser@sqvs Defines the credentials for the SQVS user SQVS_USERNAME sqvspassword Defines the credentials for the SQVS User SQVS_PORT 12000 SQVS Secure Port SQVS_NOSETUP false Skips setup during installation if set to true SAN_LIST 127.0.0.1,localhost Comma-separated list of IP addresses and hostnames that will be valid connection points for the service. Requests sent to the service using an IP or hostname not in this list will be denied, even if it resolves to this service. SQVS_INCLUDE_TOKEN true If true, SQVS will authenticate KBS before Quote Verifiation","title":"Installation Answer File Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-options_6","text":"The SGX Quote Verification Service configuration can be found in /etc/sqvs/config.yml.","title":"Configuration Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#command-line-options_6","text":"The SGX Quote Verifiction Service supports several command-line commands: Syntax: sqvs \\<command>","title":"Command-Line Options"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#help_6","text":"Displays the list of available CLI commands.","title":"Help"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#start_7","text":"sqvs start Starts the SGX Quote Verification Service","title":"start"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#stop_7","text":"sqvs stop Stops the SGX Quote Verification Service","title":"stop"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#status_7","text":"sqvs status Reports whether the SGX Quote Verification Service is currently running.","title":"status"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstall_7","text":"sqvs uninstall [--purge] uninstalls the SGX Quote Verification Service. --purge option needs to be applied to remove configuration files","title":"uninstall"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#version_7","text":"sqvs version Reports the version of the sqvs","title":"version"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#uninstallation","text":"This section describes steps used for uninstalling Intel SecL-DC services.","title":"Uninstallation"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#certificate-management-service_2","text":"To uninstall the Certificate Management Service, run the following command: cms uninstall --purge Removes following directories: /opt/cms /run/cms /var/log/cms /etc/cms","title":"Certificate Management Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#authentication-and-authorization-service_2","text":"To uninstall the Authentication and Authorization Service, run the following command: authservice uninstall --purge Removes following directories: /opt/authservice /run/authservice /var/log/authservice /etc/authservice","title":"Authentication and Authorization Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-host-verification-service_2","text":"To uninstall the SGX Host Verification Service, run the following command: shvs uninstall --purge Removes following directories: /opt/shvs /run/shvs /var/log/shvs /etc/shvs","title":"SGX Host Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx_agent","text":"To uninstall the SGX Agent, run the following command: sgx_agent uninstall --purge Removes following directories: /opt/sgx_agent /run/sgx_agent /var/log/sgx_agent /etc/sgx_agent","title":"SGX_Agent"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#integration-hub_2","text":"To uninstall the Integration Hub, run the following command: ihub uninstall --purge Removes the following directories: /opt/ihub /run/ihub /var/log/ihub /etc/ihub","title":"Integration Hub"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-caching-service_2","text":"To uninstall the SGX Caching Service , run the following command: scs uninstall --purge Removes the following directories: /opt/scs /run/scs /var/log/scs /etc/scs","title":"SGX Caching Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sgx-quote-verification-service_1","text":"To uninstall the SGX Quote Verification Service, run the following command: sqvs uninstall --purge Removes the following directories: /opt/sqvs /run/sqvs /var/log/sqvs /etc/sqvs","title":"SGX Quote Verification Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#key-broker-service_1","text":"kbs uninstall --purge To uninstall the Key Broker Service , run the following command: Removes the following directories: /opt/kbs /run/kbs /var/log/kbs /etc/kbs","title":"Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#skc-library","text":"To uninstall the SKC Library, run the following command: ./opt/skc/devops/scripts/uninstall.sh Removes the following directories: /opt/skc","title":"SKC Library"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#isecl-k8s-extensions","text":"Cluster admin can uninstall the isecl-k8s-extensions by running following commands: kubectl delete svc isecl-scheduler-svc -n isecl kubectl delete deployment isecl-controller isecl-scheduler -n isecl kubectl delete crds hostattributes.crd.isecl.intel.com rm -rf /opt/isecl-k8s-extensions rm -rf /var/log/isecl-k8s-extensions","title":"isecl-k8s-extensions"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#appendix","text":"Sample Shell script to create KBS user, KBS Roles and mapping KBS user to KBS roles and generating a KBS Token from AAS","title":"Appendix"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sample-script-to-create-key-broker-service-user-account-and-roles","text":"#!/bin/bash echo \"Setting up Key Broker Service Related roles and user in AAS Database\" source ~/kbs.env 2> /dev/null aas_hostname=${AAS_API_URL:-\"https://<aas.server.com>:8444/aas\"} CURL_OPTS=\"-s -k\" CONTENT_TYPE=\"Content-Type: application/json\" ACCEPT=\"Accept: application/jwt\" red=`tput setaf 1` green=`tput setaf 2` reset=`tput sgr0` mkdir -p /tmp/kbs tmpdir=$(mktemp -d -p /tmp/kbs) dnf install -yq jq Bearer_token=`curl $CURL_OPTS -X POST $aas_hostname/token -d '{\"username\": \"admin@aas\", \"password\": \"aasAdminPass\" }'` # This routine checks if kbs user exists and returns user id # it creates a new user if one does not exist create_kbs_user() { cat > $tmpdir/user.json << EOF { \"username\":\"$KBS_SERVICE_USERNAME\", \"password\":\"$KBS_SERVICE_PASSWORD\" } EOF #check if kbs user already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/user_response.json -w \"%{http_code}\" $aas_hostname/users?name=$KBS_SERVICE_USERNAME > $tmpdir/user-response.status len=$(jq '. | length' < $tmpdir/user_response.json) if [ $len -ne 0 ]; then user_id=$(jq -r '.[0] .user_id' < $tmpdir/user_response.json) else curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/user.json -o $tmpdir/user_response.json -w \"%{http_code}\" $aas_hostname/users > $tmpdir/user_response.status local status=$(cat $tmpdir/user_response.status) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/user_response.json ]; then user_id=$(jq -r '.user_id' < $tmpdir/user_response.json) if [ -n \"$user_id\" ]; then echo \"${green} Created kbs user, id: $user_id ${reset}\" fi fi fi } # This routine checks if kbs CertApprover/Administrator/QuoteVerifier roles exist and returns those role ids # it creates above roles if not present in AAS db create_roles() { cat > $tmpdir/certroles.json << EOF { \"service\": \"CMS\", \"name\": \"CertApprover\", \"context\": \"CN=$TLS_COMMON_NAME;SAN=$TLS_SAN_LIST;CERTTYPE=TLS\" } EOF cat > $tmpdir/quoteverifyroles.json << EOF { \"service\": \"SQVS\", \"name\": \"QuoteVerifier\", \"context\": \"\" } EOF #check if CertApprover role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_response.json -w \"%{http_code}\" $aas_hostname/roles?name=CertApprover > $tmpdir/role_response.status cms_role_id=$(jq --arg SAN $TLS_SAN_LIST -r '.[] | select ( .context | ( contains(\"KBS\") and contains($SAN)))' < $tmpdir/role_response.json | jq -r '.role_id') if [ -z $cms_role_id ]; then curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/certroles.json -o $tmpdir/role_response.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_response-status.json local status=$(cat $tmpdir/role_response-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_response.json ]; then cms_role_id=$(jq -r '.role_id' < $tmpdir/role_response.json) fi fi # get admin role id admin_role_id=`curl $CURL_OPTS $aas_hostname/roles?name=Administrator -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" | jq -r '.[0].role_id'` #check if QuoteVerifier role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles?name=QuoteVerifier > $tmpdir/role_resp.status len=$(jq '. | length' < $tmpdir/role_resp.json) if [ $len -ne 0 ]; then sqvs_role_id=$(jq -r '.[0] .role_id' < $tmpdir/role_resp.json) else curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/quoteverifyroles.json -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_resp-status.json local status=$(cat $tmpdir/role_resp-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_resp.json ]; then sqvs_role_id=$(jq -r '.role_id' < $tmpdir/role_resp.json) fi fi ROLE_ID_TO_MAP=`echo \\\"$cms_role_id\\\",\\\"$admin_role_id\\\",\\\"$sqvs_role_id\\\"` } #Maps kbs user to CertApprover/Administrator/QuoteVerifier Roles mapUser_to_role() { cat >$tmpdir/mapRoles.json <<EOF { \"role_ids\": [$ROLE_ID_TO_MAP] } EOF curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/mapRoles.json -o $tmpdir/mapRoles_response.json -w \"%{http_code}\" $aas_hostname/users/$user_id/roles > $tmpdir/mapRoles_response-status.json local status=$(cat $tmpdir/mapRoles_response-status.json) if [ $status -ne 201 ]; then return 1 fi } KBS_SETUP_API=\"create_kbs_user create_roles mapUser_to_role\" status= for api in $KBS_SETUP_API do eval $api status=$? if [ $status -ne 0 ]; then break; fi done if [ $status -ne 0 ]; then echo \"${red} Key Broking Service user/roles creation failed.: $api ${reset}\" exit 1 else echo \"${green} Key Broking Service user/roles creation succeded ${reset}\" fi #Get Token for Key Broking Service user and configure it in kbs config. curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"$ACCEPT\" --data @$tmpdir/user.json -o $tmpdir/kbs_token-resp.json -w \"%{http_code}\" $aas_hostname/token > $tmpdir/get_kbs_token-response.status status=$(cat $tmpdir/get_kbs_token-response.status) if [ $status -ne 200 ]; then echo \"${red} Couldn't get bearer token for kbs user ${reset}\" else export BEARER_TOKEN=`cat $tmpdir/kbs_token-resp.json` echo \"************************************************************************************************************************************************\" echo $BEARER_TOKEN echo \"************************************************************************************************************************************************\" echo \"${green} copy the above token and paste it against BEARER_TOKEN in kbs.env ${reset}\" fi # cleanup rm -rf $tmpdir The printed token needs to be added in BEARER_TOKEN section in kbs.env","title":"Sample Script to create Key Broker Service User account and roles"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#sample-script-to-create-integrated-hub-user-account-and-roles","text":"#!/bin/bash echo \"Setting up Integration Hub Service Related roles and user in AAS Database\" source ~/ihub.env 2> /dev/null aas_hostname=${AAS_API_URL:-\"https://<aas.server.com>:8444/aas\"} CN=\"Integration Hub TLS Certificate\" CURL_OPTS=\"-s -k\" CONTENT_TYPE=\"Content-Type: application/json\" ACCEPT=\"Accept: application/jwt\" red=`tput setaf 1` green=`tput setaf 2` reset=`tput sgr0` mkdir -p /tmp/ihub tmpdir=$(mktemp -d -p /tmp/ihub) dnf install -yq jq Bearer_token=`curl $CURL_OPTS -X POST $aas_hostname/token -d '{\"username\": \"admin@aas\", \"password\": \"aasAdminPass\" }'` # This routine checks if ihub user exists and returns user id # it creates a new user if one does not exist create_ihub_user() { cat > $tmpdir/user.json << EOF { \"username\":\"$IHUB_SERVICE_USERNAME\", \"password\":\"$IHUB_SERVICE_PASSWORD\" } EOF #check if ihub user already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/user_response.json -w \"%{http_code}\" $aas_hostname/users?name=$IHUB_SERVICE_USERNAME > $tmpdir/user-response.status len=$(jq '. | length' < $tmpdir/user_response.json) if [ $len -ne 0 ]; then user_id=$(jq -r '.[0] .user_id' < $tmpdir/user_response.json) else curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/user.json -o $tmpdir/user_response.json -w \"%{http_code}\" $aas_hostname/users > $tmpdir/user_response.status local status=$(cat $tmpdir/user_response.status) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/user_response.json ]; then user_id=$(jq -r '.user_id' < $tmpdir/user_response.json) if [ -n \"$user_id\" ]; then echo \"${green} Created ihub user, id: $user_id ${reset}\" fi fi fi } # This routine checks if ihub CertApprover/HostsListReader/HostDataReader roles exist and returns those role ids # it creates above roles if not present in AAS db create_roles() { cat > $tmpdir/certroles.json << EOF { \"service\": \"CMS\", \"name\": \"CertApprover\", \"context\": \"CN=$CN;SAN=$TLS_SAN_LIST;CERTTYPE=TLS\" } EOF cat > $tmpdir/hostlistreadroles.json << EOF { \"service\": \"SHVS\", \"name\": \"HostsListReader\", \"context\": \"\" } EOF cat > $tmpdir/hostdatareadroles.json << EOF { \"service\": \"SHVS\", \"name\": \"HostDataReader\", \"context\": \"\" } EOF #check if CertApprover role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_response.json -w \"%{http_code}\" $aas_hostname/roles?name=CertApprover > $tmpdir/role_response.status cms_role_id=$(jq --arg SAN $TLS_SAN_LIST -r '.[] | select ( .context | ( contains(\"Integration Hub\") and contains($SAN)))' < $tmpdir/role_response.json | jq -r '.role_id') if [ -z $cms_role_id ]; then curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/certroles.json -o $tmpdir/role_response.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_response-status.json local status=$(cat $tmpdir/role_response-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_response.json ]; then cms_role_id=$(jq -r '.role_id' < $tmpdir/role_response.json) fi fi #check if HostsListReader role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles?name=HostsListReader > $tmpdir/role_resp.status len=$(jq '. | length' < $tmpdir/role_resp.json) if [ $len -ne 0 ]; then ihub_role_id1=$(jq -r '.[0] .role_id' < $tmpdir/role_resp.json) else curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/hostlistreadroles.json -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_resp-status.json local status=$(cat $tmpdir/role_resp-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_resp.json ]; then ihub_role_id1=$(jq -r '.role_id' < $tmpdir/role_resp.json) fi fi #check if HostDataReader role already exists curl $CURL_OPTS -H \"Authorization: Bearer ${Bearer_token}\" -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles?name=HostDataReader > $tmpdir/role_resp.status ihub_role_id2=$(jq -r '.[] | select ( .service | contains(\"SHVS\"))' < $tmpdir/role_resp.json | jq -r '.role_id') if [ -z $ihub_role_id2 ]; then curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/hostdatareadroles.json -o $tmpdir/role_resp.json -w \"%{http_code}\" $aas_hostname/roles > $tmpdir/role_resp-status.json local status=$(cat $tmpdir/role_resp-status.json) if [ $status -ne 201 ]; then return 1 fi if [ -s $tmpdir/role_resp.json ]; then ihub_role_id2=$(jq -r '.role_id' < $tmpdir/role_resp.json) fi fi ROLE_ID_TO_MAP=`echo \\\"$cms_role_id\\\",\\\"$ihub_role_id1\\\",\\\"$ihub_role_id2\\\"` } #Maps ihub user to CertApprover/HostsListReader/HostDataReader Roles mapUser_to_role() { cat >$tmpdir/mapRoles.json <<EOF { \"role_ids\": [$ROLE_ID_TO_MAP] } EOF curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"Authorization: Bearer ${Bearer_token}\" --data @$tmpdir/mapRoles.json -o $tmpdir/mapRoles_response.json -w \"%{http_code}\" $aas_hostname/users/$user_id/roles > $tmpdir/mapRoles_response-status.json local status=$(cat $tmpdir/mapRoles_response-status.json) if [ $status -ne 201 ]; then return 1 fi } IHUB_SETUP_API=\"create_ihub_user create_roles mapUser_to_role\" status= for api in $IHUB_SETUP_API do eval $api status=$? if [ $status -ne 0 ]; then break; fi done if [ $status -ne 0 ]; then echo \"${red} Integration Hub Service user/roles creation failed.: $api ${reset}\" exit 1 else echo \"${green} Integration Hub Service user/roles creation succeded ${reset}\" fi #Get Token for Integration Hub Service user and configure it in ihub config. curl $CURL_OPTS -X POST -H \"$CONTENT_TYPE\" -H \"$ACCEPT\" --data @$tmpdir/user.json -o $tmpdir/ihub_token-resp.json -w \"%{http_code}\" $aas_hostname/token > $tmpdir/get_ihub_token-response.status status=$(cat $tmpdir/get_ihub_token-response.status) if [ $status -ne 200 ]; then echo \"${red} Couldn't get bearer token for ihub user ${reset}\" else export BEARER_TOKEN=`cat $tmpdir/ihub_token-resp.json` echo \"************************************************************************************************************************************************\" echo $BEARER_TOKEN echo \"************************************************************************************************************************************************\" echo \"${green} copy the above token and paste it against BEARER_TOKEN in ihub.env ${reset}\" fi # cleanup rm -rf $tmpdir The printed token needs to be added in BEARER_TOKEN section in ihub.env","title":"Sample Script to Create Integrated Hub User account and Roles"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#creating-rsa-keys-in-key-broker-service","text":"Configuration Update to create Keys in KBS On the Enterprise VM, where Key broker service is running cd /root/binaries/kbs_script Update KBS and AAS IP addresses in run.sh Update CACERT_PATH variable with trustedca certificate inside directory /etc/kbs/certs/trustedca/<id.pem>. Create RSA Key Execute the command ./run.sh reg copy the generated cert file to SGX compute node where skc_library is deployed. Also note down the the key id generated","title":"Creating RSA Keys in Key Broker Service"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#configuration-for-nginx-testing","text":"Note: Below mentioned OpenSSL and NGINX configuration updates are provided as patches (nginx.patch and openssl.patch) as part of skc_library deployment script. OpenSSL Configuration Update openssl configuration file /etc/pki/tls/openssl.cnf with below changes: [openssl_def] engines = engine_section [engine_section] pkcs11 = pkcs11_section [pkcs11_section] engine_id = pkcs11 dynamic_path =/usr/lib64/engines-1.1/pkcs11.so MODULE_PATH =/opt/skc/lib/libpkcs11-api.so init = 0 Nginx Configuration Update nginx configuration file /etc/nginx/nginx.conf with below changes: ssl_engine pkcs11; Update the location of certificate with the location where it was copied into the SGX compute node. ssl_certificate \"add absolute path of crt file\"; Update the KeyID with the KeyID received when RSA key was generated in KBS ssl_certificate_key \"engine:pkcs11:pkcs11:token=KMS;id=164b41ae-be61-4c7c-a027-4a2ab1e5e4c4;object=RSAKEY;type=private;pin-value=1234\"; SKC Configuration Create keys.txt in /tmp folder. This provides key preloading functionality in skc_library. Any number of keys can be added in keys.txt. Each PKCS11 URL should contain different Key IDs which need to be transferred from KBS along with respective object tag for each key id specified Last PKCS11 url entry in keys.txt should match with the one in nginx.conf The keyID should match the keyID of RSA key created in KBS. Other contents should match with nginx.conf. File location should match on pkcs11-apimodule.ini; pkcs11:token=KMS;id=164b41ae-be61-4c7c-a027-4a2ab1e5e4c4;object=RSAKEY;type=private;pin-value=1234; Sample /opt/skc/etc/pkcs11-apimodule.ini file [core] preload_keys=/tmp/keys.txt keyagent_conf=/opt/skc/etc/key-agent.ini mode=SGX debug=true [SW] module=/usr/lib64/pkcs11/libsofthsm2.so [SGX] module=/opt/intel/cryptoapitoolkit/lib/libp11sgx.so","title":"Configuration for NGINX testing"},{"location":"product-guide/Product%20Guide%20-%20Intel%C2%AE%20Security%20Libraries%20-%20Secure%20Key%20Caching/#kbs-key-transfer-flow-validation","text":"On SGX compute node, Execute below commands for KBS key-transfer: pkill nginx Remove any existing pkcs11 token rm -rf /opt/intel/cryptoapitoolkit/tokens/* Initiate Key tranfer from KBS systemctl restart nginx Changing group ownership and permissions of pkcs11 token groupadd intel usermod -G intel nginx chown -R root:intel /opt/intel/cryptoapitoolkit/tokens/ chmod -R 770 /opt/intel/cryptoapitoolkit/tokens/ Establish tls session with the nginx using the key transferred inside the enclave wget https://localhost:2443 --no-check-certificate","title":"KBS key-transfer flow validation"},{"location":"quick-start-guide/foundational_workload/appendix/","text":"Appendix Running behind Proxy #Set proxy in ~/.bash_profile export http_proxy = <proxy-url> export https_proxy = <proxy-url> export no_proxy = <ip_address/hostname> Git Config Sample (~/.gitconfig) [user] name = <username> email = <email-id> [color] ui = auto [push] default = matching Rebuilding Repos In order to rebuild repos, ensure the following steps are followed as a pre-requisite # Clean all go-mod packages rm -rf ~/go/pkg/mod/* #Navigate to specific folder where repos are built, example below cd /root/isec/fs rm -rf * .repo Installing the Intel\u00ae SecL Kubernetes Extensions and Integration Hub Intel\u00ae SecL uses Custom Resource Definitions to add the ability to base orchestration decisions on Intel\u00ae SecL security attributes to Kubernetes. These CRDs allow Kubernetes administrators to configure pods to require specific security attributes so that the Kubernetes Control Plane Node will schedule those pods only on Worker Nodes that match the specified attributes. Two CRDs are required for integration with Intel\u00ae SecL \u2013 an extension for the Control Plane nodes, and a scheduler extension. The extensions are deployed as a Kubernetes deployment in the isecl namespace. Deploy Intel\u00ae SecL Custom Controller Copy isecl-k8s-extensions-*.tar.gz to Kubernetes Control plane machine and extract the contents #Copy scp /<build_path>/binaries/isecl-k8s-extensions-*.tar.gz <user>@<k8s_master_machine>:/<path>/ #Extract tar -xvzf /<path>/isecl-k8s-extensions-*.tar.gz cd /<path>/isecl-k8s-extensions/ Create hostattributes.crd.isecl.intel.com CRD #1.14<=k8s_version<=1.16 kubectl apply -f yamls/crd-1.14.yaml #1.16<=k8s_version<=1.18 kubectl apply -f yamls/crd-1.17.yaml Check whether the CRD is created kubectl get crds Load the isecl-controller docker image docker load -i docker-isecl-controller-*.tar Deploy isecl-controller kubectl apply -f yamls/isecl-controller.yaml Check whether the isecl-controller is up and running kubectl get deploy -n isecl Create clusterRoleBinding for ihub to get access to cluster nodes kubectl create clusterrolebinding isecl-clusterrole --clusterrole = system:node --user = system:serviceaccount:isecl:isecl Fetch token required for ihub installation kubectl get secrets -n isecl #The below token will be used for ihub installation when configured with Kubernetes Tenant kubectl describe secret default-token-<name> -n isecl Additional Optional Configurable fields for isecl-controller configuration in isecl-controller.yaml Field Required Type Default Description LOG_LEVEL Optional string INFO Determines the log level LOG_MAX_LENGTH Optional int 1500 Determines the maximum length of characters in a line in log file TAG_PREFIX Optional string isecl A custom prefix which can be applied to isecl attributes that are pushed from IH. For example, if the tag-prefix is isecl. and trusted attribute in CRD becomes isecl.trusted . TAINT_UNTRUSTED_NODES Optional string false If set to true. NoExec taint applied to the nodes for which trust status is set to false, Applicable only for HVS based attestation Installing the Intel\u00ae SecL Integration Hub Copy the API Server certificate of K8s Master to machine where Integration Hub will be installed to /root/ directory Note: In most Kubernetes distributions the Kubernetes certificate and key is normally present under /etc/kubernetes/pki . However this might differ in case of some specific Kubernetes distributions. Update the token obtained in Step 8 of Deploy Intel\u00ae SecL Custom Controller along with other relevant tenant configuration options in ihub.env Install Integration Hub Copy the /etc/ihub/ihub_public_key.pem to Kubernetes Master machine to /<path>/secrets/ directory #On K8s-Master machine mkdir -p /<path>/secrets #On IHUB machine, copy scp /etc/ihub/ihub_public_key.pem <user>@<k8s_master_machine>:/<path>/secrets/hvs_ihub_public_key.pem Deploy Intel\u00ae SecL Extended Scheduler Install cfssl and cfssljson on Kubernetes Control Plane #Install wget dnf install wget -y #Download cfssl to /usr/local/bin/ wget -O /usr/local/bin/cfssl http://pkg.cfssl.org/R1.2/cfssl_linux-amd64 chmod +x /usr/local/bin/cfssl #Download cfssljson to /usr/local/bin wget -O /usr/local/bin/cfssljson http://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 chmod +x /usr/local/bin/cfssljson Create TLS key-pair for isecl-scheduler service which is signed by Kubernetes apiserver.crt cd /<path>/isecl-k8s-extensions/ chmod +x create_k8s_extsched_cert.sh #Set K8s_MASTER_IP,HOSTNAME export MASTER_IP = <k8s_machine_ip> export HOSTNAME = <k8s_machine_hostname> #Create TLS key-pair ./create_k8s_extsched_cert.sh -n \"K8S Extended Scheduler\" -s \" $MASTER_IP \" , \" $HOSTNAME \" -c <k8s_ca_authority_cert> -k <k8s_ca_authority_key> Note: In most Kubernetes distributions the Kubernetes certificate and key is normally present under /etc/kubernetes/pki . However this might differ in case of some specific Kubernetes distributions. Copy the TLS key-pair generated to /<path>/secrets/ directory cp /<path>/isecl-k8s-extensions/server.key /<path>/secrets/ cp /<path>/isecl-k8s-extensions/server.crt /<path>/secrets/ Load the isecl-scheduler docker image cd /<path>/isecl-k8s-extensions/ docker load -i docker-isecl-scheduler-*.tar Create scheduler-secret for isecl-scheduler cd /<path>/ kubectl create secret generic scheduler-certs --namespace isecl --from-file = secrets The isecl-scheduler.yaml file includes support for both SGX and Workload Security put together. For only working with Workload Security scenarios , the following line needs to be made empty in the yaml file. The scheduler and controller yaml files are located under /<path>/isecl-k8s-extensions/yamls - name : SGX_IHUB_PUBLIC_KEY_PATH value : \"\" Deploy isecl-scheduler cd /<path>/isecl-k8s-extensions/ kubectl apply -f yamls/isecl-scheduler.yaml Check whether the isecl-scheduler is up and running kubectl get deploy -n isecl Additional optional fields for isecl-scheduler configuration in isecl-scheduler.yaml Field Required Type Default Description LOG_LEVEL Optional string INFO Determines the log level LOG_MAX_LENGTH Optional int 1500 Determines the maximum length of characters in a line in log file TAG_PREFIX Optional string isecl. A custom prefix which can be applied to isecl attributes that are pushed from IH. For example, if the tag-prefix is *isecl.* and *trusted* attribute in CRD becomes *isecl.trusted* . PORT Optional int 8888 ISecl scheduler service port HVS_IHUB_PUBLIC_KEY_PATH Required string Required for IHub with HVS Attestation SGX_IHUB_PUBLIC_KEY_PATH Required string Required for IHub with SGX Attestation TLS_CERT_PATH Required string Path of tls certificate signed by kubernetes CA TLS_KEY_PATH Required string Path of tls key Configuring kube-scheduler to establish communication with isecl-scheduler Note: The below is a sample when using kubeadm as the Kubernetes distribution, the scheduler configuration files would be different for any other Kubernetes distributions being used. Add a mount path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - mountPath : /<path>/isecl-k8s-extensions/ name : extendedsched readOnly : true Add a volume path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - hostPath : path : /<path>/isecl-k8s-extensions/ type : \"\" name : extendedsched Add policy-config-file path in the /etc/kubernetes/manifests/kube-scheduler.yaml file under command section: - command : - kube-scheduler - --policy-config-file=/<path>/isecl-k8s-extensions/scheduler-policy.json - --bind-address=127.0.0.1 - --kubeconfig=/etc/kubernetes/scheduler.conf - --leader-elect=true Restart kubelet systemctl restart kubelet","title":"Appendix"},{"location":"quick-start-guide/foundational_workload/appendix/#appendix","text":"","title":"Appendix"},{"location":"quick-start-guide/foundational_workload/appendix/#running-behind-proxy","text":"#Set proxy in ~/.bash_profile export http_proxy = <proxy-url> export https_proxy = <proxy-url> export no_proxy = <ip_address/hostname>","title":"Running behind Proxy"},{"location":"quick-start-guide/foundational_workload/appendix/#git-config-sample-gitconfig","text":"[user] name = <username> email = <email-id> [color] ui = auto [push] default = matching","title":"Git Config Sample (~/.gitconfig)"},{"location":"quick-start-guide/foundational_workload/appendix/#rebuilding-repos","text":"In order to rebuild repos, ensure the following steps are followed as a pre-requisite # Clean all go-mod packages rm -rf ~/go/pkg/mod/* #Navigate to specific folder where repos are built, example below cd /root/isec/fs rm -rf * .repo","title":"Rebuilding Repos"},{"location":"quick-start-guide/foundational_workload/appendix/#installing-the-intel-secl-kubernetes-extensions-and-integration-hub","text":"Intel\u00ae SecL uses Custom Resource Definitions to add the ability to base orchestration decisions on Intel\u00ae SecL security attributes to Kubernetes. These CRDs allow Kubernetes administrators to configure pods to require specific security attributes so that the Kubernetes Control Plane Node will schedule those pods only on Worker Nodes that match the specified attributes. Two CRDs are required for integration with Intel\u00ae SecL \u2013 an extension for the Control Plane nodes, and a scheduler extension. The extensions are deployed as a Kubernetes deployment in the isecl namespace.","title":"Installing the Intel\u00ae SecL Kubernetes Extensions and Integration Hub"},{"location":"quick-start-guide/foundational_workload/appendix/#deploy-intel-secl-custom-controller","text":"Copy isecl-k8s-extensions-*.tar.gz to Kubernetes Control plane machine and extract the contents #Copy scp /<build_path>/binaries/isecl-k8s-extensions-*.tar.gz <user>@<k8s_master_machine>:/<path>/ #Extract tar -xvzf /<path>/isecl-k8s-extensions-*.tar.gz cd /<path>/isecl-k8s-extensions/ Create hostattributes.crd.isecl.intel.com CRD #1.14<=k8s_version<=1.16 kubectl apply -f yamls/crd-1.14.yaml #1.16<=k8s_version<=1.18 kubectl apply -f yamls/crd-1.17.yaml Check whether the CRD is created kubectl get crds Load the isecl-controller docker image docker load -i docker-isecl-controller-*.tar Deploy isecl-controller kubectl apply -f yamls/isecl-controller.yaml Check whether the isecl-controller is up and running kubectl get deploy -n isecl Create clusterRoleBinding for ihub to get access to cluster nodes kubectl create clusterrolebinding isecl-clusterrole --clusterrole = system:node --user = system:serviceaccount:isecl:isecl Fetch token required for ihub installation kubectl get secrets -n isecl #The below token will be used for ihub installation when configured with Kubernetes Tenant kubectl describe secret default-token-<name> -n isecl Additional Optional Configurable fields for isecl-controller configuration in isecl-controller.yaml Field Required Type Default Description LOG_LEVEL Optional string INFO Determines the log level LOG_MAX_LENGTH Optional int 1500 Determines the maximum length of characters in a line in log file TAG_PREFIX Optional string isecl A custom prefix which can be applied to isecl attributes that are pushed from IH. For example, if the tag-prefix is isecl. and trusted attribute in CRD becomes isecl.trusted . TAINT_UNTRUSTED_NODES Optional string false If set to true. NoExec taint applied to the nodes for which trust status is set to false, Applicable only for HVS based attestation","title":"Deploy Intel\u00ae SecL Custom Controller"},{"location":"quick-start-guide/foundational_workload/appendix/#installing-the-intel-secl-integration-hub","text":"Copy the API Server certificate of K8s Master to machine where Integration Hub will be installed to /root/ directory Note: In most Kubernetes distributions the Kubernetes certificate and key is normally present under /etc/kubernetes/pki . However this might differ in case of some specific Kubernetes distributions. Update the token obtained in Step 8 of Deploy Intel\u00ae SecL Custom Controller along with other relevant tenant configuration options in ihub.env Install Integration Hub Copy the /etc/ihub/ihub_public_key.pem to Kubernetes Master machine to /<path>/secrets/ directory #On K8s-Master machine mkdir -p /<path>/secrets #On IHUB machine, copy scp /etc/ihub/ihub_public_key.pem <user>@<k8s_master_machine>:/<path>/secrets/hvs_ihub_public_key.pem","title":"Installing the Intel\u00ae SecL Integration Hub"},{"location":"quick-start-guide/foundational_workload/appendix/#deploy-intel-secl-extended-scheduler","text":"Install cfssl and cfssljson on Kubernetes Control Plane #Install wget dnf install wget -y #Download cfssl to /usr/local/bin/ wget -O /usr/local/bin/cfssl http://pkg.cfssl.org/R1.2/cfssl_linux-amd64 chmod +x /usr/local/bin/cfssl #Download cfssljson to /usr/local/bin wget -O /usr/local/bin/cfssljson http://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 chmod +x /usr/local/bin/cfssljson Create TLS key-pair for isecl-scheduler service which is signed by Kubernetes apiserver.crt cd /<path>/isecl-k8s-extensions/ chmod +x create_k8s_extsched_cert.sh #Set K8s_MASTER_IP,HOSTNAME export MASTER_IP = <k8s_machine_ip> export HOSTNAME = <k8s_machine_hostname> #Create TLS key-pair ./create_k8s_extsched_cert.sh -n \"K8S Extended Scheduler\" -s \" $MASTER_IP \" , \" $HOSTNAME \" -c <k8s_ca_authority_cert> -k <k8s_ca_authority_key> Note: In most Kubernetes distributions the Kubernetes certificate and key is normally present under /etc/kubernetes/pki . However this might differ in case of some specific Kubernetes distributions. Copy the TLS key-pair generated to /<path>/secrets/ directory cp /<path>/isecl-k8s-extensions/server.key /<path>/secrets/ cp /<path>/isecl-k8s-extensions/server.crt /<path>/secrets/ Load the isecl-scheduler docker image cd /<path>/isecl-k8s-extensions/ docker load -i docker-isecl-scheduler-*.tar Create scheduler-secret for isecl-scheduler cd /<path>/ kubectl create secret generic scheduler-certs --namespace isecl --from-file = secrets The isecl-scheduler.yaml file includes support for both SGX and Workload Security put together. For only working with Workload Security scenarios , the following line needs to be made empty in the yaml file. The scheduler and controller yaml files are located under /<path>/isecl-k8s-extensions/yamls - name : SGX_IHUB_PUBLIC_KEY_PATH value : \"\" Deploy isecl-scheduler cd /<path>/isecl-k8s-extensions/ kubectl apply -f yamls/isecl-scheduler.yaml Check whether the isecl-scheduler is up and running kubectl get deploy -n isecl Additional optional fields for isecl-scheduler configuration in isecl-scheduler.yaml Field Required Type Default Description LOG_LEVEL Optional string INFO Determines the log level LOG_MAX_LENGTH Optional int 1500 Determines the maximum length of characters in a line in log file TAG_PREFIX Optional string isecl. A custom prefix which can be applied to isecl attributes that are pushed from IH. For example, if the tag-prefix is *isecl.* and *trusted* attribute in CRD becomes *isecl.trusted* . PORT Optional int 8888 ISecl scheduler service port HVS_IHUB_PUBLIC_KEY_PATH Required string Required for IHub with HVS Attestation SGX_IHUB_PUBLIC_KEY_PATH Required string Required for IHub with SGX Attestation TLS_CERT_PATH Required string Path of tls certificate signed by kubernetes CA TLS_KEY_PATH Required string Path of tls key","title":"Deploy Intel\u00ae SecL Extended Scheduler"},{"location":"quick-start-guide/foundational_workload/appendix/#configuring-kube-scheduler-to-establish-communication-with-isecl-scheduler","text":"Note: The below is a sample when using kubeadm as the Kubernetes distribution, the scheduler configuration files would be different for any other Kubernetes distributions being used. Add a mount path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - mountPath : /<path>/isecl-k8s-extensions/ name : extendedsched readOnly : true Add a volume path to the /etc/kubernetes/manifests/kube-scheduler.yaml file for the Intel SecL scheduler extension: - hostPath : path : /<path>/isecl-k8s-extensions/ type : \"\" name : extendedsched Add policy-config-file path in the /etc/kubernetes/manifests/kube-scheduler.yaml file under command section: - command : - kube-scheduler - --policy-config-file=/<path>/isecl-k8s-extensions/scheduler-policy.json - --bind-address=127.0.0.1 - --kubeconfig=/etc/kubernetes/scheduler.conf - --leader-elect=true Restart kubelet systemctl restart kubelet","title":"Configuring kube-scheduler to establish communication with isecl-scheduler"},{"location":"quick-start-guide/foundational_workload/build/","text":"Build Foundational Security Sync the repo 1 2 3 mkdir -p /root/intel-secl/build/fs && cd /root/intel-secl/build/fs repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/fs.xml repo sync Run the pre-requisites setup script 1 2 3 cd utils/build/foundational-security/ chmod +x fs-prereq.sh ./fs-prereq.sh -s Build all repos 1 2 cd /root/intel-secl/build/fs/ make all Built Binaries 1 /root/intel-secl/build/fs/binaries Workload Security VM Confidentiality Sync the repo 1 2 3 mkdir -p /root/intel-secl/build/vmc && cd /root/intel-secl/build/vmc repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/vmc.xml repo sync Run the pre-req script 1 2 3 cd utils/build/workload-security chmod +x ws-prereq.sh ./ws-prereq.sh -v Build repo 1 2 cd /root/intel-secl/build/vmc/ make all Built Binaries 1 /root/intel-secl/build/vmc/binaries/ Container Confidentiality with Docker Runtime Sync the repo 1 2 3 mkdir -p /root/intel-secl/build/cc-docker && cd /root/intel-secl/build/cc-docker repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/cc-docker.xml repo sync Run the pre-requisites script 1 2 3 cd utils/build/workload-security chmod +x ws-prereq.sh ./ws-prereq.sh -d Enable and start the Docker daemon 1 2 systemctl enable docker systemctl start docker Ignore the below steps if not running behind a proxy 1 2 3 4 5 6 7 8 mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/proxy.conf # Add the below lines in proxy.conf [ Service ] Environment = \"HTTP_PROXY=<http_proxy>\" Environment = \"HTTPS_PROXY=<https_proxy>\" Environment = \"NO_PROXY=<no_proxy>\" 1 2 systemctl daemon-reload systemctl restart docker Build repos 1 2 cd /root/intel-secl/build/cc-docker/ make all Built binaries 1 /root/intel-secl/build/cc-docker/binaries/ Container Confidentiality with CRIO Runtime Sync the repo 1 2 3 mkdir -p /root/intel-secl/build/cc-crio && cd /root/intel-secl/build/cc-crio repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/cc-crio.xml repo sync Run the pre-requisites script 1 2 3 cd utils/build/workload-security chmod +x ws-prereq.sh ./ws-prereq.sh -c Enable and start the Docker daemon 1 2 systemctl enable docker systemctl start docker Ignore the below steps if not running behind a proxy 1 2 3 4 5 6 7 8 mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/proxy.conf #Add the below lines in proxy.conf [ Service ] Environment = \"HTTP_PROXY=<http_proxy>\" Environment = \"HTTPS_PROXY=<https_proxy>\" Environment = \"NO_PROXY=<no_proxy>\" 1 2 3 #Reload docker systemctl daemon-reload systemctl restart docker Download go dependencies 1 2 3 cd /root/ go get github.com/cpuguy83/go-md2man mv /root/go/bin/go-md2man /usr/bin/ Build the repos 1 2 cd /root/intel-secl/build/cc-crio make all Note The crio use case uses containerd that is bundled with docker-ce-19.03.13 during build time. As of this release , the version being used is containerd-1.3.7 . If the remote docker-ce repo gets updated for newer containerd version, then the version of containerd might be incompatible for building crio use case. It is recommended to use the version 1.3.7 in that case. Built binaries 1 /root/intel-secl/build/cc-crio/binaries/","title":"Build"},{"location":"quick-start-guide/foundational_workload/build/#build","text":"","title":"Build"},{"location":"quick-start-guide/foundational_workload/build/#foundational-security","text":"Sync the repo 1 2 3 mkdir -p /root/intel-secl/build/fs && cd /root/intel-secl/build/fs repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/fs.xml repo sync Run the pre-requisites setup script 1 2 3 cd utils/build/foundational-security/ chmod +x fs-prereq.sh ./fs-prereq.sh -s Build all repos 1 2 cd /root/intel-secl/build/fs/ make all Built Binaries 1 /root/intel-secl/build/fs/binaries","title":"Foundational Security"},{"location":"quick-start-guide/foundational_workload/build/#workload-security","text":"","title":"Workload Security"},{"location":"quick-start-guide/foundational_workload/build/#vm-confidentiality","text":"Sync the repo 1 2 3 mkdir -p /root/intel-secl/build/vmc && cd /root/intel-secl/build/vmc repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/vmc.xml repo sync Run the pre-req script 1 2 3 cd utils/build/workload-security chmod +x ws-prereq.sh ./ws-prereq.sh -v Build repo 1 2 cd /root/intel-secl/build/vmc/ make all Built Binaries 1 /root/intel-secl/build/vmc/binaries/","title":"VM Confidentiality"},{"location":"quick-start-guide/foundational_workload/build/#container-confidentiality-with-docker-runtime","text":"Sync the repo 1 2 3 mkdir -p /root/intel-secl/build/cc-docker && cd /root/intel-secl/build/cc-docker repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/cc-docker.xml repo sync Run the pre-requisites script 1 2 3 cd utils/build/workload-security chmod +x ws-prereq.sh ./ws-prereq.sh -d Enable and start the Docker daemon 1 2 systemctl enable docker systemctl start docker Ignore the below steps if not running behind a proxy 1 2 3 4 5 6 7 8 mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/proxy.conf # Add the below lines in proxy.conf [ Service ] Environment = \"HTTP_PROXY=<http_proxy>\" Environment = \"HTTPS_PROXY=<https_proxy>\" Environment = \"NO_PROXY=<no_proxy>\" 1 2 systemctl daemon-reload systemctl restart docker Build repos 1 2 cd /root/intel-secl/build/cc-docker/ make all Built binaries 1 /root/intel-secl/build/cc-docker/binaries/","title":"Container Confidentiality with Docker Runtime"},{"location":"quick-start-guide/foundational_workload/build/#container-confidentiality-with-crio-runtime","text":"Sync the repo 1 2 3 mkdir -p /root/intel-secl/build/cc-crio && cd /root/intel-secl/build/cc-crio repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/cc-crio.xml repo sync Run the pre-requisites script 1 2 3 cd utils/build/workload-security chmod +x ws-prereq.sh ./ws-prereq.sh -c Enable and start the Docker daemon 1 2 systemctl enable docker systemctl start docker Ignore the below steps if not running behind a proxy 1 2 3 4 5 6 7 8 mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/proxy.conf #Add the below lines in proxy.conf [ Service ] Environment = \"HTTP_PROXY=<http_proxy>\" Environment = \"HTTPS_PROXY=<https_proxy>\" Environment = \"NO_PROXY=<no_proxy>\" 1 2 3 #Reload docker systemctl daemon-reload systemctl restart docker Download go dependencies 1 2 3 cd /root/ go get github.com/cpuguy83/go-md2man mv /root/go/bin/go-md2man /usr/bin/ Build the repos 1 2 cd /root/intel-secl/build/cc-crio make all Note The crio use case uses containerd that is bundled with docker-ce-19.03.13 during build time. As of this release , the version being used is containerd-1.3.7 . If the remote docker-ce repo gets updated for newer containerd version, then the version of containerd might be incompatible for building crio use case. It is recommended to use the version 1.3.7 in that case. Built binaries 1 /root/intel-secl/build/cc-crio/binaries/","title":"Container Confidentiality with CRIO Runtime"},{"location":"quick-start-guide/foundational_workload/deploy/","text":"Deploy The below details would enable the deployment through Ansible Role for Intel\u00ae SecL-DC Foundational & Workload Security Usecases. However the services can still be installed manually using the Product Guide. More details on Ansible Role for Intel\u00ae SecL-DC in Ansible-Role repository. Pre-requisites The Ansible Server is required to use this role to deploy Intel\u00ae SecL-DC services based on the supported deployment model. The Ansible server is recommended to be installed on the Build machine itself. The role has been tested with Ansible Version 2.9.10 Install Ansible on Build Machine 1 pip3 install ansible == 2 .9.10 Install epel-release repository and install sshpass for ansible to connect to remote hosts using SSH 1 2 dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm dnf install sshpass Create directory for ansible default configuration and hosts file 1 2 mkdir -p /etc/ansible/ touch /etc/ansible/ansible.cfg Copy the default ansible.cfg contents from https://raw.githubusercontent.com/ansible/ansible/v2.9.10/examples/ansible.cfg and paste it under /etc/ansible/ansible.cfg Download the Ansible Role The role can be cloned locally from git and the contents can be copied to the roles folder used by your ansible server 1 2 3 4 5 6 7 8 9 10 11 12 #Create directory for using ansible deployment mkdir -p /root/intel-secl/deploy/ #Clone the repository cd /root/intel-secl/deploy/ && git clone https://github.com/intel-secl/utils.git #Checkout to specific release-version cd utils/ git checkout <release-version of choice> cd tools/ansible-role #Update ansible.cfg roles_path to point to path(/root/intel-secl/deploy/utils/tools/) Usecase Setup Options Usecase Variable Host Attestation setup: host-attestation in playbook or via --extra-vars as setup=host-attestation in CLI Application Integrity setup: application-integrity in playbook or via --extra-vars as setup=application-integrity in CLI Data Fencing & Asset Tags setup: data-fencing in playbook or via --extra-vars as setup=data-fencing in CLI Trusted Workload Placement - VM setup: trusted-workload-placement-vm in playbook or via --extra-vars as setup=trusted-workload-placement-vm in CLI Trusted Workload Placement - Containers setup: trusted-workload-placement-containers in playbook or via --extra-vars as setup=trusted-workload-placement-containers in CLI Launch Time Protection - VM Confidentiality setup: workload-conf-vm in playbook or via --extra-vars as setup=workload-conf-vm in CLI Launch Time Protection - Container Confidentiality with Docker Runtime setup: workload-conf-containers-docker in playbook or via --extra-vars as setup=workload-conf-containers-docker in CLI Launch Time Protection - Container Confidentiality with CRIO Runtime setup: workload-conf-containers-crio in playbook or via --extra-vars as setup=workload-conf-containers-crio in CLI Note Orchestrator installation is not bundled with the role and need to be done independently. Also, components dependent on the orchestrator like isecl-k8s-extensions and integration-hub are installed either partially or not installed Note Key Broker Service is not configured with KMIP compliant KMS when installing through ansible role Update Ansible Inventory In order to deploy Intel\u00ae SecL-DC binaries, the following inventory can be used and the required inventory vars as below need to be set. The below example inventory can be created under /etc/ansible/hosts [CSP] <machine1_ip/hostname> [Enterprise] <machine2_ip/hostname> [Node] <machine3_ip/hostname> [CSP:vars] isecl_role=csp ansible_user=root ansible_password=<password> [Enterprise:vars] isecl_role=enterprise ansible_user=root ansible_password=<password> [Node:vars] isecl_role=node ansible_user=root ansible_password=<password> Note Ansible requires ssh and root user access to remote machines. The following command can be used to ensure ansible can connect to remote machines with host key check. Ensure the existing keys of the machines are cleared to enable fresh keyscan. 1 ssh-keyscan -H <ip_address/hostname> >> /root/.ssh/known_hosts Create and Run Playbook The following are playbook and CLI example for deploying Intel\u00ae SecL-DC binaries based on the supported deployment models and usecases. The below example playbooks can be created as site-bin-isecl.yml Note If running behind a proxy, update the proxy variables under vars/main.yml and run as below Note Go through the Additional Examples and Tips section for specific workflow samples Option 1 - hosts : all gather_facts : yes any_errors_fatal : true vars : setup : <setup var from supported usecases> binaries_path : <path where built binaries are copied to> roles : - ansible-role environment : http_proxy : \"{{http_proxy}}\" https_proxy : \"{{https_proxy}}\" no_proxy : \"{{no_proxy}}\" and 1 ansible-playbook <playbook-name> OR Option 2: - hosts : all gather_facts : yes any_errors_fatal : true roles : - ansible-role environment : http_proxy : \"{{http_proxy}}\" https_proxy : \"{{https_proxy}}\" no_proxy : \"{{no_proxy}}\" and 1 2 3 ansible-playbook <playbook-name> \\ --extra-vars setup = <setup var from supported usecases> \\ --extra-vars binaries_path = <path where built binaries are copied to> Additional Examples & Tips TPM is already owned If the Trusted Platform Module(TPM) is already owned, the owner secret(SRK) can be provided directly during runtime in the playbook: 1 2 3 4 ansible-playbook <playbook-name> \\ --extra-vars setup = <setup var from supported usecases> \\ --extra-vars binaries_path = <path where built binaries are copied to> \\ --extra-vars tpm_secret = <tpm owner secret> or Update the following vars in defaults/main.yml # The TPM Storage Root Key(SRK) Password to be used if TPM is already owned tpm_owner_secret : <tpm_secret> UEFI SecureBoot enabled If UEFI mode and UEFI SecureBoot feature is enabled, the following option can be used to during runtime in the playbook 1 2 3 4 5 ansible-playbook <playbook-name> \\ --extra-vars setup = <setup var from supported usecases> \\ --extra-vars binaries_path = <path where built binaries are copied to> \\ --extra-vars uefi_secureboot = yes \\ -- extra-vars grub_file_path = <uefi mode grub file path> or Update the following vars in defaults/main.yml # Enable/disable for UEFI SecureBoot Mode # [yes - UEFI SecureBoot mode, no - Legacy mode] uefi_secureboot : 'yes' # The grub file path for Legacy mode & UEFI Mode. Default is Legacy mode path. Update the below path for UEFI mode with UEFI SecureBoot grub_file_path : <uefi mode grub file path> Using Docker Notary If using Docker notary when working with Launch Time Protection - Workload Confidentiality with Docker Runtime , following options can be provided during runtime in the playbook 1 2 3 4 5 6 ansible-playbook <playbook-name> \\ --extra-vars setup = <setup var from supported usecases> \\ --extra-vars binaries_path = <path where built binaries are copied to> \\ --extra-vars insecure_verify = <insecure_verify [ TRUE/FALSE ] > \\ --extra-vars registry_ipaddr = <registry ipaddr> \\ --extra-vars registry_scheme = <registry scheme [ http/https ] > or Update the following vars in defaults/main.yml # [TRUE/FALSE based on registry configured with http/https respectively] # Required for Workload Integrity with containers insecure_skip_verify : <insecure_skip_verify> # The registry IP for the Docker registry from where container images are pulled # Required for Workload Integrity with containers registry_ip : <registry_ipaddr> # The registry protocol for talking to the remote registry [http/https] # Required for Workload Integrity with containers registry_scheme_type : <registry_scheme> In case of Misconfigurations If any service installation fails due to any misconfiguration, just uninstall the specific service manually , fix the misconfiguration in ansible and rerun the playbook. The successfully installed services wont be reinstalled.","title":"Deploy"},{"location":"quick-start-guide/foundational_workload/deploy/#deploy","text":"The below details would enable the deployment through Ansible Role for Intel\u00ae SecL-DC Foundational & Workload Security Usecases. However the services can still be installed manually using the Product Guide. More details on Ansible Role for Intel\u00ae SecL-DC in Ansible-Role repository.","title":"Deploy"},{"location":"quick-start-guide/foundational_workload/deploy/#pre-requisites","text":"The Ansible Server is required to use this role to deploy Intel\u00ae SecL-DC services based on the supported deployment model. The Ansible server is recommended to be installed on the Build machine itself. The role has been tested with Ansible Version 2.9.10 Install Ansible on Build Machine 1 pip3 install ansible == 2 .9.10 Install epel-release repository and install sshpass for ansible to connect to remote hosts using SSH 1 2 dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm dnf install sshpass Create directory for ansible default configuration and hosts file 1 2 mkdir -p /etc/ansible/ touch /etc/ansible/ansible.cfg Copy the default ansible.cfg contents from https://raw.githubusercontent.com/ansible/ansible/v2.9.10/examples/ansible.cfg and paste it under /etc/ansible/ansible.cfg","title":"Pre-requisites"},{"location":"quick-start-guide/foundational_workload/deploy/#download-the-ansible-role","text":"The role can be cloned locally from git and the contents can be copied to the roles folder used by your ansible server 1 2 3 4 5 6 7 8 9 10 11 12 #Create directory for using ansible deployment mkdir -p /root/intel-secl/deploy/ #Clone the repository cd /root/intel-secl/deploy/ && git clone https://github.com/intel-secl/utils.git #Checkout to specific release-version cd utils/ git checkout <release-version of choice> cd tools/ansible-role #Update ansible.cfg roles_path to point to path(/root/intel-secl/deploy/utils/tools/)","title":"Download the Ansible Role"},{"location":"quick-start-guide/foundational_workload/deploy/#usecase-setup-options","text":"Usecase Variable Host Attestation setup: host-attestation in playbook or via --extra-vars as setup=host-attestation in CLI Application Integrity setup: application-integrity in playbook or via --extra-vars as setup=application-integrity in CLI Data Fencing & Asset Tags setup: data-fencing in playbook or via --extra-vars as setup=data-fencing in CLI Trusted Workload Placement - VM setup: trusted-workload-placement-vm in playbook or via --extra-vars as setup=trusted-workload-placement-vm in CLI Trusted Workload Placement - Containers setup: trusted-workload-placement-containers in playbook or via --extra-vars as setup=trusted-workload-placement-containers in CLI Launch Time Protection - VM Confidentiality setup: workload-conf-vm in playbook or via --extra-vars as setup=workload-conf-vm in CLI Launch Time Protection - Container Confidentiality with Docker Runtime setup: workload-conf-containers-docker in playbook or via --extra-vars as setup=workload-conf-containers-docker in CLI Launch Time Protection - Container Confidentiality with CRIO Runtime setup: workload-conf-containers-crio in playbook or via --extra-vars as setup=workload-conf-containers-crio in CLI Note Orchestrator installation is not bundled with the role and need to be done independently. Also, components dependent on the orchestrator like isecl-k8s-extensions and integration-hub are installed either partially or not installed Note Key Broker Service is not configured with KMIP compliant KMS when installing through ansible role","title":"Usecase Setup Options"},{"location":"quick-start-guide/foundational_workload/deploy/#update-ansible-inventory","text":"In order to deploy Intel\u00ae SecL-DC binaries, the following inventory can be used and the required inventory vars as below need to be set. The below example inventory can be created under /etc/ansible/hosts [CSP] <machine1_ip/hostname> [Enterprise] <machine2_ip/hostname> [Node] <machine3_ip/hostname> [CSP:vars] isecl_role=csp ansible_user=root ansible_password=<password> [Enterprise:vars] isecl_role=enterprise ansible_user=root ansible_password=<password> [Node:vars] isecl_role=node ansible_user=root ansible_password=<password> Note Ansible requires ssh and root user access to remote machines. The following command can be used to ensure ansible can connect to remote machines with host key check. Ensure the existing keys of the machines are cleared to enable fresh keyscan. 1 ssh-keyscan -H <ip_address/hostname> >> /root/.ssh/known_hosts","title":"Update Ansible Inventory"},{"location":"quick-start-guide/foundational_workload/deploy/#create-and-run-playbook","text":"The following are playbook and CLI example for deploying Intel\u00ae SecL-DC binaries based on the supported deployment models and usecases. The below example playbooks can be created as site-bin-isecl.yml Note If running behind a proxy, update the proxy variables under vars/main.yml and run as below Note Go through the Additional Examples and Tips section for specific workflow samples Option 1 - hosts : all gather_facts : yes any_errors_fatal : true vars : setup : <setup var from supported usecases> binaries_path : <path where built binaries are copied to> roles : - ansible-role environment : http_proxy : \"{{http_proxy}}\" https_proxy : \"{{https_proxy}}\" no_proxy : \"{{no_proxy}}\" and 1 ansible-playbook <playbook-name> OR Option 2: - hosts : all gather_facts : yes any_errors_fatal : true roles : - ansible-role environment : http_proxy : \"{{http_proxy}}\" https_proxy : \"{{https_proxy}}\" no_proxy : \"{{no_proxy}}\" and 1 2 3 ansible-playbook <playbook-name> \\ --extra-vars setup = <setup var from supported usecases> \\ --extra-vars binaries_path = <path where built binaries are copied to>","title":"Create and Run Playbook"},{"location":"quick-start-guide/foundational_workload/deploy/#additional-examples-tips","text":"","title":"Additional Examples &amp; Tips"},{"location":"quick-start-guide/foundational_workload/deploy/#tpm-is-already-owned","text":"If the Trusted Platform Module(TPM) is already owned, the owner secret(SRK) can be provided directly during runtime in the playbook: 1 2 3 4 ansible-playbook <playbook-name> \\ --extra-vars setup = <setup var from supported usecases> \\ --extra-vars binaries_path = <path where built binaries are copied to> \\ --extra-vars tpm_secret = <tpm owner secret> or Update the following vars in defaults/main.yml # The TPM Storage Root Key(SRK) Password to be used if TPM is already owned tpm_owner_secret : <tpm_secret>","title":"TPM is already owned"},{"location":"quick-start-guide/foundational_workload/deploy/#uefi-secureboot-enabled","text":"If UEFI mode and UEFI SecureBoot feature is enabled, the following option can be used to during runtime in the playbook 1 2 3 4 5 ansible-playbook <playbook-name> \\ --extra-vars setup = <setup var from supported usecases> \\ --extra-vars binaries_path = <path where built binaries are copied to> \\ --extra-vars uefi_secureboot = yes \\ -- extra-vars grub_file_path = <uefi mode grub file path> or Update the following vars in defaults/main.yml # Enable/disable for UEFI SecureBoot Mode # [yes - UEFI SecureBoot mode, no - Legacy mode] uefi_secureboot : 'yes' # The grub file path for Legacy mode & UEFI Mode. Default is Legacy mode path. Update the below path for UEFI mode with UEFI SecureBoot grub_file_path : <uefi mode grub file path>","title":"UEFI SecureBoot enabled"},{"location":"quick-start-guide/foundational_workload/deploy/#using-docker-notary","text":"If using Docker notary when working with Launch Time Protection - Workload Confidentiality with Docker Runtime , following options can be provided during runtime in the playbook 1 2 3 4 5 6 ansible-playbook <playbook-name> \\ --extra-vars setup = <setup var from supported usecases> \\ --extra-vars binaries_path = <path where built binaries are copied to> \\ --extra-vars insecure_verify = <insecure_verify [ TRUE/FALSE ] > \\ --extra-vars registry_ipaddr = <registry ipaddr> \\ --extra-vars registry_scheme = <registry scheme [ http/https ] > or Update the following vars in defaults/main.yml # [TRUE/FALSE based on registry configured with http/https respectively] # Required for Workload Integrity with containers insecure_skip_verify : <insecure_skip_verify> # The registry IP for the Docker registry from where container images are pulled # Required for Workload Integrity with containers registry_ip : <registry_ipaddr> # The registry protocol for talking to the remote registry [http/https] # Required for Workload Integrity with containers registry_scheme_type : <registry_scheme>","title":"Using Docker Notary"},{"location":"quick-start-guide/foundational_workload/deploy/#in-case-of-misconfigurations","text":"If any service installation fails due to any misconfiguration, just uninstall the specific service manually , fix the misconfiguration in ansible and rerun the playbook. The successfully installed services wont be reinstalled.","title":"In case of Misconfigurations"},{"location":"quick-start-guide/foundational_workload/pre-reqs/","text":"Pre-requisites Hardware & OS Requirements Physical Server requirements Intel\u00ae SecL-DC supports and uses a variety of Intel security features, but there are some key requirements to consider before beginning an installation. Most important among these is the Root of Trust configuration. This involves deciding what combination of TXT, Boot Guard, tboot, and UEFI Secure Boot to enable on platforms that will be attested using Intel\u00ae SecL. Note At least one \"Static Root of Trust\" mechanism must be used (TXT and/or BtG). For Legacy BIOS systems, tboot must be used. For UEFI mode systems, UEFI SecureBoot must be used* Use the chart below for a guide to acceptable configuration options. Only dTPM is supported on Intel\u00ae SecL-DC platform hardware. Warning A security bug related to UEFI mode and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. Warning An issue in the latest version of tboot(version 1.9.12) has caused it to be unusable on RHEL 8.3 legacy mode machines. This will be fixed in an upcoming version of tboot. Its is recommeded to use tboot version 1.9.10 for the time being. OS Requirements RHEL 8.3 OS rhel-8-for-x86_64-baseos-rpms and rhel-8-for-x86_64-appstream-rpms repositories need to be enabled on build machine and remote machines Date and time should be in sync across the machines User Access The services need to be built & installed as root user. Ensure root privileges are present for the user to work with Intel\u00ae SecL-DC. Note When using Ansible role for deployment, Ansible needs to be able to talk to remote machines as root user for successful deployment All Intel\u00ae SecL-DC service & agent ports should be allowed in firewall rules. Deployment Model Build + Deployment Machine CSP - ISecL Services Machine CSP - Physical Server as per supported configurations Enterprise - ISecL Services Machine","title":"Pre-requisites"},{"location":"quick-start-guide/foundational_workload/pre-reqs/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"quick-start-guide/foundational_workload/pre-reqs/#hardware-os-requirements","text":"","title":"Hardware &amp; OS Requirements"},{"location":"quick-start-guide/foundational_workload/pre-reqs/#physical-server-requirements","text":"Intel\u00ae SecL-DC supports and uses a variety of Intel security features, but there are some key requirements to consider before beginning an installation. Most important among these is the Root of Trust configuration. This involves deciding what combination of TXT, Boot Guard, tboot, and UEFI Secure Boot to enable on platforms that will be attested using Intel\u00ae SecL. Note At least one \"Static Root of Trust\" mechanism must be used (TXT and/or BtG). For Legacy BIOS systems, tboot must be used. For UEFI mode systems, UEFI SecureBoot must be used* Use the chart below for a guide to acceptable configuration options. Only dTPM is supported on Intel\u00ae SecL-DC platform hardware. Warning A security bug related to UEFI mode and Grub2 modules has resulted in some modules required by tboot to not be available on RedHat 8 UEFI systems. Tboot therefore cannot be used currently on RedHat 8. A future tboot release is expected to resolve this dependency issue and restore support for UEFI mode. Warning An issue in the latest version of tboot(version 1.9.12) has caused it to be unusable on RHEL 8.3 legacy mode machines. This will be fixed in an upcoming version of tboot. Its is recommeded to use tboot version 1.9.10 for the time being.","title":"Physical Server requirements"},{"location":"quick-start-guide/foundational_workload/pre-reqs/#os-requirements","text":"RHEL 8.3 OS rhel-8-for-x86_64-baseos-rpms and rhel-8-for-x86_64-appstream-rpms repositories need to be enabled on build machine and remote machines Date and time should be in sync across the machines","title":"OS Requirements"},{"location":"quick-start-guide/foundational_workload/pre-reqs/#user-access","text":"The services need to be built & installed as root user. Ensure root privileges are present for the user to work with Intel\u00ae SecL-DC. Note When using Ansible role for deployment, Ansible needs to be able to talk to remote machines as root user for successful deployment All Intel\u00ae SecL-DC service & agent ports should be allowed in firewall rules.","title":"User Access"},{"location":"quick-start-guide/foundational_workload/pre-reqs/#deployment-model","text":"Build + Deployment Machine CSP - ISecL Services Machine CSP - Physical Server as per supported configurations Enterprise - ISecL Services Machine","title":"Deployment Model"},{"location":"quick-start-guide/foundational_workload/workflows/","text":"Workflows The below allow to get started with workflows within Intel\u00ae SecL-DC for Foundational and Workload Security Usecases. More details available in API Collections repository Pre-requisites Postman client should be downloaded on supported platforms or on the web to get started with the usecase collections. Note The Postman API Network will always have the latest released version of the API Collections. For all releases, refer the github repository for API Collections Use Case Collections Use case Sub-Usecase API Collection Foundational Security Host Attestation(RHEL & VMWARE) \u2714\ufe0f Data Fencing with Asset Tags(RHEL & VMWARE) \u2714\ufe0f Trusted Workload Placement (VM & Containers) \u2714\ufe0f Application Integrity \u2714\ufe0f Launch Time Protection VM Confidentiality \u2714\ufe0f Container Confidentiality with Docker Runtime \u2714\ufe0f Container Confidentiality with CRIO Runtime \u2714\ufe0f Note Foundational Security - Host Attestation is a pre-requisite for all usecases beyond Host Attestation. E.g: For working with Launch Time Protection - VM Confidentiality , Host Attestation flow must be run as a pre-req before trying VM Confidentiality Downloading API Collections Postman API Network for latest released: https://explore.postman.com/intelsecldc or Github repo for all releases #Clone the github repo for api-collections git clone https://github.com/intel-secl/utils.git #Switch to specific release-version of choice cd utils/ git checkout <release-version of choice> #Import Collections from cd tools/api-collections Note The postman-collections are also available when cloning the repos via build manifest under utils/tools/api-collections Running API Collections Import the collection into Postman API Client Warning This step is required only when not using Postman API Network and downloading from Github Update env as per the deployment details for specific usecase View Documentation Run the workflow","title":"Workflows"},{"location":"quick-start-guide/foundational_workload/workflows/#workflows","text":"The below allow to get started with workflows within Intel\u00ae SecL-DC for Foundational and Workload Security Usecases. More details available in API Collections repository","title":"Workflows"},{"location":"quick-start-guide/foundational_workload/workflows/#pre-requisites","text":"Postman client should be downloaded on supported platforms or on the web to get started with the usecase collections. Note The Postman API Network will always have the latest released version of the API Collections. For all releases, refer the github repository for API Collections","title":"Pre-requisites"},{"location":"quick-start-guide/foundational_workload/workflows/#use-case-collections","text":"Use case Sub-Usecase API Collection Foundational Security Host Attestation(RHEL & VMWARE) \u2714\ufe0f Data Fencing with Asset Tags(RHEL & VMWARE) \u2714\ufe0f Trusted Workload Placement (VM & Containers) \u2714\ufe0f Application Integrity \u2714\ufe0f Launch Time Protection VM Confidentiality \u2714\ufe0f Container Confidentiality with Docker Runtime \u2714\ufe0f Container Confidentiality with CRIO Runtime \u2714\ufe0f Note Foundational Security - Host Attestation is a pre-requisite for all usecases beyond Host Attestation. E.g: For working with Launch Time Protection - VM Confidentiality , Host Attestation flow must be run as a pre-req before trying VM Confidentiality","title":"Use Case Collections"},{"location":"quick-start-guide/foundational_workload/workflows/#downloading-api-collections","text":"Postman API Network for latest released: https://explore.postman.com/intelsecldc or Github repo for all releases #Clone the github repo for api-collections git clone https://github.com/intel-secl/utils.git #Switch to specific release-version of choice cd utils/ git checkout <release-version of choice> #Import Collections from cd tools/api-collections Note The postman-collections are also available when cloning the repos via build manifest under utils/tools/api-collections","title":"Downloading API Collections"},{"location":"quick-start-guide/foundational_workload/workflows/#running-api-collections","text":"Import the collection into Postman API Client Warning This step is required only when not using Postman API Network and downloading from Github Update env as per the deployment details for specific usecase View Documentation Run the workflow","title":"Running API Collections"},{"location":"quick-start-guide/secure_key_caching/appendix/","text":"Appendix Deployment Using Binaries Setup K8S Cluster & Deploy Isecl-k8s-extensions Setup master and worker node for k8s. Worker node should be setup on SGX host machine. Master node can be any system. Please note whatever hostname has been used on worker node while registering SGX_Agent with SHVS, use same node-name in join command. Once the master/worker setup is done, follow below steps: Untar packages and load docker images Copy tar output isecl-k8s-extensions-*.tar.gz from build system's binaries folder to /opt/ directory on the Master Node and extract the contents. cd /opt/ tar -xvzf isecl-k8s-extensions-*.tar.gz Load the docker images cd isecl-k8s-extensions docker load -i docker-isecl-controller-v*.tar docker load -i docker-isecl-scheduler-v*.tar Deploy isecl-controller Create hostattributes.crd.isecl.intel.com crd kubectl apply -f yamls/crd-1.17.yaml Check whether the crd is created kubectl get crds Deploy isecl-controller kubectl apply -f yamls/isecl-controller.yaml Check whether the isecl-controller is up and running kubectl get deploy -n isecl Create clusterrolebinding for ihub to get access to cluster nodes kubectl create clusterrolebinding isecl-clusterrole --clusterrole=system:node --user=system:serviceaccount:isecl:isecl Fetch token required for ihub installation and follow below IHUB installation steps, kubectl get secrets -n isecl kubectl describe secret default-token-<name> -n isecl For IHUB installation, make sure to update below configuration in /root/binaries/env/ihub.env before installing ihub on CSP system: * Copy /etc/kubernetes/pki/apiserver.crt from master node to /root on CSP system. Update KUBERNETES_CERT_FILE. * Get k8s token in master, using above commands and update KUBERNETES_TOKEN * Update the value of CRD name KUBERNETES_CRD=custom-isecl-sgx Deploy isecl-scheduler The isecl-scheduler default configuration is provided for common cluster support in isecl-scheduler.yaml. Variables HVS_IHUB_PUBLIC_KEY_PATH and SGX_IHUB_PUBLIC_KEY_PATH are by default set to default paths. Please use and set only required variables based on the use case. For example, if only sgx based attestation is required then remove/comment HVS_IHUB_PUBLIC_KEY_PATH variables. Install cfssl and cfssljson on Kubernetes Control Plane #Download cfssl to /usr/local/bin/ wget -O /usr/local/bin/cfssl http://pkg.cfssl.org/R1.2/cfssl_linux-amd64 chmod +x /usr/local/bin/cfssl #Download cfssljson to /usr/local/bin wget -O /usr/local/bin/cfssljson http://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 chmod +x /usr/local/bin/cfssljson Create tls key pair for isecl-scheduler service, which is signed by k8s apiserver.crt cd /opt/isecl-k8s-extensions/ chmod +x create_k8s_extsched_cert.sh ./create_k8s_extsched_cert.sh -n \"K8S Extended Scheduler\" -s \"<K8_MASTER_IP>\",\"<K8_MASTER_HOST>\" -c /etc/kubernetes/pki/ca.crt -k /etc/kubernetes/pki/ca.key After iHub deployment, copy /etc/ihub/ihub_public_key.pem from ihub to /opt/isecl-k8s-extensions/ directory on k8 master system. Also, copy tls key pair generated in previous step to secrets directory. mkdir secrets cp /opt/isecl-k8s-extensions/server.key secrets/ cp /opt/isecl-k8s-extensions/server.crt secrets/ mv /opt/isecl-k8s-extensions/ihub_public_key.pem /opt/isecl-k8s-extensions/sgx_ihub_public_key.pem cp /opt/isecl-k8s-extensions/sgx_ihub_public_key.pem secrets/ Note: Prefix the attestation type for ihub_public_key.pem before copying to secrets folder. Create kubernetes secrets scheduler-secret for isecl-scheduler kubectl create secret generic scheduler-certs --namespace isecl --from-file=secrets Deploy isecl-scheduler kubectl apply -f yamls/isecl-scheduler.yaml Check whether the isecl-scheduler is up and running kubectl get deploy -n isecl Configure kube-scheduler to establish communication with isecl-scheduler Add scheduler-policy.json under kube-scheduler section, mountPath under container section and hostPath under volumes section in /etc/kubernetes/manifests/kube-scheduler.yaml as mentioned below spec: containers: - command: - kube-scheduler - --policy-config-file=/opt/isecl-k8s-extensions/scheduler-policy.json containers: volumeMounts: - mountPath: /opt/isecl-k8s-extensions/ name: extendedsched readOnly: true volumes: - hostPath: path: /opt/isecl-k8s-extensions/ type: name: extendedsched Note: Make sure to use proper indentation and don't delete existing mountPath and hostPath sections in kube-scheduler.yaml. * Restart Kubelet which restart all the k8s services including kube base schedular systemctl restart kubelet Check if CRD data is populated kubectl get -o json hostattributes.crd.isecl.intel.com Deploying SKC Services on Single System Copy the binaries directory generated in the build system to the /root/ directory on the deployment system Update skc.conf with the following - Deployment system IP address - TENANT as KUBERNETES or OPENSTACK (based on the orchestrator chosen) - System IP address where Kubernetes or Openstack is deployed - Database name, Database username and passwords for AAS, SCS and SHVS services - Intel PCS Server API URL and API Keys Save and Close ./install_skc.sh Deploy CSP SKC Services Copy the binaries directory generated in the build system system to the /root/ directory on the CSP system Update csp_skc.conf with the following - CSP system IP Address - TENANT as KUBERNETES or OPENSTACK (based on the orchestrator chosen) - System IP address where Kubernetes or Openstack is deployed - Database name, Database username and passwords for AAS, SCS and SHVS services - Intel PCS Server API URL and API Keys Save and Close ./install_csp_skc.sh Create sample yml file for nginx workload and add SGX labels to it such as: apiVersion: v1 kind: Pod metadata: name: nginx labels: name: nginx spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: SGX-Enabled operator: In values: - \"true\" - key: EPC-Memory operator: In values: - \"2.0GB\" containers: - name: nginx image: nginx ports: - containerPort: 80 Validate if pod can be launched on the node. Run following commands: kubectl apply -f pod.yml kubectl get pods kubectl describe pods nginx Pod should be in running state and launched on the host as per values in pod.yml. Validate running below commands on sgx host: docker ps Openstack Setup and Associate Traits Setup Compute and Controller node for Openstack. Compute node should be setup on SGX host machine, Controller node can be any system. After the compute/controller setup is done, follow the below steps: IHUB should be installed and configured with Openstack Note: * While using deployment scripts to install the components, in the env directory of the binaries folder comment \"KUBERNETES_TOKEN\" in the ihub.env before installation. * Openstack compute node and build VM should have the same OS package repositories, else there will be package mismatch for SKC library. On the openstack controller, if resource provider is not listing the resources then install the \"osc-placement\" pip3 install osc-placement source the admin-openrc credentials to gain access to user-only CLI commands and export the os_placement_API_version source admin-openrc List the set of resources mapped to the Openstack openstack resource provider list Set the required traits for SGX Hosts #For example 'cirros' image can be used for the instances openstack image set --property trait:CUSTOM_ISECL_SGX_ENABLED_TRUE=required <image name> Veiw the Traits that has been set: #The trait should be set and assinged to the respective image successfully. For example 'cirros' image can be used for the instances openstack image show <image name> Verify the trait is enabled for the SGX Host: openstack resource provider trait list <uuid of the host which the openstack resoruce provider lists> #SGX Supported, SGX TCB upto Date, SGX FLC enabled, SGX EPC size attritubes of the SGX host for which the 'required' trait set to TRUE or FALSE is displayed. For example,if required trait is set as TRUE: CUSTOM_ISECL_SGX_ENABLED_TRUE CUSTOM_ISECL_SGX_SUPPORTED_TRUE CUSTOM_ISECL_SGX_TCBUPTODATE_FALSE CUSTOM_ISECL_SGX_FLC_ENABLED_TRUE CUSTOM_ISECL_SGX_EPC_SIZE_2_0_GB For example, if the required trait is set as FALSE CUSTOM_ISECL_SGX_ENABLED_FALSE CUSTOM_ISECL_SGX_SUPPORTED_TRUE CUSTOM_ISECL_SGX_TCBUPTODATE_FALSE CUSTOM_ISECL_SGX_FLC_ENABLED_FALSE CUSTOM_ISECL_SGX_EPC_SIZE_0_B Create the instances openstack server create --flavor tiny --image <image name> --net vmnet <vm instance name> Instances should be created and the status should be \"Active\". Instance should be launched successfully. openstack server list Note : To unset the trait, use the following CLI commands: openstack image unset --property trait:CUSTOM_ISECL_SGX_ENABLED_TRUE <image name> openstack image unset --property trait:CUSTOM_ISECL_SGX_ENABLED_FALSE <image name> Deploy Enterprise SKC Services Copy the binaries directory generated in the build system to the /root/ directory on Enterprise system Update enterprise_skc.conf with the following - Enterprise system IP address - Database name, Database username and passwords for AAS and SCS services - Intel PCS Server API URL and API Keys Save and Close ./install_enterprise_skc.sh Deploy SGX Agent Copy sgx_agent.tar, sgx_agent.sha2 and agent_untar.sh from binaries directoy to a directory in SGX compute node ./agent_untar.sh Edit agent.conf with the following - CSP system IP address where CMS/AAS/SHVS services deployed - CMS TLS SHA Value (Run \"cms tlscertsha384\" on CSP system) - For Each Agent installation on a SGX compute node, please change AGENT_USER (Changing AGENT_PASSWORD is optional) Save and Close ./deploy_sgx_agent.sh Deploy SKC Library Copy skc_library.tar, skc_library.sha2 and skclib_untar.sh from binaries directoy to a directory in SGX compute node ./skclib_untar.sh Update skc_library.conf with the following - IP address for CMS/AAS/KBS services deployed on Enterprise system - CSP_CMS_IP should point to the IP of CMS service deployed on CSP system - CSP system IP address where SGX Caching Service deployed - Hostname of the Enterprise system where KBS is deployed Save and Close ./deploy_skc_library.sh System User Configuration Build System Setup ~/.gitconfig to update the git user details. A sample config is provided below GIT Configuration** [user] name = John Doe email = john.doe@abc.com [color] ui = auto [push] default = matching Creating RSA Keys in Key Broker Service Configuration Update to create Keys in KBS cd into /root/binaries/kbs_script folder Update KBS and AAS IP addresses in run.sh Update CACERT_PATH variable with trustedca certificate inside directory /etc/kbs/certs/trustedca/<id.pem>. Create RSA Key Execute the command ./run.sh reg copy the generated cert file to SGX Compute node where skc_library is deployed. Also make a note of the key id generated Configuration for NGINX testing Note: Below mentioned OpenSSL and NGINX configuration updates are provided as patches (nginx.patch and openssl.patch) as part of skc_library deployment script. OpenSSL Update openssl configuration file /etc/pki/tls/openssl.cnf with below changes: [openssl_def] engines = engine_section [engine_section] pkcs11 = pkcs11_section [pkcs11_section] engine_id = pkcs11 dynamic_path =/usr/lib64/engines-1.1/pkcs11.so MODULE_PATH =/opt/skc/lib/libpkcs11-api.so init = 0 Nginx Update nginx configuration file /etc/nginx/nginx.conf with below changes: ssl_engine pkcs11; Update the location of certificate with the loaction where it was copied into the skc_library machine. ssl_certificate \"add absolute path of crt file\"; Update the KeyID with the KeyID received when RSA key was generated in KBS ssl_certificate_key \"engine:pkcs11:pkcs11:token=KMS;id=164b41ae-be61-4c7c-a027-4a2ab1e5e4c4;object=RSAKEY;type=private;pin-value=1234\"; SKC Configuration Create keys.txt in /tmp folder. This provides key preloading functionality in skc_library. Any number of keys can be added in keys.txt. Each PKCS11 URL should contain different Key IDs which need to be transferred from KBS along with respective object tag for each key id specified Sample PKCS11 url is as below pkcs11:token=KMS;id=164b41ae-be61-4c7c-a027-4a2ab1e5e4c4;object=RSAKEY;type=private;pin-value=1234; Last PKCS11 url entry in keys.txt should match with the one in nginx.conf The keyID should match the keyID of RSA key created in KBS. Other contents should match with nginx.conf. File location should match with preload_keys directive in pkcs11-apimodule.ini; Sample /opt/skc/etc/pkcs11-apimodule.ini file [core] preload_keys=/tmp/keys.txt keyagent_conf=/opt/skc/etc/key-agent.ini mode=SGX debug=true [SW] module=/usr/lib64/pkcs11/libsofthsm2.so [SGX] module=/opt/intel/cryptoapitoolkit/lib/libp11sgx.so KBS key-transfer flow validation On SGX Compute node, Execute below commands for KBS key-transfer: pkill nginx Remove any existing pkcs11 token rm -rf /opt/intel/cryptoapitoolkit/tokens/* Initiate Key transfer from KBS systemctl restart nginx Changing group ownership and permissions of pkcs11 token chown -R root:intel /opt/intel/cryptoapitoolkit/tokens/ chmod -R 770 /opt/intel/cryptoapitoolkit/tokens/ Establish a tls session with the nginx using the key transferred inside the enclave wget https://localhost:2443 --no-check-certificate","title":"Appendix"},{"location":"quick-start-guide/secure_key_caching/appendix/#appendix","text":"","title":"Appendix"},{"location":"quick-start-guide/secure_key_caching/appendix/#deployment-using-binaries","text":"","title":"Deployment Using Binaries"},{"location":"quick-start-guide/secure_key_caching/appendix/#setup-k8s-cluster-deploy-isecl-k8s-extensions","text":"Setup master and worker node for k8s. Worker node should be setup on SGX host machine. Master node can be any system. Please note whatever hostname has been used on worker node while registering SGX_Agent with SHVS, use same node-name in join command. Once the master/worker setup is done, follow below steps:","title":"Setup K8S Cluster &amp; Deploy Isecl-k8s-extensions"},{"location":"quick-start-guide/secure_key_caching/appendix/#untar-packages-and-load-docker-images","text":"Copy tar output isecl-k8s-extensions-*.tar.gz from build system's binaries folder to /opt/ directory on the Master Node and extract the contents. cd /opt/ tar -xvzf isecl-k8s-extensions-*.tar.gz Load the docker images cd isecl-k8s-extensions docker load -i docker-isecl-controller-v*.tar docker load -i docker-isecl-scheduler-v*.tar","title":"Untar packages and load docker images"},{"location":"quick-start-guide/secure_key_caching/appendix/#deploy-isecl-controller","text":"Create hostattributes.crd.isecl.intel.com crd kubectl apply -f yamls/crd-1.17.yaml Check whether the crd is created kubectl get crds Deploy isecl-controller kubectl apply -f yamls/isecl-controller.yaml Check whether the isecl-controller is up and running kubectl get deploy -n isecl Create clusterrolebinding for ihub to get access to cluster nodes kubectl create clusterrolebinding isecl-clusterrole --clusterrole=system:node --user=system:serviceaccount:isecl:isecl Fetch token required for ihub installation and follow below IHUB installation steps, kubectl get secrets -n isecl kubectl describe secret default-token-<name> -n isecl For IHUB installation, make sure to update below configuration in /root/binaries/env/ihub.env before installing ihub on CSP system: * Copy /etc/kubernetes/pki/apiserver.crt from master node to /root on CSP system. Update KUBERNETES_CERT_FILE. * Get k8s token in master, using above commands and update KUBERNETES_TOKEN * Update the value of CRD name KUBERNETES_CRD=custom-isecl-sgx","title":"Deploy isecl-controller"},{"location":"quick-start-guide/secure_key_caching/appendix/#deploy-isecl-scheduler","text":"The isecl-scheduler default configuration is provided for common cluster support in isecl-scheduler.yaml. Variables HVS_IHUB_PUBLIC_KEY_PATH and SGX_IHUB_PUBLIC_KEY_PATH are by default set to default paths. Please use and set only required variables based on the use case. For example, if only sgx based attestation is required then remove/comment HVS_IHUB_PUBLIC_KEY_PATH variables. Install cfssl and cfssljson on Kubernetes Control Plane #Download cfssl to /usr/local/bin/ wget -O /usr/local/bin/cfssl http://pkg.cfssl.org/R1.2/cfssl_linux-amd64 chmod +x /usr/local/bin/cfssl #Download cfssljson to /usr/local/bin wget -O /usr/local/bin/cfssljson http://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 chmod +x /usr/local/bin/cfssljson Create tls key pair for isecl-scheduler service, which is signed by k8s apiserver.crt cd /opt/isecl-k8s-extensions/ chmod +x create_k8s_extsched_cert.sh ./create_k8s_extsched_cert.sh -n \"K8S Extended Scheduler\" -s \"<K8_MASTER_IP>\",\"<K8_MASTER_HOST>\" -c /etc/kubernetes/pki/ca.crt -k /etc/kubernetes/pki/ca.key After iHub deployment, copy /etc/ihub/ihub_public_key.pem from ihub to /opt/isecl-k8s-extensions/ directory on k8 master system. Also, copy tls key pair generated in previous step to secrets directory. mkdir secrets cp /opt/isecl-k8s-extensions/server.key secrets/ cp /opt/isecl-k8s-extensions/server.crt secrets/ mv /opt/isecl-k8s-extensions/ihub_public_key.pem /opt/isecl-k8s-extensions/sgx_ihub_public_key.pem cp /opt/isecl-k8s-extensions/sgx_ihub_public_key.pem secrets/ Note: Prefix the attestation type for ihub_public_key.pem before copying to secrets folder. Create kubernetes secrets scheduler-secret for isecl-scheduler kubectl create secret generic scheduler-certs --namespace isecl --from-file=secrets Deploy isecl-scheduler kubectl apply -f yamls/isecl-scheduler.yaml Check whether the isecl-scheduler is up and running kubectl get deploy -n isecl","title":"Deploy isecl-scheduler"},{"location":"quick-start-guide/secure_key_caching/appendix/#configure-kube-scheduler-to-establish-communication-with-isecl-scheduler","text":"Add scheduler-policy.json under kube-scheduler section, mountPath under container section and hostPath under volumes section in /etc/kubernetes/manifests/kube-scheduler.yaml as mentioned below spec: containers: - command: - kube-scheduler - --policy-config-file=/opt/isecl-k8s-extensions/scheduler-policy.json containers: volumeMounts: - mountPath: /opt/isecl-k8s-extensions/ name: extendedsched readOnly: true volumes: - hostPath: path: /opt/isecl-k8s-extensions/ type: name: extendedsched Note: Make sure to use proper indentation and don't delete existing mountPath and hostPath sections in kube-scheduler.yaml. * Restart Kubelet which restart all the k8s services including kube base schedular systemctl restart kubelet Check if CRD data is populated kubectl get -o json hostattributes.crd.isecl.intel.com","title":"Configure kube-scheduler to establish communication with isecl-scheduler"},{"location":"quick-start-guide/secure_key_caching/appendix/#deploying-skc-services-on-single-system","text":"Copy the binaries directory generated in the build system to the /root/ directory on the deployment system Update skc.conf with the following - Deployment system IP address - TENANT as KUBERNETES or OPENSTACK (based on the orchestrator chosen) - System IP address where Kubernetes or Openstack is deployed - Database name, Database username and passwords for AAS, SCS and SHVS services - Intel PCS Server API URL and API Keys Save and Close ./install_skc.sh","title":"Deploying SKC Services on Single System"},{"location":"quick-start-guide/secure_key_caching/appendix/#deploy-csp-skc-services","text":"Copy the binaries directory generated in the build system system to the /root/ directory on the CSP system Update csp_skc.conf with the following - CSP system IP Address - TENANT as KUBERNETES or OPENSTACK (based on the orchestrator chosen) - System IP address where Kubernetes or Openstack is deployed - Database name, Database username and passwords for AAS, SCS and SHVS services - Intel PCS Server API URL and API Keys Save and Close ./install_csp_skc.sh Create sample yml file for nginx workload and add SGX labels to it such as: apiVersion: v1 kind: Pod metadata: name: nginx labels: name: nginx spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: SGX-Enabled operator: In values: - \"true\" - key: EPC-Memory operator: In values: - \"2.0GB\" containers: - name: nginx image: nginx ports: - containerPort: 80 Validate if pod can be launched on the node. Run following commands: kubectl apply -f pod.yml kubectl get pods kubectl describe pods nginx Pod should be in running state and launched on the host as per values in pod.yml. Validate running below commands on sgx host: docker ps","title":"Deploy CSP SKC Services"},{"location":"quick-start-guide/secure_key_caching/appendix/#openstack-setup-and-associate-traits","text":"Setup Compute and Controller node for Openstack. Compute node should be setup on SGX host machine, Controller node can be any system. After the compute/controller setup is done, follow the below steps: IHUB should be installed and configured with Openstack Note: * While using deployment scripts to install the components, in the env directory of the binaries folder comment \"KUBERNETES_TOKEN\" in the ihub.env before installation. * Openstack compute node and build VM should have the same OS package repositories, else there will be package mismatch for SKC library. On the openstack controller, if resource provider is not listing the resources then install the \"osc-placement\" pip3 install osc-placement source the admin-openrc credentials to gain access to user-only CLI commands and export the os_placement_API_version source admin-openrc List the set of resources mapped to the Openstack openstack resource provider list Set the required traits for SGX Hosts #For example 'cirros' image can be used for the instances openstack image set --property trait:CUSTOM_ISECL_SGX_ENABLED_TRUE=required <image name> Veiw the Traits that has been set: #The trait should be set and assinged to the respective image successfully. For example 'cirros' image can be used for the instances openstack image show <image name> Verify the trait is enabled for the SGX Host: openstack resource provider trait list <uuid of the host which the openstack resoruce provider lists> #SGX Supported, SGX TCB upto Date, SGX FLC enabled, SGX EPC size attritubes of the SGX host for which the 'required' trait set to TRUE or FALSE is displayed. For example,if required trait is set as TRUE: CUSTOM_ISECL_SGX_ENABLED_TRUE CUSTOM_ISECL_SGX_SUPPORTED_TRUE CUSTOM_ISECL_SGX_TCBUPTODATE_FALSE CUSTOM_ISECL_SGX_FLC_ENABLED_TRUE CUSTOM_ISECL_SGX_EPC_SIZE_2_0_GB For example, if the required trait is set as FALSE CUSTOM_ISECL_SGX_ENABLED_FALSE CUSTOM_ISECL_SGX_SUPPORTED_TRUE CUSTOM_ISECL_SGX_TCBUPTODATE_FALSE CUSTOM_ISECL_SGX_FLC_ENABLED_FALSE CUSTOM_ISECL_SGX_EPC_SIZE_0_B Create the instances openstack server create --flavor tiny --image <image name> --net vmnet <vm instance name> Instances should be created and the status should be \"Active\". Instance should be launched successfully. openstack server list Note : To unset the trait, use the following CLI commands: openstack image unset --property trait:CUSTOM_ISECL_SGX_ENABLED_TRUE <image name> openstack image unset --property trait:CUSTOM_ISECL_SGX_ENABLED_FALSE <image name>","title":"Openstack Setup and Associate Traits"},{"location":"quick-start-guide/secure_key_caching/appendix/#deploy-enterprise-skc-services","text":"Copy the binaries directory generated in the build system to the /root/ directory on Enterprise system Update enterprise_skc.conf with the following - Enterprise system IP address - Database name, Database username and passwords for AAS and SCS services - Intel PCS Server API URL and API Keys Save and Close ./install_enterprise_skc.sh","title":"Deploy Enterprise SKC Services"},{"location":"quick-start-guide/secure_key_caching/appendix/#deploy-sgx-agent","text":"Copy sgx_agent.tar, sgx_agent.sha2 and agent_untar.sh from binaries directoy to a directory in SGX compute node ./agent_untar.sh Edit agent.conf with the following - CSP system IP address where CMS/AAS/SHVS services deployed - CMS TLS SHA Value (Run \"cms tlscertsha384\" on CSP system) - For Each Agent installation on a SGX compute node, please change AGENT_USER (Changing AGENT_PASSWORD is optional) Save and Close ./deploy_sgx_agent.sh","title":"Deploy SGX Agent"},{"location":"quick-start-guide/secure_key_caching/appendix/#deploy-skc-library","text":"Copy skc_library.tar, skc_library.sha2 and skclib_untar.sh from binaries directoy to a directory in SGX compute node ./skclib_untar.sh Update skc_library.conf with the following - IP address for CMS/AAS/KBS services deployed on Enterprise system - CSP_CMS_IP should point to the IP of CMS service deployed on CSP system - CSP system IP address where SGX Caching Service deployed - Hostname of the Enterprise system where KBS is deployed Save and Close ./deploy_skc_library.sh","title":"Deploy SKC Library"},{"location":"quick-start-guide/secure_key_caching/appendix/#system-user-configuration","text":"Build System Setup ~/.gitconfig to update the git user details. A sample config is provided below GIT Configuration** [user] name = John Doe email = john.doe@abc.com [color] ui = auto [push] default = matching","title":"System User Configuration"},{"location":"quick-start-guide/secure_key_caching/appendix/#creating-rsa-keys-in-key-broker-service","text":"Configuration Update to create Keys in KBS cd into /root/binaries/kbs_script folder Update KBS and AAS IP addresses in run.sh Update CACERT_PATH variable with trustedca certificate inside directory /etc/kbs/certs/trustedca/<id.pem>. Create RSA Key Execute the command ./run.sh reg copy the generated cert file to SGX Compute node where skc_library is deployed. Also make a note of the key id generated","title":"Creating RSA Keys in Key Broker Service"},{"location":"quick-start-guide/secure_key_caching/appendix/#configuration-for-nginx-testing","text":"Note: Below mentioned OpenSSL and NGINX configuration updates are provided as patches (nginx.patch and openssl.patch) as part of skc_library deployment script. OpenSSL Update openssl configuration file /etc/pki/tls/openssl.cnf with below changes: [openssl_def] engines = engine_section [engine_section] pkcs11 = pkcs11_section [pkcs11_section] engine_id = pkcs11 dynamic_path =/usr/lib64/engines-1.1/pkcs11.so MODULE_PATH =/opt/skc/lib/libpkcs11-api.so init = 0 Nginx Update nginx configuration file /etc/nginx/nginx.conf with below changes: ssl_engine pkcs11; Update the location of certificate with the loaction where it was copied into the skc_library machine. ssl_certificate \"add absolute path of crt file\"; Update the KeyID with the KeyID received when RSA key was generated in KBS ssl_certificate_key \"engine:pkcs11:pkcs11:token=KMS;id=164b41ae-be61-4c7c-a027-4a2ab1e5e4c4;object=RSAKEY;type=private;pin-value=1234\"; SKC Configuration Create keys.txt in /tmp folder. This provides key preloading functionality in skc_library. Any number of keys can be added in keys.txt. Each PKCS11 URL should contain different Key IDs which need to be transferred from KBS along with respective object tag for each key id specified Sample PKCS11 url is as below pkcs11:token=KMS;id=164b41ae-be61-4c7c-a027-4a2ab1e5e4c4;object=RSAKEY;type=private;pin-value=1234; Last PKCS11 url entry in keys.txt should match with the one in nginx.conf The keyID should match the keyID of RSA key created in KBS. Other contents should match with nginx.conf. File location should match with preload_keys directive in pkcs11-apimodule.ini; Sample /opt/skc/etc/pkcs11-apimodule.ini file [core] preload_keys=/tmp/keys.txt keyagent_conf=/opt/skc/etc/key-agent.ini mode=SGX debug=true [SW] module=/usr/lib64/pkcs11/libsofthsm2.so [SGX] module=/opt/intel/cryptoapitoolkit/lib/libp11sgx.so","title":"Configuration for NGINX testing"},{"location":"quick-start-guide/secure_key_caching/appendix/#kbs-key-transfer-flow-validation","text":"On SGX Compute node, Execute below commands for KBS key-transfer: pkill nginx Remove any existing pkcs11 token rm -rf /opt/intel/cryptoapitoolkit/tokens/* Initiate Key transfer from KBS systemctl restart nginx Changing group ownership and permissions of pkcs11 token chown -R root:intel /opt/intel/cryptoapitoolkit/tokens/ chmod -R 770 /opt/intel/cryptoapitoolkit/tokens/ Establish a tls session with the nginx using the key transferred inside the enclave wget https://localhost:2443 --no-check-certificate","title":"KBS key-transfer flow validation"},{"location":"quick-start-guide/secure_key_caching/build/","text":"Build Secure Key Caching Note: currently, the repos contain the source code of both the SGX Attestation Infrastructure and SKC. Make will build and package all the binaries and installation scripts but the SGX Attestation Infrastructure can be installed and deployed separately. SKC cannot be installed without the SGX Attestation Infrastructure. The rest of this document will indicate steps that are only needed for SKC. Pulling Source Code mkdir -p /root/workspace && cd /root/workspace repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/skc.xml repo sync Install, Enable and start the Docker daemon dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.10-3.2.el7.x86_64.rpm dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-19.03.13-3.el7.x86_64.rpm dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-19.03.13-3.el7.x86_64.rpm systemctl enable docker systemctl start docker Ignore the below steps if not running behind a proxy mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/proxy.conf #Add the below lines in proxy.conf and set proxy server details if proxy is used [ Service ] Environment = \"HTTP_PROXY=<http_proxy>\" Environment = \"HTTPS_PROXY=<https_proxy>\" Environment = \"NO_PROXY=<no_proxy>\" #Reload docker systemctl daemon-reload systemctl restart docker Building All SKC Components make Copy Binaries to a clean folder For CSP/Enterprise Deployment Model, copy the generated binaries directory to the /root directory on the CSP/Enterprise system For Single system model, copy the generated binaries directory to the /root directory on the deployment system","title":"Build"},{"location":"quick-start-guide/secure_key_caching/build/#build","text":"","title":"Build"},{"location":"quick-start-guide/secure_key_caching/build/#secure-key-caching","text":"Note: currently, the repos contain the source code of both the SGX Attestation Infrastructure and SKC. Make will build and package all the binaries and installation scripts but the SGX Attestation Infrastructure can be installed and deployed separately. SKC cannot be installed without the SGX Attestation Infrastructure. The rest of this document will indicate steps that are only needed for SKC. Pulling Source Code mkdir -p /root/workspace && cd /root/workspace repo init -u https://github.com/intel-secl/build-manifest.git -b refs/tags/v3.3.1 -m manifest/skc.xml repo sync Install, Enable and start the Docker daemon dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.10-3.2.el7.x86_64.rpm dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-19.03.13-3.el7.x86_64.rpm dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-19.03.13-3.el7.x86_64.rpm systemctl enable docker systemctl start docker Ignore the below steps if not running behind a proxy mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/proxy.conf #Add the below lines in proxy.conf and set proxy server details if proxy is used [ Service ] Environment = \"HTTP_PROXY=<http_proxy>\" Environment = \"HTTPS_PROXY=<https_proxy>\" Environment = \"NO_PROXY=<no_proxy>\" #Reload docker systemctl daemon-reload systemctl restart docker Building All SKC Components make Copy Binaries to a clean folder For CSP/Enterprise Deployment Model, copy the generated binaries directory to the /root directory on the CSP/Enterprise system For Single system model, copy the generated binaries directory to the /root directory on the deployment system","title":"Secure Key Caching"},{"location":"quick-start-guide/secure_key_caching/deploy/","text":"Deploy Deployment & Usecase Workflow Tools Installation The below installation is required on the Build & Deployment system only and the Platform(Windows,Linux or MacOS) for Usecase Workflow Tool Installation Deployment Tools Installation Install Ansible on Build Machine pip3 install ansible == 2 .9.10 Install epel-release repository and install sshpass for ansible to connect to remote hosts using SSH dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm dnf install sshpass Create directory for ansible default configuration and hosts file mkdir -p /etc/ansible/ touch /etc/ansible/ansible.cfg Copy the ansible.cfg contents from https://raw.githubusercontent.com/ansible/ansible/v2.9.10/examples/ansible.cfg and paste it under /etc/ansible/ansible.cfg Usecases Workflow Tools Installation Postman client should be downloaded on supported platforms or on the web to get started with the usecase collections. Note: The Postman API Network will always have the latest released version of the API Collections. For all releases, refer the github repository for API Collections Deployment The below details would enable the deployment through Ansible Role for Intel\u00ae SecL-DC Secure Key Caching Usecase. However the services can still be installed manually using the Product Guide. More details on Ansible Role for Intel\u00ae SecL-DC in Ansible-Role repository. Download the Ansible Role The role can be cloned locally from git and the contents can be copied to the roles folder used by your ansible server #Create directory for using ansible deployment mkdir -p /root/intel-secl/deploy/ #Clone the repository cd /root/intel-secl/deploy/ && git clone https://github.com/intel-secl/utils.git #Checkout to specific release version cd utils/ git checkout <release-version of choice> cd tools/ansible-role #Update ansible.cfg roles_path to point to path(/root/intel-secl/deploy/utils/tools/) Update Ansible Inventory The following inventory can be used and created under /etc/ansible/hosts . [CSP] <machine1_ip/hostname> [Enterprise] <machine2_ip/hostname> [Node] <machine3_ip/hostname> [CSP:vars] isecl_role=csp ansible_user=root ansible_password=<password> [Enterprise:vars] isecl_role=enterprise ansible_user=root ansible_password=<password> [Node:vars] isecl_role=node ansible_user=root ansible_password=<password> Note: Ansible requires ssh and root user access to remote machines. The following command can be used to ensure ansible can connect to remote machines with host key check ` ssh-keyscan -H <ip_address> >> /root/.ssh/known_hosts Create and Run Playbook The following are playbook and CLI example for deploying Intel\u00ae SecL-DC binaries based on the supported deployment models and usecases. The below example playbooks can be created as site-bin-isecl.yml Note: If running behind a proxy, update the proxy variables under vars/main.yml and run as below Note: Go through the Additional Examples and Tips section for specific workflow samples Option 1 - hosts : all gather_facts : yes any_errors_fatal : true vars : setup : <setup var from supported usecases> binaries_path : <path where built binaries are copied to> roles : - ansible-role environment : http_proxy : \"{{http_proxy}}\" https_proxy : \"{{https_proxy}}\" no_proxy : \"{{no_proxy}}\" ``` and ansible-playbook <playbook-name> Note: Update the roles_path under ansible.cfg to point to the cloned repository so that the role can be read by Ansible OR Option 2: - hosts : all gather_facts : yes any_errors_fatal : true roles : - ansible-role environment : http_proxy : \"{{http_proxy}}\" https_proxy : \"{{https_proxy}}\" no_proxy : \"{{no_proxy}}\" and ansible-playbook <playbook-name> --extra-vars setup = <setup var from supported usecases> --extra-vars binaries_path = <path where built binaries are copied to> Note: Update the roles_path under ansible.cfg to point to the cloned repository so that the role can be read by Ansible Additional Examples & Tips For secure-key-caching , sgx-orchestration & sgx-attestation usecase following options can be provided during runtime in the playbook for providing the PCS server key ansible-playbook <playbook-name> --extra-vars setup = <setup var from supported usecases> --extra-vars binaries_path = <path where built binaries are copied to> --extra-vars intel_provisioning_server_api_key = <pcs server key> or Update the following vars in defaults/main.yml intel_provisioning_server_api_key_sandbox : <pcs server key> If any service installation fails due to any misconfiguration, just uninstall the specific service manually , fix the misconfiguration in ansible and rerun the playbook. The successfully installed services wont be reinstalled. Usecase Setup Options Usecase Variable Secure Key Caching setup: secure-key-caching in playbook or via --extra-vars as setup=secure-key-caching in CLI SGX Orchestration setup: sgx-orchestration in playbook or via --extra-vars as setup=sgx-orchestration in CLI SGX Attestation setup: sgx-attestation in playbook or via --extra-vars as setup=sgx-attestation in CLI Note: Orchestrator installation is not bundled with the role and need to be done independently. Also, components dependent on the orchestrator like isecl-k8s-extensions and integration-hub are installed either partially or not installed","title":"Deploy"},{"location":"quick-start-guide/secure_key_caching/deploy/#deploy","text":"","title":"Deploy"},{"location":"quick-start-guide/secure_key_caching/deploy/#deployment-usecase-workflow-tools-installation","text":"The below installation is required on the Build & Deployment system only and the Platform(Windows,Linux or MacOS) for Usecase Workflow Tool Installation Deployment Tools Installation Install Ansible on Build Machine pip3 install ansible == 2 .9.10 Install epel-release repository and install sshpass for ansible to connect to remote hosts using SSH dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm dnf install sshpass Create directory for ansible default configuration and hosts file mkdir -p /etc/ansible/ touch /etc/ansible/ansible.cfg Copy the ansible.cfg contents from https://raw.githubusercontent.com/ansible/ansible/v2.9.10/examples/ansible.cfg and paste it under /etc/ansible/ansible.cfg","title":"Deployment &amp; Usecase Workflow Tools Installation"},{"location":"quick-start-guide/secure_key_caching/deploy/#usecases-workflow-tools-installation","text":"Postman client should be downloaded on supported platforms or on the web to get started with the usecase collections. Note: The Postman API Network will always have the latest released version of the API Collections. For all releases, refer the github repository for API Collections","title":"Usecases Workflow Tools Installation"},{"location":"quick-start-guide/secure_key_caching/deploy/#deployment","text":"The below details would enable the deployment through Ansible Role for Intel\u00ae SecL-DC Secure Key Caching Usecase. However the services can still be installed manually using the Product Guide. More details on Ansible Role for Intel\u00ae SecL-DC in Ansible-Role repository.","title":"Deployment"},{"location":"quick-start-guide/secure_key_caching/deploy/#download-the-ansible-role","text":"The role can be cloned locally from git and the contents can be copied to the roles folder used by your ansible server #Create directory for using ansible deployment mkdir -p /root/intel-secl/deploy/ #Clone the repository cd /root/intel-secl/deploy/ && git clone https://github.com/intel-secl/utils.git #Checkout to specific release version cd utils/ git checkout <release-version of choice> cd tools/ansible-role #Update ansible.cfg roles_path to point to path(/root/intel-secl/deploy/utils/tools/)","title":"Download the Ansible Role"},{"location":"quick-start-guide/secure_key_caching/deploy/#update-ansible-inventory","text":"The following inventory can be used and created under /etc/ansible/hosts . [CSP] <machine1_ip/hostname> [Enterprise] <machine2_ip/hostname> [Node] <machine3_ip/hostname> [CSP:vars] isecl_role=csp ansible_user=root ansible_password=<password> [Enterprise:vars] isecl_role=enterprise ansible_user=root ansible_password=<password> [Node:vars] isecl_role=node ansible_user=root ansible_password=<password> Note: Ansible requires ssh and root user access to remote machines. The following command can be used to ensure ansible can connect to remote machines with host key check ` ssh-keyscan -H <ip_address> >> /root/.ssh/known_hosts","title":"Update Ansible Inventory"},{"location":"quick-start-guide/secure_key_caching/deploy/#create-and-run-playbook","text":"The following are playbook and CLI example for deploying Intel\u00ae SecL-DC binaries based on the supported deployment models and usecases. The below example playbooks can be created as site-bin-isecl.yml Note: If running behind a proxy, update the proxy variables under vars/main.yml and run as below Note: Go through the Additional Examples and Tips section for specific workflow samples Option 1 - hosts : all gather_facts : yes any_errors_fatal : true vars : setup : <setup var from supported usecases> binaries_path : <path where built binaries are copied to> roles : - ansible-role environment : http_proxy : \"{{http_proxy}}\" https_proxy : \"{{https_proxy}}\" no_proxy : \"{{no_proxy}}\" ``` and ansible-playbook <playbook-name> Note: Update the roles_path under ansible.cfg to point to the cloned repository so that the role can be read by Ansible OR Option 2: - hosts : all gather_facts : yes any_errors_fatal : true roles : - ansible-role environment : http_proxy : \"{{http_proxy}}\" https_proxy : \"{{https_proxy}}\" no_proxy : \"{{no_proxy}}\" and ansible-playbook <playbook-name> --extra-vars setup = <setup var from supported usecases> --extra-vars binaries_path = <path where built binaries are copied to> Note: Update the roles_path under ansible.cfg to point to the cloned repository so that the role can be read by Ansible","title":"Create and Run Playbook"},{"location":"quick-start-guide/secure_key_caching/deploy/#additional-examples-tips","text":"For secure-key-caching , sgx-orchestration & sgx-attestation usecase following options can be provided during runtime in the playbook for providing the PCS server key ansible-playbook <playbook-name> --extra-vars setup = <setup var from supported usecases> --extra-vars binaries_path = <path where built binaries are copied to> --extra-vars intel_provisioning_server_api_key = <pcs server key> or Update the following vars in defaults/main.yml intel_provisioning_server_api_key_sandbox : <pcs server key> If any service installation fails due to any misconfiguration, just uninstall the specific service manually , fix the misconfiguration in ansible and rerun the playbook. The successfully installed services wont be reinstalled.","title":"Additional Examples &amp; Tips"},{"location":"quick-start-guide/secure_key_caching/deploy/#usecase-setup-options","text":"Usecase Variable Secure Key Caching setup: secure-key-caching in playbook or via --extra-vars as setup=secure-key-caching in CLI SGX Orchestration setup: sgx-orchestration in playbook or via --extra-vars as setup=sgx-orchestration in CLI SGX Attestation setup: sgx-attestation in playbook or via --extra-vars as setup=sgx-attestation in CLI Note: Orchestrator installation is not bundled with the role and need to be done independently. Also, components dependent on the orchestrator like isecl-k8s-extensions and integration-hub are installed either partially or not installed","title":"Usecase Setup Options"},{"location":"quick-start-guide/secure_key_caching/pre-reqs/","text":"Pre-requisites Hardware & OS Requirements Four Hosts or VMs a. Build System b. CSP managed Services c. Enterprise Managed Services d. K8S Master Node Setup SGX Enabled Host OS Requirements RHEL 8.2. SKC Solution is built, installed and tested with root privileges. Please ensure that all the following instructions are executed with root privileges Assumption: CSP and Enterprise side deployment will be done through Ansible-Galaxy role; Network Requirements Build System Internet access required CSP Managed Services Internet access required for SGX Caching Service deployed on CSP system/SGX Compute Node; Enterprise Managed Services Internet access required for SGX Caching Service deployed on Enterprise system; SGX Enabled Host Internet access required to access KBS running on Enterprise environment Setting Proxy and No Proxy export http_proxy=http://<proxy-url>:<proxy-port> export https_proxy=http://<proxy-url>:<proxy-port> export no_proxy=0.0.0.0,127.0.0.1,localhost,<CSP IP>,<Enterprise IP>, <SGX Compute Node IP>, <KBS system Hostname> Firewall Settings Ensure that all the SKC service ports are accessible with firewall RHEL Package Requirements Access required for the following packages in all systems BaseOS Appstream CodeReady Deployment Model Build + Deployment Machine CSP - ISecL Services Machine CSP - Physical Server as per supported configurations Enterprise - ISecL Services Machine System Tools and Utilities System Tools and utils dnf install git wget tar python3 gcc gcc-c++ zip tar make yum-utils openssl-devel dnf install https://dl.fedoraproject.org/pub/fedora/linux/releases/32/Everything/x86_64/os/Packages/m/makeself-2.4.0-5.fc32.noarch.rpm ln -s /usr/bin/python3 /usr/bin/python ln -s /usr/bin/pip3 /usr/bin/pip Install latest libkmip for KBS git clone https://github.com/openkmip/libkmip.git cd libkmip make install Repo Tool tmpdir=$(mktemp -d) git clone https://gerrit.googlesource.com/git-repo $tmpdir install -m 755 $tmpdir/repo /usr/local/bin rm -rf $tmpdir Golang Installation wget https://dl.google.com/go/go1.14.1.linux-amd64.tar.gz tar -xzf go1.14.1.linux-amd64.tar.gz sudo mv go /usr/local export GOROOT=/usr/local/go export PATH=$GOROOT/bin:$PATH rm -rf go1.14.1.linux-amd64.tar.gz","title":"Pre-requisites"},{"location":"quick-start-guide/secure_key_caching/pre-reqs/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"quick-start-guide/secure_key_caching/pre-reqs/#hardware-os-requirements","text":"Four Hosts or VMs a. Build System b. CSP managed Services c. Enterprise Managed Services d. K8S Master Node Setup SGX Enabled Host OS Requirements RHEL 8.2. SKC Solution is built, installed and tested with root privileges. Please ensure that all the following instructions are executed with root privileges Assumption: CSP and Enterprise side deployment will be done through Ansible-Galaxy role;","title":"Hardware &amp; OS Requirements"},{"location":"quick-start-guide/secure_key_caching/pre-reqs/#network-requirements","text":"Build System Internet access required CSP Managed Services Internet access required for SGX Caching Service deployed on CSP system/SGX Compute Node; Enterprise Managed Services Internet access required for SGX Caching Service deployed on Enterprise system; SGX Enabled Host Internet access required to access KBS running on Enterprise environment Setting Proxy and No Proxy export http_proxy=http://<proxy-url>:<proxy-port> export https_proxy=http://<proxy-url>:<proxy-port> export no_proxy=0.0.0.0,127.0.0.1,localhost,<CSP IP>,<Enterprise IP>, <SGX Compute Node IP>, <KBS system Hostname> Firewall Settings Ensure that all the SKC service ports are accessible with firewall","title":"Network Requirements"},{"location":"quick-start-guide/secure_key_caching/pre-reqs/#rhel-package-requirements","text":"Access required for the following packages in all systems BaseOS Appstream CodeReady","title":"RHEL Package Requirements"},{"location":"quick-start-guide/secure_key_caching/pre-reqs/#deployment-model","text":"Build + Deployment Machine CSP - ISecL Services Machine CSP - Physical Server as per supported configurations Enterprise - ISecL Services Machine","title":"Deployment Model"},{"location":"quick-start-guide/secure_key_caching/pre-reqs/#system-tools-and-utilities","text":"System Tools and utils dnf install git wget tar python3 gcc gcc-c++ zip tar make yum-utils openssl-devel dnf install https://dl.fedoraproject.org/pub/fedora/linux/releases/32/Everything/x86_64/os/Packages/m/makeself-2.4.0-5.fc32.noarch.rpm ln -s /usr/bin/python3 /usr/bin/python ln -s /usr/bin/pip3 /usr/bin/pip Install latest libkmip for KBS git clone https://github.com/openkmip/libkmip.git cd libkmip make install Repo Tool tmpdir=$(mktemp -d) git clone https://gerrit.googlesource.com/git-repo $tmpdir install -m 755 $tmpdir/repo /usr/local/bin rm -rf $tmpdir Golang Installation wget https://dl.google.com/go/go1.14.1.linux-amd64.tar.gz tar -xzf go1.14.1.linux-amd64.tar.gz sudo mv go /usr/local export GOROOT=/usr/local/go export PATH=$GOROOT/bin:$PATH rm -rf go1.14.1.linux-amd64.tar.gz","title":"System Tools and Utilities"},{"location":"quick-start-guide/secure_key_caching/workflows/","text":"Workflows Usecase Workflows with Postman API Collections The below allow to get started with workflows within Intel\u00ae SecL-DC for Foundational and Workload Security Usecases. More details available in API Collections repository Use Case Collections Use case Sub-Usecase API Collection Secure Key Caching - \u2714\ufe0f SGX Discovery, Provisioning and Orchestration - \u2714\ufe0f(Kubernetes Only) SGX Discovery and Provisioning - \u2714\ufe0f Download Postman API Collections Postman API Network for latest released collections: https://explore.postman.com/intelsecldc or Github repo for allreleases #Clone the github repo for api-collections git clone https://github.com/intel-secl/utils.git #Switch to specific release-version of choice cd utils/ git checkout <release-version of choice> #Import Collections from cd tools/api-collections Note: The postman-collections are also available when cloning the repos via build manifest under utils/tools/api-collections Running API Collections Import the collection into Postman API Client Note: This step is required only when not using Postman API Network and downloading from Github Update env as per the deployment details for specific usecase View Documentation Run the workflow","title":"Workflows"},{"location":"quick-start-guide/secure_key_caching/workflows/#workflows","text":"","title":"Workflows"},{"location":"quick-start-guide/secure_key_caching/workflows/#usecase-workflows-with-postman-api-collections","text":"The below allow to get started with workflows within Intel\u00ae SecL-DC for Foundational and Workload Security Usecases. More details available in API Collections repository","title":"Usecase Workflows with Postman API Collections"},{"location":"quick-start-guide/secure_key_caching/workflows/#use-case-collections","text":"Use case Sub-Usecase API Collection Secure Key Caching - \u2714\ufe0f SGX Discovery, Provisioning and Orchestration - \u2714\ufe0f(Kubernetes Only) SGX Discovery and Provisioning - \u2714\ufe0f","title":"Use Case Collections"},{"location":"quick-start-guide/secure_key_caching/workflows/#download-postman-api-collections","text":"Postman API Network for latest released collections: https://explore.postman.com/intelsecldc or Github repo for allreleases #Clone the github repo for api-collections git clone https://github.com/intel-secl/utils.git #Switch to specific release-version of choice cd utils/ git checkout <release-version of choice> #Import Collections from cd tools/api-collections Note: The postman-collections are also available when cloning the repos via build manifest under utils/tools/api-collections","title":"Download Postman API Collections"},{"location":"quick-start-guide/secure_key_caching/workflows/#running-api-collections","text":"Import the collection into Postman API Client Note: This step is required only when not using Postman API Network and downloading from Github Update env as per the deployment details for specific usecase View Documentation Run the workflow","title":"Running API Collections"}]}